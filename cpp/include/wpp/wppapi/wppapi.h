/*
** Copyright @ 2012-2019, Kingsoft office,All rights reserved.
**
** Redistribution and use in source and binary forms ,without modification and
** selling solely, are permitted provided that the following conditions are
** met:
**
** 1.Redistributions of source code must retain the above copyright notice,
**   this list of conditions and the following disclaimer.
** 2.Redistributions in binary form must reproduce the above copyright notice,
**	 this list of conditions and the following disclaimer in the documentation
**	 and/or other materials provided with the distribution.
** 3.Neither the name of the copyright holder nor the names of its contributors
**	 may be used to endorse or promote products derived from this software
**	 without specific prior written permission.
**
** SPECIAL NOTE:THIS SOFTWARE IS NOT PERMITTED TO BE MODIFIED OR SOLD SOLELY AT
** ANY TIME AND UNDER ANY CIRCUMSTANCES, EXCEPT WITH THE WRITTEN PERMISSION OF
** KINGSOFT OFFICE
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
**/
/*** Autogenerated by IDLC 1.8.0 from /home/ken/wps/wps/rc_domestic_multi_platform_20150508_branch/Coding/api/wppapi/wppapi.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#ifndef __wppapi_h__
#define __wppapi_h__


namespace wppapi {



/* Forward Declarations */ 

#ifndef __Collection_FWD_DEFINED__
#define __Collection_FWD_DEFINED__
typedef interface Collection Collection;
#endif 	/* __Collection_FWD_DEFINED__ */


#ifndef ___Application_FWD_DEFINED__
#define ___Application_FWD_DEFINED__
typedef interface _Application _Application;
#endif 	/* ___Application_FWD_DEFINED__ */


#ifndef ___Global_FWD_DEFINED__
#define ___Global_FWD_DEFINED__
typedef interface _Global _Global;
#endif 	/* ___Global_FWD_DEFINED__ */


#ifndef __ColorFormat_FWD_DEFINED__
#define __ColorFormat_FWD_DEFINED__
typedef interface ColorFormat ColorFormat;
#endif 	/* __ColorFormat_FWD_DEFINED__ */


#ifndef __SlideShowWindow_FWD_DEFINED__
#define __SlideShowWindow_FWD_DEFINED__
typedef interface SlideShowWindow SlideShowWindow;
#endif 	/* __SlideShowWindow_FWD_DEFINED__ */


#ifndef __Selection_FWD_DEFINED__
#define __Selection_FWD_DEFINED__
typedef interface Selection Selection;
#endif 	/* __Selection_FWD_DEFINED__ */


#ifndef __DocumentWindows_FWD_DEFINED__
#define __DocumentWindows_FWD_DEFINED__
typedef interface DocumentWindows DocumentWindows;
#endif 	/* __DocumentWindows_FWD_DEFINED__ */


#ifndef __SlideShowWindows_FWD_DEFINED__
#define __SlideShowWindows_FWD_DEFINED__
typedef interface SlideShowWindows SlideShowWindows;
#endif 	/* __SlideShowWindows_FWD_DEFINED__ */


#ifndef __DocumentWindow_FWD_DEFINED__
#define __DocumentWindow_FWD_DEFINED__
typedef interface DocumentWindow DocumentWindow;
#endif 	/* __DocumentWindow_FWD_DEFINED__ */


#ifndef __View_FWD_DEFINED__
#define __View_FWD_DEFINED__
typedef interface View View;
#endif 	/* __View_FWD_DEFINED__ */


#ifndef __SlideShowView_FWD_DEFINED__
#define __SlideShowView_FWD_DEFINED__
typedef interface SlideShowView SlideShowView;
#endif 	/* __SlideShowView_FWD_DEFINED__ */


#ifndef __SlideShowSettings_FWD_DEFINED__
#define __SlideShowSettings_FWD_DEFINED__
typedef interface SlideShowSettings SlideShowSettings;
#endif 	/* __SlideShowSettings_FWD_DEFINED__ */


#ifndef __NamedSlideShows_FWD_DEFINED__
#define __NamedSlideShows_FWD_DEFINED__
typedef interface NamedSlideShows NamedSlideShows;
#endif 	/* __NamedSlideShows_FWD_DEFINED__ */


#ifndef __NamedSlideShow_FWD_DEFINED__
#define __NamedSlideShow_FWD_DEFINED__
typedef interface NamedSlideShow NamedSlideShow;
#endif 	/* __NamedSlideShow_FWD_DEFINED__ */


#ifndef __PrintOptions_FWD_DEFINED__
#define __PrintOptions_FWD_DEFINED__
typedef interface PrintOptions PrintOptions;
#endif 	/* __PrintOptions_FWD_DEFINED__ */


#ifndef __PrintRanges_FWD_DEFINED__
#define __PrintRanges_FWD_DEFINED__
typedef interface PrintRanges PrintRanges;
#endif 	/* __PrintRanges_FWD_DEFINED__ */


#ifndef __PrintRange_FWD_DEFINED__
#define __PrintRange_FWD_DEFINED__
typedef interface PrintRange PrintRange;
#endif 	/* __PrintRange_FWD_DEFINED__ */


#ifndef __AddIns_FWD_DEFINED__
#define __AddIns_FWD_DEFINED__
typedef interface AddIns AddIns;
#endif 	/* __AddIns_FWD_DEFINED__ */


#ifndef __AddIn_FWD_DEFINED__
#define __AddIn_FWD_DEFINED__
typedef interface AddIn AddIn;
#endif 	/* __AddIn_FWD_DEFINED__ */


#ifndef __Presentations_FWD_DEFINED__
#define __Presentations_FWD_DEFINED__
typedef interface Presentations Presentations;
#endif 	/* __Presentations_FWD_DEFINED__ */


#ifndef __PresEvents_FWD_DEFINED__
#define __PresEvents_FWD_DEFINED__
typedef interface PresEvents PresEvents;
#endif 	/* __PresEvents_FWD_DEFINED__ */


#ifndef __Hyperlinks_FWD_DEFINED__
#define __Hyperlinks_FWD_DEFINED__
typedef interface Hyperlinks Hyperlinks;
#endif 	/* __Hyperlinks_FWD_DEFINED__ */


#ifndef __Hyperlink_FWD_DEFINED__
#define __Hyperlink_FWD_DEFINED__
typedef interface Hyperlink Hyperlink;
#endif 	/* __Hyperlink_FWD_DEFINED__ */


#ifndef __PageSetup_FWD_DEFINED__
#define __PageSetup_FWD_DEFINED__
typedef interface PageSetup PageSetup;
#endif 	/* __PageSetup_FWD_DEFINED__ */


#ifndef __Fonts_FWD_DEFINED__
#define __Fonts_FWD_DEFINED__
typedef interface Fonts Fonts;
#endif 	/* __Fonts_FWD_DEFINED__ */


#ifndef __ExtraColors_FWD_DEFINED__
#define __ExtraColors_FWD_DEFINED__
typedef interface ExtraColors ExtraColors;
#endif 	/* __ExtraColors_FWD_DEFINED__ */


#ifndef __TextRange_FWD_DEFINED__
#define __TextRange_FWD_DEFINED__
typedef interface TextRange TextRange;
#endif 	/* __TextRange_FWD_DEFINED__ */


#ifndef __TextFrame_FWD_DEFINED__
#define __TextFrame_FWD_DEFINED__
typedef interface TextFrame TextFrame;
#endif 	/* __TextFrame_FWD_DEFINED__ */


#ifndef __Shape_FWD_DEFINED__
#define __Shape_FWD_DEFINED__
typedef interface Shape Shape;
#endif 	/* __Shape_FWD_DEFINED__ */


#ifndef __Shapes_FWD_DEFINED__
#define __Shapes_FWD_DEFINED__
typedef interface Shapes Shapes;
#endif 	/* __Shapes_FWD_DEFINED__ */


#ifndef __Slides_FWD_DEFINED__
#define __Slides_FWD_DEFINED__
typedef interface Slides Slides;
#endif 	/* __Slides_FWD_DEFINED__ */


#ifndef ___Slide_FWD_DEFINED__
#define ___Slide_FWD_DEFINED__
typedef interface _Slide _Slide;
#endif 	/* ___Slide_FWD_DEFINED__ */


#ifndef __SlideRange_FWD_DEFINED__
#define __SlideRange_FWD_DEFINED__
typedef interface SlideRange SlideRange;
#endif 	/* __SlideRange_FWD_DEFINED__ */


#ifndef ___Master_FWD_DEFINED__
#define ___Master_FWD_DEFINED__
typedef interface _Master _Master;
#endif 	/* ___Master_FWD_DEFINED__ */


#ifndef __SldEvents_FWD_DEFINED__
#define __SldEvents_FWD_DEFINED__
typedef interface SldEvents SldEvents;
#endif 	/* __SldEvents_FWD_DEFINED__ */


#ifndef __ColorSchemes_FWD_DEFINED__
#define __ColorSchemes_FWD_DEFINED__
typedef interface ColorSchemes ColorSchemes;
#endif 	/* __ColorSchemes_FWD_DEFINED__ */


#ifndef __ColorScheme_FWD_DEFINED__
#define __ColorScheme_FWD_DEFINED__
typedef interface ColorScheme ColorScheme;
#endif 	/* __ColorScheme_FWD_DEFINED__ */


#ifndef __RGBColor_FWD_DEFINED__
#define __RGBColor_FWD_DEFINED__
typedef interface RGBColor RGBColor;
#endif 	/* __RGBColor_FWD_DEFINED__ */


#ifndef __SlideShowTransition_FWD_DEFINED__
#define __SlideShowTransition_FWD_DEFINED__
typedef interface SlideShowTransition SlideShowTransition;
#endif 	/* __SlideShowTransition_FWD_DEFINED__ */


#ifndef __SoundEffect_FWD_DEFINED__
#define __SoundEffect_FWD_DEFINED__
typedef interface SoundEffect SoundEffect;
#endif 	/* __SoundEffect_FWD_DEFINED__ */


#ifndef __SoundFormat_FWD_DEFINED__
#define __SoundFormat_FWD_DEFINED__
typedef interface SoundFormat SoundFormat;
#endif 	/* __SoundFormat_FWD_DEFINED__ */


#ifndef __HeadersFooters_FWD_DEFINED__
#define __HeadersFooters_FWD_DEFINED__
typedef interface HeadersFooters HeadersFooters;
#endif 	/* __HeadersFooters_FWD_DEFINED__ */


#ifndef __Placeholders_FWD_DEFINED__
#define __Placeholders_FWD_DEFINED__
typedef interface Placeholders Placeholders;
#endif 	/* __Placeholders_FWD_DEFINED__ */


#ifndef __PlaceholderFormat_FWD_DEFINED__
#define __PlaceholderFormat_FWD_DEFINED__
typedef interface PlaceholderFormat PlaceholderFormat;
#endif 	/* __PlaceholderFormat_FWD_DEFINED__ */


#ifndef __FreeformBuilder_FWD_DEFINED__
#define __FreeformBuilder_FWD_DEFINED__
typedef interface FreeformBuilder FreeformBuilder;
#endif 	/* __FreeformBuilder_FWD_DEFINED__ */


#ifndef __ShapeRange_FWD_DEFINED__
#define __ShapeRange_FWD_DEFINED__
typedef interface ShapeRange ShapeRange;
#endif 	/* __ShapeRange_FWD_DEFINED__ */


#ifndef __GroupShapes_FWD_DEFINED__
#define __GroupShapes_FWD_DEFINED__
typedef interface GroupShapes GroupShapes;
#endif 	/* __GroupShapes_FWD_DEFINED__ */


#ifndef __Adjustments_FWD_DEFINED__
#define __Adjustments_FWD_DEFINED__
typedef interface Adjustments Adjustments;
#endif 	/* __Adjustments_FWD_DEFINED__ */


#ifndef __PictureFormat_FWD_DEFINED__
#define __PictureFormat_FWD_DEFINED__
typedef interface PictureFormat PictureFormat;
#endif 	/* __PictureFormat_FWD_DEFINED__ */


#ifndef __FillFormat_FWD_DEFINED__
#define __FillFormat_FWD_DEFINED__
typedef interface FillFormat FillFormat;
#endif 	/* __FillFormat_FWD_DEFINED__ */


#ifndef __LineFormat_FWD_DEFINED__
#define __LineFormat_FWD_DEFINED__
typedef interface LineFormat LineFormat;
#endif 	/* __LineFormat_FWD_DEFINED__ */


#ifndef __ShadowFormat_FWD_DEFINED__
#define __ShadowFormat_FWD_DEFINED__
typedef interface ShadowFormat ShadowFormat;
#endif 	/* __ShadowFormat_FWD_DEFINED__ */


#ifndef __ConnectorFormat_FWD_DEFINED__
#define __ConnectorFormat_FWD_DEFINED__
typedef interface ConnectorFormat ConnectorFormat;
#endif 	/* __ConnectorFormat_FWD_DEFINED__ */


#ifndef __TextEffectFormat_FWD_DEFINED__
#define __TextEffectFormat_FWD_DEFINED__
typedef interface TextEffectFormat TextEffectFormat;
#endif 	/* __TextEffectFormat_FWD_DEFINED__ */


#ifndef __ThreeDFormat_FWD_DEFINED__
#define __ThreeDFormat_FWD_DEFINED__
typedef interface ThreeDFormat ThreeDFormat;
#endif 	/* __ThreeDFormat_FWD_DEFINED__ */


#ifndef __CalloutFormat_FWD_DEFINED__
#define __CalloutFormat_FWD_DEFINED__
typedef interface CalloutFormat CalloutFormat;
#endif 	/* __CalloutFormat_FWD_DEFINED__ */


#ifndef __ShapeNodes_FWD_DEFINED__
#define __ShapeNodes_FWD_DEFINED__
typedef interface ShapeNodes ShapeNodes;
#endif 	/* __ShapeNodes_FWD_DEFINED__ */


#ifndef __ShapeNode_FWD_DEFINED__
#define __ShapeNode_FWD_DEFINED__
typedef interface ShapeNode ShapeNode;
#endif 	/* __ShapeNode_FWD_DEFINED__ */


#ifndef __OLEFormat_FWD_DEFINED__
#define __OLEFormat_FWD_DEFINED__
typedef interface OLEFormat OLEFormat;
#endif 	/* __OLEFormat_FWD_DEFINED__ */


#ifndef __LinkFormat_FWD_DEFINED__
#define __LinkFormat_FWD_DEFINED__
typedef interface LinkFormat LinkFormat;
#endif 	/* __LinkFormat_FWD_DEFINED__ */


#ifndef __ObjectVerbs_FWD_DEFINED__
#define __ObjectVerbs_FWD_DEFINED__
typedef interface ObjectVerbs ObjectVerbs;
#endif 	/* __ObjectVerbs_FWD_DEFINED__ */


#ifndef __AnimationSettings_FWD_DEFINED__
#define __AnimationSettings_FWD_DEFINED__
typedef interface AnimationSettings AnimationSettings;
#endif 	/* __AnimationSettings_FWD_DEFINED__ */


#ifndef __ActionSettings_FWD_DEFINED__
#define __ActionSettings_FWD_DEFINED__
typedef interface ActionSettings ActionSettings;
#endif 	/* __ActionSettings_FWD_DEFINED__ */


#ifndef __ActionSetting_FWD_DEFINED__
#define __ActionSetting_FWD_DEFINED__
typedef interface ActionSetting ActionSetting;
#endif 	/* __ActionSetting_FWD_DEFINED__ */


#ifndef __PlaySettings_FWD_DEFINED__
#define __PlaySettings_FWD_DEFINED__
typedef interface PlaySettings PlaySettings;
#endif 	/* __PlaySettings_FWD_DEFINED__ */


#ifndef __Ruler_FWD_DEFINED__
#define __Ruler_FWD_DEFINED__
typedef interface Ruler Ruler;
#endif 	/* __Ruler_FWD_DEFINED__ */


#ifndef __RulerLevels_FWD_DEFINED__
#define __RulerLevels_FWD_DEFINED__
typedef interface RulerLevels RulerLevels;
#endif 	/* __RulerLevels_FWD_DEFINED__ */


#ifndef __RulerLevel_FWD_DEFINED__
#define __RulerLevel_FWD_DEFINED__
typedef interface RulerLevel RulerLevel;
#endif 	/* __RulerLevel_FWD_DEFINED__ */


#ifndef __TabStops_FWD_DEFINED__
#define __TabStops_FWD_DEFINED__
typedef interface TabStops TabStops;
#endif 	/* __TabStops_FWD_DEFINED__ */


#ifndef __TabStop_FWD_DEFINED__
#define __TabStop_FWD_DEFINED__
typedef interface TabStop TabStop;
#endif 	/* __TabStop_FWD_DEFINED__ */


#ifndef __Font_FWD_DEFINED__
#define __Font_FWD_DEFINED__
typedef interface Font Font;
#endif 	/* __Font_FWD_DEFINED__ */


#ifndef __ParagraphFormat_FWD_DEFINED__
#define __ParagraphFormat_FWD_DEFINED__
typedef interface ParagraphFormat ParagraphFormat;
#endif 	/* __ParagraphFormat_FWD_DEFINED__ */


#ifndef __BulletFormat_FWD_DEFINED__
#define __BulletFormat_FWD_DEFINED__
typedef interface BulletFormat BulletFormat;
#endif 	/* __BulletFormat_FWD_DEFINED__ */


#ifndef __TextStyles_FWD_DEFINED__
#define __TextStyles_FWD_DEFINED__
typedef interface TextStyles TextStyles;
#endif 	/* __TextStyles_FWD_DEFINED__ */


#ifndef __TextStyle_FWD_DEFINED__
#define __TextStyle_FWD_DEFINED__
typedef interface TextStyle TextStyle;
#endif 	/* __TextStyle_FWD_DEFINED__ */


#ifndef __TextStyleLevels_FWD_DEFINED__
#define __TextStyleLevels_FWD_DEFINED__
typedef interface TextStyleLevels TextStyleLevels;
#endif 	/* __TextStyleLevels_FWD_DEFINED__ */


#ifndef __TextStyleLevel_FWD_DEFINED__
#define __TextStyleLevel_FWD_DEFINED__
typedef interface TextStyleLevel TextStyleLevel;
#endif 	/* __TextStyleLevel_FWD_DEFINED__ */


#ifndef __HeaderFooter_FWD_DEFINED__
#define __HeaderFooter_FWD_DEFINED__
typedef interface HeaderFooter HeaderFooter;
#endif 	/* __HeaderFooter_FWD_DEFINED__ */


#ifndef ___Presentation_FWD_DEFINED__
#define ___Presentation_FWD_DEFINED__
typedef interface _Presentation _Presentation;
#endif 	/* ___Presentation_FWD_DEFINED__ */


#ifndef __Tags_FWD_DEFINED__
#define __Tags_FWD_DEFINED__
typedef interface Tags Tags;
#endif 	/* __Tags_FWD_DEFINED__ */


#ifndef __MouseTracker_FWD_DEFINED__
#define __MouseTracker_FWD_DEFINED__
typedef interface MouseTracker MouseTracker;
#endif 	/* __MouseTracker_FWD_DEFINED__ */


#ifndef __MouseDownHandler_FWD_DEFINED__
#define __MouseDownHandler_FWD_DEFINED__
typedef interface MouseDownHandler MouseDownHandler;
#endif 	/* __MouseDownHandler_FWD_DEFINED__ */


#ifndef __OCXExtender_FWD_DEFINED__
#define __OCXExtender_FWD_DEFINED__
typedef interface OCXExtender OCXExtender;
#endif 	/* __OCXExtender_FWD_DEFINED__ */


#ifndef __OCXExtenderEvents_FWD_DEFINED__
#define __OCXExtenderEvents_FWD_DEFINED__
typedef interface OCXExtenderEvents OCXExtenderEvents;
#endif 	/* __OCXExtenderEvents_FWD_DEFINED__ */


#ifndef __EApplication_FWD_DEFINED__
#define __EApplication_FWD_DEFINED__
typedef interface EApplication EApplication;
#endif 	/* __EApplication_FWD_DEFINED__ */


#ifndef __Table_FWD_DEFINED__
#define __Table_FWD_DEFINED__
typedef interface Table Table;
#endif 	/* __Table_FWD_DEFINED__ */


#ifndef __Columns_FWD_DEFINED__
#define __Columns_FWD_DEFINED__
typedef interface Columns Columns;
#endif 	/* __Columns_FWD_DEFINED__ */


#ifndef __Column_FWD_DEFINED__
#define __Column_FWD_DEFINED__
typedef interface Column Column;
#endif 	/* __Column_FWD_DEFINED__ */


#ifndef __Rows_FWD_DEFINED__
#define __Rows_FWD_DEFINED__
typedef interface Rows Rows;
#endif 	/* __Rows_FWD_DEFINED__ */


#ifndef __Row_FWD_DEFINED__
#define __Row_FWD_DEFINED__
typedef interface Row Row;
#endif 	/* __Row_FWD_DEFINED__ */


#ifndef __CellRange_FWD_DEFINED__
#define __CellRange_FWD_DEFINED__
typedef interface CellRange CellRange;
#endif 	/* __CellRange_FWD_DEFINED__ */


#ifndef __Cell_FWD_DEFINED__
#define __Cell_FWD_DEFINED__
typedef interface Cell Cell;
#endif 	/* __Cell_FWD_DEFINED__ */


#ifndef __Borders_FWD_DEFINED__
#define __Borders_FWD_DEFINED__
typedef interface Borders Borders;
#endif 	/* __Borders_FWD_DEFINED__ */


#ifndef __Panes_FWD_DEFINED__
#define __Panes_FWD_DEFINED__
typedef interface Panes Panes;
#endif 	/* __Panes_FWD_DEFINED__ */


#ifndef __Pane_FWD_DEFINED__
#define __Pane_FWD_DEFINED__
typedef interface Pane Pane;
#endif 	/* __Pane_FWD_DEFINED__ */


#ifndef __DefaultWebOptions_FWD_DEFINED__
#define __DefaultWebOptions_FWD_DEFINED__
typedef interface DefaultWebOptions DefaultWebOptions;
#endif 	/* __DefaultWebOptions_FWD_DEFINED__ */


#ifndef __WebOptions_FWD_DEFINED__
#define __WebOptions_FWD_DEFINED__
typedef interface WebOptions WebOptions;
#endif 	/* __WebOptions_FWD_DEFINED__ */


#ifndef __PublishObjects_FWD_DEFINED__
#define __PublishObjects_FWD_DEFINED__
typedef interface PublishObjects PublishObjects;
#endif 	/* __PublishObjects_FWD_DEFINED__ */


#ifndef __PublishObject_FWD_DEFINED__
#define __PublishObject_FWD_DEFINED__
typedef interface PublishObject PublishObject;
#endif 	/* __PublishObject_FWD_DEFINED__ */


#ifndef __MasterEvents_FWD_DEFINED__
#define __MasterEvents_FWD_DEFINED__
typedef interface MasterEvents MasterEvents;
#endif 	/* __MasterEvents_FWD_DEFINED__ */


#ifndef ___PowerRex_FWD_DEFINED__
#define ___PowerRex_FWD_DEFINED__
typedef interface _PowerRex _PowerRex;
#endif 	/* ___PowerRex_FWD_DEFINED__ */


#ifndef __Comments_FWD_DEFINED__
#define __Comments_FWD_DEFINED__
typedef interface Comments Comments;
#endif 	/* __Comments_FWD_DEFINED__ */


#ifndef __Comment_FWD_DEFINED__
#define __Comment_FWD_DEFINED__
typedef interface Comment Comment;
#endif 	/* __Comment_FWD_DEFINED__ */


#ifndef __Designs_FWD_DEFINED__
#define __Designs_FWD_DEFINED__
typedef interface Designs Designs;
#endif 	/* __Designs_FWD_DEFINED__ */


#ifndef __Design_FWD_DEFINED__
#define __Design_FWD_DEFINED__
typedef interface Design Design;
#endif 	/* __Design_FWD_DEFINED__ */


#ifndef __DiagramNode_FWD_DEFINED__
#define __DiagramNode_FWD_DEFINED__
typedef interface DiagramNode DiagramNode;
#endif 	/* __DiagramNode_FWD_DEFINED__ */


#ifndef __DiagramNodeChildren_FWD_DEFINED__
#define __DiagramNodeChildren_FWD_DEFINED__
typedef interface DiagramNodeChildren DiagramNodeChildren;
#endif 	/* __DiagramNodeChildren_FWD_DEFINED__ */


#ifndef __DiagramNodes_FWD_DEFINED__
#define __DiagramNodes_FWD_DEFINED__
typedef interface DiagramNodes DiagramNodes;
#endif 	/* __DiagramNodes_FWD_DEFINED__ */


#ifndef __Diagram_FWD_DEFINED__
#define __Diagram_FWD_DEFINED__
typedef interface Diagram Diagram;
#endif 	/* __Diagram_FWD_DEFINED__ */


#ifndef __TimeLine_FWD_DEFINED__
#define __TimeLine_FWD_DEFINED__
typedef interface TimeLine TimeLine;
#endif 	/* __TimeLine_FWD_DEFINED__ */


#ifndef __Sequences_FWD_DEFINED__
#define __Sequences_FWD_DEFINED__
typedef interface Sequences Sequences;
#endif 	/* __Sequences_FWD_DEFINED__ */


#ifndef __Sequence_FWD_DEFINED__
#define __Sequence_FWD_DEFINED__
typedef interface Sequence Sequence;
#endif 	/* __Sequence_FWD_DEFINED__ */


#ifndef __Effect_FWD_DEFINED__
#define __Effect_FWD_DEFINED__
typedef interface Effect Effect;
#endif 	/* __Effect_FWD_DEFINED__ */


#ifndef __Timing_FWD_DEFINED__
#define __Timing_FWD_DEFINED__
typedef interface Timing Timing;
#endif 	/* __Timing_FWD_DEFINED__ */


#ifndef __EffectParameters_FWD_DEFINED__
#define __EffectParameters_FWD_DEFINED__
typedef interface EffectParameters EffectParameters;
#endif 	/* __EffectParameters_FWD_DEFINED__ */


#ifndef __EffectInformation_FWD_DEFINED__
#define __EffectInformation_FWD_DEFINED__
typedef interface EffectInformation EffectInformation;
#endif 	/* __EffectInformation_FWD_DEFINED__ */


#ifndef __AnimationBehaviors_FWD_DEFINED__
#define __AnimationBehaviors_FWD_DEFINED__
typedef interface AnimationBehaviors AnimationBehaviors;
#endif 	/* __AnimationBehaviors_FWD_DEFINED__ */


#ifndef __AnimationBehavior_FWD_DEFINED__
#define __AnimationBehavior_FWD_DEFINED__
typedef interface AnimationBehavior AnimationBehavior;
#endif 	/* __AnimationBehavior_FWD_DEFINED__ */


#ifndef __MotionEffect_FWD_DEFINED__
#define __MotionEffect_FWD_DEFINED__
typedef interface MotionEffect MotionEffect;
#endif 	/* __MotionEffect_FWD_DEFINED__ */


#ifndef __ColorEffect_FWD_DEFINED__
#define __ColorEffect_FWD_DEFINED__
typedef interface ColorEffect ColorEffect;
#endif 	/* __ColorEffect_FWD_DEFINED__ */


#ifndef __ScaleEffect_FWD_DEFINED__
#define __ScaleEffect_FWD_DEFINED__
typedef interface ScaleEffect ScaleEffect;
#endif 	/* __ScaleEffect_FWD_DEFINED__ */


#ifndef __RotationEffect_FWD_DEFINED__
#define __RotationEffect_FWD_DEFINED__
typedef interface RotationEffect RotationEffect;
#endif 	/* __RotationEffect_FWD_DEFINED__ */


#ifndef __PropertyEffect_FWD_DEFINED__
#define __PropertyEffect_FWD_DEFINED__
typedef interface PropertyEffect PropertyEffect;
#endif 	/* __PropertyEffect_FWD_DEFINED__ */


#ifndef __AnimationPoints_FWD_DEFINED__
#define __AnimationPoints_FWD_DEFINED__
typedef interface AnimationPoints AnimationPoints;
#endif 	/* __AnimationPoints_FWD_DEFINED__ */


#ifndef __AnimationPoint_FWD_DEFINED__
#define __AnimationPoint_FWD_DEFINED__
typedef interface AnimationPoint AnimationPoint;
#endif 	/* __AnimationPoint_FWD_DEFINED__ */


#ifndef __CanvasShapes_FWD_DEFINED__
#define __CanvasShapes_FWD_DEFINED__
typedef interface CanvasShapes CanvasShapes;
#endif 	/* __CanvasShapes_FWD_DEFINED__ */


#ifndef __AutoCorrect_FWD_DEFINED__
#define __AutoCorrect_FWD_DEFINED__
typedef interface AutoCorrect AutoCorrect;
#endif 	/* __AutoCorrect_FWD_DEFINED__ */


#ifndef __Options_FWD_DEFINED__
#define __Options_FWD_DEFINED__
typedef interface Options Options;
#endif 	/* __Options_FWD_DEFINED__ */


#ifndef __CommandEffect_FWD_DEFINED__
#define __CommandEffect_FWD_DEFINED__
typedef interface CommandEffect CommandEffect;
#endif 	/* __CommandEffect_FWD_DEFINED__ */


#ifndef __FilterEffect_FWD_DEFINED__
#define __FilterEffect_FWD_DEFINED__
typedef interface FilterEffect FilterEffect;
#endif 	/* __FilterEffect_FWD_DEFINED__ */


#ifndef __SetEffect_FWD_DEFINED__
#define __SetEffect_FWD_DEFINED__
typedef interface SetEffect SetEffect;
#endif 	/* __SetEffect_FWD_DEFINED__ */


#ifndef __CustomLayouts_FWD_DEFINED__
#define __CustomLayouts_FWD_DEFINED__
typedef interface CustomLayouts CustomLayouts;
#endif 	/* __CustomLayouts_FWD_DEFINED__ */


#ifndef __CustomLayout_FWD_DEFINED__
#define __CustomLayout_FWD_DEFINED__
typedef interface CustomLayout CustomLayout;
#endif 	/* __CustomLayout_FWD_DEFINED__ */


#ifndef __TableStyle_FWD_DEFINED__
#define __TableStyle_FWD_DEFINED__
typedef interface TableStyle TableStyle;
#endif 	/* __TableStyle_FWD_DEFINED__ */


#ifndef __CustomerData_FWD_DEFINED__
#define __CustomerData_FWD_DEFINED__
typedef interface CustomerData CustomerData;
#endif 	/* __CustomerData_FWD_DEFINED__ */


#ifndef __Research_FWD_DEFINED__
#define __Research_FWD_DEFINED__
typedef interface Research Research;
#endif 	/* __Research_FWD_DEFINED__ */


#ifndef __TableBackground_FWD_DEFINED__
#define __TableBackground_FWD_DEFINED__
typedef interface TableBackground TableBackground;
#endif 	/* __TableBackground_FWD_DEFINED__ */


#ifndef __TextFrame2_FWD_DEFINED__
#define __TextFrame2_FWD_DEFINED__
typedef interface TextFrame2 TextFrame2;
#endif 	/* __TextFrame2_FWD_DEFINED__ */


#ifndef __FileConverters_FWD_DEFINED__
#define __FileConverters_FWD_DEFINED__
typedef interface FileConverters FileConverters;
#endif 	/* __FileConverters_FWD_DEFINED__ */


#ifndef __FileConverter_FWD_DEFINED__
#define __FileConverter_FWD_DEFINED__
typedef interface FileConverter FileConverter;
#endif 	/* __FileConverter_FWD_DEFINED__ */


#ifndef __Axes_FWD_DEFINED__
#define __Axes_FWD_DEFINED__
typedef interface Axes Axes;
#endif 	/* __Axes_FWD_DEFINED__ */


#ifndef __Axis_FWD_DEFINED__
#define __Axis_FWD_DEFINED__
typedef interface Axis Axis;
#endif 	/* __Axis_FWD_DEFINED__ */


#ifndef __AxisTitle_FWD_DEFINED__
#define __AxisTitle_FWD_DEFINED__
typedef interface AxisTitle AxisTitle;
#endif 	/* __AxisTitle_FWD_DEFINED__ */


#ifndef __Chart_FWD_DEFINED__
#define __Chart_FWD_DEFINED__
typedef interface Chart Chart;
#endif 	/* __Chart_FWD_DEFINED__ */


#ifndef __ChartBorder_FWD_DEFINED__
#define __ChartBorder_FWD_DEFINED__
typedef interface ChartBorder ChartBorder;
#endif 	/* __ChartBorder_FWD_DEFINED__ */


#ifndef __ChartCharacters_FWD_DEFINED__
#define __ChartCharacters_FWD_DEFINED__
typedef interface ChartCharacters ChartCharacters;
#endif 	/* __ChartCharacters_FWD_DEFINED__ */


#ifndef __ChartArea_FWD_DEFINED__
#define __ChartArea_FWD_DEFINED__
typedef interface ChartArea ChartArea;
#endif 	/* __ChartArea_FWD_DEFINED__ */


#ifndef __ChartColorFormat_FWD_DEFINED__
#define __ChartColorFormat_FWD_DEFINED__
typedef interface ChartColorFormat ChartColorFormat;
#endif 	/* __ChartColorFormat_FWD_DEFINED__ */


#ifndef __ChartData_FWD_DEFINED__
#define __ChartData_FWD_DEFINED__
typedef interface ChartData ChartData;
#endif 	/* __ChartData_FWD_DEFINED__ */


#ifndef __ChartFillFormat_FWD_DEFINED__
#define __ChartFillFormat_FWD_DEFINED__
typedef interface ChartFillFormat ChartFillFormat;
#endif 	/* __ChartFillFormat_FWD_DEFINED__ */


#ifndef __ChartFormat_FWD_DEFINED__
#define __ChartFormat_FWD_DEFINED__
typedef interface ChartFormat ChartFormat;
#endif 	/* __ChartFormat_FWD_DEFINED__ */


#ifndef __ChartGroup_FWD_DEFINED__
#define __ChartGroup_FWD_DEFINED__
typedef interface ChartGroup ChartGroup;
#endif 	/* __ChartGroup_FWD_DEFINED__ */


#ifndef __ChartGroups_FWD_DEFINED__
#define __ChartGroups_FWD_DEFINED__
typedef interface ChartGroups ChartGroups;
#endif 	/* __ChartGroups_FWD_DEFINED__ */


#ifndef __ChartTitle_FWD_DEFINED__
#define __ChartTitle_FWD_DEFINED__
typedef interface ChartTitle ChartTitle;
#endif 	/* __ChartTitle_FWD_DEFINED__ */


#ifndef __Corners_FWD_DEFINED__
#define __Corners_FWD_DEFINED__
typedef interface Corners Corners;
#endif 	/* __Corners_FWD_DEFINED__ */


#ifndef __DataLabel_FWD_DEFINED__
#define __DataLabel_FWD_DEFINED__
typedef interface DataLabel DataLabel;
#endif 	/* __DataLabel_FWD_DEFINED__ */


#ifndef __DataLabels_FWD_DEFINED__
#define __DataLabels_FWD_DEFINED__
typedef interface DataLabels DataLabels;
#endif 	/* __DataLabels_FWD_DEFINED__ */


#ifndef __DataTable_FWD_DEFINED__
#define __DataTable_FWD_DEFINED__
typedef interface DataTable DataTable;
#endif 	/* __DataTable_FWD_DEFINED__ */


#ifndef __DisplayUnitLabel_FWD_DEFINED__
#define __DisplayUnitLabel_FWD_DEFINED__
typedef interface DisplayUnitLabel DisplayUnitLabel;
#endif 	/* __DisplayUnitLabel_FWD_DEFINED__ */


#ifndef __DownBars_FWD_DEFINED__
#define __DownBars_FWD_DEFINED__
typedef interface DownBars DownBars;
#endif 	/* __DownBars_FWD_DEFINED__ */


#ifndef __DropLines_FWD_DEFINED__
#define __DropLines_FWD_DEFINED__
typedef interface DropLines DropLines;
#endif 	/* __DropLines_FWD_DEFINED__ */


#ifndef __ErrorBars_FWD_DEFINED__
#define __ErrorBars_FWD_DEFINED__
typedef interface ErrorBars ErrorBars;
#endif 	/* __ErrorBars_FWD_DEFINED__ */


#ifndef __Floor_FWD_DEFINED__
#define __Floor_FWD_DEFINED__
typedef interface Floor Floor;
#endif 	/* __Floor_FWD_DEFINED__ */


#ifndef __ChartFont_FWD_DEFINED__
#define __ChartFont_FWD_DEFINED__
typedef interface ChartFont ChartFont;
#endif 	/* __ChartFont_FWD_DEFINED__ */


#ifndef __Gridlines_FWD_DEFINED__
#define __Gridlines_FWD_DEFINED__
typedef interface Gridlines Gridlines;
#endif 	/* __Gridlines_FWD_DEFINED__ */


#ifndef __HiLoLines_FWD_DEFINED__
#define __HiLoLines_FWD_DEFINED__
typedef interface HiLoLines HiLoLines;
#endif 	/* __HiLoLines_FWD_DEFINED__ */


#ifndef __Interior_FWD_DEFINED__
#define __Interior_FWD_DEFINED__
typedef interface Interior Interior;
#endif 	/* __Interior_FWD_DEFINED__ */


#ifndef __LeaderLines_FWD_DEFINED__
#define __LeaderLines_FWD_DEFINED__
typedef interface LeaderLines LeaderLines;
#endif 	/* __LeaderLines_FWD_DEFINED__ */


#ifndef __Legend_FWD_DEFINED__
#define __Legend_FWD_DEFINED__
typedef interface Legend Legend;
#endif 	/* __Legend_FWD_DEFINED__ */


#ifndef __LegendEntries_FWD_DEFINED__
#define __LegendEntries_FWD_DEFINED__
typedef interface LegendEntries LegendEntries;
#endif 	/* __LegendEntries_FWD_DEFINED__ */


#ifndef __LegendEntry_FWD_DEFINED__
#define __LegendEntry_FWD_DEFINED__
typedef interface LegendEntry LegendEntry;
#endif 	/* __LegendEntry_FWD_DEFINED__ */


#ifndef __LegendKey_FWD_DEFINED__
#define __LegendKey_FWD_DEFINED__
typedef interface LegendKey LegendKey;
#endif 	/* __LegendKey_FWD_DEFINED__ */


#ifndef __PlotArea_FWD_DEFINED__
#define __PlotArea_FWD_DEFINED__
typedef interface PlotArea PlotArea;
#endif 	/* __PlotArea_FWD_DEFINED__ */


#ifndef __Point_FWD_DEFINED__
#define __Point_FWD_DEFINED__
typedef interface Point Point;
#endif 	/* __Point_FWD_DEFINED__ */


#ifndef __Points_FWD_DEFINED__
#define __Points_FWD_DEFINED__
typedef interface Points Points;
#endif 	/* __Points_FWD_DEFINED__ */


#ifndef __Series_FWD_DEFINED__
#define __Series_FWD_DEFINED__
typedef interface Series Series;
#endif 	/* __Series_FWD_DEFINED__ */


#ifndef __SeriesCollection_FWD_DEFINED__
#define __SeriesCollection_FWD_DEFINED__
typedef interface SeriesCollection SeriesCollection;
#endif 	/* __SeriesCollection_FWD_DEFINED__ */


#ifndef __SeriesLines_FWD_DEFINED__
#define __SeriesLines_FWD_DEFINED__
typedef interface SeriesLines SeriesLines;
#endif 	/* __SeriesLines_FWD_DEFINED__ */


#ifndef __TickLabels_FWD_DEFINED__
#define __TickLabels_FWD_DEFINED__
typedef interface TickLabels TickLabels;
#endif 	/* __TickLabels_FWD_DEFINED__ */


#ifndef __Trendline_FWD_DEFINED__
#define __Trendline_FWD_DEFINED__
typedef interface Trendline Trendline;
#endif 	/* __Trendline_FWD_DEFINED__ */


#ifndef __Trendlines_FWD_DEFINED__
#define __Trendlines_FWD_DEFINED__
typedef interface Trendlines Trendlines;
#endif 	/* __Trendlines_FWD_DEFINED__ */


#ifndef __UpBars_FWD_DEFINED__
#define __UpBars_FWD_DEFINED__
typedef interface UpBars UpBars;
#endif 	/* __UpBars_FWD_DEFINED__ */


#ifndef __Walls_FWD_DEFINED__
#define __Walls_FWD_DEFINED__
typedef interface Walls Walls;
#endif 	/* __Walls_FWD_DEFINED__ */


#ifndef __MediaFormat_FWD_DEFINED__
#define __MediaFormat_FWD_DEFINED__
typedef interface MediaFormat MediaFormat;
#endif 	/* __MediaFormat_FWD_DEFINED__ */


#ifndef __SectionProperties_FWD_DEFINED__
#define __SectionProperties_FWD_DEFINED__
typedef interface SectionProperties SectionProperties;
#endif 	/* __SectionProperties_FWD_DEFINED__ */


#ifndef __Player_FWD_DEFINED__
#define __Player_FWD_DEFINED__
typedef interface Player Player;
#endif 	/* __Player_FWD_DEFINED__ */


#ifndef __ResampleMediaTask_FWD_DEFINED__
#define __ResampleMediaTask_FWD_DEFINED__
typedef interface ResampleMediaTask ResampleMediaTask;
#endif 	/* __ResampleMediaTask_FWD_DEFINED__ */


#ifndef __ResampleMediaTasks_FWD_DEFINED__
#define __ResampleMediaTasks_FWD_DEFINED__
typedef interface ResampleMediaTasks ResampleMediaTasks;
#endif 	/* __ResampleMediaTasks_FWD_DEFINED__ */


#ifndef __MediaBookmark_FWD_DEFINED__
#define __MediaBookmark_FWD_DEFINED__
typedef interface MediaBookmark MediaBookmark;
#endif 	/* __MediaBookmark_FWD_DEFINED__ */


#ifndef __MediaBookmarks_FWD_DEFINED__
#define __MediaBookmarks_FWD_DEFINED__
typedef interface MediaBookmarks MediaBookmarks;
#endif 	/* __MediaBookmarks_FWD_DEFINED__ */


#ifndef __Coauthoring_FWD_DEFINED__
#define __Coauthoring_FWD_DEFINED__
typedef interface Coauthoring Coauthoring;
#endif 	/* __Coauthoring_FWD_DEFINED__ */


#ifndef __Broadcast_FWD_DEFINED__
#define __Broadcast_FWD_DEFINED__
typedef interface Broadcast Broadcast;
#endif 	/* __Broadcast_FWD_DEFINED__ */


#ifndef __ProtectedViewWindows_FWD_DEFINED__
#define __ProtectedViewWindows_FWD_DEFINED__
typedef interface ProtectedViewWindows ProtectedViewWindows;
#endif 	/* __ProtectedViewWindows_FWD_DEFINED__ */


#ifndef __ProtectedViewWindow_FWD_DEFINED__
#define __ProtectedViewWindow_FWD_DEFINED__
typedef interface ProtectedViewWindow ProtectedViewWindow;
#endif 	/* __ProtectedViewWindow_FWD_DEFINED__ */


#ifndef __FullSeriesCollection_FWD_DEFINED__
#define __FullSeriesCollection_FWD_DEFINED__
typedef interface FullSeriesCollection FullSeriesCollection;
#endif 	/* __FullSeriesCollection_FWD_DEFINED__ */


#ifndef __ChartCategory_FWD_DEFINED__
#define __ChartCategory_FWD_DEFINED__
typedef interface ChartCategory ChartCategory;
#endif 	/* __ChartCategory_FWD_DEFINED__ */


#ifndef __CategoryCollection_FWD_DEFINED__
#define __CategoryCollection_FWD_DEFINED__
typedef interface CategoryCollection CategoryCollection;
#endif 	/* __CategoryCollection_FWD_DEFINED__ */


#ifndef __ThemeVariant_FWD_DEFINED__
#define __ThemeVariant_FWD_DEFINED__
typedef interface ThemeVariant ThemeVariant;
#endif 	/* __ThemeVariant_FWD_DEFINED__ */


#ifndef __ThemeVariants_FWD_DEFINED__
#define __ThemeVariants_FWD_DEFINED__
typedef interface ThemeVariants ThemeVariants;
#endif 	/* __ThemeVariants_FWD_DEFINED__ */


#ifndef __Theme_FWD_DEFINED__
#define __Theme_FWD_DEFINED__
typedef interface Theme Theme;
#endif 	/* __Theme_FWD_DEFINED__ */


#ifndef __SlideNavigation_FWD_DEFINED__
#define __SlideNavigation_FWD_DEFINED__
typedef interface SlideNavigation SlideNavigation;
#endif 	/* __SlideNavigation_FWD_DEFINED__ */


#ifndef __Guides_FWD_DEFINED__
#define __Guides_FWD_DEFINED__
typedef interface Guides Guides;
#endif 	/* __Guides_FWD_DEFINED__ */


#ifndef __Guide_FWD_DEFINED__
#define __Guide_FWD_DEFINED__
typedef interface Guide Guide;
#endif 	/* __Guide_FWD_DEFINED__ */


#ifndef __Application_FWD_DEFINED__
#define __Application_FWD_DEFINED__

#ifdef __cplusplus
typedef class Application Application;
#else
typedef struct Application Application;
#endif /* __cplusplus */

#endif 	/* __Application_FWD_DEFINED__ */


#ifndef __Global_FWD_DEFINED__
#define __Global_FWD_DEFINED__

#ifdef __cplusplus
typedef class Global Global;
#else
typedef struct Global Global;
#endif /* __cplusplus */

#endif 	/* __Global_FWD_DEFINED__ */


#ifndef __Presentation_FWD_DEFINED__
#define __Presentation_FWD_DEFINED__

#ifdef __cplusplus
typedef class Presentation Presentation;
#else
typedef struct Presentation Presentation;
#endif /* __cplusplus */

#endif 	/* __Presentation_FWD_DEFINED__ */


#ifndef __Slide_FWD_DEFINED__
#define __Slide_FWD_DEFINED__

#ifdef __cplusplus
typedef class Slide Slide;
#else
typedef struct Slide Slide;
#endif /* __cplusplus */

#endif 	/* __Slide_FWD_DEFINED__ */


#ifndef __OLEControl_FWD_DEFINED__
#define __OLEControl_FWD_DEFINED__

#ifdef __cplusplus
typedef class OLEControl OLEControl;
#else
typedef struct OLEControl OLEControl;
#endif /* __cplusplus */

#endif 	/* __OLEControl_FWD_DEFINED__ */


#ifndef __Master_FWD_DEFINED__
#define __Master_FWD_DEFINED__

#ifdef __cplusplus
typedef class Master Master;
#else
typedef struct Master Master;
#endif /* __cplusplus */

#endif 	/* __Master_FWD_DEFINED__ */


#ifndef __PowerRex_FWD_DEFINED__
#define __PowerRex_FWD_DEFINED__

#ifdef __cplusplus
typedef class PowerRex PowerRex;
#else
typedef struct PowerRex PowerRex;
#endif /* __cplusplus */

#endif 	/* __PowerRex_FWD_DEFINED__ */


#ifndef __IPPTCtrlExtender_FWD_DEFINED__
#define __IPPTCtrlExtender_FWD_DEFINED__
typedef interface IPPTCtrlExtender IPPTCtrlExtender;
#endif 	/* __IPPTCtrlExtender_FWD_DEFINED__ */


#ifndef __KPPTCtrlExtender_FWD_DEFINED__
#define __KPPTCtrlExtender_FWD_DEFINED__

#ifdef __cplusplus
typedef class KPPTCtrlExtender KPPTCtrlExtender;
#else
typedef struct KPPTCtrlExtender KPPTCtrlExtender;
#endif /* __cplusplus */

#endif 	/* __KPPTCtrlExtender_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 

typedef 
enum MsoLineDashStyle
    {	msoLineDashStyleMixed	= -2,
	msoLineSolid	= 1,
	msoLineSquareDot	= 2,
	msoLineRoundDot	= 3,
	msoLineDash	= 4,
	msoLineDashDot	= 5,
	msoLineDashDotDot	= 6,
	msoLineLongDash	= 7,
	msoLineLongDashDot	= 8,
	msoLineLongDashDotDot	= 9,
	msoLineSysDash	= 10,
	msoLineSysDot	= 11,
	msoLineSysDashDot	= 12
    } 	MsoLineDashStyle;

typedef 
enum MsoLineStyle
    {	msoLineStyleMixed	= -2,
	msoLineSingle	= 1,
	msoLineThinThin	= 2,
	msoLineThinThick	= 3,
	msoLineThickThin	= 4,
	msoLineThickBetweenThin	= 5
    } 	MsoLineStyle;

typedef 
enum MsoArrowheadStyle
    {	msoArrowheadStyleMixed	= -2,
	msoArrowheadNone	= 1,
	msoArrowheadTriangle	= 2,
	msoArrowheadOpen	= 3,
	msoArrowheadStealth	= 4,
	msoArrowheadDiamond	= 5,
	msoArrowheadOval	= 6
    } 	MsoArrowheadStyle;

typedef 
enum MsoArrowheadWidth
    {	msoArrowheadWidthMixed	= -2,
	msoArrowheadNarrow	= 1,
	msoArrowheadWidthMedium	= 2,
	msoArrowheadWide	= 3
    } 	MsoArrowheadWidth;

typedef 
enum MsoArrowheadLength
    {	msoArrowheadLengthMixed	= -2,
	msoArrowheadShort	= 1,
	msoArrowheadLengthMedium	= 2,
	msoArrowheadLong	= 3
    } 	MsoArrowheadLength;

typedef 
enum MsoFillType
    {	msoFillMixed	= -2,
	msoFillSolid	= 1,
	msoFillPatterned	= 2,
	msoFillGradient	= 3,
	msoFillTextured	= 4,
	msoFillBackground	= 5,
	msoFillPicture	= 6
    } 	MsoFillType;

typedef 
enum MsoGradientStyle
    {	msoGradientMixed	= -2,
	msoGradientHorizontal	= 1,
	msoGradientVertical	= 2,
	msoGradientDiagonalUp	= 3,
	msoGradientDiagonalDown	= 4,
	msoGradientFromCorner	= 5,
	msoGradientFromTitle	= 6,
	msoGradientFromCenter	= 7
    } 	MsoGradientStyle;

typedef 
enum MsoGradientColorType
    {	msoGradientColorMixed	= -2,
	msoGradientOneColor	= 1,
	msoGradientTwoColors	= 2,
	msoGradientPresetColors	= 3,
	msoGradientMultiColor	= 4
    } 	MsoGradientColorType;

typedef 
enum MsoTextureType
    {	msoTextureTypeMixed	= -2,
	msoTexturePreset	= 1,
	msoTextureUserDefined	= 2
    } 	MsoTextureType;

typedef 
enum MsoPresetTexture
    {	msoPresetTextureMixed	= -2,
	msoTexturePapyrus	= 1,
	msoTextureCanvas	= 2,
	msoTextureDenim	= 3,
	msoTextureWovenMat	= 4,
	msoTextureWaterDroplets	= 5,
	msoTexturePaperBag	= 6,
	msoTextureFishFossil	= 7,
	msoTextureSand	= 8,
	msoTextureGreenMarble	= 9,
	msoTextureWhiteMarble	= 10,
	msoTextureBrownMarble	= 11,
	msoTextureGranite	= 12,
	msoTextureNewsprint	= 13,
	msoTextureRecycledPaper	= 14,
	msoTextureParchment	= 15,
	msoTextureStationery	= 16,
	msoTextureBlueTissuePaper	= 17,
	msoTexturePinkTissuePaper	= 18,
	msoTexturePurpleMesh	= 19,
	msoTextureBouquet	= 20,
	msoTextureCork	= 21,
	msoTextureWalnut	= 22,
	msoTextureOak	= 23,
	msoTextureMediumWood	= 24
    } 	MsoPresetTexture;

typedef 
enum MsoPatternType
    {	msoPatternMixed	= -2,
	msoPattern5Percent	= 1,
	msoPattern10Percent	= 2,
	msoPattern20Percent	= 3,
	msoPattern25Percent	= 4,
	msoPattern30Percent	= 5,
	msoPattern40Percent	= 6,
	msoPattern50Percent	= 7,
	msoPattern60Percent	= 8,
	msoPattern70Percent	= 9,
	msoPattern75Percent	= 10,
	msoPattern80Percent	= 11,
	msoPattern90Percent	= 12,
	msoPatternDarkHorizontal	= 13,
	msoPatternDarkVertical	= 14,
	msoPatternDarkDownwardDiagonal	= 15,
	msoPatternDarkUpwardDiagonal	= 16,
	msoPatternSmallCheckerBoard	= 17,
	msoPatternTrellis	= 18,
	msoPatternLightHorizontal	= 19,
	msoPatternLightVertical	= 20,
	msoPatternLightDownwardDiagonal	= 21,
	msoPatternLightUpwardDiagonal	= 22,
	msoPatternSmallGrid	= 23,
	msoPatternDottedDiamond	= 24,
	msoPatternWideDownwardDiagonal	= 25,
	msoPatternWideUpwardDiagonal	= 26,
	msoPatternDashedUpwardDiagonal	= 27,
	msoPatternDashedDownwardDiagonal	= 28,
	msoPatternNarrowVertical	= 29,
	msoPatternNarrowHorizontal	= 30,
	msoPatternDashedVertical	= 31,
	msoPatternDashedHorizontal	= 32,
	msoPatternLargeConfetti	= 33,
	msoPatternLargeGrid	= 34,
	msoPatternHorizontalBrick	= 35,
	msoPatternLargeCheckerBoard	= 36,
	msoPatternSmallConfetti	= 37,
	msoPatternZigZag	= 38,
	msoPatternSolidDiamond	= 39,
	msoPatternDiagonalBrick	= 40,
	msoPatternOutlinedDiamond	= 41,
	msoPatternPlaid	= 42,
	msoPatternSphere	= 43,
	msoPatternWeave	= 44,
	msoPatternDottedGrid	= 45,
	msoPatternDivot	= 46,
	msoPatternShingle	= 47,
	msoPatternWave	= 48,
	msoPatternHorizontal	= 49,
	msoPatternVertical	= 50,
	msoPatternCross	= 51,
	msoPatternDownwardDiagonal	= 52,
	msoPatternUpwardDiagonal	= 53,
	msoPatternDiagonalCross	= 54
    } 	MsoPatternType;

typedef 
enum MsoPresetGradientType
    {	msoPresetGradientMixed	= -2,
	msoGradientEarlySunset	= 1,
	msoGradientLateSunset	= 2,
	msoGradientNightfall	= 3,
	msoGradientDaybreak	= 4,
	msoGradientHorizon	= 5,
	msoGradientDesert	= 6,
	msoGradientOcean	= 7,
	msoGradientCalmWater	= 8,
	msoGradientFire	= 9,
	msoGradientFog	= 10,
	msoGradientMoss	= 11,
	msoGradientPeacock	= 12,
	msoGradientWheat	= 13,
	msoGradientParchment	= 14,
	msoGradientMahogany	= 15,
	msoGradientRainbow	= 16,
	msoGradientRainbowII	= 17,
	msoGradientGold	= 18,
	msoGradientGoldII	= 19,
	msoGradientBrass	= 20,
	msoGradientChrome	= 21,
	msoGradientChromeII	= 22,
	msoGradientSilver	= 23,
	msoGradientSapphire	= 24
    } 	MsoPresetGradientType;

typedef 
enum MsoShadowType
    {	msoShadowMixed	= -2,
	msoShadow1	= 1,
	msoShadow2	= 2,
	msoShadow3	= 3,
	msoShadow4	= 4,
	msoShadow5	= 5,
	msoShadow6	= 6,
	msoShadow7	= 7,
	msoShadow8	= 8,
	msoShadow9	= 9,
	msoShadow10	= 10,
	msoShadow11	= 11,
	msoShadow12	= 12,
	msoShadow13	= 13,
	msoShadow14	= 14,
	msoShadow15	= 15,
	msoShadow16	= 16,
	msoShadow17	= 17,
	msoShadow18	= 18,
	msoShadow19	= 19,
	msoShadow20	= 20,
	msoShadow21	= 21,
	msoShadow22	= 22,
	msoShadow23	= 23,
	msoShadow24	= 24,
	msoShadow25	= 25,
	msoShadow26	= 26,
	msoShadow27	= 27,
	msoShadow28	= 28,
	msoShadow29	= 29,
	msoShadow30	= 30,
	msoShadow31	= 31,
	msoShadow32	= 32,
	msoShadow33	= 33,
	msoShadow34	= 34,
	msoShadow35	= 35,
	msoShadow36	= 36,
	msoShadow37	= 37,
	msoShadow38	= 38,
	msoShadow39	= 39,
	msoShadow40	= 40,
	msoShadow41	= 41,
	msoShadow42	= 42,
	msoShadow43	= 43
    } 	MsoShadowType;

typedef 
enum MsoPresetTextEffect
    {	msoTextEffectMixed	= -2,
	msoTextEffect1	= 0,
	msoTextEffect2	= 1,
	msoTextEffect3	= 2,
	msoTextEffect4	= 3,
	msoTextEffect5	= 4,
	msoTextEffect6	= 5,
	msoTextEffect7	= 6,
	msoTextEffect8	= 7,
	msoTextEffect9	= 8,
	msoTextEffect10	= 9,
	msoTextEffect11	= 10,
	msoTextEffect12	= 11,
	msoTextEffect13	= 12,
	msoTextEffect14	= 13,
	msoTextEffect15	= 14,
	msoTextEffect16	= 15,
	msoTextEffect17	= 16,
	msoTextEffect18	= 17,
	msoTextEffect19	= 18,
	msoTextEffect20	= 19,
	msoTextEffect21	= 20,
	msoTextEffect22	= 21,
	msoTextEffect23	= 22,
	msoTextEffect24	= 23,
	msoTextEffect25	= 24,
	msoTextEffect26	= 25,
	msoTextEffect27	= 26,
	msoTextEffect28	= 27,
	msoTextEffect29	= 28,
	msoTextEffect30	= 29,
	msoTextEffect31	= 30,
	msoTextEffect32	= 31,
	msoTextEffect33	= 32,
	msoTextEffect34	= 33,
	msoTextEffect35	= 34,
	msoTextEffect36	= 35,
	msoTextEffect37	= 36,
	msoTextEffect38	= 37,
	msoTextEffect39	= 38,
	msoTextEffect40	= 39,
	msoTextEffect41	= 40,
	msoTextEffect42	= 41,
	msoTextEffect43	= 42,
	msoTextEffect44	= 43,
	msoTextEffect45	= 44,
	msoTextEffect46	= 45,
	msoTextEffect47	= 46,
	msoTextEffect48	= 47,
	msoTextEffect49	= 48,
	msoTextEffect50	= 49
    } 	MsoPresetTextEffect;

typedef 
enum MsoPresetTextEffectShape
    {	msoTextEffectShapeMixed	= -2,
	msoTextEffectShapePlainText	= 1,
	msoTextEffectShapeStop	= 2,
	msoTextEffectShapeTriangleUp	= 3,
	msoTextEffectShapeTriangleDown	= 4,
	msoTextEffectShapeChevronUp	= 5,
	msoTextEffectShapeChevronDown	= 6,
	msoTextEffectShapeRingInside	= 7,
	msoTextEffectShapeRingOutside	= 8,
	msoTextEffectShapeArchUpCurve	= 9,
	msoTextEffectShapeArchDownCurve	= 10,
	msoTextEffectShapeCircleCurve	= 11,
	msoTextEffectShapeButtonCurve	= 12,
	msoTextEffectShapeArchUpPour	= 13,
	msoTextEffectShapeArchDownPour	= 14,
	msoTextEffectShapeCirclePour	= 15,
	msoTextEffectShapeButtonPour	= 16,
	msoTextEffectShapeCurveUp	= 17,
	msoTextEffectShapeCurveDown	= 18,
	msoTextEffectShapeCanUp	= 19,
	msoTextEffectShapeCanDown	= 20,
	msoTextEffectShapeWave1	= 21,
	msoTextEffectShapeWave2	= 22,
	msoTextEffectShapeDoubleWave1	= 23,
	msoTextEffectShapeDoubleWave2	= 24,
	msoTextEffectShapeInflate	= 25,
	msoTextEffectShapeDeflate	= 26,
	msoTextEffectShapeInflateBottom	= 27,
	msoTextEffectShapeDeflateBottom	= 28,
	msoTextEffectShapeInflateTop	= 29,
	msoTextEffectShapeDeflateTop	= 30,
	msoTextEffectShapeDeflateInflate	= 31,
	msoTextEffectShapeDeflateInflateDeflate	= 32,
	msoTextEffectShapeFadeRight	= 33,
	msoTextEffectShapeFadeLeft	= 34,
	msoTextEffectShapeFadeUp	= 35,
	msoTextEffectShapeFadeDown	= 36,
	msoTextEffectShapeSlantUp	= 37,
	msoTextEffectShapeSlantDown	= 38,
	msoTextEffectShapeCascadeUp	= 39,
	msoTextEffectShapeCascadeDown	= 40
    } 	MsoPresetTextEffectShape;

typedef 
enum MsoTextEffectAlignment
    {	msoTextEffectAlignmentMixed	= -2,
	msoTextEffectAlignmentLeft	= 1,
	msoTextEffectAlignmentCentered	= 2,
	msoTextEffectAlignmentRight	= 3,
	msoTextEffectAlignmentLetterJustify	= 4,
	msoTextEffectAlignmentWordJustify	= 5,
	msoTextEffectAlignmentStretchJustify	= 6
    } 	MsoTextEffectAlignment;

typedef 
enum MsoPresetLightingDirection
    {	msoPresetLightingDirectionMixed	= -2,
	msoLightingTopLeft	= 1,
	msoLightingTop	= 2,
	msoLightingTopRight	= 3,
	msoLightingLeft	= 4,
	msoLightingNone	= 5,
	msoLightingRight	= 6,
	msoLightingBottomLeft	= 7,
	msoLightingBottom	= 8,
	msoLightingBottomRight	= 9
    } 	MsoPresetLightingDirection;

typedef 
enum MsoPresetLightingSoftness
    {	msoPresetLightingSoftnessMixed	= -2,
	msoLightingDim	= 1,
	msoLightingNormal	= 2,
	msoLightingBright	= 3
    } 	MsoPresetLightingSoftness;

typedef 
enum MsoPresetMaterial
    {	msoPresetMaterialMixed	= -2,
	msoMaterialMatte	= 1,
	msoMaterialPlastic	= 2,
	msoMaterialMetal	= 3,
	msoMaterialWireFrame	= 4,
	msoMaterialMatte2	= 5,
	msoMaterialPlastic2	= 6,
	msoMaterialMetal2	= 7,
	msoMaterialWarmMatte	= 8,
	msoMaterialTranslucentPowder	= 9,
	msoMaterialPowder	= 10,
	msoMaterialDarkEdge	= 11,
	msoMaterialSoftEdge	= 12,
	msoMaterialClear	= 13,
	msoMaterialFlat	= 14,
	msoMaterialSoftMetal	= 15
    } 	MsoPresetMaterial;

typedef 
enum MsoPresetExtrusionDirection
    {	msoPresetExtrusionDirectionMixed	= -2,
	msoExtrusionBottomRight	= 1,
	msoExtrusionBottom	= 2,
	msoExtrusionBottomLeft	= 3,
	msoExtrusionRight	= 4,
	msoExtrusionNone	= 5,
	msoExtrusionLeft	= 6,
	msoExtrusionTopRight	= 7,
	msoExtrusionTop	= 8,
	msoExtrusionTopLeft	= 9
    } 	MsoPresetExtrusionDirection;

typedef 
enum MsoPresetThreeDFormat
    {	msoPresetThreeDFormatMixed	= -2,
	msoThreeD1	= 1,
	msoThreeD2	= 2,
	msoThreeD3	= 3,
	msoThreeD4	= 4,
	msoThreeD5	= 5,
	msoThreeD6	= 6,
	msoThreeD7	= 7,
	msoThreeD8	= 8,
	msoThreeD9	= 9,
	msoThreeD10	= 10,
	msoThreeD11	= 11,
	msoThreeD12	= 12,
	msoThreeD13	= 13,
	msoThreeD14	= 14,
	msoThreeD15	= 15,
	msoThreeD16	= 16,
	msoThreeD17	= 17,
	msoThreeD18	= 18,
	msoThreeD19	= 19,
	msoThreeD20	= 20
    } 	MsoPresetThreeDFormat;

typedef 
enum MsoExtrusionColorType
    {	msoExtrusionColorTypeMixed	= -2,
	msoExtrusionColorAutomatic	= 1,
	msoExtrusionColorCustom	= 2
    } 	MsoExtrusionColorType;

typedef 
enum MsoAlignCmd
    {	msoAlignLefts	= 0,
	msoAlignCenters	= 1,
	msoAlignRights	= 2,
	msoAlignTops	= 3,
	msoAlignMiddles	= 4,
	msoAlignBottoms	= 5
    } 	MsoAlignCmd;

typedef 
enum MsoDistributeCmd
    {	msoDistributeHorizontally	= 0,
	msoDistributeVertically	= 1
    } 	MsoDistributeCmd;

typedef 
enum MsoConnectorType
    {	msoConnectorTypeMixed	= -2,
	msoConnectorStraight	= 1,
	msoConnectorElbow	= 2,
	msoConnectorCurve	= 3
    } 	MsoConnectorType;

typedef 
enum MsoHorizontalAnchor
    {	msoHorizontalAnchorMixed	= -2,
	msoAnchorNone	= 1,
	msoAnchorCenter	= 2
    } 	MsoHorizontalAnchor;

typedef 
enum MsoVerticalAnchor
    {	msoVerticalAnchorMixed	= -2,
	msoAnchorTop	= 1,
	msoAnchorTopBaseline	= 2,
	msoAnchorMiddle	= 3,
	msoAnchorBottom	= 4,
	msoAnchorBottomBaseLine	= 5
    } 	MsoVerticalAnchor;

typedef 
enum MsoOrientation
    {	msoOrientationMixed	= -2,
	msoOrientationHorizontal	= 1,
	msoOrientationVertical	= 2
    } 	MsoOrientation;

typedef 
enum MsoZOrderCmd
    {	msoBringToFront	= 0,
	msoSendToBack	= 1,
	msoBringForward	= 2,
	msoSendBackward	= 3,
	msoBringInFrontOfText	= 4,
	msoSendBehindText	= 5
    } 	MsoZOrderCmd;

typedef 
enum MsoSegmentType
    {	msoSegmentLine	= 0,
	msoSegmentCurve	= 1
    } 	MsoSegmentType;

typedef 
enum MsoEditingType
    {	msoEditingAuto	= 0,
	msoEditingCorner	= 1,
	msoEditingSmooth	= 2,
	msoEditingSymmetric	= 3
    } 	MsoEditingType;

typedef 
enum MsoAutoShapeType
    {	msoShapeMixed	= -2,
	msoShapeRectangle	= 1,
	msoShapeParallelogram	= 2,
	msoShapeTrapezoid	= 3,
	msoShapeDiamond	= 4,
	msoShapeRoundedRectangle	= 5,
	msoShapeOctagon	= 6,
	msoShapeIsoscelesTriangle	= 7,
	msoShapeRightTriangle	= 8,
	msoShapeOval	= 9,
	msoShapeHexagon	= 10,
	msoShapeCross	= 11,
	msoShapeRegularPentagon	= 12,
	msoShapeCan	= 13,
	msoShapeCube	= 14,
	msoShapeBevel	= 15,
	msoShapeFoldedCorner	= 16,
	msoShapeSmileyFace	= 17,
	msoShapeDonut	= 18,
	msoShapeNoSymbol	= 19,
	msoShapeBlockArc	= 20,
	msoShapeHeart	= 21,
	msoShapeLightningBolt	= 22,
	msoShapeSun	= 23,
	msoShapeMoon	= 24,
	msoShapeArc	= 25,
	msoShapeDoubleBracket	= 26,
	msoShapeDoubleBrace	= 27,
	msoShapePlaque	= 28,
	msoShapeLeftBracket	= 29,
	msoShapeRightBracket	= 30,
	msoShapeLeftBrace	= 31,
	msoShapeRightBrace	= 32,
	msoShapeRightArrow	= 33,
	msoShapeLeftArrow	= 34,
	msoShapeUpArrow	= 35,
	msoShapeDownArrow	= 36,
	msoShapeLeftRightArrow	= 37,
	msoShapeUpDownArrow	= 38,
	msoShapeQuadArrow	= 39,
	msoShapeLeftRightUpArrow	= 40,
	msoShapeBentArrow	= 41,
	msoShapeUTurnArrow	= 42,
	msoShapeLeftUpArrow	= 43,
	msoShapeBentUpArrow	= 44,
	msoShapeCurvedRightArrow	= 45,
	msoShapeCurvedLeftArrow	= 46,
	msoShapeCurvedUpArrow	= 47,
	msoShapeCurvedDownArrow	= 48,
	msoShapeStripedRightArrow	= 49,
	msoShapeNotchedRightArrow	= 50,
	msoShapePentagon	= 51,
	msoShapeChevron	= 52,
	msoShapeRightArrowCallout	= 53,
	msoShapeLeftArrowCallout	= 54,
	msoShapeUpArrowCallout	= 55,
	msoShapeDownArrowCallout	= 56,
	msoShapeLeftRightArrowCallout	= 57,
	msoShapeUpDownArrowCallout	= 58,
	msoShapeQuadArrowCallout	= 59,
	msoShapeCircularArrow	= 60,
	msoShapeFlowchartProcess	= 61,
	msoShapeFlowchartAlternateProcess	= 62,
	msoShapeFlowchartDecision	= 63,
	msoShapeFlowchartData	= 64,
	msoShapeFlowchartPredefinedProcess	= 65,
	msoShapeFlowchartInternalStorage	= 66,
	msoShapeFlowchartDocument	= 67,
	msoShapeFlowchartMultidocument	= 68,
	msoShapeFlowchartTerminator	= 69,
	msoShapeFlowchartPreparation	= 70,
	msoShapeFlowchartManualInput	= 71,
	msoShapeFlowchartManualOperation	= 72,
	msoShapeFlowchartConnector	= 73,
	msoShapeFlowchartOffpageConnector	= 74,
	msoShapeFlowchartCard	= 75,
	msoShapeFlowchartPunchedTape	= 76,
	msoShapeFlowchartSummingJunction	= 77,
	msoShapeFlowchartOr	= 78,
	msoShapeFlowchartCollate	= 79,
	msoShapeFlowchartSort	= 80,
	msoShapeFlowchartExtract	= 81,
	msoShapeFlowchartMerge	= 82,
	msoShapeFlowchartStoredData	= 83,
	msoShapeFlowchartDelay	= 84,
	msoShapeFlowchartSequentialAccessStorage	= 85,
	msoShapeFlowchartMagneticDisk	= 86,
	msoShapeFlowchartDirectAccessStorage	= 87,
	msoShapeFlowchartDisplay	= 88,
	msoShapeExplosion1	= 89,
	msoShapeExplosion2	= 90,
	msoShape4pointStar	= 91,
	msoShape5pointStar	= 92,
	msoShape8pointStar	= 93,
	msoShape16pointStar	= 94,
	msoShape24pointStar	= 95,
	msoShape32pointStar	= 96,
	msoShapeUpRibbon	= 97,
	msoShapeDownRibbon	= 98,
	msoShapeCurvedUpRibbon	= 99,
	msoShapeCurvedDownRibbon	= 100,
	msoShapeVerticalScroll	= 101,
	msoShapeHorizontalScroll	= 102,
	msoShapeWave	= 103,
	msoShapeDoubleWave	= 104,
	msoShapeRectangularCallout	= 105,
	msoShapeRoundedRectangularCallout	= 106,
	msoShapeOvalCallout	= 107,
	msoShapeCloudCallout	= 108,
	msoShapeLineCallout1	= 109,
	msoShapeLineCallout2	= 110,
	msoShapeLineCallout3	= 111,
	msoShapeLineCallout4	= 112,
	msoShapeLineCallout1AccentBar	= 113,
	msoShapeLineCallout2AccentBar	= 114,
	msoShapeLineCallout3AccentBar	= 115,
	msoShapeLineCallout4AccentBar	= 116,
	msoShapeLineCallout1NoBorder	= 117,
	msoShapeLineCallout2NoBorder	= 118,
	msoShapeLineCallout3NoBorder	= 119,
	msoShapeLineCallout4NoBorder	= 120,
	msoShapeLineCallout1BorderandAccentBar	= 121,
	msoShapeLineCallout2BorderandAccentBar	= 122,
	msoShapeLineCallout3BorderandAccentBar	= 123,
	msoShapeLineCallout4BorderandAccentBar	= 124,
	msoShapeActionButtonCustom	= 125,
	msoShapeActionButtonHome	= 126,
	msoShapeActionButtonHelp	= 127,
	msoShapeActionButtonInformation	= 128,
	msoShapeActionButtonBackorPrevious	= 129,
	msoShapeActionButtonForwardorNext	= 130,
	msoShapeActionButtonBeginning	= 131,
	msoShapeActionButtonEnd	= 132,
	msoShapeActionButtonReturn	= 133,
	msoShapeActionButtonDocument	= 134,
	msoShapeActionButtonSound	= 135,
	msoShapeActionButtonMovie	= 136,
	msoShapeBalloon	= 137,
	msoShapeNotPrimitive	= 138,
	msoShapeFlowchartOfflineStorage	= 139,
	msoShapeLeftRightRibbon	= 140,
	msoShapeDiagonalStripe	= 141,
	msoShapePie	= 142,
	msoShapeNonIsoscelesTrapezoid	= 143,
	msoShapeDecagon	= 144,
	msoShapeHeptagon	= 145,
	msoShapeDodecagon	= 146,
	msoShape6pointStar	= 147,
	msoShape7pointStar	= 148,
	msoShape10pointStar	= 149,
	msoShape12pointStar	= 150,
	msoShapeRound1Rectangle	= 151,
	msoShapeRound2SameRectangle	= 152,
	msoShapeRound2DiagRectangle	= 153,
	msoShapeSnipRoundRectangle	= 154,
	msoShapeSnip1Rectangle	= 155,
	msoShapeSnip2SameRectangle	= 156,
	msoShapeSnip2DiagRectangle	= 157,
	msoShapeFrame	= 158,
	msoShapeHalfFrame	= 159,
	msoShapeTear	= 160,
	msoShapeChord	= 161,
	msoShapeCorner	= 162,
	msoShapeMathPlus	= 163,
	msoShapeMathMinus	= 164,
	msoShapeMathMultiply	= 165,
	msoShapeMathDivide	= 166,
	msoShapeMathEqual	= 167,
	msoShapeMathNotEqual	= 168,
	msoShapeCornerTabs	= 169,
	msoShapeSquareTabs	= 170,
	msoShapePlaqueTabs	= 171,
	msoShapeGear6	= 172,
	msoShapeGear9	= 173,
	msoShapeFunnel	= 174,
	msoShapePieWedge	= 175,
	msoShapeLeftCircularArrow	= 176,
	msoShapeLeftRightCircularArrow	= 177,
	msoShapeSwooshArrow	= 178,
	msoShapeCloud	= 179,
	msoShapeChartX	= 180,
	msoShapeChartStar	= 181,
	msoShapeChartPlus	= 182,
	msoShapeLineInverse	= 183
    } 	MsoAutoShapeType;

typedef 
enum MsoShapeType
    {	msoShapeTypeMixed	= -2,
	msoAutoShape	= 1,
	msoCallout	= 2,
	msoChart	= 3,
	msoComment	= 4,
	msoFreeform	= 5,
	msoGroup	= 6,
	msoEmbeddedOLEObject	= 7,
	msoFormControl	= 8,
	msoLine	= 9,
	msoLinkedOLEObject	= 10,
	msoLinkedPicture	= 11,
	msoOLEControlObject	= 12,
	msoPicture	= 13,
	msoPlaceholder	= 14,
	msoTextEffect	= 15,
	msoMedia	= 16,
	msoTextBox	= 17,
	msoScriptAnchor	= 18,
	msoTable	= 19,
	msoCanvas	= 20,
	msoDiagram	= 21,
	msoInk	= 22,
	msoInkComment	= 23,
	msoSmartArt	= 24,
	msoSlicer	= 25,
	msoWebVideo	= 26
    } 	MsoShapeType;

typedef 
enum MsoFlipCmd
    {	msoFlipHorizontal	= 0,
	msoFlipVertical	= 1
    } 	MsoFlipCmd;

typedef 
enum MsoTriState
    {	msoTrue	= -1,
	msoFalse	= 0,
	msoCTrue	= 1,
	msoTriStateToggle	= -3,
	msoTriStateMixed	= -2
    } 	MsoTriState;

typedef 
enum MsoColorType
    {	msoColorTypeMixed	= -2,
	msoColorTypeRGB	= 1,
	msoColorTypeScheme	= 2,
	msoColorTypeCMYK	= 3,
	msoColorTypeCMS	= 4,
	msoColorTypeInk	= 5
    } 	MsoColorType;

typedef 
enum MsoPictureColorType
    {	msoPictureMixed	= -2,
	msoPictureAutomatic	= 1,
	msoPictureGrayscale	= 2,
	msoPictureBlackAndWhite	= 3,
	msoPictureWatermark	= 4
    } 	MsoPictureColorType;

typedef 
enum MsoCalloutAngleType
    {	msoCalloutAngleMixed	= -2,
	msoCalloutAngleAutomatic	= 1,
	msoCalloutAngle30	= 2,
	msoCalloutAngle45	= 3,
	msoCalloutAngle60	= 4,
	msoCalloutAngle90	= 5
    } 	MsoCalloutAngleType;

typedef 
enum MsoCalloutDropType
    {	msoCalloutDropMixed	= -2,
	msoCalloutDropCustom	= 1,
	msoCalloutDropTop	= 2,
	msoCalloutDropCenter	= 3,
	msoCalloutDropBottom	= 4
    } 	MsoCalloutDropType;

typedef 
enum MsoCalloutType
    {	msoCalloutMixed	= -2,
	msoCalloutOne	= 1,
	msoCalloutTwo	= 2,
	msoCalloutThree	= 3,
	msoCalloutFour	= 4
    } 	MsoCalloutType;

typedef 
enum MsoBlackWhiteMode
    {	msoBlackWhiteMixed	= -2,
	msoBlackWhiteAutomatic	= 1,
	msoBlackWhiteGrayScale	= 2,
	msoBlackWhiteLightGrayScale	= 3,
	msoBlackWhiteInverseGrayScale	= 4,
	msoBlackWhiteGrayOutline	= 5,
	msoBlackWhiteBlackTextAndLine	= 6,
	msoBlackWhiteHighContrast	= 7,
	msoBlackWhiteBlack	= 8,
	msoBlackWhiteWhite	= 9,
	msoBlackWhiteDontShow	= 10
    } 	MsoBlackWhiteMode;

typedef 
enum MsoMixedType
    {	msoIntegerMixed	= 32768,
	msoSingleMixed	= 0x7fffffff
    } 	MsoMixedType;

typedef 
enum MsoTextOrientation
    {	msoTextOrientationMixed	= -2,
	msoTextOrientationHorizontal	= 1,
	msoTextOrientationUpward	= 2,
	msoTextOrientationDownward	= 3,
	msoTextOrientationVerticalFarEast	= 4,
	msoTextOrientationVertical	= 5,
	msoTextOrientationHorizontalRotatedFarEast	= 6
    } 	MsoTextOrientation;

typedef 
enum MsoScaleFrom
    {	msoScaleFromTopLeft	= 0,
	msoScaleFromMiddle	= 1,
	msoScaleFromBottomRight	= 2
    } 	MsoScaleFrom;

typedef long MsoRGBType;

typedef 
enum MsoBarPosition
    {	msoBarLeft	= 0,
	msoBarTop	= 1,
	msoBarRight	= 2,
	msoBarBottom	= 3,
	msoBarFloating	= 4,
	msoBarPopup	= 5,
	msoBarMenuBar	= 6
    } 	MsoBarPosition;

typedef 
enum MsoBarProtection
    {	msoBarNoProtection	= 0,
	msoBarNoCustomize	= 1,
	msoBarNoResize	= 2,
	msoBarNoMove	= 4,
	msoBarNoChangeVisible	= 8,
	msoBarNoChangeDock	= 16,
	msoBarNoVerticalDock	= 32,
	msoBarNoHorizontalDock	= 64
    } 	MsoBarProtection;

typedef 
enum MsoBarType
    {	msoBarTypeNormal	= 0,
	msoBarTypeMenuBar	= 1,
	msoBarTypePopup	= 2
    } 	MsoBarType;

typedef 
enum MsoControlType
    {	msoControlCustom	= 0,
	msoControlButton	= 1,
	msoControlEdit	= 2,
	msoControlDropdown	= 3,
	msoControlComboBox	= 4,
	msoControlButtonDropdown	= 5,
	msoControlSplitDropdown	= 6,
	msoControlOCXDropdown	= 7,
	msoControlGenericDropdown	= 8,
	msoControlGraphicDropdown	= 9,
	msoControlPopup	= 10,
	msoControlGraphicPopup	= 11,
	msoControlButtonPopup	= 12,
	msoControlSplitButtonPopup	= 13,
	msoControlSplitButtonMRUPopup	= 14,
	msoControlLabel	= 15,
	msoControlExpandingGrid	= 16,
	msoControlSplitExpandingGrid	= 17,
	msoControlGrid	= 18,
	msoControlGauge	= 19,
	msoControlGraphicCombo	= 20,
	msoControlPane	= 21,
	msoControlActiveX	= 22,
	msoControlSpinner	= 23,
	msoControlLabelEx	= 24,
	msoControlWorkPane	= 25,
	msoControlAutoCompleteCombo	= 26
    } 	MsoControlType;

typedef 
enum MsoButtonState
    {	msoButtonUp	= 0,
	msoButtonDown	= -1,
	msoButtonMixed	= 2
    } 	MsoButtonState;

typedef 
enum MsoControlOLEUsage
    {	msoControlOLEUsageNeither	= 0,
	msoControlOLEUsageServer	= 1,
	msoControlOLEUsageClient	= 2,
	msoControlOLEUsageBoth	= 3
    } 	MsoControlOLEUsage;

typedef 
enum MsoButtonStyleHidden
    {	msoButtonWrapText	= 4,
	msoButtonTextBelow	= 8
    } 	MsoButtonStyleHidden;

typedef 
enum MsoButtonStyle
    {	msoButtonAutomatic	= 0,
	msoButtonIcon	= 1,
	msoButtonCaption	= 2,
	msoButtonIconAndCaption	= 3,
	msoButtonIconAndWrapCaption	= 7,
	msoButtonIconAndCaptionBelow	= 11,
	msoButtonWrapCaption	= 14,
	msoButtonIconAndWrapCaptionBelow	= 15
    } 	MsoButtonStyle;

typedef 
enum MsoComboStyle
    {	msoComboNormal	= 0,
	msoComboLabel	= 1
    } 	MsoComboStyle;

typedef 
enum MsoOLEMenuGroup
    {	msoOLEMenuGroupNone	= -1,
	msoOLEMenuGroupFile	= 0,
	msoOLEMenuGroupEdit	= 1,
	msoOLEMenuGroupContainer	= 2,
	msoOLEMenuGroupObject	= 3,
	msoOLEMenuGroupWindow	= 4,
	msoOLEMenuGroupHelp	= 5
    } 	MsoOLEMenuGroup;

typedef 
enum MsoMenuAnimation
    {	msoMenuAnimationNone	= 0,
	msoMenuAnimationRandom	= 1,
	msoMenuAnimationUnfold	= 2,
	msoMenuAnimationSlide	= 3
    } 	MsoMenuAnimation;

typedef 
enum MsoBarRow
    {	msoBarRowFirst	= 0,
	msoBarRowLast	= -1
    } 	MsoBarRow;

typedef 
enum MsoCommandBarButtonHyperlinkType
    {	msoCommandBarButtonHyperlinkNone	= 0,
	msoCommandBarButtonHyperlinkOpen	= 1,
	msoCommandBarButtonHyperlinkInsertPicture	= 2
    } 	MsoCommandBarButtonHyperlinkType;

typedef 
enum MsoHyperlinkType
    {	msoHyperlinkRange	= 0,
	msoHyperlinkShape	= 1,
	msoHyperlinkInlineShape	= 2
    } 	MsoHyperlinkType;

typedef 
enum MsoExtraInfoMethod
    {	msoMethodGet	= 0,
	msoMethodPost	= 1
    } 	MsoExtraInfoMethod;

typedef 
enum MsoAnimationType
    {	msoAnimationIdle	= 1,
	msoAnimationGreeting	= 2,
	msoAnimationGoodbye	= 3,
	msoAnimationBeginSpeaking	= 4,
	msoAnimationRestPose	= 5,
	msoAnimationCharacterSuccessMajor	= 6,
	msoAnimationGetAttentionMajor	= 11,
	msoAnimationGetAttentionMinor	= 12,
	msoAnimationSearching	= 13,
	msoAnimationPrinting	= 18,
	msoAnimationGestureRight	= 19,
	msoAnimationWritingNotingSomething	= 22,
	msoAnimationWorkingAtSomething	= 23,
	msoAnimationThinking	= 24,
	msoAnimationSendingMail	= 25,
	msoAnimationListensToComputer	= 26,
	msoAnimationDisappear	= 31,
	msoAnimationAppear	= 32,
	msoAnimationGetArtsy	= 100,
	msoAnimationGetTechy	= 101,
	msoAnimationGetWizardy	= 102,
	msoAnimationCheckingSomething	= 103,
	msoAnimationLookDown	= 104,
	msoAnimationLookDownLeft	= 105,
	msoAnimationLookDownRight	= 106,
	msoAnimationLookLeft	= 107,
	msoAnimationLookRight	= 108,
	msoAnimationLookUp	= 109,
	msoAnimationLookUpLeft	= 110,
	msoAnimationLookUpRight	= 111,
	msoAnimationSaving	= 112,
	msoAnimationGestureDown	= 113,
	msoAnimationGestureLeft	= 114,
	msoAnimationGestureUp	= 115,
	msoAnimationEmptyTrash	= 116
    } 	MsoAnimationType;

typedef 
enum MsoButtonSetType
    {	msoButtonSetNone	= 0,
	msoButtonSetOK	= 1,
	msoButtonSetCancel	= 2,
	msoButtonSetOkCancel	= 3,
	msoButtonSetYesNo	= 4,
	msoButtonSetYesNoCancel	= 5,
	msoButtonSetBackClose	= 6,
	msoButtonSetNextClose	= 7,
	msoButtonSetBackNextClose	= 8,
	msoButtonSetRetryCancel	= 9,
	msoButtonSetAbortRetryIgnore	= 10,
	msoButtonSetSearchClose	= 11,
	msoButtonSetBackNextSnooze	= 12,
	msoButtonSetTipsOptionsClose	= 13,
	msoButtonSetYesAllNoCancel	= 14
    } 	MsoButtonSetType;

typedef 
enum MsoIconType
    {	msoIconNone	= 0,
	msoIconAlert	= 2,
	msoIconTip	= 3,
	msoIconAlertInfo	= 4,
	msoIconAlertWarning	= 5,
	msoIconAlertQuery	= 6,
	msoIconAlertCritical	= 7
    } 	MsoIconType;

typedef 
enum MsoBalloonType
    {	msoBalloonTypeButtons	= 0,
	msoBalloonTypeBullets	= 1,
	msoBalloonTypeNumbers	= 2
    } 	MsoBalloonType;

typedef 
enum MsoModeType
    {	msoModeModal	= 0,
	msoModeAutoDown	= 1,
	msoModeModeless	= 2
    } 	MsoModeType;

typedef 
enum MsoBalloonErrorType
    {	msoBalloonErrorNone	= 0,
	msoBalloonErrorOther	= 1,
	msoBalloonErrorTooBig	= 2,
	msoBalloonErrorOutOfMemory	= 3,
	msoBalloonErrorBadPictureRef	= 4,
	msoBalloonErrorBadReference	= 5,
	msoBalloonErrorButtonlessModal	= 6,
	msoBalloonErrorButtonModeless	= 7,
	msoBalloonErrorBadCharacter	= 8,
	msoBalloonErrorCOMFailure	= 9,
	msoBalloonErrorCharNotTopmostForModal	= 10,
	msoBalloonErrorTooManyControls	= 11
    } 	MsoBalloonErrorType;

typedef 
enum MsoWizardActType
    {	msoWizardActInactive	= 0,
	msoWizardActActive	= 1,
	msoWizardActSuspend	= 2,
	msoWizardActResume	= 3
    } 	MsoWizardActType;

typedef 
enum MsoWizardMsgType
    {	msoWizardMsgLocalStateOn	= 1,
	msoWizardMsgLocalStateOff	= 2,
	msoWizardMsgShowHelp	= 3,
	msoWizardMsgSuspending	= 4,
	msoWizardMsgResuming	= 5
    } 	MsoWizardMsgType;

typedef 
enum MsoBalloonButtonType
    {	msoBalloonButtonYesToAll	= -15,
	msoBalloonButtonOptions	= -14,
	msoBalloonButtonTips	= -13,
	msoBalloonButtonClose	= -12,
	msoBalloonButtonSnooze	= -11,
	msoBalloonButtonSearch	= -10,
	msoBalloonButtonIgnore	= -9,
	msoBalloonButtonAbort	= -8,
	msoBalloonButtonRetry	= -7,
	msoBalloonButtonNext	= -6,
	msoBalloonButtonBack	= -5,
	msoBalloonButtonNo	= -4,
	msoBalloonButtonYes	= -3,
	msoBalloonButtonCancel	= -2,
	msoBalloonButtonOK	= -1,
	msoBalloonButtonNull	= 0
    } 	MsoBalloonButtonType;

typedef 
enum DocProperties
    {	offPropertyTypeNumber	= 1,
	offPropertyTypeBoolean	= 2,
	offPropertyTypeDate	= 3,
	offPropertyTypeString	= 4,
	offPropertyTypeFloat	= 5
    } 	DocProperties;

typedef 
enum MsoDocProperties
    {	msoPropertyTypeNumber	= 1,
	msoPropertyTypeBoolean	= 2,
	msoPropertyTypeDate	= 3,
	msoPropertyTypeString	= 4,
	msoPropertyTypeFloat	= 5
    } 	MsoDocProperties;

typedef 
enum MsoAppLanguageID
    {	msoLanguageIDInstall	= 1,
	msoLanguageIDUI	= 2,
	msoLanguageIDHelp	= 3,
	msoLanguageIDExeMode	= 4,
	msoLanguageIDUIPrevious	= 5
    } 	MsoAppLanguageID;

typedef 
enum MsoFarEastLineBreakLanguageID
    {	MsoFarEastLineBreakLanguageJapanese	= 1041,
	MsoFarEastLineBreakLanguageKorean	= 1042,
	MsoFarEastLineBreakLanguageSimplifiedChinese	= 2052,
	MsoFarEastLineBreakLanguageTraditionalChinese	= 1028
    } 	MsoFarEastLineBreakLanguageID;

typedef 
enum MsoFeatureInstall
    {	msoFeatureInstallNone	= 0,
	msoFeatureInstallOnDemand	= 1,
	msoFeatureInstallOnDemandWithUI	= 2
    } 	MsoFeatureInstall;

typedef 
enum MsoScriptLanguage
    {	msoScriptLanguageJava	= 1,
	msoScriptLanguageVisualBasic	= 2,
	msoScriptLanguageASP	= 3,
	msoScriptLanguageOther	= 4
    } 	MsoScriptLanguage;

typedef 
enum MsoScriptLocation
    {	msoScriptLocationInHead	= 1,
	msoScriptLocationInBody	= 2
    } 	MsoScriptLocation;

typedef 
enum MsoFileFindOptions
    {	msoOptionsNew	= 1,
	msoOptionsAdd	= 2,
	msoOptionsWithin	= 3
    } 	MsoFileFindOptions;

typedef 
enum MsoFileFindView
    {	msoViewFileInfo	= 1,
	msoViewPreview	= 2,
	msoViewSummaryInfo	= 3
    } 	MsoFileFindView;

typedef 
enum MsoFileFindSortBy
    {	msoFileFindSortbyAuthor	= 1,
	msoFileFindSortbyDateCreated	= 2,
	msoFileFindSortbyLastSavedBy	= 3,
	msoFileFindSortbyDateSaved	= 4,
	msoFileFindSortbyFileName	= 5,
	msoFileFindSortbySize	= 6,
	msoFileFindSortbyTitle	= 7
    } 	MsoFileFindSortBy;

typedef 
enum MsoFileFindListBy
    {	msoListbyName	= 1,
	msoListbyTitle	= 2
    } 	MsoFileFindListBy;

typedef 
enum MsoLastModified
    {	msoLastModifiedYesterday	= 1,
	msoLastModifiedToday	= 2,
	msoLastModifiedLastWeek	= 3,
	msoLastModifiedThisWeek	= 4,
	msoLastModifiedLastMonth	= 5,
	msoLastModifiedThisMonth	= 6,
	msoLastModifiedAnyTime	= 7
    } 	MsoLastModified;

typedef 
enum MsoSortBy
    {	msoSortByFileName	= 1,
	msoSortBySize	= 2,
	msoSortByFileType	= 3,
	msoSortByLastModified	= 4,
	msoSortByNone	= 5
    } 	MsoSortBy;

typedef 
enum MsoSortOrder
    {	msoSortOrderAscending	= 1,
	msoSortOrderDescending	= 2
    } 	MsoSortOrder;

typedef 
enum MsoConnector
    {	msoConnectorAnd	= 1,
	msoConnectorOr	= 2
    } 	MsoConnector;

typedef 
enum MsoCondition
    {	msoConditionFileTypeAllFiles	= 1,
	msoConditionFileTypeOfficeFiles	= 2,
	msoConditionFileTypeWordDocuments	= 3,
	msoConditionFileTypeExcelWorkbooks	= 4,
	msoConditionFileTypePowerPointPresentations	= 5,
	msoConditionFileTypeBinders	= 6,
	msoConditionFileTypeDatabases	= 7,
	msoConditionFileTypeTemplates	= 8,
	msoConditionIncludes	= 9,
	msoConditionIncludesPhrase	= 10,
	msoConditionBeginsWith	= 11,
	msoConditionEndsWith	= 12,
	msoConditionIncludesNearEachOther	= 13,
	msoConditionIsExactly	= 14,
	msoConditionIsNot	= 15,
	msoConditionYesterday	= 16,
	msoConditionToday	= 17,
	msoConditionTomorrow	= 18,
	msoConditionLastWeek	= 19,
	msoConditionThisWeek	= 20,
	msoConditionNextWeek	= 21,
	msoConditionLastMonth	= 22,
	msoConditionThisMonth	= 23,
	msoConditionNextMonth	= 24,
	msoConditionAnytime	= 25,
	msoConditionAnytimeBetween	= 26,
	msoConditionOn	= 27,
	msoConditionOnOrAfter	= 28,
	msoConditionOnOrBefore	= 29,
	msoConditionInTheNext	= 30,
	msoConditionInTheLast	= 31,
	msoConditionEquals	= 32,
	msoConditionDoesNotEqual	= 33,
	msoConditionAnyNumberBetween	= 34,
	msoConditionAtMost	= 35,
	msoConditionAtLeast	= 36,
	msoConditionMoreThan	= 37,
	msoConditionLessThan	= 38,
	msoConditionIsYes	= 39,
	msoConditionIsNo	= 40,
	msoConditionIncludesFormsOf	= 41,
	msoConditionFreeText	= 42,
	msoConditionFileTypeOutlookItems	= 43,
	msoConditionFileTypeMailItem	= 44,
	msoConditionFileTypeCalendarItem	= 45,
	msoConditionFileTypeContactItem	= 46,
	msoConditionFileTypeNoteItem	= 47,
	msoConditionFileTypeJournalItem	= 48,
	msoConditionFileTypeTaskItem	= 49,
	msoConditionFileTypePhotoDrawFiles	= 50,
	msoConditionFileTypeDataConnectionFiles	= 51,
	msoConditionFileTypePublisherFiles	= 52,
	msoConditionFileTypeProjectFiles	= 53,
	msoConditionFileTypeDocumentImagingFiles	= 54,
	msoConditionFileTypeVisioFiles	= 55,
	msoConditionFileTypeDesignerFiles	= 56,
	msoConditionFileTypeWebPages	= 57,
	msoConditionEqualsLow	= 58,
	msoConditionEqualsNormal	= 59,
	msoConditionEqualsHigh	= 60,
	msoConditionNotEqualToLow	= 61,
	msoConditionNotEqualToNormal	= 62,
	msoConditionNotEqualToHigh	= 63,
	msoConditionEqualsNotStarted	= 64,
	msoConditionEqualsInProgress	= 65,
	msoConditionEqualsCompleted	= 66,
	msoConditionEqualsWaitingForSomeoneElse	= 67,
	msoConditionEqualsDeferred	= 68,
	msoConditionNotEqualToNotStarted	= 69,
	msoConditionNotEqualToInProgress	= 70,
	msoConditionNotEqualToCompleted	= 71,
	msoConditionNotEqualToWaitingForSomeoneElse	= 72,
	msoConditionNotEqualToDeferred	= 73
    } 	MsoCondition;

typedef 
enum MsoFileType
    {	msoFileTypeAllFiles	= 1,
	msoFileTypeOfficeFiles	= 2,
	msoFileTypeWordDocuments	= 3,
	msoFileTypeExcelWorkbooks	= 4,
	msoFileTypePowerPointPresentations	= 5,
	msoFileTypeBinders	= 6,
	msoFileTypeDatabases	= 7,
	msoFileTypeTemplates	= 8,
	msoFileTypeOutlookItems	= 9,
	msoFileTypeMailItem	= 10,
	msoFileTypeCalendarItem	= 11,
	msoFileTypeContactItem	= 12,
	msoFileTypeNoteItem	= 13,
	msoFileTypeJournalItem	= 14,
	msoFileTypeTaskItem	= 15,
	msoFileTypePhotoDrawFiles	= 16,
	msoFileTypeDataConnectionFiles	= 17,
	msoFileTypePublisherFiles	= 18,
	msoFileTypeProjectFiles	= 19,
	msoFileTypeDocumentImagingFiles	= 20,
	msoFileTypeVisioFiles	= 21,
	msoFileTypeDesignerFiles	= 22,
	msoFileTypeWebPages	= 23
    } 	MsoFileType;

typedef 
enum MsoLanguageID
    {	msoLanguageIDMixed	= -2,
	msoLanguageIDNone	= 0,
	msoLanguageIDNoProofing	= 1024,
	msoLanguageIDAfrikaans	= 1078,
	msoLanguageIDAlbanian	= 1052,
	msoLanguageIDAmharic	= 1118,
	msoLanguageIDArabicAlgeria	= 5121,
	msoLanguageIDArabicBahrain	= 15361,
	msoLanguageIDArabicEgypt	= 3073,
	msoLanguageIDArabicIraq	= 2049,
	msoLanguageIDArabicJordan	= 11265,
	msoLanguageIDArabicKuwait	= 13313,
	msoLanguageIDArabicLebanon	= 12289,
	msoLanguageIDArabicLibya	= 4097,
	msoLanguageIDArabicMorocco	= 6145,
	msoLanguageIDArabicOman	= 8193,
	msoLanguageIDArabicQatar	= 16385,
	msoLanguageIDArabic	= 1025,
	msoLanguageIDArabicSyria	= 10241,
	msoLanguageIDArabicTunisia	= 7169,
	msoLanguageIDArabicUAE	= 14337,
	msoLanguageIDArabicYemen	= 9217,
	msoLanguageIDArmenian	= 1067,
	msoLanguageIDAssamese	= 1101,
	msoLanguageIDAzeriCyrillic	= 2092,
	msoLanguageIDAzeriLatin	= 1068,
	msoLanguageIDBasque	= 1069,
	msoLanguageIDByelorussian	= 1059,
	msoLanguageIDBengali	= 1093,
	msoLanguageIDBosnian	= 4122,
	msoLanguageIDBosnianBosniaHerzegovinaCyrillic	= 8218,
	msoLanguageIDBosnianBosniaHerzegovinaLatin	= 5146,
	msoLanguageIDBulgarian	= 1026,
	msoLanguageIDBurmese	= 1109,
	msoLanguageIDCatalan	= 1027,
	msoLanguageIDChineseHongKongSAR	= 3076,
	msoLanguageIDChineseMacaoSAR	= 5124,
	msoLanguageIDSimplifiedChinese	= 2052,
	msoLanguageIDChineseSingapore	= 4100,
	msoLanguageIDTraditionalChinese	= 1028,
	msoLanguageIDCherokee	= 1116,
	msoLanguageIDCroatian	= 1050,
	msoLanguageIDCzech	= 1029,
	msoLanguageIDDanish	= 1030,
	msoLanguageIDDivehi	= 1125,
	msoLanguageIDBelgianDutch	= 2067,
	msoLanguageIDDutch	= 1043,
	msoLanguageIDDzongkhaBhutan	= 2129,
	msoLanguageIDEdo	= 1126,
	msoLanguageIDEnglishAUS	= 3081,
	msoLanguageIDEnglishBelize	= 10249,
	msoLanguageIDEnglishCanadian	= 4105,
	msoLanguageIDEnglishCaribbean	= 9225,
	msoLanguageIDEnglishIndonesia	= 14345,
	msoLanguageIDEnglishIreland	= 6153,
	msoLanguageIDEnglishJamaica	= 8201,
	msoLanguageIDEnglishNewZealand	= 5129,
	msoLanguageIDEnglishPhilippines	= 13321,
	msoLanguageIDEnglishSouthAfrica	= 7177,
	msoLanguageIDEnglishTrinidadTobago	= 11273,
	msoLanguageIDEnglishUK	= 2057,
	msoLanguageIDEnglishUS	= 1033,
	msoLanguageIDEnglishZimbabwe	= 12297,
	msoLanguageIDEstonian	= 1061,
	msoLanguageIDFaeroese	= 1080,
	msoLanguageIDFarsi	= 1065,
	msoLanguageIDFilipino	= 1124,
	msoLanguageIDFinnish	= 1035,
	msoLanguageIDBelgianFrench	= 2060,
	msoLanguageIDFrenchCameroon	= 11276,
	msoLanguageIDFrenchCanadian	= 3084,
	msoLanguageIDFrenchCotedIvoire	= 12300,
	msoLanguageIDFrench	= 1036,
	msoLanguageIDFrenchHaiti	= 15372,
	msoLanguageIDFrenchLuxembourg	= 5132,
	msoLanguageIDFrenchMali	= 13324,
	msoLanguageIDFrenchMonaco	= 6156,
	msoLanguageIDFrenchMorocco	= 14348,
	msoLanguageIDFrenchReunion	= 8204,
	msoLanguageIDFrenchSenegal	= 10252,
	msoLanguageIDSwissFrench	= 4108,
	msoLanguageIDFrenchWestIndies	= 7180,
	msoLanguageIDFrenchZaire	= 9228,
	msoLanguageIDFrenchCongoDRC	= 9228,
	msoLanguageIDFrisianNetherlands	= 1122,
	msoLanguageIDFulfulde	= 1127,
	msoLanguageIDGaelicIreland	= 2108,
	msoLanguageIDGaelicScotland	= 1084,
	msoLanguageIDGalician	= 1110,
	msoLanguageIDGeorgian	= 1079,
	msoLanguageIDGermanAustria	= 3079,
	msoLanguageIDGerman	= 1031,
	msoLanguageIDGermanLiechtenstein	= 5127,
	msoLanguageIDGermanLuxembourg	= 4103,
	msoLanguageIDSwissGerman	= 2055,
	msoLanguageIDGreek	= 1032,
	msoLanguageIDGuarani	= 1140,
	msoLanguageIDGujarati	= 1095,
	msoLanguageIDHausa	= 1128,
	msoLanguageIDHawaiian	= 1141,
	msoLanguageIDHebrew	= 1037,
	msoLanguageIDHindi	= 1081,
	msoLanguageIDHungarian	= 1038,
	msoLanguageIDIbibio	= 1129,
	msoLanguageIDIcelandic	= 1039,
	msoLanguageIDIgbo	= 1136,
	msoLanguageIDIndonesian	= 1057,
	msoLanguageIDInuktitut	= 1117,
	msoLanguageIDItalian	= 1040,
	msoLanguageIDSwissItalian	= 2064,
	msoLanguageIDJapanese	= 1041,
	msoLanguageIDKannada	= 1099,
	msoLanguageIDKanuri	= 1137,
	msoLanguageIDKashmiri	= 1120,
	msoLanguageIDKashmiriDevanagari	= 2144,
	msoLanguageIDKazakh	= 1087,
	msoLanguageIDKhmer	= 1107,
	msoLanguageIDKirghiz	= 1088,
	msoLanguageIDKonkani	= 1111,
	msoLanguageIDKorean	= 1042,
	msoLanguageIDKyrgyz	= 1088,
	msoLanguageIDLatin	= 1142,
	msoLanguageIDLao	= 1108,
	msoLanguageIDLatvian	= 1062,
	msoLanguageIDLithuanian	= 1063,
	msoLanguageIDMacedonian	= 1071,
	msoLanguageIDMacedonianFYROM	= 1071,
	msoLanguageIDMalaysian	= 1086,
	msoLanguageIDMalayBruneiDarussalam	= 2110,
	msoLanguageIDMalayalam	= 1100,
	msoLanguageIDMaltese	= 1082,
	msoLanguageIDManipuri	= 1112,
	msoLanguageIDMaori	= 1153,
	msoLanguageIDMarathi	= 1102,
	msoLanguageIDMongolian	= 1104,
	msoLanguageIDNepali	= 1121,
	msoLanguageIDNorwegianBokmol	= 1044,
	msoLanguageIDNorwegianNynorsk	= 2068,
	msoLanguageIDOriya	= 1096,
	msoLanguageIDOromo	= 1138,
	msoLanguageIDPashto	= 1123,
	msoLanguageIDPolish	= 1045,
	msoLanguageIDBrazilianPortuguese	= 1046,
	msoLanguageIDPortuguese	= 2070,
	msoLanguageIDPunjabi	= 1094,
	msoLanguageIDQuechuaBolivia	= 1131,
	msoLanguageIDQuechuaEcuador	= 2155,
	msoLanguageIDQuechuaPeru	= 3179,
	msoLanguageIDRhaetoRomanic	= 1047,
	msoLanguageIDRomanianMoldova	= 2072,
	msoLanguageIDRomanian	= 1048,
	msoLanguageIDRussianMoldova	= 2073,
	msoLanguageIDRussian	= 1049,
	msoLanguageIDSamiLappish	= 1083,
	msoLanguageIDSanskrit	= 1103,
	msoLanguageIDSepedi	= 1132,
	msoLanguageIDSerbianBosniaHerzegovinaCyrillic	= 7194,
	msoLanguageIDSerbianBosniaHerzegovinaLatin	= 6170,
	msoLanguageIDSerbianCyrillic	= 3098,
	msoLanguageIDSerbianLatin	= 2074,
	msoLanguageIDSesotho	= 1072,
	msoLanguageIDSindhi	= 1113,
	msoLanguageIDSindhiPakistan	= 2137,
	msoLanguageIDSinhalese	= 1115,
	msoLanguageIDSlovak	= 1051,
	msoLanguageIDSlovenian	= 1060,
	msoLanguageIDSomali	= 1143,
	msoLanguageIDSorbian	= 1070,
	msoLanguageIDSpanishArgentina	= 11274,
	msoLanguageIDSpanishBolivia	= 16394,
	msoLanguageIDSpanishChile	= 13322,
	msoLanguageIDSpanishColombia	= 9226,
	msoLanguageIDSpanishCostaRica	= 5130,
	msoLanguageIDSpanishDominicanRepublic	= 7178,
	msoLanguageIDSpanishEcuador	= 12298,
	msoLanguageIDSpanishElSalvador	= 17418,
	msoLanguageIDSpanishGuatemala	= 4106,
	msoLanguageIDSpanishHonduras	= 18442,
	msoLanguageIDMexicanSpanish	= 2058,
	msoLanguageIDSpanishNicaragua	= 19466,
	msoLanguageIDSpanishPanama	= 6154,
	msoLanguageIDSpanishParaguay	= 15370,
	msoLanguageIDSpanishPeru	= 10250,
	msoLanguageIDSpanishPuertoRico	= 20490,
	msoLanguageIDSpanishModernSort	= 3082,
	msoLanguageIDSpanish	= 1034,
	msoLanguageIDSpanishUruguay	= 14346,
	msoLanguageIDSpanishVenezuela	= 8202,
	msoLanguageIDSutu	= 1072,
	msoLanguageIDSwahili	= 1089,
	msoLanguageIDSwedishFinland	= 2077,
	msoLanguageIDSwedish	= 1053,
	msoLanguageIDSyriac	= 1114,
	msoLanguageIDTajik	= 1064,
	msoLanguageIDTamil	= 1097,
	msoLanguageIDTamazight	= 1119,
	msoLanguageIDTamazightLatin	= 2143,
	msoLanguageIDTatar	= 1092,
	msoLanguageIDTelugu	= 1098,
	msoLanguageIDThai	= 1054,
	msoLanguageIDTibetan	= 1105,
	msoLanguageIDTigrignaEthiopic	= 1139,
	msoLanguageIDTigrignaEritrea	= 2163,
	msoLanguageIDTsonga	= 1073,
	msoLanguageIDTswana	= 1074,
	msoLanguageIDTurkish	= 1055,
	msoLanguageIDTurkmen	= 1090,
	msoLanguageIDUkrainian	= 1058,
	msoLanguageIDUrdu	= 1056,
	msoLanguageIDUzbekCyrillic	= 2115,
	msoLanguageIDUzbekLatin	= 1091,
	msoLanguageIDVenda	= 1075,
	msoLanguageIDVietnamese	= 1066,
	msoLanguageIDWelsh	= 1106,
	msoLanguageIDXhosa	= 1076,
	msoLanguageIDYi	= 1144,
	msoLanguageIDYiddish	= 1085,
	msoLanguageIDYoruba	= 1130,
	msoLanguageIDZulu	= 1077
    } 	MsoLanguageID;

typedef 
enum MsoScreenSize
    {	msoScreenSize544x376	= 0,
	msoScreenSize640x480	= 1,
	msoScreenSize720x512	= 2,
	msoScreenSize800x600	= 3,
	msoScreenSize1024x768	= 4,
	msoScreenSize1152x882	= 5,
	msoScreenSize1152x900	= 6,
	msoScreenSize1280x1024	= 7,
	msoScreenSize1600x1200	= 8,
	msoScreenSize1800x1440	= 9,
	msoScreenSize1920x1200	= 10
    } 	MsoScreenSize;

typedef 
enum MsoCharacterSet
    {	msoCharacterSetArabic	= 1,
	msoCharacterSetCyrillic	= 2,
	msoCharacterSetEnglishWesternEuropeanOtherLatinScript	= 3,
	msoCharacterSetGreek	= 4,
	msoCharacterSetHebrew	= 5,
	msoCharacterSetJapanese	= 6,
	msoCharacterSetKorean	= 7,
	msoCharacterSetMultilingualUnicode	= 8,
	msoCharacterSetSimplifiedChinese	= 9,
	msoCharacterSetThai	= 10,
	msoCharacterSetTraditionalChinese	= 11,
	msoCharacterSetVietnamese	= 12
    } 	MsoCharacterSet;

typedef 
enum MsoEncoding
    {	msoEncodingThai	= 874,
	msoEncodingJapaneseShiftJIS	= 932,
	msoEncodingSimplifiedChineseGBK	= 936,
	msoEncodingKorean	= 949,
	msoEncodingTraditionalChineseBig5	= 950,
	msoEncodingUnicodeLittleEndian	= 1200,
	msoEncodingUnicodeBigEndian	= 1201,
	msoEncodingCentralEuropean	= 1250,
	msoEncodingCyrillic	= 1251,
	msoEncodingWestern	= 1252,
	msoEncodingGreek	= 1253,
	msoEncodingTurkish	= 1254,
	msoEncodingHebrew	= 1255,
	msoEncodingArabic	= 1256,
	msoEncodingBaltic	= 1257,
	msoEncodingVietnamese	= 1258,
	msoEncodingAutoDetect	= 50001,
	msoEncodingJapaneseAutoDetect	= 50932,
	msoEncodingSimplifiedChineseAutoDetect	= 50936,
	msoEncodingKoreanAutoDetect	= 50949,
	msoEncodingTraditionalChineseAutoDetect	= 50950,
	msoEncodingCyrillicAutoDetect	= 51251,
	msoEncodingGreekAutoDetect	= 51253,
	msoEncodingArabicAutoDetect	= 51256,
	msoEncodingISO88591Latin1	= 28591,
	msoEncodingISO88592CentralEurope	= 28592,
	msoEncodingISO88593Latin3	= 28593,
	msoEncodingISO88594Baltic	= 28594,
	msoEncodingISO88595Cyrillic	= 28595,
	msoEncodingISO88596Arabic	= 28596,
	msoEncodingISO88597Greek	= 28597,
	msoEncodingISO88598Hebrew	= 28598,
	msoEncodingISO88599Turkish	= 28599,
	msoEncodingISO885915Latin9	= 28605,
	msoEncodingISO88598HebrewLogical	= 38598,
	msoEncodingISO2022JPNoHalfwidthKatakana	= 50220,
	msoEncodingISO2022JPJISX02021984	= 50221,
	msoEncodingISO2022JPJISX02011989	= 50222,
	msoEncodingISO2022KR	= 50225,
	msoEncodingISO2022CNTraditionalChinese	= 50227,
	msoEncodingISO2022CNSimplifiedChinese	= 50229,
	msoEncodingMacRoman	= 10000,
	msoEncodingMacJapanese	= 10001,
	msoEncodingMacTraditionalChineseBig5	= 10002,
	msoEncodingMacKorean	= 10003,
	msoEncodingMacArabic	= 10004,
	msoEncodingMacHebrew	= 10005,
	msoEncodingMacGreek1	= 10006,
	msoEncodingMacCyrillic	= 10007,
	msoEncodingMacSimplifiedChineseGB2312	= 10008,
	msoEncodingMacRomania	= 10010,
	msoEncodingMacUkraine	= 10017,
	msoEncodingMacLatin2	= 10029,
	msoEncodingMacIcelandic	= 10079,
	msoEncodingMacTurkish	= 10081,
	msoEncodingMacCroatia	= 10082,
	msoEncodingEBCDICUSCanada	= 37,
	msoEncodingEBCDICInternational	= 500,
	msoEncodingEBCDICMultilingualROECELatin2	= 870,
	msoEncodingEBCDICGreekModern	= 875,
	msoEncodingEBCDICTurkishLatin5	= 1026,
	msoEncodingEBCDICGermany	= 20273,
	msoEncodingEBCDICDenmarkNorway	= 20277,
	msoEncodingEBCDICFinlandSweden	= 20278,
	msoEncodingEBCDICItaly	= 20280,
	msoEncodingEBCDICLatinAmericaSpain	= 20284,
	msoEncodingEBCDICUnitedKingdom	= 20285,
	msoEncodingEBCDICJapaneseKatakanaExtended	= 20290,
	msoEncodingEBCDICFrance	= 20297,
	msoEncodingEBCDICArabic	= 20420,
	msoEncodingEBCDICGreek	= 20423,
	msoEncodingEBCDICHebrew	= 20424,
	msoEncodingEBCDICKoreanExtended	= 20833,
	msoEncodingEBCDICThai	= 20838,
	msoEncodingEBCDICIcelandic	= 20871,
	msoEncodingEBCDICTurkish	= 20905,
	msoEncodingEBCDICRussian	= 20880,
	msoEncodingEBCDICSerbianBulgarian	= 21025,
	msoEncodingEBCDICJapaneseKatakanaExtendedAndJapanese	= 50930,
	msoEncodingEBCDICUSCanadaAndJapanese	= 50931,
	msoEncodingEBCDICKoreanExtendedAndKorean	= 50933,
	msoEncodingEBCDICSimplifiedChineseExtendedAndSimplifiedChinese	= 50935,
	msoEncodingEBCDICUSCanadaAndTraditionalChinese	= 50937,
	msoEncodingEBCDICJapaneseLatinExtendedAndJapanese	= 50939,
	msoEncodingOEMUnitedStates	= 437,
	msoEncodingOEMGreek437G	= 737,
	msoEncodingOEMBaltic	= 775,
	msoEncodingOEMMultilingualLatinI	= 850,
	msoEncodingOEMMultilingualLatinII	= 852,
	msoEncodingOEMCyrillic	= 855,
	msoEncodingOEMTurkish	= 857,
	msoEncodingOEMPortuguese	= 860,
	msoEncodingOEMIcelandic	= 861,
	msoEncodingOEMHebrew	= 862,
	msoEncodingOEMCanadianFrench	= 863,
	msoEncodingOEMArabic	= 864,
	msoEncodingOEMNordic	= 865,
	msoEncodingOEMCyrillicII	= 866,
	msoEncodingOEMModernGreek	= 869,
	msoEncodingEUCJapanese	= 51932,
	msoEncodingEUCChineseSimplifiedChinese	= 51936,
	msoEncodingEUCKorean	= 51949,
	msoEncodingEUCTaiwaneseTraditionalChinese	= 51950,
	msoEncodingISCIIDevanagari	= 57002,
	msoEncodingISCIIBengali	= 57003,
	msoEncodingISCIITamil	= 57004,
	msoEncodingISCIITelugu	= 57005,
	msoEncodingISCIIAssamese	= 57006,
	msoEncodingISCIIOriya	= 57007,
	msoEncodingISCIIKannada	= 57008,
	msoEncodingISCIIMalayalam	= 57009,
	msoEncodingISCIIGujarati	= 57010,
	msoEncodingISCIIPunjabi	= 57011,
	msoEncodingArabicASMO	= 708,
	msoEncodingArabicTransparentASMO	= 720,
	msoEncodingKoreanJohab	= 1361,
	msoEncodingTaiwanCNS	= 20000,
	msoEncodingTaiwanTCA	= 20001,
	msoEncodingTaiwanEten	= 20002,
	msoEncodingTaiwanIBM5550	= 20003,
	msoEncodingTaiwanTeleText	= 20004,
	msoEncodingTaiwanWang	= 20005,
	msoEncodingIA5IRV	= 20105,
	msoEncodingIA5German	= 20106,
	msoEncodingIA5Swedish	= 20107,
	msoEncodingIA5Norwegian	= 20108,
	msoEncodingUSASCII	= 20127,
	msoEncodingT61	= 20261,
	msoEncodingISO6937NonSpacingAccent	= 20269,
	msoEncodingKOI8R	= 20866,
	msoEncodingExtAlphaLowercase	= 21027,
	msoEncodingKOI8U	= 21866,
	msoEncodingEuropa3	= 29001,
	msoEncodingHZGBSimplifiedChinese	= 52936,
	msoEncodingSimplifiedChineseGB18030	= 54936,
	msoEncodingUTF7	= 65000,
	msoEncodingUTF8	= 65001
    } 	MsoEncoding;

typedef 
enum MsoHTMLProjectOpen
    {	msoHTMLProjectOpenSourceView	= 1,
	msoHTMLProjectOpenTextView	= 2
    } 	MsoHTMLProjectOpen;

typedef 
enum MsoHTMLProjectState
    {	msoHTMLProjectStateDocumentLocked	= 1,
	msoHTMLProjectStateProjectLocked	= 2,
	msoHTMLProjectStateDocumentProjectUnlocked	= 3
    } 	MsoHTMLProjectState;

typedef 
enum MsoFileDialogType
    {	msoFileDialogOpen	= 1,
	msoFileDialogSaveAs	= 2,
	msoFileDialogFilePicker	= 3,
	msoFileDialogFolderPicker	= 4
    } 	MsoFileDialogType;

typedef 
enum MsoFileDialogView
    {	msoFileDialogViewList	= 1,
	msoFileDialogViewDetails	= 2,
	msoFileDialogViewProperties	= 3,
	msoFileDialogViewPreview	= 4,
	msoFileDialogViewThumbnail	= 5,
	msoFileDialogViewLargeIcons	= 6,
	msoFileDialogViewSmallIcons	= 7,
	msoFileDialogViewWebView	= 8,
	msoFileDialogViewTiles	= 9
    } 	MsoFileDialogView;

typedef 
enum MsoAutomationSecurity
    {	msoAutomationSecurityLow	= 1,
	msoAutomationSecurityByUI	= 2,
	msoAutomationSecurityForceDisable	= 3
    } 	MsoAutomationSecurity;

typedef 
enum MailFormat
    {	mfPlainText	= 1,
	mfHTML	= 2,
	mfRTF	= 3
    } 	MailFormat;

typedef 
enum MsoAlertButtonType
    {	msoAlertButtonOK	= 0,
	msoAlertButtonOKCancel	= 1,
	msoAlertButtonAbortRetryIgnore	= 2,
	msoAlertButtonYesNoCancel	= 3,
	msoAlertButtonYesNo	= 4,
	msoAlertButtonRetryCancel	= 5,
	msoAlertButtonYesAllNoCancel	= 6
    } 	MsoAlertButtonType;

typedef 
enum MsoAlertIconType
    {	msoAlertIconNoIcon	= 0,
	msoAlertIconCritical	= 1,
	msoAlertIconQuery	= 2,
	msoAlertIconWarning	= 3,
	msoAlertIconInfo	= 4
    } 	MsoAlertIconType;

typedef 
enum MsoAlertDefaultType
    {	msoAlertDefaultFirst	= 0,
	msoAlertDefaultSecond	= 1,
	msoAlertDefaultThird	= 2,
	msoAlertDefaultFourth	= 3,
	msoAlertDefaultFifth	= 4
    } 	MsoAlertDefaultType;

typedef 
enum MsoAlertCancelType
    {	msoAlertCancelDefault	= -1,
	msoAlertCancelFirst	= 0,
	msoAlertCancelSecond	= 1,
	msoAlertCancelThird	= 2,
	msoAlertCancelFourth	= 3,
	msoAlertCancelFifth	= 4
    } 	MsoAlertCancelType;

typedef 
enum MsoSearchIn
    {	msoSearchInMyComputer	= 0,
	msoSearchInOutlook	= 1,
	msoSearchInMyNetworkPlaces	= 2,
	msoSearchInCustom	= 3
    } 	MsoSearchIn;

typedef 
enum MsoTargetBrowser
    {	msoTargetBrowserV3	= 0,
	msoTargetBrowserV4	= 1,
	msoTargetBrowserIE4	= 2,
	msoTargetBrowserIE5	= 3,
	msoTargetBrowserIE6	= 4
    } 	MsoTargetBrowser;

typedef 
enum MsoOrgChartOrientation
    {	msoOrgChartOrientationMixed	= -2,
	msoOrgChartOrientationVertical	= 1
    } 	MsoOrgChartOrientation;

typedef 
enum MsoOrgChartLayoutType
    {	msoOrgChartLayoutMixed	= -2,
	msoOrgChartLayoutStandard	= 1,
	msoOrgChartLayoutBothHanging	= 2,
	msoOrgChartLayoutLeftHanging	= 3,
	msoOrgChartLayoutRightHanging	= 4,
	msoOrgChartLayoutDefault	= 5
    } 	MsoOrgChartLayoutType;

typedef 
enum MsoRelativeNodePosition
    {	msoBeforeNode	= 1,
	msoAfterNode	= 2,
	msoBeforeFirstSibling	= 3,
	msoAfterLastSibling	= 4
    } 	MsoRelativeNodePosition;

typedef 
enum MsoDiagramType
    {	msoDiagramMixed	= -2,
	msoDiagramOrgChart	= 1,
	msoDiagramCycle	= 2,
	msoDiagramRadial	= 3,
	msoDiagramPyramid	= 4,
	msoDiagramVenn	= 5,
	msoDiagramTarget	= 6
    } 	MsoDiagramType;

typedef 
enum MsoDiagramNodeType
    {	msoDiagramNode	= 1,
	msoDiagramAssistant	= 2
    } 	MsoDiagramNodeType;

typedef 
enum MsoMoveRow
    {	msoMoveRowFirst	= -4,
	msoMoveRowPrev	= -3,
	msoMoveRowNext	= -2,
	msoMoveRowNbr	= -1
    } 	MsoMoveRow;

typedef 
enum MsoFilterComparison
    {	msoFilterComparisonEqual	= 0,
	msoFilterComparisonNotEqual	= 1,
	msoFilterComparisonLessThan	= 2,
	msoFilterComparisonGreaterThan	= 3,
	msoFilterComparisonLessThanEqual	= 4,
	msoFilterComparisonGreaterThanEqual	= 5,
	msoFilterComparisonIsBlank	= 6,
	msoFilterComparisonIsNotBlank	= 7,
	msoFilterComparisonContains	= 8,
	msoFilterComparisonNotContains	= 9
    } 	MsoFilterComparison;

typedef 
enum MsoFilterConjunction
    {	msoFilterConjunctionAnd	= 0,
	msoFilterConjunctionOr	= 1
    } 	MsoFilterConjunction;

typedef 
enum MsoFileNewSection
    {	msoOpenDocument	= 0,
	msoNew	= 1,
	msoNewfromExistingFile	= 2,
	msoNewfromTemplate	= 3,
	msoBottomSection	= 4
    } 	MsoFileNewSection;

typedef 
enum MsoFileNewAction
    {	msoEditFile	= 0,
	msoCreateNewFile	= 1,
	msoOpenFile	= 2
    } 	MsoFileNewAction;

typedef 
enum MsoLanguageIDHidden
    {	msoLanguageIDChineseHongKong	= 3076,
	msoLanguageIDChineseMacao	= 5124,
	msoLanguageIDEnglishTrinidad	= 11273
    } 	MsoLanguageIDHidden;

typedef 
enum MsoSharedWorkspaceTaskStatus
    {	msoSharedWorkspaceTaskStatusNotStarted	= 1,
	msoSharedWorkspaceTaskStatusInProgress	= 2,
	msoSharedWorkspaceTaskStatusCompleted	= 3,
	msoSharedWorkspaceTaskStatusDeferred	= 4,
	msoSharedWorkspaceTaskStatusWaiting	= 5
    } 	MsoSharedWorkspaceTaskStatus;

typedef 
enum MsoSharedWorkspaceTaskPriority
    {	msoSharedWorkspaceTaskPriorityHigh	= 1,
	msoSharedWorkspaceTaskPriorityNormal	= 2,
	msoSharedWorkspaceTaskPriorityLow	= 3
    } 	MsoSharedWorkspaceTaskPriority;

typedef 
enum MsoSyncVersionType
    {	msoSyncVersionLastViewed	= 0,
	msoSyncVersionServer	= 1
    } 	MsoSyncVersionType;

typedef 
enum MsoSyncConflictResolutionType
    {	msoSyncConflictClientWins	= 0,
	msoSyncConflictServerWins	= 1,
	msoSyncConflictMerge	= 2
    } 	MsoSyncConflictResolutionType;

typedef 
enum MsoSyncCompareType
    {	msoSyncCompareAndMerge	= 0,
	msoSyncCompareSideBySide	= 1
    } 	MsoSyncCompareType;

typedef 
enum MsoSyncAvailableType
    {	msoSyncAvailableNone	= 0,
	msoSyncAvailableOffline	= 1,
	msoSyncAvailableAnywhere	= 2
    } 	MsoSyncAvailableType;

typedef 
enum MsoSyncEventType
    {	msoSyncEventDownloadInitiated	= 0,
	msoSyncEventDownloadSucceeded	= 1,
	msoSyncEventDownloadFailed	= 2,
	msoSyncEventUploadInitiated	= 3,
	msoSyncEventUploadSucceeded	= 4,
	msoSyncEventUploadFailed	= 5,
	msoSyncEventDownloadNoChange	= 6,
	msoSyncEventOffline	= 7
    } 	MsoSyncEventType;

typedef 
enum MsoSyncErrorType
    {	msoSyncErrorNone	= 0,
	msoSyncErrorUnauthorizedUser	= 1,
	msoSyncErrorCouldNotConnect	= 2,
	msoSyncErrorOutOfSpace	= 3,
	msoSyncErrorFileNotFound	= 4,
	msoSyncErrorFileTooLarge	= 5,
	msoSyncErrorFileInUse	= 6,
	msoSyncErrorVirusUpload	= 7,
	msoSyncErrorVirusDownload	= 8,
	msoSyncErrorUnknownUpload	= 9,
	msoSyncErrorUnknownDownload	= 10,
	msoSyncErrorCouldNotOpen	= 11,
	msoSyncErrorCouldNotUpdate	= 12,
	msoSyncErrorCouldNotCompare	= 13,
	msoSyncErrorCouldNotResolve	= 14,
	msoSyncErrorNoNetwork	= 15,
	msoSyncErrorUnknown	= 16
    } 	MsoSyncErrorType;

typedef 
enum MsoSyncStatusType
    {	msoSyncStatusNoSharedWorkspace	= 0,
	msoSyncStatusNotRoaming	= 0,
	msoSyncStatusLatest	= 1,
	msoSyncStatusNewerAvailable	= 2,
	msoSyncStatusLocalChanges	= 3,
	msoSyncStatusConflict	= 4,
	msoSyncStatusSuspended	= 5,
	msoSyncStatusError	= 6
    } 	MsoSyncStatusType;

typedef 
enum MsoPermission
    {	msoPermissionView	= 1,
	msoPermissionRead	= 1,
	msoPermissionEdit	= 2,
	msoPermissionSave	= 4,
	msoPermissionExtract	= 8,
	msoPermissionChange	= 15,
	msoPermissionPrint	= 16,
	msoPermissionObjModel	= 32,
	msoPermissionFullControl	= 64,
	msoPermissionAllCommon	= 127
    } 	MsoPermission;

typedef 
enum MsoMetaPropertyType
    {	msoMetaPropertyTypeUnknown	= 0,
	msoMetaPropertyTypeBoolean	= 1,
	msoMetaPropertyTypeChoice	= 2,
	msoMetaPropertyTypeCalculated	= 3,
	msoMetaPropertyTypeComputed	= 4,
	msoMetaPropertyTypeCurrency	= 5,
	msoMetaPropertyTypeDateTime	= 6,
	msoMetaPropertyTypeFillInChoice	= 7,
	msoMetaPropertyTypeGuid	= 8,
	msoMetaPropertyTypeInteger	= 9,
	msoMetaPropertyTypeLookup	= 10,
	msoMetaPropertyTypeMultiChoiceLookup	= 11,
	msoMetaPropertyTypeMultiChoice	= 12,
	msoMetaPropertyTypeMultiChoiceFillIn	= 13,
	msoMetaPropertyTypeNote	= 14,
	msoMetaPropertyTypeNumber	= 15,
	msoMetaPropertyTypeText	= 16,
	msoMetaPropertyTypeUrl	= 17,
	msoMetaPropertyTypeUser	= 18,
	msoMetaPropertyTypeUserMulti	= 19,
	msoMetaPropertyTypeBusinessData	= 20,
	msoMetaPropertyTypeBusinessDataSecondary	= 21,
	msoMetaPropertyTypeMax	= 22
    } 	MsoMetaPropertyType;

typedef 
enum MsoSignatureSubset
    {	msoSignatureSubsetSignaturesAllSigs	= 0,
	msoSignatureSubsetSignaturesNonVisible	= 1,
	msoSignatureSubsetSignatureLines	= 2,
	msoSignatureSubsetSignatureLinesSigned	= 3,
	msoSignatureSubsetSignatureLinesUnsigned	= 4,
	msoSignatureSubsetAll	= 5
    } 	MsoSignatureSubset;

typedef 
enum MsoDocInspectorStatus
    {	msoDocInspectorStatusDocOk	= 0,
	msoDocInspectorStatusIssueFound	= 1,
	msoDocInspectorStatusError	= 2
    } 	MsoDocInspectorStatus;

typedef 
enum SignatureDetail
    {	sigdetLocalSigningTime	= 0,
	sigdetApplicationName	= 1,
	sigdetApplicationVersion	= 2,
	sigdetOfficeVersion	= 3,
	sigdetWindowsVersion	= 4,
	sigdetNumberOfMonitors	= 5,
	sigdetHorizResolution	= 6,
	sigdetVertResolution	= 7,
	sigdetColorDepth	= 8,
	sigdetSignedData	= 9,
	sigdetDocPreviewImg	= 10,
	sigdetIPFormHash	= 11,
	sigdetIPCurrentView	= 12,
	sigdetSignatureType	= 13,
	sigdetHashAlgorithm	= 14,
	sigdetShouldShowViewWarning	= 15,
	sigdetDelSuggSigner	= 16,
	sigdetDelSuggSignerSet	= 17,
	sigdetDelSuggSignerLine2	= 18,
	sigdetDelSuggSignerLine2Set	= 19,
	sigdetDelSuggSignerEmail	= 20,
	sigdetDelSuggSignerEmailSet	= 21
    } 	SignatureDetail;

typedef 
enum CertificateDetail
    {	certdetAvailable	= 0,
	certdetSubject	= 1,
	certdetIssuer	= 2,
	certdetExpirationDate	= 3,
	certdetThumbprint	= 4
    } 	CertificateDetail;

typedef 
enum ContentVerificationResults
    {	contverresError	= 0,
	contverresVerifying	= 1,
	contverresUnverified	= 2,
	contverresValid	= 3,
	contverresModified	= 4
    } 	ContentVerificationResults;

typedef 
enum CertificateVerificationResults
    {	certverresError	= 0,
	certverresVerifying	= 1,
	certverresUnverified	= 2,
	certverresValid	= 3,
	certverresInvalid	= 4,
	certverresExpired	= 5,
	certverresRevoked	= 6,
	certverresUntrusted	= 7
    } 	CertificateVerificationResults;

typedef 
enum SignatureLineImage
    {	siglnimgSoftwareRequired	= 0,
	siglnimgUnsigned	= 1,
	siglnimgSignedValid	= 2,
	siglnimgSignedInvalid	= 3,
	siglnimgSigned	= 4
    } 	SignatureLineImage;

typedef 
enum SignatureProviderDetail
    {	sigprovdetUrl	= 0,
	sigprovdetHashAlgorithm	= 1,
	sigprovdetUIOnly	= 2,
	sigprovdetUseOfficeUI	= 3,
	sigprovdetUseOfficeStampUI	= 4
    } 	SignatureProviderDetail;

typedef 
enum SignatureType
    {	sigtypeUnknown	= 0,
	sigtypeNonVisible	= 1,
	sigtypeSignatureLine	= 2,
	sigtypeMax	= 3
    } 	SignatureType;

typedef 
enum MsoCustomXMLNodeType
    {	msoCustomXMLNodeElement	= 1,
	msoCustomXMLNodeAttribute	= 2,
	msoCustomXMLNodeText	= 3,
	msoCustomXMLNodeCData	= 4,
	msoCustomXMLNodeProcessingInstruction	= 7,
	msoCustomXMLNodeComment	= 8,
	msoCustomXMLNodeDocument	= 9
    } 	MsoCustomXMLNodeType;

typedef 
enum MsoCustomXMLValidationErrorType
    {	msoCustomXMLValidationErrorSchemaGenerated	= 0,
	msoCustomXMLValidationErrorAutomaticallyCleared	= 1,
	msoCustomXMLValidationErrorManual	= 2
    } 	MsoCustomXMLValidationErrorType;

typedef 
enum MsoTextureAlignment
    {	msoTextureAlignmentMixed	= -2,
	msoTextureTopLeft	= 0,
	msoTextureTop	= 1,
	msoTextureTopRight	= 2,
	msoTextureLeft	= 3,
	msoTextureCenter	= 4,
	msoTextureRight	= 5,
	msoTextureBottomLeft	= 6,
	msoTextureBottom	= 7,
	msoTextureBottomRight	= 8
    } 	MsoTextureAlignment;

typedef 
enum MsoSoftEdgeType
    {	msoSoftEdgeTypeMixed	= -2,
	msoSoftEdgeTypeNone	= 0,
	msoSoftEdgeType1	= 1,
	msoSoftEdgeType2	= 2,
	msoSoftEdgeType3	= 3,
	msoSoftEdgeType4	= 4,
	msoSoftEdgeType5	= 5,
	msoSoftEdgeType6	= 6
    } 	MsoSoftEdgeType;

typedef 
enum MsoReflectionType
    {	msoReflectionTypeMixed	= -2,
	msoReflectionTypeNone	= 0,
	msoReflectionType1	= 1,
	msoReflectionType2	= 2,
	msoReflectionType3	= 3,
	msoReflectionType4	= 4,
	msoReflectionType5	= 5,
	msoReflectionType6	= 6,
	msoReflectionType7	= 7,
	msoReflectionType8	= 8,
	msoReflectionType9	= 9
    } 	MsoReflectionType;

typedef 
enum MsoPresetCamera
    {	msoPresetCameraMixed	= -2,
	msoCameraLegacyObliqueTopLeft	= 1,
	msoCameraLegacyObliqueTop	= 2,
	msoCameraLegacyObliqueTopRight	= 3,
	msoCameraLegacyObliqueLeft	= 4,
	msoCameraLegacyObliqueFront	= 5,
	msoCameraLegacyObliqueRight	= 6,
	msoCameraLegacyObliqueBottomLeft	= 7,
	msoCameraLegacyObliqueBottom	= 8,
	msoCameraLegacyObliqueBottomRight	= 9,
	msoCameraLegacyPerspectiveTopLeft	= 10,
	msoCameraLegacyPerspectiveTop	= 11,
	msoCameraLegacyPerspectiveTopRight	= 12,
	msoCameraLegacyPerspectiveLeft	= 13,
	msoCameraLegacyPerspectiveFront	= 14,
	msoCameraLegacyPerspectiveRight	= 15,
	msoCameraLegacyPerspectiveBottomLeft	= 16,
	msoCameraLegacyPerspectiveBottom	= 17,
	msoCameraLegacyPerspectiveBottomRight	= 18,
	msoCameraOrthographicFront	= 19,
	msoCameraIsometricTopUp	= 20,
	msoCameraIsometricTopDown	= 21,
	msoCameraIsometricBottomUp	= 22,
	msoCameraIsometricBottomDown	= 23,
	msoCameraIsometricLeftUp	= 24,
	msoCameraIsometricLeftDown	= 25,
	msoCameraIsometricRightUp	= 26,
	msoCameraIsometricRightDown	= 27,
	msoCameraIsometricOffAxis1Left	= 28,
	msoCameraIsometricOffAxis1Right	= 29,
	msoCameraIsometricOffAxis1Top	= 30,
	msoCameraIsometricOffAxis2Left	= 31,
	msoCameraIsometricOffAxis2Right	= 32,
	msoCameraIsometricOffAxis2Top	= 33,
	msoCameraIsometricOffAxis3Left	= 34,
	msoCameraIsometricOffAxis3Right	= 35,
	msoCameraIsometricOffAxis3Bottom	= 36,
	msoCameraIsometricOffAxis4Left	= 37,
	msoCameraIsometricOffAxis4Right	= 38,
	msoCameraIsometricOffAxis4Bottom	= 39,
	msoCameraObliqueTopLeft	= 40,
	msoCameraObliqueTop	= 41,
	msoCameraObliqueTopRight	= 42,
	msoCameraObliqueLeft	= 43,
	msoCameraObliqueRight	= 44,
	msoCameraObliqueBottomLeft	= 45,
	msoCameraObliqueBottom	= 46,
	msoCameraObliqueBottomRight	= 47,
	msoCameraPerspectiveFront	= 48,
	msoCameraPerspectiveLeft	= 49,
	msoCameraPerspectiveRight	= 50,
	msoCameraPerspectiveAbove	= 51,
	msoCameraPerspectiveBelow	= 52,
	msoCameraPerspectiveAboveLeftFacing	= 53,
	msoCameraPerspectiveAboveRightFacing	= 54,
	msoCameraPerspectiveContrastingLeftFacing	= 55,
	msoCameraPerspectiveContrastingRightFacing	= 56,
	msoCameraPerspectiveHeroicLeftFacing	= 57,
	msoCameraPerspectiveHeroicRightFacing	= 58,
	msoCameraPerspectiveHeroicExtremeLeftFacing	= 59,
	msoCameraPerspectiveHeroicExtremeRightFacing	= 60,
	msoCameraPerspectiveRelaxed	= 61,
	msoCameraPerspectiveRelaxedModerately	= 62
    } 	MsoPresetCamera;

typedef 
enum MsoBevelType
    {	msoBevelTypeMixed	= -2,
	msoBevelNone	= 1,
	msoBevelRelaxedInset	= 2,
	msoBevelCircle	= 3,
	msoBevelSlope	= 4,
	msoBevelCross	= 5,
	msoBevelAngle	= 6,
	msoBevelSoftRound	= 7,
	msoBevelConvex	= 8,
	msoBevelCoolSlant	= 9,
	msoBevelDivot	= 10,
	msoBevelRiblet	= 11,
	msoBevelHardEdge	= 12,
	msoBevelArtDeco	= 13
    } 	MsoBevelType;

typedef 
enum MsoLightRigType
    {	msoLightRigMixed	= -2,
	msoLightRigLegacyFlat1	= 1,
	msoLightRigLegacyFlat2	= 2,
	msoLightRigLegacyFlat3	= 3,
	msoLightRigLegacyFlat4	= 4,
	msoLightRigLegacyNormal1	= 5,
	msoLightRigLegacyNormal2	= 6,
	msoLightRigLegacyNormal3	= 7,
	msoLightRigLegacyNormal4	= 8,
	msoLightRigLegacyHarsh1	= 9,
	msoLightRigLegacyHarsh2	= 10,
	msoLightRigLegacyHarsh3	= 11,
	msoLightRigLegacyHarsh4	= 12,
	msoLightRigThreePoint	= 13,
	msoLightRigBalanced	= 14,
	msoLightRigSoft	= 15,
	msoLightRigHarsh	= 16,
	msoLightRigFlood	= 17,
	msoLightRigContrasting	= 18,
	msoLightRigMorning	= 19,
	msoLightRigSunrise	= 20,
	msoLightRigSunset	= 21,
	msoLightRigChilly	= 22,
	msoLightRigFreezing	= 23,
	msoLightRigFlat	= 24,
	msoLightRigTwoPoint	= 25,
	msoLightRigGlow	= 26,
	msoLightRigBrightRoom	= 27
    } 	MsoLightRigType;

typedef 
enum MsoParagraphAlignment
    {	msoAlignMixed	= -2,
	msoAlignLeft	= 1,
	msoAlignCenter	= 2,
	msoAlignRight	= 3,
	msoAlignJustify	= 4,
	msoAlignDistribute	= 5,
	msoAlignThaiDistribute	= 6,
	msoAlignJustifyLow	= 7
    } 	MsoParagraphAlignment;

typedef 
enum MsoTextStrike
    {	msoStrikeMixed	= -2,
	msoNoStrike	= 0,
	msoSingleStrike	= 1,
	msoDoubleStrike	= 2
    } 	MsoTextStrike;

typedef 
enum MsoTextCaps
    {	msoCapsMixed	= -2,
	msoNoCaps	= 0,
	msoSmallCaps	= 1,
	msoAllCaps	= 2
    } 	MsoTextCaps;

typedef 
enum MsoTextUnderlineType
    {	msoUnderlineMixed	= -2,
	msoNoUnderline	= 0,
	msoUnderlineWords	= 1,
	msoUnderlineSingleLine	= 2,
	msoUnderlineDoubleLine	= 3,
	msoUnderlineHeavyLine	= 4,
	msoUnderlineDottedLine	= 5,
	msoUnderlineDottedHeavyLine	= 6,
	msoUnderlineDashLine	= 7,
	msoUnderlineDashHeavyLine	= 8,
	msoUnderlineDashLongLine	= 9,
	msoUnderlineDashLongHeavyLine	= 10,
	msoUnderlineDotDashLine	= 11,
	msoUnderlineDotDashHeavyLine	= 12,
	msoUnderlineDotDotDashLine	= 13,
	msoUnderlineDotDotDashHeavyLine	= 14,
	msoUnderlineWavyLine	= 15,
	msoUnderlineWavyHeavyLine	= 16,
	msoUnderlineWavyDoubleLine	= 17
    } 	MsoTextUnderlineType;

typedef 
enum MsoTextTabAlign
    {	msoTabAlignMixed	= -2,
	msoTabAlignLeft	= 0,
	msoTabAlignCenter	= 1,
	msoTabAlignRight	= 2,
	msoTabAlignDecimal	= 3
    } 	MsoTextTabAlign;

typedef 
enum MsoTextCharWrap
    {	msoCharWrapMixed	= -2,
	msoNoCharWrap	= 0,
	msoStandardCharWrap	= 1,
	msoStrictCharWrap	= 2,
	msoCustomCharWrap	= 3
    } 	MsoTextCharWrap;

typedef 
enum MsoTextFontAlign
    {	msoFontAlignMixed	= -2,
	msoFontAlignAuto	= 0,
	msoFontAlignTop	= 1,
	msoFontAlignCenter	= 2,
	msoFontAlignBaseline	= 3,
	msoFontAlignBottom	= 4
    } 	MsoTextFontAlign;

typedef 
enum MsoAutoSize
    {	msoAutoSizeMixed	= -2,
	msoAutoSizeNone	= 0,
	msoAutoSizeShapeToFitText	= 1,
	msoAutoSizeTextToFitShape	= 2
    } 	MsoAutoSize;

typedef 
enum MsoPathFormat
    {	msoPathTypeMixed	= -2,
	msoPathTypeNone	= 0,
	msoPathType1	= 1,
	msoPathType2	= 2,
	msoPathType3	= 3,
	msoPathType4	= 4
    } 	MsoPathFormat;

typedef 
enum MsoWarpFormat
    {	msoWarpFormatMixed	= -2,
	msoWarpFormat1	= 0,
	msoWarpFormat2	= 1,
	msoWarpFormat3	= 2,
	msoWarpFormat4	= 3,
	msoWarpFormat5	= 4,
	msoWarpFormat6	= 5,
	msoWarpFormat7	= 6,
	msoWarpFormat8	= 7,
	msoWarpFormat9	= 8,
	msoWarpFormat10	= 9,
	msoWarpFormat11	= 10,
	msoWarpFormat12	= 11,
	msoWarpFormat13	= 12,
	msoWarpFormat14	= 13,
	msoWarpFormat15	= 14,
	msoWarpFormat16	= 15,
	msoWarpFormat17	= 16,
	msoWarpFormat18	= 17,
	msoWarpFormat19	= 18,
	msoWarpFormat20	= 19,
	msoWarpFormat21	= 20,
	msoWarpFormat22	= 21,
	msoWarpFormat23	= 22,
	msoWarpFormat24	= 23,
	msoWarpFormat25	= 24,
	msoWarpFormat26	= 25,
	msoWarpFormat27	= 26,
	msoWarpFormat28	= 27,
	msoWarpFormat29	= 28,
	msoWarpFormat30	= 29,
	msoWarpFormat31	= 30,
	msoWarpFormat32	= 31,
	msoWarpFormat33	= 32,
	msoWarpFormat34	= 33,
	msoWarpFormat35	= 34,
	msoWarpFormat36	= 35,
	msoWarpFormat37	= 36
    } 	MsoWarpFormat;

typedef 
enum MsoTextChangeCase
    {	msoCaseSentence	= 1,
	msoCaseLower	= 2,
	msoCaseUpper	= 3,
	msoCaseTitle	= 4,
	msoCaseToggle	= 5
    } 	MsoTextChangeCase;

typedef 
enum MsoDateTimeFormat
    {	msoDateTimeFormatMixed	= -2,
	msoDateTimeMdyy	= 1,
	msoDateTimeddddMMMMddyyyy	= 2,
	msoDateTimedMMMMyyyy	= 3,
	msoDateTimeMMMMdyyyy	= 4,
	msoDateTimedMMMyy	= 5,
	msoDateTimeMMMMyy	= 6,
	msoDateTimeMMyy	= 7,
	msoDateTimeMMddyyHmm	= 8,
	msoDateTimeMMddyyhmmAMPM	= 9,
	msoDateTimeHmm	= 10,
	msoDateTimeHmmss	= 11,
	msoDateTimehmmAMPM	= 12,
	msoDateTimehmmssAMPM	= 13,
	msoDateTimeFigureOut	= 14
    } 	MsoDateTimeFormat;

typedef 
enum MsoThemeColorSchemeIndex
    {	msoThemeDark1	= 1,
	msoThemeLight1	= 2,
	msoThemeDark2	= 3,
	msoThemeLight2	= 4,
	msoThemeAccent1	= 5,
	msoThemeAccent2	= 6,
	msoThemeAccent3	= 7,
	msoThemeAccent4	= 8,
	msoThemeAccent5	= 9,
	msoThemeAccent6	= 10,
	msoThemeHyperlink	= 11,
	msoThemeFollowedHyperlink	= 12
    } 	MsoThemeColorSchemeIndex;

typedef 
enum MsoThemeColorIndex
    {	msoThemeColorMixed	= -2,
	msoNotThemeColor	= 0,
	msoThemeColorDark1	= 1,
	msoThemeColorLight1	= 2,
	msoThemeColorDark2	= 3,
	msoThemeColorLight2	= 4,
	msoThemeColorAccent1	= 5,
	msoThemeColorAccent2	= 6,
	msoThemeColorAccent3	= 7,
	msoThemeColorAccent4	= 8,
	msoThemeColorAccent5	= 9,
	msoThemeColorAccent6	= 10,
	msoThemeColorHyperlink	= 11,
	msoThemeColorFollowedHyperlink	= 12,
	msoThemeColorText1	= 13,
	msoThemeColorBackground1	= 14,
	msoThemeColorText2	= 15,
	msoThemeColorBackground2	= 16
    } 	MsoThemeColorIndex;

typedef 
enum MsoFontLanguageIndex
    {	msoThemeLatin	= 1,
	msoThemeComplexScript	= 2,
	msoThemeEastAsian	= 3
    } 	MsoFontLanguageIndex;

typedef 
enum MsoShapeStyleIndex
    {	msoShapeStyleMixed	= -2,
	msoShapeStyleNotAPreset	= 0,
	msoShapeStylePreset1	= 1,
	msoShapeStylePreset2	= 2,
	msoShapeStylePreset3	= 3,
	msoShapeStylePreset4	= 4,
	msoShapeStylePreset5	= 5,
	msoShapeStylePreset6	= 6,
	msoShapeStylePreset7	= 7,
	msoShapeStylePreset8	= 8,
	msoShapeStylePreset9	= 9,
	msoShapeStylePreset10	= 10,
	msoShapeStylePreset11	= 11,
	msoShapeStylePreset12	= 12,
	msoShapeStylePreset13	= 13,
	msoShapeStylePreset14	= 14,
	msoShapeStylePreset15	= 15,
	msoShapeStylePreset16	= 16,
	msoShapeStylePreset17	= 17,
	msoShapeStylePreset18	= 18,
	msoShapeStylePreset19	= 19,
	msoShapeStylePreset20	= 20,
	msoShapeStylePreset21	= 21,
	msoShapeStylePreset22	= 22,
	msoShapeStylePreset23	= 23,
	msoShapeStylePreset24	= 24,
	msoShapeStylePreset25	= 25,
	msoShapeStylePreset26	= 26,
	msoShapeStylePreset27	= 27,
	msoShapeStylePreset28	= 28,
	msoShapeStylePreset29	= 29,
	msoShapeStylePreset30	= 30,
	msoShapeStylePreset31	= 31,
	msoShapeStylePreset32	= 32,
	msoShapeStylePreset33	= 33,
	msoShapeStylePreset34	= 34,
	msoShapeStylePreset35	= 35,
	msoShapeStylePreset36	= 36,
	msoShapeStylePreset37	= 37,
	msoShapeStylePreset38	= 38,
	msoShapeStylePreset39	= 39,
	msoShapeStylePreset40	= 40,
	msoShapeStylePreset41	= 41,
	msoShapeStylePreset42	= 42,
	msoLineStylePreset1	= 10001,
	msoLineStylePreset2	= 10002,
	msoLineStylePreset3	= 10003,
	msoLineStylePreset4	= 10004,
	msoLineStylePreset5	= 10005,
	msoLineStylePreset6	= 10006,
	msoLineStylePreset7	= 10007,
	msoLineStylePreset8	= 10008,
	msoLineStylePreset9	= 10009,
	msoLineStylePreset10	= 10010,
	msoLineStylePreset11	= 10011,
	msoLineStylePreset12	= 10012,
	msoLineStylePreset13	= 10013,
	msoLineStylePreset14	= 10014,
	msoLineStylePreset15	= 10015,
	msoLineStylePreset16	= 10016,
	msoLineStylePreset17	= 10017,
	msoLineStylePreset18	= 10018,
	msoLineStylePreset19	= 10019,
	msoLineStylePreset20	= 10020,
	msoLineStylePreset21	= 10021
    } 	MsoShapeStyleIndex;

typedef 
enum MsoBackgroundStyleIndex
    {	msoBackgroundStyleMixed	= -2,
	msoBackgroundStyleNotAPreset	= 0,
	msoBackgroundStylePreset1	= 1,
	msoBackgroundStylePreset2	= 2,
	msoBackgroundStylePreset3	= 3,
	msoBackgroundStylePreset4	= 4,
	msoBackgroundStylePreset5	= 5,
	msoBackgroundStylePreset6	= 6,
	msoBackgroundStylePreset7	= 7,
	msoBackgroundStylePreset8	= 8,
	msoBackgroundStylePreset9	= 9,
	msoBackgroundStylePreset10	= 10,
	msoBackgroundStylePreset11	= 11,
	msoBackgroundStylePreset12	= 12
    } 	MsoBackgroundStyleIndex;

typedef 
enum MsoCTPDockPosition
    {	msoCTPDockPositionLeft	= 0,
	msoCTPDockPositionTop	= 1,
	msoCTPDockPositionRight	= 2,
	msoCTPDockPositionBottom	= 3,
	msoCTPDockPositionFloating	= 4
    } 	MsoCTPDockPosition;

typedef 
enum MsoCTPDockPositionRestrict
    {	msoCTPDockPositionRestrictNone	= 0,
	msoCTPDockPositionRestrictNoChange	= 1,
	msoCTPDockPositionRestrictNoHorizontal	= 2,
	msoCTPDockPositionRestrictNoVertical	= 3
    } 	MsoCTPDockPositionRestrict;

typedef 
enum RibbonControlSize
    {	RibbonControlSizeRegular	= 0,
	RibbonControlSizeLarge	= 1
    } 	RibbonControlSize;

typedef 
enum MsoShadowStyle
    {	msoShadowStyleMixed	= -2,
	msoShadowStyleInnerShadow	= 1,
	msoShadowStyleOuterShadow	= 2
    } 	MsoShadowStyle;

typedef 
enum MsoTextDirection
    {	msoTextDirectionMixed	= -2,
	msoTextDirectionLeftToRight	= 1,
	msoTextDirectionRightToLeft	= 2
    } 	MsoTextDirection;

typedef 
enum MsoChartElementType
    {	msoElementChartTitleNone	= 0,
	msoElementChartTitleCenteredOverlay	= 1,
	msoElementChartTitleAboveChart	= 2,
	msoElementLegendNone	= 100,
	msoElementLegendRight	= 101,
	msoElementLegendTop	= 102,
	msoElementLegendLeft	= 103,
	msoElementLegendBottom	= 104,
	msoElementLegendRightOverlay	= 105,
	msoElementLegendLeftOverlay	= 106,
	msoElementDataLabelNone	= 200,
	msoElementDataLabelShow	= 201,
	msoElementDataLabelCenter	= 202,
	msoElementDataLabelInsideEnd	= 203,
	msoElementDataLabelInsideBase	= 204,
	msoElementDataLabelOutSideEnd	= 205,
	msoElementDataLabelLeft	= 206,
	msoElementDataLabelRight	= 207,
	msoElementDataLabelTop	= 208,
	msoElementDataLabelBottom	= 209,
	msoElementDataLabelBestFit	= 210,
	msoElementDataLabelCallout	= 211,
	msoElementPrimaryCategoryAxisTitleNone	= 300,
	msoElementPrimaryCategoryAxisTitleAdjacentToAxis	= 301,
	msoElementPrimaryCategoryAxisTitleBelowAxis	= 302,
	msoElementPrimaryCategoryAxisTitleRotated	= 303,
	msoElementPrimaryCategoryAxisTitleVertical	= 304,
	msoElementPrimaryCategoryAxisTitleHorizontal	= 305,
	msoElementPrimaryValueAxisTitleNone	= 306,
	msoElementPrimaryValueAxisTitleAdjacentToAxis	= 306,
	msoElementPrimaryValueAxisTitleBelowAxis	= 308,
	msoElementPrimaryValueAxisTitleRotated	= 309,
	msoElementPrimaryValueAxisTitleVertical	= 310,
	msoElementPrimaryValueAxisTitleHorizontal	= 311,
	msoElementSecondaryCategoryAxisTitleNone	= 312,
	msoElementSecondaryCategoryAxisTitleAdjacentToAxis	= 313,
	msoElementSecondaryCategoryAxisTitleBelowAxis	= 314,
	msoElementSecondaryCategoryAxisTitleRotated	= 315,
	msoElementSecondaryCategoryAxisTitleVertical	= 316,
	msoElementSecondaryCategoryAxisTitleHorizontal	= 317,
	msoElementSecondaryValueAxisTitleNone	= 318,
	msoElementSecondaryValueAxisTitleAdjacentToAxis	= 319,
	msoElementSecondaryValueAxisTitleBelowAxis	= 320,
	msoElementSecondaryValueAxisTitleRotated	= 321,
	msoElementSecondaryValueAxisTitleVertical	= 322,
	msoElementSecondaryValueAxisTitleHorizontal	= 323,
	msoElementSeriesAxisTitleNone	= 324,
	msoElementSeriesAxisTitleRotated	= 325,
	msoElementSeriesAxisTitleVertical	= 326,
	msoElementSeriesAxisTitleHorizontal	= 327,
	msoElementPrimaryValueGridLinesNone	= 328,
	msoElementPrimaryValueGridLinesMinor	= 329,
	msoElementPrimaryValueGridLinesMajor	= 330,
	msoElementPrimaryValueGridLinesMinorMajor	= 331,
	msoElementPrimaryCategoryGridLinesNone	= 332,
	msoElementPrimaryCategoryGridLinesMinor	= 333,
	msoElementPrimaryCategoryGridLinesMajor	= 334,
	msoElementPrimaryCategoryGridLinesMinorMajor	= 335,
	msoElementSecondaryValueGridLinesNone	= 336,
	msoElementSecondaryValueGridLinesMinor	= 337,
	msoElementSecondaryValueGridLinesMajor	= 338,
	msoElementSecondaryValueGridLinesMinorMajor	= 339,
	msoElementSecondaryCategoryGridLinesNone	= 340,
	msoElementSecondaryCategoryGridLinesMinor	= 341,
	msoElementSecondaryCategoryGridLinesMajor	= 342,
	msoElementSecondaryCategoryGridLinesMinorMajor	= 343,
	msoElementSeriesAxisGridLinesNone	= 344,
	msoElementSeriesAxisGridLinesMinor	= 345,
	msoElementSeriesAxisGridLinesMajor	= 346,
	msoElementSeriesAxisGridLinesMinorMajor	= 347,
	msoElementPrimaryCategoryAxisNone	= 348,
	msoElementPrimaryCategoryAxisShow	= 349,
	msoElementPrimaryCategoryAxisWithoutLabels	= 350,
	msoElementPrimaryCategoryAxisReverse	= 351,
	msoElementPrimaryValueAxisNone	= 352,
	msoElementPrimaryValueAxisShow	= 353,
	msoElementPrimaryValueAxisThousands	= 354,
	msoElementPrimaryValueAxisMillions	= 355,
	msoElementPrimaryValueAxisBillions	= 356,
	msoElementPrimaryValueAxisLogScale	= 357,
	msoElementSecondaryCategoryAxisNone	= 358,
	msoElementSecondaryCategoryAxisShow	= 359,
	msoElementSecondaryCategoryAxisWithoutLabels	= 360,
	msoElementSecondaryCategoryAxisReverse	= 361,
	msoElementSecondaryValueAxisNone	= 362,
	msoElementSecondaryValueAxisShow	= 363,
	msoElementSecondaryValueAxisThousands	= 364,
	msoElementSecondaryValueAxisMillions	= 365,
	msoElementSecondaryValueAxisBillions	= 366,
	msoElementSecondaryValueAxisLogScale	= 367,
	msoElementSeriesAxisNone	= 368,
	msoElementSeriesAxisShow	= 369,
	msoElementSeriesAxisWithoutLabeling	= 370,
	msoElementSeriesAxisReverse	= 371,
	msoElementPrimaryCategoryAxisThousands	= 372,
	msoElementPrimaryCategoryAxisMillions	= 373,
	msoElementPrimaryCategoryAxisBillions	= 374,
	msoElementPrimaryCategoryAxisLogScale	= 375,
	msoElementSecondaryCategoryAxisThousands	= 376,
	msoElementSecondaryCategoryAxisMillions	= 377,
	msoElementSecondaryCategoryAxisBillions	= 378,
	msoElementSecondaryCategoryAxisLogScale	= 379,
	msoElementDataTableNone	= 500,
	msoElementDataTableShow	= 501,
	msoElementDataTableWithLegendKeys	= 502,
	msoElementTrendlineNone	= 600,
	msoElementTrendlineAddLinear	= 601,
	msoElementTrendlineAddExponential	= 602,
	msoElementTrendlineAddLinearForecast	= 603,
	msoElementTrendlineAddTwoPeriodMovingAverage	= 604,
	msoElementErrorBarNone	= 700,
	msoElementErrorBarStandardError	= 701,
	msoElementErrorBarPercentage	= 702,
	msoElementErrorBarStandardDeviation	= 703,
	msoElementLineNone	= 800,
	msoElementLineDropLine	= 801,
	msoElementLineHiLoLine	= 802,
	msoElementLineSeriesLine	= 803,
	msoElementLineDropHiLoLine	= 804,
	msoElementUpDownBarsNone	= 900,
	msoElementUpDownBarsShow	= 901,
	msoElementPlotAreaNone	= 1000,
	msoElementPlotAreaShow	= 1001,
	msoElementChartWallNone	= 1100,
	msoElementChartWallShow	= 1101,
	msoElementChartFloorNone	= 1200,
	msoElementChartFloorShow	= 1201
    } 	MsoChartElementType;

typedef 
enum MsoBulletType
    {	msoBulletMixed	= -2,
	msoBulletNone	= 0,
	msoBulletUnnumbered	= 1,
	msoBulletNumbered	= 2,
	msoBulletPicture	= 3
    } 	MsoBulletType;

typedef 
enum MsoNumberedBulletStyle
    {	msoBulletStyleMixed	= -2,
	msoBulletAlphaLCPeriod	= 0,
	msoBulletAlphaUCPeriod	= 1,
	msoBulletArabicParenRight	= 2,
	msoBulletArabicPeriod	= 3,
	msoBulletRomanLCParenBoth	= 4,
	msoBulletRomanLCParenRight	= 5,
	msoBulletRomanLCPeriod	= 6,
	msoBulletRomanUCPeriod	= 7,
	msoBulletAlphaLCParenBoth	= 8,
	msoBulletAlphaLCParenRight	= 9,
	msoBulletAlphaUCParenBoth	= 10,
	msoBulletAlphaUCParenRight	= 11,
	msoBulletArabicParenBoth	= 12,
	msoBulletArabicPlain	= 13,
	msoBulletRomanUCParenBoth	= 14,
	msoBulletRomanUCParenRight	= 15,
	msoBulletSimpChinPlain	= 16,
	msoBulletSimpChinPeriod	= 17,
	msoBulletCircleNumDBPlain	= 18,
	msoBulletCircleNumWDWhitePlain	= 19,
	msoBulletCircleNumWDBlackPlain	= 20,
	msoBulletTradChinPlain	= 21,
	msoBulletTradChinPeriod	= 22,
	msoBulletArabicAlphaDash	= 23,
	msoBulletArabicAbjadDash	= 24,
	msoBulletHebrewAlphaDash	= 25,
	msoBulletKanjiKoreanPlain	= 26,
	msoBulletKanjiKoreanPeriod	= 27,
	msoBulletArabicDBPlain	= 28,
	msoBulletArabicDBPeriod	= 29,
	msoBulletThaiAlphaPeriod	= 30,
	msoBulletThaiAlphaParenRight	= 31,
	msoBulletThaiAlphaParenBoth	= 32,
	msoBulletThaiNumPeriod	= 33,
	msoBulletThaiNumParenRight	= 34,
	msoBulletThaiNumParenBoth	= 35,
	msoBulletHindiAlphaPeriod	= 36,
	msoBulletHindiNumPeriod	= 37,
	msoBulletKanjiSimpChinDBPeriod	= 38,
	msoBulletHindiNumParenRight	= 39,
	msoBulletHindiAlpha1Period	= 40
    } 	MsoNumberedBulletStyle;

typedef 
enum MsoTabStopType
    {	msoTabStopMixed	= -2,
	msoTabStopLeft	= 1,
	msoTabStopCenter	= 2,
	msoTabStopRight	= 3,
	msoTabStopDecimal	= 4
    } 	MsoTabStopType;

typedef 
enum MsoBaselineAlignment
    {	msoBaselineAlignMixed	= -2,
	msoBaselineAlignBaseline	= 1,
	msoBaselineAlignTop	= 2,
	msoBaselineAlignCenter	= 3,
	msoBaselineAlignFarEast50	= 4,
	msoBaselineAlignAuto	= 5
    } 	MsoBaselineAlignment;

typedef 
enum EncryptionProviderDetail
    {	encprovdetUrl	= 0,
	encprovdetAlgorithm	= 1,
	encprovdetBlockCipher	= 2,
	encprovdetCipherBlockSize	= 3,
	encprovdetCipherMode	= 4
    } 	EncryptionProviderDetail;

typedef 
enum EncryptionCipherMode
    {	cipherModeECB	= 0,
	cipherModeCBC	= 1
    } 	EncryptionCipherMode;

typedef 
enum MsoClipboardFormat
    {	msoClipboardFormatMixed	= -2,
	msoClipboardFormatNative	= 1,
	msoClipboardFormatHTML	= 2,
	msoClipboardFormatRTF	= 3,
	msoClipboardFormatPlainText	= 4
    } 	MsoClipboardFormat;

typedef 
enum MsoBlogCategorySupport
    {	msoBlogNoCategories	= 0,
	msoBlogOneCategory	= 1,
	msoBlogMultipleCategories	= 2
    } 	MsoBlogCategorySupport;

typedef 
enum MsoBlogImageType
    {	msoblogImageTypeJPEG	= 1,
	msoblogImageTypeGIF	= 2,
	msoblogImageTypePNG	= 3
    } 	MsoBlogImageType;

typedef 
enum MsoSmartArtNodePosition
    {	msoSmartArtNodeDefault	= 1,
	msoSmartArtNodeAfter	= 2,
	msoSmartArtNodeBefore	= 3,
	msoSmartArtNodeAbove	= 4,
	msoSmartArtNodeBelow	= 5
    } 	MsoSmartArtNodePosition;

typedef 
enum MsoSmartArtNodeType
    {	msoSmartArtNodeTypeDefault	= 1,
	msoSmartArtNodeTypeAssistant	= 2
    } 	MsoSmartArtNodeType;

typedef 
enum MsoPickerField
    {	msoPickerFieldUnknown	= 0,
	msoPickerFieldDateTime	= 1,
	msoPickerFieldNumber	= 2,
	msoPickerFieldText	= 3,
	msoPickerFieldUser	= 4,
	msoPickerFieldMax	= 5
    } 	MsoPickerField;

typedef 
enum MsoContactCardAddressType
    {	msoContactCardAddressTypeUnknown	= 0,
	msoContactCardAddressTypeOutlook	= 1,
	msoContactCardAddressTypeSMTP	= 2,
	msoContactCardAddressTypeIM	= 3
    } 	MsoContactCardAddressType;

typedef 
enum MsoContactCardType
    {	msoContactCardTypeEnterpriseContact	= 0,
	msoContactCardTypePersonalContact	= 1,
	msoContactCardTypeUnknownContact	= 2,
	msoContactCardTypeEnterpriseGroup	= 3,
	msoContactCardTypePersonalDistributionList	= 4
    } 	MsoContactCardType;

typedef 
enum MsoPictureEffectType
    {	msoEffectNone	= 0,
	msoEffectBackgroundRemoval	= 1,
	msoEffectBlur	= 2,
	msoEffectBrightnessContrast	= 3,
	msoEffectCement	= 4,
	msoEffectCrisscrossEtching	= 5,
	msoEffectChalkSketch	= 6,
	msoEffectColorTemperature	= 7,
	msoEffectCutout	= 8,
	msoEffectFilmGrain	= 9,
	msoEffectGlass	= 10,
	msoEffectGlowDiffused	= 11,
	msoEffectGlowEdges	= 12,
	msoEffectLightScreen	= 13,
	msoEffectLineDrawing	= 14,
	msoEffectMarker	= 15,
	msoEffectMosiaicBubbles	= 16,
	msoEffectPaintBrush	= 17,
	msoEffectPaintStrokes	= 18,
	msoEffectPastelsSmooth	= 19,
	msoEffectPencilGrayscale	= 20,
	msoEffectPencilSketch	= 21,
	msoEffectPhotocopy	= 22,
	msoEffectPlasticWrap	= 23,
	msoEffectSaturation	= 24,
	msoEffectSharpenSoften	= 25,
	msoEffectTexturizer	= 26,
	msoEffectWatercolorSponge	= 27
    } 	MsoPictureEffectType;

typedef 
enum MsoIodGroup
    {	msoIodGroupPIAs	= 0,
	msoIodGroupVSTOR35Mgd	= 1,
	msoIodGroupVSTOR40Mgd	= 2
    } 	MsoIodGroup;

typedef 
enum BackstageGroupStyle
    {	BackstageGroupStyleNormal	= 0,
	BackstageGroupStyleWarning	= 1,
	BackstageGroupStyleError	= 2
    } 	BackstageGroupStyle;

typedef 
enum MsoFileValidationMode
    {	msoFileValidationDefault	= 0,
	msoFileValidationSkip	= 1
    } 	MsoFileValidationMode;

typedef 
enum MsoContactCardStyle
    {	msoContactCardHover	= 0,
	msoContactCardFull	= 1
    } 	MsoContactCardStyle;

typedef 
enum MsoMergeCmd
    {	msoMergeUnion	= 1,
	msoMergeCombine	= 2,
	msoMergeIntersect	= 3,
	msoMergeSubtract	= 4,
	msoMergeFragment	= 5
    } 	MsoMergeCmd;

typedef 
enum MsoLineCapStyle
    {	msoLineCapMixed	= -2,
	msoLineCapSquare	= 1,
	msoLineCapRound	= 2,
	msoLineCapFlat	= 3
    } 	MsoLineCapStyle;

typedef 
enum MsoLineJoinStyle
    {	msoLineJoinMixed	= -2,
	msoLineJoinRound	= 1,
	msoLineJoinBevel	= 2,
	msoLineJoinMiter	= 3
    } 	MsoLineJoinStyle;

typedef 
enum MsoLineFillType
    {	msoLineFillMixed	= -2,
	msoLineFillNone	= 0,
	msoLineFillSolid	= 1,
	msoLineFillPatterned	= 2,
	msoLineFillGradient	= 3,
	msoLineFillTextured	= 4,
	msoLineFillBackground	= 5,
	msoLineFillPicture	= 6
    } 	MsoLineFillType;

typedef 
enum MsoChartFieldType
    {	msoChartFieldBubbleSize	= 1,
	msoChartFieldCategoryName	= 2,
	msoChartFieldPercentage	= 3,
	msoChartFieldSeriesName	= 4,
	msoChartFieldValue	= 5,
	msoChartFieldFormula	= 6,
	msoChartFieldRange	= 7
    } 	MsoChartFieldType;

typedef 
enum MsoBroadcastState
    {	NoBroadcast	= 0,
	BroadcastStarted	= 1,
	BroadcastPaused	= 2
    } 	MsoBroadcastState;

typedef 
enum MsoBroadcastCapabilities
    {	BroadcastCapFileSizeLimited	= 1,
	BroadcastCapSupportsMeetingNotes	= 2,
	BroadcastCapSupportsUpdateDoc	= 4
    } 	MsoBroadcastCapabilities;

typedef 
enum MsoPictureCompress
    {	msoPictureCompressDocDefault	= -1,
	msoPictureCompressFalse	= 0,
	msoPictureCompressTrue	= 1
    } 	MsoPictureCompress;

typedef 
enum XlChartType
    {	xlColumnClustered	= 51,
	xlColumnStacked	= 52,
	xlColumnStacked100	= 53,
	xl3DColumnClustered	= 54,
	xl3DColumnStacked	= 55,
	xl3DColumnStacked100	= 56,
	xlBarClustered	= 57,
	xlBarStacked	= 58,
	xlBarStacked100	= 59,
	xl3DBarClustered	= 60,
	xl3DBarStacked	= 61,
	xl3DBarStacked100	= 62,
	xlLineStacked	= 63,
	xlLineStacked100	= 64,
	xlLineMarkers	= 65,
	xlLineMarkersStacked	= 66,
	xlLineMarkersStacked100	= 67,
	xlPieOfPie	= 68,
	xlPieExploded	= 69,
	xl3DPieExploded	= 70,
	xlBarOfPie	= 71,
	xlXYScatterSmooth	= 72,
	xlXYScatterSmoothNoMarkers	= 73,
	xlXYScatterLines	= 74,
	xlXYScatterLinesNoMarkers	= 75,
	xlAreaStacked	= 76,
	xlAreaStacked100	= 77,
	xl3DAreaStacked	= 78,
	xl3DAreaStacked100	= 79,
	xlDoughnutExploded	= 80,
	xlRadarMarkers	= 81,
	xlRadarFilled	= 82,
	xlSurface	= 83,
	xlSurfaceWireframe	= 84,
	xlSurfaceTopView	= 85,
	xlSurfaceTopViewWireframe	= 86,
	xlBubble	= 15,
	xlBubble3DEffect	= 87,
	xlStockHLC	= 88,
	xlStockOHLC	= 89,
	xlStockVHLC	= 90,
	xlStockVOHLC	= 91,
	xlCylinderColClustered	= 92,
	xlCylinderColStacked	= 93,
	xlCylinderColStacked100	= 94,
	xlCylinderBarClustered	= 95,
	xlCylinderBarStacked	= 96,
	xlCylinderBarStacked100	= 97,
	xlCylinderCol	= 98,
	xlConeColClustered	= 99,
	xlConeColStacked	= 100,
	xlConeColStacked100	= 101,
	xlConeBarClustered	= 102,
	xlConeBarStacked	= 103,
	xlConeBarStacked100	= 104,
	xlConeCol	= 105,
	xlPyramidColClustered	= 106,
	xlPyramidColStacked	= 107,
	xlPyramidColStacked100	= 108,
	xlPyramidBarClustered	= 109,
	xlPyramidBarStacked	= 110,
	xlPyramidBarStacked100	= 111,
	xlPyramidCol	= 112,
	xl3DColumn	= -4100,
	xlLine	= 4,
	xl3DLine	= -4101,
	xl3DPie	= -4102,
	xlPie	= 5,
	xlXYScatter	= -4169,
	xl3DArea	= -4098,
	xlArea	= 1,
	xlDoughnut	= -4120,
	xlRadar	= -4151,
	xlCombo	= -4152,
	xlComboColumnClusteredLine	= 113,
	xlComboColumnClusteredLineSecondaryAxis	= 114,
	xlComboAreaStackedColumnClustered	= 115,
	xlOtherCombinations	= 116,
	xlSuggestedChart	= -2
    } 	XlChartType;



#ifndef __PowerPoint_LIBRARY_DEFINED__
#define __PowerPoint_LIBRARY_DEFINED__

/* library PowerPoint */
/* [helpcontext][helpfile][helpstring][version][uuid] */ 

typedef float single;

typedef /* [uuid] */  DECLSPEC_UUID("B2CD8E94-209B-4FB7-8FA1-D3F682EFBEDA") 
enum PpWindowState
    {	ppWindowNormal	= 1,
	ppWindowMinimized	= 2,
	ppWindowMaximized	= 3
    } 	PpWindowState;

typedef /* [uuid] */  DECLSPEC_UUID("9FB6D0E7-A063-4A3A-9E65-4BA1C830F0F7") 
enum PpArrangeStyle
    {	ppArrangeTiled	= 1,
	ppArrangeCascade	= 2
    } 	PpArrangeStyle;

typedef /* [uuid] */  DECLSPEC_UUID("B57D2996-78B9-4F86-A0D3-EFD3A3896175") 
enum PpViewType
    {	ppViewSlide	= 1,
	ppViewSlideMaster	= 2,
	ppViewNotesPage	= 3,
	ppViewHandoutMaster	= 4,
	ppViewNotesMaster	= 5,
	ppViewOutline	= 6,
	ppViewSlideSorter	= 7,
	ppViewTitleMaster	= 8,
	ppViewNormal	= 9,
	ppViewPrintPreview	= 10,
	ppViewThumbnails	= 11,
	ppViewMasterThumbnails	= 12
    } 	PpViewType;

typedef /* [uuid] */  DECLSPEC_UUID("6D5A5494-54C4-4E15-90D3-62E5AAAD2605") 
enum PpColorSchemeIndex
    {	ppSchemeColorMixed	= -2,
	ppNotSchemeColor	= 0,
	ppBackground	= 1,
	ppForeground	= 2,
	ppShadow	= 3,
	ppTitle	= 4,
	ppFill	= 5,
	ppAccent1	= 6,
	ppAccent2	= 7,
	ppAccent3	= 8
    } 	PpColorSchemeIndex;

typedef /* [uuid] */  DECLSPEC_UUID("3724E368-DD02-4F14-A8B5-FF234A727CCC") 
enum PpSlideSizeType
    {	ppSlideSizeOnScreen	= 1,
	ppSlideSizeLetterPaper	= 2,
	ppSlideSizeA4Paper	= 3,
	ppSlideSize35MM	= 4,
	ppSlideSizeOverhead	= 5,
	ppSlideSizeBanner	= 6,
	ppSlideSizeCustom	= 7,
	ppSlideSizeLedgerPaper	= 8,
	ppSlideSizeA3Paper	= 9,
	ppSlideSizeB4ISOPaper	= 10,
	ppSlideSizeB5ISOPaper	= 11,
	ppSlideSizeB4JISPaper	= 12,
	ppSlideSizeB5JISPaper	= 13,
	ppSlideSizeHagakiCard	= 14,
	ppSlideSizeOnScreen16x9	= 15,
	ppSlideSizeOnScreen16x10	= 16
    } 	PpSlideSizeType;

typedef /* [uuid] */  DECLSPEC_UUID("01F8F37D-78D4-4920-B2A2-227B23A7ED66") 
enum PpSaveAsFileType
    {	ppSaveAsPresentation	= 1,
	ppSaveAsPowerPoint7	= 2,
	ppSaveAsPowerPoint4	= 3,
	ppSaveAsPowerPoint3	= 4,
	ppSaveAsTemplate	= 5,
	ppSaveAsRTF	= 6,
	ppSaveAsShow	= 7,
	ppSaveAsAddIn	= 8,
	ppSaveAsPowerPoint4FarEast	= 10,
	ppSaveAsDefault	= 11,
	ppSaveAsHTML	= 12,
	ppSaveAsHTMLv3	= 13,
	ppSaveAsHTMLDual	= 14,
	ppSaveAsMetaFile	= 15,
	ppSaveAsGIF	= 16,
	ppSaveAsJPG	= 17,
	ppSaveAsPNG	= 18,
	ppSaveAsBMP	= 19,
	ppSaveAsWebArchive	= 20,
	ppSaveAsTIF	= 21,
	ppSaveAsPresForReview	= 22,
	ppSaveAsEMF	= 23,
	ppSaveAsOpenXMLPresentation	= 24,
	ppSaveAsOpenXMLPresentationMacroEnabled	= 25,
	ppSaveAsOpenXMLTemplate	= 26,
	ppSaveAsOpenXMLTemplateMacroEnabled	= 27,
	ppSaveAsOpenXMLShow	= 28,
	ppSaveAsOpenXMLShowMacroEnabled	= 29,
	ppSaveAsOpenXMLAddin	= 30,
	ppSaveAsOpenXMLTheme	= 31,
	ppSaveAsPDF	= 32,
	ppSaveAsXPS	= 33,
	ppSaveAsXMLPresentation	= 34,
	ppSaveAsOpenDocumentPresentation	= 35,
	ppSaveAsOpenXMLPicturePresentation	= 36,
	ppSaveAsWMV	= 37,
	ppSaveAsStrictOpenXMLPresentation	= 38,
	ppSaveAsMP4	= 39,
        ppSaveAsOFD	= 102,
	ppSaveAsExternalConverter	= 64000
    } 	PpSaveAsFileType;

typedef /* [uuid] */  DECLSPEC_UUID("F7F8452D-30C2-4866-87BF-455A9FD787D8") 
enum PpTextStyleType
    {	ppDefaultStyle	= 1,
	ppTitleStyle	= 2,
	ppBodyStyle	= 3
    } 	PpTextStyleType;

typedef /* [uuid] */  DECLSPEC_UUID("2D20E1EA-0942-4429-8725-916EA0D91045") 
enum PpSlideLayout
    {	ppLayoutMixed	= -2,
	ppLayoutTitle	= 1,
	ppLayoutText	= 2,
	ppLayoutTwoColumnText	= 3,
	ppLayoutTable	= 4,
	ppLayoutTextAndChart	= 5,
	ppLayoutChartAndText	= 6,
	ppLayoutOrgchart	= 7,
	ppLayoutChart	= 8,
	ppLayoutTextAndClipart	= 9,
	ppLayoutClipartAndText	= 10,
	ppLayoutTitleOnly	= 11,
	ppLayoutBlank	= 12,
	ppLayoutTextAndObject	= 13,
	ppLayoutObjectAndText	= 14,
	ppLayoutLargeObject	= 15,
	ppLayoutObject	= 16,
	ppLayoutTextAndMediaClip	= 17,
	ppLayoutMediaClipAndText	= 18,
	ppLayoutObjectOverText	= 19,
	ppLayoutTextOverObject	= 20,
	ppLayoutTextAndTwoObjects	= 21,
	ppLayoutTwoObjectsAndText	= 22,
	ppLayoutTwoObjectsOverText	= 23,
	ppLayoutFourObjects	= 24,
	ppLayoutVerticalText	= 25,
	ppLayoutClipArtAndVerticalText	= 26,
	ppLayoutVerticalTitleAndText	= 27,
	ppLayoutVerticalTitleAndTextOverChart	= 28,
	ppLayoutTwoObjects	= 29,
	ppLayoutObjectAndTwoObjects	= 30,
	ppLayoutTwoObjectsAndObject	= 31,
	ppLayoutCustom	= 32,
	ppLayoutSectionHeader	= 33,
	ppLayoutComparison	= 34,
	ppLayoutContentWithCaption	= 35,
	ppLayoutPictureWithCaption	= 36
    } 	PpSlideLayout;

typedef /* [uuid] */  DECLSPEC_UUID("B5A60D8C-605C-4784-BA39-FB4B9AAEEA01") 
enum PpEntryEffect
    {	ppEffectMixed	= -2,
	ppEffectNone	= 0,
	ppEffectCut	= 257,
	ppEffectCutThroughBlack	= 258,
	ppEffectRandom	= 513,
	ppEffectBlindsHorizontal	= 769,
	ppEffectBlindsVertical	= 770,
	ppEffectCheckerboardAcross	= 1025,
	ppEffectCheckerboardDown	= 1026,
	ppEffectCoverLeft	= 1281,
	ppEffectCoverUp	= 1282,
	ppEffectCoverRight	= 1283,
	ppEffectCoverDown	= 1284,
	ppEffectCoverLeftUp	= 1285,
	ppEffectCoverRightUp	= 1286,
	ppEffectCoverLeftDown	= 1287,
	ppEffectCoverRightDown	= 1288,
	ppEffectDissolve	= 1537,
	ppEffectFade	= 1793,
	ppEffectUncoverLeft	= 2049,
	ppEffectUncoverUp	= 2050,
	ppEffectUncoverRight	= 2051,
	ppEffectUncoverDown	= 2052,
	ppEffectUncoverLeftUp	= 2053,
	ppEffectUncoverRightUp	= 2054,
	ppEffectUncoverLeftDown	= 2055,
	ppEffectUncoverRightDown	= 2056,
	ppEffectRandomBarsHorizontal	= 2305,
	ppEffectRandomBarsVertical	= 2306,
	ppEffectStripsUpLeft	= 2561,
	ppEffectStripsUpRight	= 2562,
	ppEffectStripsDownLeft	= 2563,
	ppEffectStripsDownRight	= 2564,
	ppEffectStripsLeftUp	= 2565,
	ppEffectStripsRightUp	= 2566,
	ppEffectStripsLeftDown	= 2567,
	ppEffectStripsRightDown	= 2568,
	ppEffectWipeLeft	= 2817,
	ppEffectWipeUp	= 2818,
	ppEffectWipeRight	= 2819,
	ppEffectWipeDown	= 2820,
	ppEffectBoxOut	= 3073,
	ppEffectBoxIn	= 3074,
	ppEffectFlyFromLeft	= 3329,
	ppEffectFlyFromTop	= 3330,
	ppEffectFlyFromRight	= 3331,
	ppEffectFlyFromBottom	= 3332,
	ppEffectFlyFromTopLeft	= 3333,
	ppEffectFlyFromTopRight	= 3334,
	ppEffectFlyFromBottomLeft	= 3335,
	ppEffectFlyFromBottomRight	= 3336,
	ppEffectPeekFromLeft	= 3337,
	ppEffectPeekFromDown	= 3338,
	ppEffectPeekFromRight	= 3339,
	ppEffectPeekFromUp	= 3340,
	ppEffectCrawlFromLeft	= 3341,
	ppEffectCrawlFromUp	= 3342,
	ppEffectCrawlFromRight	= 3343,
	ppEffectCrawlFromDown	= 3344,
	ppEffectZoomIn	= 3345,
	ppEffectZoomInSlightly	= 3346,
	ppEffectZoomOut	= 3347,
	ppEffectZoomOutSlightly	= 3348,
	ppEffectZoomCenter	= 3349,
	ppEffectZoomBottom	= 3350,
	ppEffectStretchAcross	= 3351,
	ppEffectStretchLeft	= 3352,
	ppEffectStretchUp	= 3353,
	ppEffectStretchRight	= 3354,
	ppEffectStretchDown	= 3355,
	ppEffectSwivel	= 3356,
	ppEffectSpiral	= 3357,
	ppEffectSplitHorizontalOut	= 3585,
	ppEffectSplitHorizontalIn	= 3586,
	ppEffectSplitVerticalOut	= 3587,
	ppEffectSplitVerticalIn	= 3588,
	ppEffectFlashOnceFast	= 3841,
	ppEffectFlashOnceMedium	= 3842,
	ppEffectFlashOnceSlow	= 3843,
	ppEffectAppear	= 3844,
	ppEffectCircleOut	= 3845,
	ppEffectDiamondOut	= 3846,
	ppEffectCombHorizontal	= 3847,
	ppEffectCombVertical	= 3848,
	ppEffectFadeSmoothly	= 3849,
	ppEffectNewsflash	= 3850,
	ppEffectPlusOut	= 3851,
	ppEffectPushDown	= 3852,
	ppEffectPushLeft	= 3853,
	ppEffectPushRight	= 3854,
	ppEffectPushUp	= 3855,
	ppEffectWedge	= 3856,
	ppEffectWheel1Spoke	= 3857,
	ppEffectWheel2Spokes	= 3858,
	ppEffectWheel3Spokes	= 3859,
	ppEffectWheel4Spokes	= 3860,
	ppEffectWheel8Spokes	= 3861,
	ppEffectWheelReverse1Spoke	= 3862,
	ppEffectVortexLeft	= 3863,
	ppEffectVortexUp	= 3864,
	ppEffectVortexRight	= 3865,
	ppEffectVortexDown	= 3866,
	ppEffectRippleCenter	= 3867,
	ppEffectRippleRightUp	= 3868,
	ppEffectRippleLeftUp	= 3869,
	ppEffectRippleLeftDown	= 3870,
	ppEffectRippleRightDown	= 3871,
	ppEffectGlitterDiamondLeft	= 3872,
	ppEffectGlitterDiamondUp	= 3873,
	ppEffectGlitterDiamondRight	= 3874,
	ppEffectGlitterDiamondDown	= 3875,
	ppEffectGlitterHexagonLeft	= 3876,
	ppEffectGlitterHexagonUp	= 3877,
	ppEffectGlitterHexagonRight	= 3878,
	ppEffectGlitterHexagonDown	= 3879,
	ppEffectGalleryLeft	= 3880,
	ppEffectGalleryRight	= 3881,
	ppEffectConveyorLeft	= 3882,
	ppEffectConveyorRight	= 3883,
	ppEffectDoorsVertical	= 3884,
	ppEffectDoorsHorizontal	= 3885,
	ppEffectWindowVertical	= 3886,
	ppEffectWindowHorizontal	= 3887,
	ppEffectWarpIn	= 3888,
	ppEffectWarpOut	= 3889,
	ppEffectFlyThroughIn	= 3890,
	ppEffectFlyThroughOut	= 3891,
	ppEffectFlyThroughInBounce	= 3892,
	ppEffectFlyThroughOutBounce	= 3893,
	ppEffectRevealSmoothLeft	= 3894,
	ppEffectRevealSmoothRight	= 3895,
	ppEffectRevealBlackLeft	= 3896,
	ppEffectRevealBlackRight	= 3897,
	ppEffectHoneycomb	= 3898,
	ppEffectFerrisWheelLeft	= 3899,
	ppEffectFerrisWheelRight	= 3900,
	ppEffectSwitchLeft	= 3901,
	ppEffectSwitchUp	= 3902,
	ppEffectSwitchRight	= 3903,
	ppEffectSwitchDown	= 3904,
	ppEffectFlipLeft	= 3905,
	ppEffectFlipUp	= 3906,
	ppEffectFlipRight	= 3907,
	ppEffectFlipDown	= 3908,
	ppEffectFlashbulb	= 3909,
	ppEffectShredStripsIn	= 3910,
	ppEffectShredStripsOut	= 3911,
	ppEffectShredRectangleIn	= 3912,
	ppEffectShredRectangleOut	= 3913,
	ppEffectCubeLeft	= 3914,
	ppEffectCubeUp	= 3915,
	ppEffectCubeRight	= 3916,
	ppEffectCubeDown	= 3917,
	ppEffectRotateLeft	= 3918,
	ppEffectRotateUp	= 3919,
	ppEffectRotateRight	= 3920,
	ppEffectRotateDown	= 3921,
	ppEffectBoxLeft	= 3922,
	ppEffectBoxUp	= 3923,
	ppEffectBoxRight	= 3924,
	ppEffectBoxDown	= 3925,
	ppEffectOrbitLeft	= 3926,
	ppEffectOrbitUp	= 3927,
	ppEffectOrbitRight	= 3928,
	ppEffectOrbitDown	= 3929,
	ppEffectPanLeft	= 3930,
	ppEffectPanUp	= 3931,
	ppEffectPanRight	= 3932,
	ppEffectPanDown	= 3933,
	ppEffectFallOverLeft	= 3934,
	ppEffectFallOverRight	= 3935,
	ppEffectDrapeLeft	= 3936,
	ppEffectDrapeRight	= 3937,
	ppEffectCurtains	= 3938,
	ppEffectWindLeft	= 3939,
	ppEffectWindRight	= 3940,
	ppEffectPrestige	= 3941,
	ppEffectFracture	= 3942,
	ppEffectCrush	= 3943,
	ppEffectPeelOffLeft	= 3944,
	ppEffectPeelOffRight	= 3945,
	ppEffectPageCurlSingleLeft	= 3946,
	ppEffectPageCurlSingleRight	= 3947,
	ppEffectPageCurlDoubleLeft	= 3948,
	ppEffectPageCurlDoubleRight	= 3949,
	ppEffectAirplaneLeft	= 3950,
	ppEffectAirplaneRight	= 3951,
	ppEffectOrigamiLeft	= 3952,
	ppEffectOrigamiRight	= 3953
    } 	PpEntryEffect;

typedef /* [uuid] */  DECLSPEC_UUID("EFCD481C-B00B-4718-A6FF-51D98493EE88") 
enum PpTextLevelEffect
    {	ppAnimateLevelMixed	= -2,
	ppAnimateLevelNone	= 0,
	ppAnimateByFirstLevel	= 1,
	ppAnimateBySecondLevel	= 2,
	ppAnimateByThirdLevel	= 3,
	ppAnimateByFourthLevel	= 4,
	ppAnimateByFifthLevel	= 5,
	ppAnimateByAllLevels	= 16
    } 	PpTextLevelEffect;

typedef /* [uuid] */  DECLSPEC_UUID("9688FA96-8CF6-4642-8839-DD659D86C9B9") 
enum PpTextUnitEffect
    {	ppAnimateUnitMixed	= -2,
	ppAnimateByParagraph	= 0,
	ppAnimateByWord	= 1,
	ppAnimateByCharacter	= 2
    } 	PpTextUnitEffect;

typedef /* [uuid] */  DECLSPEC_UUID("B46F41B2-4241-49D4-B772-6182B7F4398D") 
enum PpChartUnitEffect
    {	ppAnimateChartMixed	= -2,
	ppAnimateBySeries	= 1,
	ppAnimateByCategory	= 2,
	ppAnimateBySeriesElements	= 3,
	ppAnimateByCategoryElements	= 4,
	ppAnimateChartAllAtOnce	= 5
    } 	PpChartUnitEffect;

typedef /* [uuid] */  DECLSPEC_UUID("4E58B80C-D41E-470A-A2F8-05373CA3EA5D") 
enum PpAfterEffect
    {	ppAfterEffectMixed	= -2,
	ppAfterEffectNothing	= 0,
	ppAfterEffectHide	= 1,
	ppAfterEffectDim	= 2,
	ppAfterEffectHideOnClick	= 3
    } 	PpAfterEffect;

typedef /* [uuid] */  DECLSPEC_UUID("F60170D6-43CA-47A4-88BF-F782728E1C87") 
enum PpAdvanceMode
    {	ppAdvanceModeMixed	= -2,
	ppAdvanceOnClick	= 1,
	ppAdvanceOnTime	= 2
    } 	PpAdvanceMode;

typedef /* [uuid] */  DECLSPEC_UUID("EAF0356F-6B2B-4163-A40F-4DD7D6B40A43") 
enum PpSoundEffectType
    {	ppSoundEffectsMixed	= -2,
	ppSoundNone	= 0,
	ppSoundStopPrevious	= 1,
	ppSoundFile	= 2
    } 	PpSoundEffectType;

typedef /* [uuid] */  DECLSPEC_UUID("927D5C5E-9E3B-46E0-AE7B-3E89A0B53FF7") 
enum PpFollowColors
    {	ppFollowColorsMixed	= -2,
	ppFollowColorsNone	= 0,
	ppFollowColorsScheme	= 1,
	ppFollowColorsTextAndBackground	= 2
    } 	PpFollowColors;

typedef /* [uuid] */  DECLSPEC_UUID("939ABC08-6F0E-4595-A12F-F96CFCB7FF77") 
enum PpUpdateOption
    {	ppUpdateOptionMixed	= -2,
	ppUpdateOptionManual	= 1,
	ppUpdateOptionAutomatic	= 2
    } 	PpUpdateOption;

typedef /* [uuid] */  DECLSPEC_UUID("07012DE4-763E-467D-8B87-1E10304332F8") 
enum PpParagraphAlignment
    {	ppAlignmentMixed	= -2,
	ppAlignLeft	= 1,
	ppAlignCenter	= 2,
	ppAlignRight	= 3,
	ppAlignJustify	= 4,
	ppAlignDistribute	= 5,
	ppAlignThaiDistribute	= 6,
	ppAlignJustifyLow	= 7
    } 	PpParagraphAlignment;

typedef /* [uuid] */  DECLSPEC_UUID("28F0103E-1D08-431E-8CDD-5554D008BBC3") 
enum PpBaselineAlignment
    {	ppBaselineAlignMixed	= -2,
	ppBaselineAlignBaseline	= 1,
	ppBaselineAlignTop	= 2,
	ppBaselineAlignCenter	= 3,
	ppBaselineAlignFarEast50	= 4,
	ppBaselineAlignAuto	= 5
    } 	PpBaselineAlignment;

typedef /* [uuid] */  DECLSPEC_UUID("F08DD520-1E7A-4812-9CE2-A96B079299D1") 
enum PpTabStopType
    {	ppTabStopMixed	= -2,
	ppTabStopLeft	= 1,
	ppTabStopCenter	= 2,
	ppTabStopRight	= 3,
	ppTabStopDecimal	= 4
    } 	PpTabStopType;

typedef /* [uuid] */  DECLSPEC_UUID("CC8F164E-EBD7-4366-8DD6-76E984C2A8F5") 
enum PpIndentControl
    {	ppIndentControlMixed	= -2,
	ppIndentReplaceAttr	= 1,
	ppIndentKeepAttr	= 2
    } 	PpIndentControl;

typedef /* [uuid] */  DECLSPEC_UUID("57187984-0CFA-4AD7-955A-ADA220110FC2") 
enum PpChangeCase
    {	ppCaseSentence	= 1,
	ppCaseLower	= 2,
	ppCaseUpper	= 3,
	ppCaseTitle	= 4,
	ppCaseToggle	= 5
    } 	PpChangeCase;

typedef /* [uuid] */  DECLSPEC_UUID("A14B5D3E-EAA8-45C0-A41C-D0AA208BA279") 
enum PpSlideShowPointerType
    {	ppSlideShowPointerNone	= 0,
	ppSlideShowPointerArrow	= 1,
	ppSlideShowPointerPen	= 2,
	ppSlideShowPointerAlwaysHidden	= 3,
	ppSlideShowPointerAutoArrow	= 4,
	ppSlideShowPointerEraser	= 5
    } 	PpSlideShowPointerType;

typedef /* [uuid] */  DECLSPEC_UUID("FB066093-3DFF-4C61-9AE6-6C76C635FD55") 
enum PpSlideShowState
    {	ppSlideShowRunning	= 1,
	ppSlideShowPaused	= 2,
	ppSlideShowBlackScreen	= 3,
	ppSlideShowWhiteScreen	= 4,
	ppSlideShowDone	= 5
    } 	PpSlideShowState;

typedef /* [uuid] */  DECLSPEC_UUID("98884CD0-F359-48CB-BED8-0EC3090A59D6") 
enum PpSlideShowAdvanceMode
    {	ppSlideShowManualAdvance	= 1,
	ppSlideShowUseSlideTimings	= 2,
	ppSlideShowRehearseNewTimings	= 3
    } 	PpSlideShowAdvanceMode;

typedef /* [uuid] */  DECLSPEC_UUID("6911A8C8-1743-4AAF-988B-55FF9AE94329") 
enum PpFileDialogType
    {	ppFileDialogOpen	= 1,
	ppFileDialogSave	= 2
    } 	PpFileDialogType;

typedef /* [uuid] */  DECLSPEC_UUID("8D624138-9944-443C-8BE1-EB10E90DD8C6") 
enum PpPrintOutputType
    {	ppPrintOutputSlides	= 1,
	ppPrintOutputTwoSlideHandouts	= 2,
	ppPrintOutputThreeSlideHandouts	= 3,
	ppPrintOutputSixSlideHandouts	= 4,
	ppPrintOutputNotesPages	= 5,
	ppPrintOutputOutline	= 6,
	ppPrintOutputBuildSlides	= 7,
	ppPrintOutputFourSlideHandouts	= 8,
	ppPrintOutputNineSlideHandouts	= 9,
	ppPrintOutputOneSlideHandouts	= 10
    } 	PpPrintOutputType;

typedef /* [uuid] */  DECLSPEC_UUID("D3A902F8-8526-4DDB-A72E-218C989128DB") 
enum PpPrintHandoutOrder
    {	ppPrintHandoutVerticalFirst	= 1,
	ppPrintHandoutHorizontalFirst	= 2
    } 	PpPrintHandoutOrder;

typedef /* [uuid] */  DECLSPEC_UUID("901438D1-D781-49CA-AECA-83D6FC958D6A") 
enum PpPrintColorType
    {	ppPrintColor	= 1,
	ppPrintBlackAndWhite	= 2,
	ppPrintPureBlackAndWhite	= 3
    } 	PpPrintColorType;

typedef /* [uuid] */  DECLSPEC_UUID("68CF3B66-38FC-4CC7-88CA-07C394CC6A4A") 
enum PpSelectionType
    {	ppSelectionNone	= 0,
	ppSelectionSlides	= 1,
	ppSelectionShapes	= 2,
	ppSelectionText	= 3
    } 	PpSelectionType;

typedef /* [uuid] */  DECLSPEC_UUID("F37B6599-0312-44BF-984E-1136C06CDAB2") 
enum PpDirection
    {	ppDirectionMixed	= -2,
	ppDirectionLeftToRight	= 1,
	ppDirectionRightToLeft	= 2
    } 	PpDirection;

typedef /* [uuid] */  DECLSPEC_UUID("1BEA23A4-497F-44D7-B7D8-80EB71A02FB5") 
enum PpDateTimeFormat
    {	ppDateTimeFormatMixed	= -2,
	ppDateTimeMdyy	= 1,
	ppDateTimeddddMMMMddyyyy	= 2,
	ppDateTimedMMMMyyyy	= 3,
	ppDateTimeMMMMdyyyy	= 4,
	ppDateTimedMMMyy	= 5,
	ppDateTimeMMMMyy	= 6,
	ppDateTimeMMyy	= 7,
	ppDateTimeMMddyyHmm	= 8,
	ppDateTimeMMddyyhmmAMPM	= 9,
	ppDateTimeHmm	= 10,
	ppDateTimeHmmss	= 11,
	ppDateTimehmmAMPM	= 12,
	ppDateTimehmmssAMPM	= 13,
	ppDateTimeFigureOut	= 14,
	ppDateTimeUAQ1	= 15,
	ppDateTimeUAQ2	= 16,
	ppDateTimeUAQ3	= 17,
	ppDateTimeUAQ4	= 18,
	ppDateTimeUAQ5	= 19,
	ppDateTimeUAQ6	= 20,
	ppDateTimeUAQ7	= 21
    } 	PpDateTimeFormat;

typedef /* [uuid] */  DECLSPEC_UUID("6DC8F1EC-4F59-43D5-97D9-EFC09D099444") 
enum PpTransitionSpeed
    {	ppTransitionSpeedMixed	= -2,
	ppTransitionSpeedSlow	= 1,
	ppTransitionSpeedMedium	= 2,
	ppTransitionSpeedFast	= 3
    } 	PpTransitionSpeed;

typedef /* [uuid] */  DECLSPEC_UUID("5106E4A7-532C-413F-B2C7-8D532008F511") 
enum PpMouseActivation
    {	ppMouseClick	= 1,
	ppMouseOver	= 2
    } 	PpMouseActivation;

typedef /* [uuid] */  DECLSPEC_UUID("EB78AE17-FAD3-4EDF-8A0B-0A379069749B") 
enum PpActionType
    {	ppActionMixed	= -2,
	ppActionNone	= 0,
	ppActionNextSlide	= 1,
	ppActionPreviousSlide	= 2,
	ppActionFirstSlide	= 3,
	ppActionLastSlide	= 4,
	ppActionLastSlideViewed	= 5,
	ppActionEndShow	= 6,
	ppActionHyperlink	= 7,
	ppActionRunMacro	= 8,
	ppActionRunProgram	= 9,
	ppActionNamedSlideShow	= 10,
	ppActionOLEVerb	= 11,
	ppActionPlay	= 12
    } 	PpActionType;

typedef /* [uuid] */  DECLSPEC_UUID("ADEADB7E-F268-4574-90FE-BC0BF4B28B3C") 
enum PpPlaceholderType
    {	ppPlaceholderMixed	= -2,
	ppPlaceholderTitle	= 1,
	ppPlaceholderBody	= 2,
	ppPlaceholderCenterTitle	= 3,
	ppPlaceholderSubtitle	= 4,
	ppPlaceholderVerticalTitle	= 5,
	ppPlaceholderVerticalBody	= 6,
	ppPlaceholderObject	= 7,
	ppPlaceholderChart	= 8,
	ppPlaceholderBitmap	= 9,
	ppPlaceholderMediaClip	= 10,
	ppPlaceholderOrgChart	= 11,
	ppPlaceholderTable	= 12,
	ppPlaceholderSlideNumber	= 13,
	ppPlaceholderHeader	= 14,
	ppPlaceholderFooter	= 15,
	ppPlaceholderDate	= 16,
	ppPlaceholderVerticalObject	= 17,
	ppPlaceholderPicture	= 18
    } 	PpPlaceholderType;

typedef /* [uuid] */  DECLSPEC_UUID("E893BD55-3FC7-3CDA-9281-1ACB65441C8B") 
enum PpSlideShowType
    {	ppShowTypeSpeaker	= 1,
	ppShowTypeWindow	= 2,
	ppShowTypeKiosk	= 3,
	ppShowTypeWindow2	= 4
    } 	PpSlideShowType;

typedef /* [uuid] */  DECLSPEC_UUID("F8FB4BD4-ECE4-4009-9FA6-AC93191315EB") 
enum PpPrintRangeType
    {	ppPrintAll	= 1,
	ppPrintSelection	= 2,
	ppPrintCurrent	= 3,
	ppPrintSlideRange	= 4,
	ppPrintNamedSlideShow	= 5,
	ppPrintSection	= 6
    } 	PpPrintRangeType;

typedef /* [uuid] */  DECLSPEC_UUID("A8FB07E5-9C29-4F16-9DC4-CA6333719385") 
enum PpAutoSize
    {	ppAutoSizeMixed	= -2,
	ppAutoSizeNone	= 0,
	ppAutoSizeShapeToFitText	= 1
    } 	PpAutoSize;

typedef /* [uuid] */  DECLSPEC_UUID("51491CE7-3402-4004-9836-2307103F3731") 
enum PpMediaType
    {	ppMediaTypeMixed	= -2,
	ppMediaTypeOther	= 1,
	ppMediaTypeSound	= 2,
	ppMediaTypeMovie	= 3
    } 	PpMediaType;

typedef /* [uuid] */  DECLSPEC_UUID("6CB42C6D-2958-4F46-8327-E6ABB83F719D") 
enum PpSoundFormatType
    {	ppSoundFormatMixed	= -2,
	ppSoundFormatNone	= 0,
	ppSoundFormatWAV	= 1,
	ppSoundFormatMIDI	= 2,
	ppSoundFormatCDAudio	= 3
    } 	PpSoundFormatType;

typedef /* [uuid] */  DECLSPEC_UUID("C8F6BBD1-4841-4C73-ACBB-69CE5637808E") 
enum PpFarEastLineBreakLevel
    {	ppFarEastLineBreakLevelNormal	= 1,
	ppFarEastLineBreakLevelStrict	= 2,
	ppFarEastLineBreakLevelCustom	= 3
    } 	PpFarEastLineBreakLevel;

typedef /* [uuid] */  DECLSPEC_UUID("170ECD11-1508-446D-99F0-A5DF077F35FF") 
enum PpSlideShowRangeType
    {	ppShowAll	= 1,
	ppShowSlideRange	= 2,
	ppShowNamedSlideShow	= 3
    } 	PpSlideShowRangeType;

typedef /* [uuid] */  DECLSPEC_UUID("DCA36717-111A-4633-B688-32C9548576D4") 
enum PpFrameColors
    {	ppFrameColorsBrowserColors	= 1,
	ppFrameColorsPresentationSchemeTextColor	= 2,
	ppFrameColorsPresentationSchemeAccentColor	= 3,
	ppFrameColorsWhiteTextOnBlack	= 4,
	ppFrameColorsBlackTextOnWhite	= 5
    } 	PpFrameColors;

typedef /* [uuid] */  DECLSPEC_UUID("16C96DBE-E683-4BAB-9358-58C539857DE2") 
enum PpBorderType
    {	ppBorderTop	= 1,
	ppBorderLeft	= 2,
	ppBorderBottom	= 3,
	ppBorderRight	= 4,
	ppBorderDiagonalDown	= 5,
	ppBorderDiagonalUp	= 6
    } 	PpBorderType;

typedef /* [uuid] */  DECLSPEC_UUID("24814860-3221-485E-805A-9DB3E4B55775") 
enum PpHTMLVersion
    {	ppHTMLv3	= 1,
	ppHTMLv4	= 2,
	ppHTMLDual	= 3,
	ppHTMLAutodetect	= 4
    } 	PpHTMLVersion;

typedef /* [uuid] */  DECLSPEC_UUID("DA5CB2A4-456B-4906-B3FA-5191F98F7068") 
enum PpPublishSourceType
    {	ppPublishAll	= 1,
	ppPublishSlideRange	= 2,
	ppPublishNamedSlideShow	= 3
    } 	PpPublishSourceType;

typedef /* [uuid] */  DECLSPEC_UUID("66B3A5BE-C68B-42E2-8EF9-A5BD49AF516B") 
enum PpBulletType
    {	ppBulletMixed	= -2,
	ppBulletNone	= 0,
	ppBulletUnnumbered	= 1,
	ppBulletNumbered	= 2,
	ppBulletPicture	= 3
    } 	PpBulletType;

typedef /* [uuid] */  DECLSPEC_UUID("63740092-EF1C-4097-8147-D3E7C7A0BE98") 
enum PpNumberedBulletStyle
    {	ppBulletStyleMixed	= -2,
	ppBulletAlphaLCPeriod	= 0,
	ppBulletAlphaUCPeriod	= 1,
	ppBulletArabicParenRight	= 2,
	ppBulletArabicPeriod	= 3,
	ppBulletRomanLCParenBoth	= 4,
	ppBulletRomanLCParenRight	= 5,
	ppBulletRomanLCPeriod	= 6,
	ppBulletRomanUCPeriod	= 7,
	ppBulletAlphaLCParenBoth	= 8,
	ppBulletAlphaLCParenRight	= 9,
	ppBulletAlphaUCParenBoth	= 10,
	ppBulletAlphaUCParenRight	= 11,
	ppBulletArabicParenBoth	= 12,
	ppBulletArabicPlain	= 13,
	ppBulletRomanUCParenBoth	= 14,
	ppBulletRomanUCParenRight	= 15,
	ppBulletSimpChinPlain	= 16,
	ppBulletSimpChinPeriod	= 17,
	ppBulletCircleNumDBPlain	= 18,
	ppBulletCircleNumWDWhitePlain	= 19,
	ppBulletCircleNumWDBlackPlain	= 20,
	ppBulletTradChinPlain	= 21,
	ppBulletTradChinPeriod	= 22,
	ppBulletArabicAlphaDash	= 23,
	ppBulletArabicAbjadDash	= 24,
	ppBulletHebrewAlphaDash	= 25,
	ppBulletKanjiKoreanPlain	= 26,
	ppBulletKanjiKoreanPeriod	= 27,
	ppBulletArabicDBPlain	= 28,
	ppBulletArabicDBPeriod	= 29,
	ppBulletThaiAlphaPeriod	= 30,
	ppBulletThaiAlphaParenRight	= 31,
	ppBulletThaiAlphaParenBoth	= 32,
	ppBulletThaiNumPeriod	= 33,
	ppBulletThaiNumParenRight	= 34,
	ppBulletThaiNumParenBoth	= 35,
	ppBulletHindiAlphaPeriod	= 36,
	ppBulletHindiNumPeriod	= 37,
	ppBulletKanjiSimpChinDBPeriod	= 38,
	ppBulletHindiNumParenRight	= 39,
	ppBulletHindiAlpha1Period	= 40
    } 	PpNumberedBulletStyle;

typedef /* [uuid] */  DECLSPEC_UUID("8E3D8175-9840-4F3D-9558-ADBCF2339E94") 
enum PpShapeFormat
    {	ppShapeFormatGIF	= 0,
	ppShapeFormatJPG	= 1,
	ppShapeFormatPNG	= 2,
	ppShapeFormatBMP	= 3,
	ppShapeFormatWMF	= 4,
	ppShapeFormatEMF	= 5
    } 	PpShapeFormat;

typedef /* [uuid] */  DECLSPEC_UUID("9C5B7379-CE75-4980-8E9B-D0E957AF4A41") 
enum PpExportMode
    {	ppRelativeToSlide	= 1,
	ppClipRelativeToSlide	= 2,
	ppScaleToFit	= 3,
	ppScaleXY	= 4
    } 	PpExportMode;

typedef /* [uuid] */  DECLSPEC_UUID("83329628-509C-4CF8-A6B4-AFCA95A071BB") 
enum PpPasteDataType
    {	ppPasteDefault	= 0,
	ppPasteBitmap	= 1,
	ppPasteEnhancedMetafile	= 2,
	ppPasteMetafilePicture	= 3,
	ppPasteGIF	= 4,
	ppPasteJPG	= 5,
	ppPastePNG	= 6,
	ppPasteText	= 7,
	ppPasteHTML	= 8,
	ppPasteRTF	= 9,
	ppPasteOLEObject	= 10,
	ppPasteShape	= 11
    } 	PpPasteDataType;

typedef /* [uuid] */  DECLSPEC_UUID("4927EA82-23FB-4F6F-9C8B-4204CEB23D21") 
enum MsoAnimEffect
    {	msoAnimEffectCustom	= 0,
	msoAnimEffectAppear	= 1,
	msoAnimEffectFly	= 2,
	msoAnimEffectBlinds	= 3,
	msoAnimEffectBox	= 4,
	msoAnimEffectCheckerboard	= 5,
	msoAnimEffectCircle	= 6,
	msoAnimEffectCrawl	= 7,
	msoAnimEffectDiamond	= 8,
	msoAnimEffectDissolve	= 9,
	msoAnimEffectFade	= 10,
	msoAnimEffectFlashOnce	= 11,
	msoAnimEffectPeek	= 12,
	msoAnimEffectPlus	= 13,
	msoAnimEffectRandomBars	= 14,
	msoAnimEffectSpiral	= 15,
	msoAnimEffectSplit	= 16,
	msoAnimEffectStretch	= 17,
	msoAnimEffectStrips	= 18,
	msoAnimEffectSwivel	= 19,
	msoAnimEffectWedge	= 20,
	msoAnimEffectWheel	= 21,
	msoAnimEffectWipe	= 22,
	msoAnimEffectZoom	= 23,
	msoAnimEffectRandomEffects	= 24,
	msoAnimEffectBoomerang	= 25,
	msoAnimEffectBounce	= 26,
	msoAnimEffectColorReveal	= 27,
	msoAnimEffectCredits	= 28,
	msoAnimEffectEaseIn	= 29,
	msoAnimEffectFloat	= 30,
	msoAnimEffectGrowAndTurn	= 31,
	msoAnimEffectLightSpeed	= 32,
	msoAnimEffectPinwheel	= 33,
	msoAnimEffectRiseUp	= 34,
	msoAnimEffectSwish	= 35,
	msoAnimEffectThinLine	= 36,
	msoAnimEffectUnfold	= 37,
	msoAnimEffectWhip	= 38,
	msoAnimEffectAscend	= 39,
	msoAnimEffectCenterRevolve	= 40,
	msoAnimEffectFadedSwivel	= 41,
	msoAnimEffectDescend	= 42,
	msoAnimEffectSling	= 43,
	msoAnimEffectSpinner	= 44,
	msoAnimEffectStretchy	= 45,
	msoAnimEffectZip	= 46,
	msoAnimEffectArcUp	= 47,
	msoAnimEffectFadedZoom	= 48,
	msoAnimEffectGlide	= 49,
	msoAnimEffectExpand	= 50,
	msoAnimEffectFlip	= 51,
	msoAnimEffectShimmer	= 52,
	msoAnimEffectFold	= 53,
	msoAnimEffectChangeFillColor	= 54,
	msoAnimEffectChangeFont	= 55,
	msoAnimEffectChangeFontColor	= 56,
	msoAnimEffectChangeFontSize	= 57,
	msoAnimEffectChangeFontStyle	= 58,
	msoAnimEffectGrowShrink	= 59,
	msoAnimEffectChangeLineColor	= 60,
	msoAnimEffectSpin	= 61,
	msoAnimEffectTransparency	= 62,
	msoAnimEffectBoldFlash	= 63,
	msoAnimEffectBlast	= 64,
	msoAnimEffectBoldReveal	= 65,
	msoAnimEffectBrushOnColor	= 66,
	msoAnimEffectBrushOnUnderline	= 67,
	msoAnimEffectColorBlend	= 68,
	msoAnimEffectColorWave	= 69,
	msoAnimEffectComplementaryColor	= 70,
	msoAnimEffectComplementaryColor2	= 71,
	msoAnimEffectContrastingColor	= 72,
	msoAnimEffectDarken	= 73,
	msoAnimEffectDesaturate	= 74,
	msoAnimEffectFlashBulb	= 75,
	msoAnimEffectFlicker	= 76,
	msoAnimEffectGrowWithColor	= 77,
	msoAnimEffectLighten	= 78,
	msoAnimEffectStyleEmphasis	= 79,
	msoAnimEffectTeeter	= 80,
	msoAnimEffectVerticalGrow	= 81,
	msoAnimEffectWave	= 82,
	msoAnimEffectMediaPlay	= 83,
	msoAnimEffectMediaPause	= 84,
	msoAnimEffectMediaStop	= 85,
	msoAnimEffectPathCircle	= 86,
	msoAnimEffectPathRightTriangle	= 87,
	msoAnimEffectPathDiamond	= 88,
	msoAnimEffectPathHexagon	= 89,
	msoAnimEffectPath5PointStar	= 90,
	msoAnimEffectPathCrescentMoon	= 91,
	msoAnimEffectPathSquare	= 92,
	msoAnimEffectPathTrapezoid	= 93,
	msoAnimEffectPathHeart	= 94,
	msoAnimEffectPathOctagon	= 95,
	msoAnimEffectPath6PointStar	= 96,
	msoAnimEffectPathFootball	= 97,
	msoAnimEffectPathEqualTriangle	= 98,
	msoAnimEffectPathParallelogram	= 99,
	msoAnimEffectPathPentagon	= 100,
	msoAnimEffectPath4PointStar	= 101,
	msoAnimEffectPath8PointStar	= 102,
	msoAnimEffectPathTeardrop	= 103,
	msoAnimEffectPathPointyStar	= 104,
	msoAnimEffectPathCurvedSquare	= 105,
	msoAnimEffectPathCurvedX	= 106,
	msoAnimEffectPathVerticalFigure8	= 107,
	msoAnimEffectPathCurvyStar	= 108,
	msoAnimEffectPathLoopdeLoop	= 109,
	msoAnimEffectPathBuzzsaw	= 110,
	msoAnimEffectPathHorizontalFigure8	= 111,
	msoAnimEffectPathPeanut	= 112,
	msoAnimEffectPathFigure8Four	= 113,
	msoAnimEffectPathNeutron	= 114,
	msoAnimEffectPathSwoosh	= 115,
	msoAnimEffectPathBean	= 116,
	msoAnimEffectPathPlus	= 117,
	msoAnimEffectPathInvertedTriangle	= 118,
	msoAnimEffectPathInvertedSquare	= 119,
	msoAnimEffectPathLeft	= 120,
	msoAnimEffectPathTurnRight	= 121,
	msoAnimEffectPathArcDown	= 122,
	msoAnimEffectPathZigzag	= 123,
	msoAnimEffectPathSCurve2	= 124,
	msoAnimEffectPathSineWave	= 125,
	msoAnimEffectPathBounceLeft	= 126,
	msoAnimEffectPathDown	= 127,
	msoAnimEffectPathTurnUp	= 128,
	msoAnimEffectPathArcUp	= 129,
	msoAnimEffectPathHeartbeat	= 130,
	msoAnimEffectPathSpiralRight	= 131,
	msoAnimEffectPathWave	= 132,
	msoAnimEffectPathCurvyLeft	= 133,
	msoAnimEffectPathDiagonalDownRight	= 134,
	msoAnimEffectPathTurnDown	= 135,
	msoAnimEffectPathArcLeft	= 136,
	msoAnimEffectPathFunnel	= 137,
	msoAnimEffectPathSpring	= 138,
	msoAnimEffectPathBounceRight	= 139,
	msoAnimEffectPathSpiralLeft	= 140,
	msoAnimEffectPathDiagonalUpRight	= 141,
	msoAnimEffectPathTurnUpRight	= 142,
	msoAnimEffectPathArcRight	= 143,
	msoAnimEffectPathSCurve1	= 144,
	msoAnimEffectPathDecayingWave	= 145,
	msoAnimEffectPathCurvyRight	= 146,
	msoAnimEffectPathStairsDown	= 147,
	msoAnimEffectPathUp	= 148,
	msoAnimEffectPathRight	= 149,
	msoAnimEffectMediaPlayFromBookmark	= 150
    } 	MsoAnimEffect;

typedef /* [uuid] */  DECLSPEC_UUID("4290D45B-433A-452F-8402-447FD15187E0") 
enum MsoAnimateByLevel
    {	msoAnimateLevelMixed	= -1,
	msoAnimateLevelNone	= 0,
	msoAnimateTextByAllLevels	= 1,
	msoAnimateTextByFirstLevel	= 2,
	msoAnimateTextBySecondLevel	= 3,
	msoAnimateTextByThirdLevel	= 4,
	msoAnimateTextByFourthLevel	= 5,
	msoAnimateTextByFifthLevel	= 6,
	msoAnimateChartAllAtOnce	= 7,
	msoAnimateChartByCategory	= 8,
	msoAnimateChartByCategoryElements	= 9,
	msoAnimateChartBySeries	= 10,
	msoAnimateChartBySeriesElements	= 11,
	msoAnimateDiagramAllAtOnce	= 12,
	msoAnimateDiagramDepthByNode	= 13,
	msoAnimateDiagramDepthByBranch	= 14,
	msoAnimateDiagramBreadthByNode	= 15,
	msoAnimateDiagramBreadthByLevel	= 16,
	msoAnimateDiagramClockwise	= 17,
	msoAnimateDiagramClockwiseIn	= 18,
	msoAnimateDiagramClockwiseOut	= 19,
	msoAnimateDiagramCounterClockwise	= 20,
	msoAnimateDiagramCounterClockwiseIn	= 21,
	msoAnimateDiagramCounterClockwiseOut	= 22,
	msoAnimateDiagramInByRing	= 23,
	msoAnimateDiagramOutByRing	= 24,
	msoAnimateDiagramUp	= 25,
	msoAnimateDiagramDown	= 26
    } 	MsoAnimateByLevel;

typedef /* [uuid] */  DECLSPEC_UUID("45F2ED98-F126-47EF-9521-420DD5D364AF") 
enum MsoAnimTriggerType
    {	msoAnimTriggerMixed	= -1,
	msoAnimTriggerNone	= 0,
	msoAnimTriggerOnPageClick	= 1,
	msoAnimTriggerWithPrevious	= 2,
	msoAnimTriggerAfterPrevious	= 3,
	msoAnimTriggerOnShapeClick	= 4,
	msoAnimTriggerOnMediaBookmark	= 5
    } 	MsoAnimTriggerType;

typedef /* [uuid] */  DECLSPEC_UUID("6BF95896-A5B8-44C5-81E1-03D78481C890") 
enum MsoAnimAfterEffect
    {	msoAnimAfterEffectMixed	= -1,
	msoAnimAfterEffectNone	= 0,
	msoAnimAfterEffectDim	= 1,
	msoAnimAfterEffectHide	= 2,
	msoAnimAfterEffectHideOnNextClick	= 3
    } 	MsoAnimAfterEffect;

typedef /* [uuid] */  DECLSPEC_UUID("8BA1E4A7-C122-4400-AF6B-6905A8863766") 
enum MsoAnimTextUnitEffect
    {	msoAnimTextUnitEffectMixed	= -1,
	msoAnimTextUnitEffectByParagraph	= 0,
	msoAnimTextUnitEffectByCharacter	= 1,
	msoAnimTextUnitEffectByWord	= 2
    } 	MsoAnimTextUnitEffect;

typedef /* [uuid] */  DECLSPEC_UUID("DA113E67-ED91-4427-9415-83960759D3FB") 
enum MsoAnimEffectRestart
    {	msoAnimEffectRestartAlways	= 1,
	msoAnimEffectRestartWhenOff	= 2,
	msoAnimEffectRestartNever	= 3
    } 	MsoAnimEffectRestart;

typedef /* [uuid] */  DECLSPEC_UUID("A2F1DAF6-7EEC-46C9-AB9F-877C909CB47D") 
enum MsoAnimEffectAfter
    {	msoAnimEffectAfterFreeze	= 1,
	msoAnimEffectAfterRemove	= 2,
	msoAnimEffectAfterHold	= 3,
	msoAnimEffectAfterTransition	= 4
    } 	MsoAnimEffectAfter;

typedef /* [uuid] */  DECLSPEC_UUID("9D777915-EB83-4F30-AAE5-D96DB9A3CF7A") 
enum MsoAnimDirection
    {	msoAnimDirectionNone	= 0,
	msoAnimDirectionUp	= 1,
	msoAnimDirectionRight	= 2,
	msoAnimDirectionDown	= 3,
	msoAnimDirectionLeft	= 4,
	msoAnimDirectionOrdinalMask	= 5,
	msoAnimDirectionUpLeft	= 6,
	msoAnimDirectionUpRight	= 7,
	msoAnimDirectionDownRight	= 8,
	msoAnimDirectionDownLeft	= 9,
	msoAnimDirectionTop	= 10,
	msoAnimDirectionBottom	= 11,
	msoAnimDirectionTopLeft	= 12,
	msoAnimDirectionTopRight	= 13,
	msoAnimDirectionBottomRight	= 14,
	msoAnimDirectionBottomLeft	= 15,
	msoAnimDirectionHorizontal	= 16,
	msoAnimDirectionVertical	= 17,
	msoAnimDirectionAcross	= 18,
	msoAnimDirectionIn	= 19,
	msoAnimDirectionOut	= 20,
	msoAnimDirectionClockwise	= 21,
	msoAnimDirectionCounterclockwise	= 22,
	msoAnimDirectionHorizontalIn	= 23,
	msoAnimDirectionHorizontalOut	= 24,
	msoAnimDirectionVerticalIn	= 25,
	msoAnimDirectionVerticalOut	= 26,
	msoAnimDirectionSlightly	= 27,
	msoAnimDirectionCenter	= 28,
	msoAnimDirectionInSlightly	= 29,
	msoAnimDirectionInCenter	= 30,
	msoAnimDirectionInBottom	= 31,
	msoAnimDirectionOutSlightly	= 32,
	msoAnimDirectionOutCenter	= 33,
	msoAnimDirectionOutBottom	= 34,
	msoAnimDirectionFontBold	= 35,
	msoAnimDirectionFontItalic	= 36,
	msoAnimDirectionFontUnderline	= 37,
	msoAnimDirectionFontStrikethrough	= 38,
	msoAnimDirectionFontShadow	= 39,
	msoAnimDirectionFontAllCaps	= 40,
	msoAnimDirectionInstant	= 41,
	msoAnimDirectionGradual	= 42,
	msoAnimDirectionCycleClockwise	= 43,
	msoAnimDirectionCycleCounterclockwise	= 44
    } 	MsoAnimDirection;

typedef /* [uuid] */  DECLSPEC_UUID("6B9EFDD2-199B-41A0-8192-6A50CD6E521F") 
enum MsoAnimType
    {	msoAnimTypeMixed	= -2,
	msoAnimTypeNone	= 0,
	msoAnimTypeMotion	= 1,
	msoAnimTypeColor	= 2,
	msoAnimTypeScale	= 3,
	msoAnimTypeRotation	= 4,
	msoAnimTypeProperty	= 5,
	msoAnimTypeCommand	= 6,
	msoAnimTypeFilter	= 7,
	msoAnimTypeSet	= 8
    } 	MsoAnimType;

typedef /* [uuid] */  DECLSPEC_UUID("F9D204A8-2D7B-4F32-ABE4-94650F0E2B72") 
enum MsoAnimAdditive
    {	msoAnimAdditiveAddBase	= 1,
	msoAnimAdditiveAddSum	= 2
    } 	MsoAnimAdditive;

typedef /* [uuid] */  DECLSPEC_UUID("661ECFC7-4D4F-4BF9-B5F1-D4718EE3F9CA") 
enum MsoAnimAccumulate
    {	msoAnimAccumulateNone	= 1,
	msoAnimAccumulateAlways	= 2
    } 	MsoAnimAccumulate;

typedef /* [uuid] */  DECLSPEC_UUID("BD7BAABC-C4F9-402E-A98C-B9840A10D355") 
enum MsoAnimProperty
    {	msoAnimNone	= 0,
	msoAnimX	= 1,
	msoAnimY	= 2,
	msoAnimWidth	= 3,
	msoAnimHeight	= 4,
	msoAnimOpacity	= 5,
	msoAnimRotation	= 6,
	msoAnimColor	= 7,
	msoAnimVisibility	= 8,
	msoAnimTextFontBold	= 100,
	msoAnimTextFontColor	= 101,
	msoAnimTextFontEmboss	= 102,
	msoAnimTextFontItalic	= 103,
	msoAnimTextFontName	= 104,
	msoAnimTextFontShadow	= 105,
	msoAnimTextFontSize	= 106,
	msoAnimTextFontSubscript	= 107,
	msoAnimTextFontSuperscript	= 108,
	msoAnimTextFontUnderline	= 109,
	msoAnimTextFontStrikeThrough	= 110,
	msoAnimTextBulletCharacter	= 111,
	msoAnimTextBulletFontName	= 112,
	msoAnimTextBulletNumber	= 113,
	msoAnimTextBulletColor	= 114,
	msoAnimTextBulletRelativeSize	= 115,
	msoAnimTextBulletStyle	= 116,
	msoAnimTextBulletType	= 117,
	msoAnimShapePictureContrast	= 1000,
	msoAnimShapePictureBrightness	= 1001,
	msoAnimShapePictureGamma	= 1002,
	msoAnimShapePictureGrayscale	= 1003,
	msoAnimShapeFillOn	= 1004,
	msoAnimShapeFillColor	= 1005,
	msoAnimShapeFillOpacity	= 1006,
	msoAnimShapeFillBackColor	= 1007,
	msoAnimShapeLineOn	= 1008,
	msoAnimShapeLineColor	= 1009,
	msoAnimShapeShadowOn	= 1010,
	msoAnimShapeShadowType	= 1011,
	msoAnimShapeShadowColor	= 1012,
	msoAnimShapeShadowOpacity	= 1013,
	msoAnimShapeShadowOffsetX	= 1014,
	msoAnimShapeShadowOffsetY	= 1015
    } 	MsoAnimProperty;

typedef /* [uuid] */  DECLSPEC_UUID("14876707-AF12-41EE-983D-E7366840A4DF") 
enum PpAlertLevel
    {	ppAlertsNone	= 1,
	ppAlertsAll	= 2
    } 	PpAlertLevel;

typedef /* [uuid] */  DECLSPEC_UUID("DDFE9852-7847-4826-A6AB-0322E069C378") 
enum PpRevisionInfo
    {	ppRevisionInfoNone	= 0,
	ppRevisionInfoBaseline	= 1,
	ppRevisionInfoMerged	= 2
    } 	PpRevisionInfo;

typedef /* [uuid] */  DECLSPEC_UUID("25DAEE6C-E895-441F-BF3E-69FB4253DFE5") 
enum MsoAnimCommandType
    {	msoAnimCommandTypeEvent	= 0,
	msoAnimCommandTypeCall	= 1,
	msoAnimCommandTypeVerb	= 2
    } 	MsoAnimCommandType;

typedef /* [uuid] */  DECLSPEC_UUID("2F291805-EABF-4F68-801D-A2CC04340F2B") 
enum MsoAnimFilterEffectType
    {	msoAnimFilterEffectTypeNone	= 0,
	msoAnimFilterEffectTypeBarn	= 1,
	msoAnimFilterEffectTypeBlinds	= 2,
	msoAnimFilterEffectTypeBox	= 3,
	msoAnimFilterEffectTypeCheckerboard	= 4,
	msoAnimFilterEffectTypeCircle	= 5,
	msoAnimFilterEffectTypeDiamond	= 6,
	msoAnimFilterEffectTypeDissolve	= 7,
	msoAnimFilterEffectTypeFade	= 8,
	msoAnimFilterEffectTypeImage	= 9,
	msoAnimFilterEffectTypePixelate	= 10,
	msoAnimFilterEffectTypePlus	= 11,
	msoAnimFilterEffectTypeRandomBar	= 12,
	msoAnimFilterEffectTypeSlide	= 13,
	msoAnimFilterEffectTypeStretch	= 14,
	msoAnimFilterEffectTypeStrips	= 15,
	msoAnimFilterEffectTypeWedge	= 16,
	msoAnimFilterEffectTypeWheel	= 17,
	msoAnimFilterEffectTypeWipe	= 18
    } 	MsoAnimFilterEffectType;

typedef /* [uuid] */  DECLSPEC_UUID("FCFB2414-4EBB-4875-B0A4-A697CA47AF6A") 
enum MsoAnimFilterEffectSubtype
    {	msoAnimFilterEffectSubtypeNone	= 0,
	msoAnimFilterEffectSubtypeInVertical	= 1,
	msoAnimFilterEffectSubtypeOutVertical	= 2,
	msoAnimFilterEffectSubtypeInHorizontal	= 3,
	msoAnimFilterEffectSubtypeOutHorizontal	= 4,
	msoAnimFilterEffectSubtypeHorizontal	= 5,
	msoAnimFilterEffectSubtypeVertical	= 6,
	msoAnimFilterEffectSubtypeIn	= 7,
	msoAnimFilterEffectSubtypeOut	= 8,
	msoAnimFilterEffectSubtypeAcross	= 9,
	msoAnimFilterEffectSubtypeFromLeft	= 10,
	msoAnimFilterEffectSubtypeFromRight	= 11,
	msoAnimFilterEffectSubtypeFromTop	= 12,
	msoAnimFilterEffectSubtypeFromBottom	= 13,
	msoAnimFilterEffectSubtypeDownLeft	= 14,
	msoAnimFilterEffectSubtypeUpLeft	= 15,
	msoAnimFilterEffectSubtypeDownRight	= 16,
	msoAnimFilterEffectSubtypeUpRight	= 17,
	msoAnimFilterEffectSubtypeSpokes1	= 18,
	msoAnimFilterEffectSubtypeSpokes2	= 19,
	msoAnimFilterEffectSubtypeSpokes3	= 20,
	msoAnimFilterEffectSubtypeSpokes4	= 21,
	msoAnimFilterEffectSubtypeSpokes8	= 22,
	msoAnimFilterEffectSubtypeLeft	= 23,
	msoAnimFilterEffectSubtypeRight	= 24,
	msoAnimFilterEffectSubtypeDown	= 25,
	msoAnimFilterEffectSubtypeUp	= 26
    } 	MsoAnimFilterEffectSubtype;

typedef /* [uuid] */  DECLSPEC_UUID("3B006E87-E68C-4933-9095-BBB3336FE234") 
enum PpRemoveDocInfoType
    {	ppRDIComments	= 1,
	ppRDIRemovePersonalInformation	= 4,
	ppRDIDocumentProperties	= 8,
	ppRDIDocumentWorkspace	= 10,
	ppRDIInkAnnotations	= 11,
	ppRDIPublishPath	= 13,
	ppRDIDocumentServerProperties	= 14,
	ppRDIDocumentManagementPolicy	= 15,
	ppRDIContentType	= 16,
	ppRDISlideUpdateInformation	= 17,
	ppRDIAll	= 99
    } 	PpRemoveDocInfoType;

typedef /* [uuid] */  DECLSPEC_UUID("F4694AF5-8686-44E1-978F-EEBA63557B90") 
enum PpCheckInVersionType
    {	ppCheckInMinorVersion	= 0,
	ppCheckInMajorVersion	= 1,
	ppCheckInOverwriteVersion	= 2
    } 	PpCheckInVersionType;

typedef /* [uuid] */  DECLSPEC_UUID("ABF6BCAE-EB69-4044-BD66-87DB3A1E0211") 
enum MsoClickState
    {	msoClickStateAfterAllAnimations	= -2,
	msoClickStateBeforeAutomaticAnimations	= -1
    } 	MsoClickState;

typedef /* [uuid] */  DECLSPEC_UUID("CD470FBB-4284-4670-87E5-F315EF63D556") 
enum PpFixedFormatType
    {	ppFixedFormatTypeXPS	= 1,
	ppFixedFormatTypePDF	= 2
    } 	PpFixedFormatType;

typedef /* [uuid] */  DECLSPEC_UUID("2CF9706B-E805-4EF6-BA87-7B7EBBD43D42") 
enum PpFixedFormatIntent
    {	ppFixedFormatIntentScreen	= 1,
	ppFixedFormatIntentPrint	= 2
    } 	PpFixedFormatIntent;

typedef /* [uuid] */  DECLSPEC_UUID("628C4ECD-2840-41AB-BA67-FE836C277E76") 
enum XlBackground
    {	xlBackgroundAutomatic	= -4105,
	xlBackgroundOpaque	= 3,
	xlBackgroundTransparent	= 2
    } 	XlBackground;

typedef /* [uuid] */  DECLSPEC_UUID("B1AC486B-FEB5-4F91-AB5A-674BD3C93FF7") 
enum XlChartGallery
    {	xlBuiltIn	= 21,
	xlUserDefined	= 22,
	xlAnyGallery	= 23
    } 	XlChartGallery;

typedef /* [uuid] */  DECLSPEC_UUID("361D6719-C6C7-438C-849F-09F55B485C30") 
enum XlChartPicturePlacement
    {	xlSides	= 1,
	xlEnd	= 2,
	xlEndSides	= 3,
	xlFront	= 4,
	xlFrontSides	= 5,
	xlFrontEnd	= 6,
	xlAllFaces	= 7
    } 	XlChartPicturePlacement;

typedef /* [uuid] */  DECLSPEC_UUID("6D851B33-E263-4602-B4BD-96ED7CB4F542") 
enum XlDataLabelSeparator
    {	xlDataLabelSeparatorDefault	= 1
    } 	XlDataLabelSeparator;

typedef /* [uuid] */  DECLSPEC_UUID("F800B4FC-157E-49F8-80A8-07A524F87C63") 
enum XlPattern
    {	xlPatternAutomatic	= -4105,
	xlPatternChecker	= 9,
	xlPatternCrissCross	= 16,
	xlPatternDown	= -4121,
	xlPatternGray16	= 17,
	xlPatternGray25	= -4124,
	xlPatternGray50	= -4125,
	xlPatternGray75	= -4126,
	xlPatternGray8	= 18,
	xlPatternGrid	= 15,
	xlPatternHorizontal	= -4128,
	xlPatternLightDown	= 13,
	xlPatternLightHorizontal	= 11,
	xlPatternLightUp	= 14,
	xlPatternLightVertical	= 12,
	xlPatternNone	= -4142,
	xlPatternSemiGray75	= 10,
	xlPatternSolid	= 1,
	xlPatternUp	= -4162,
	xlPatternVertical	= -4166,
	xlPatternLinearGradient	= 4000,
	xlPatternRectangularGradient	= 4001
    } 	XlPattern;

typedef /* [uuid] */  DECLSPEC_UUID("A7E68D3B-0A7D-4F2E-A398-7FA9F2DB0D8A") 
enum XlPictureAppearance
    {	xlPrinter	= 2,
	xlScreen	= 1
    } 	XlPictureAppearance;

typedef /* [uuid] */  DECLSPEC_UUID("0ACDCD15-22E1-467C-A50B-9940132630A2") 
enum XlCopyPictureFormat
    {	xlBitmap	= 2,
	xlPicture	= -4147
    } 	XlCopyPictureFormat;

typedef /* [uuid] */  DECLSPEC_UUID("1E1C4C4B-742D-40CA-8DD8-6E9B772D117D") 
enum XlRgbColor
    {	rgbAliceBlue	= 16775408,
	rgbAntiqueWhite	= 14150650,
	rgbAqua	= 16776960,
	rgbAquamarine	= 13959039,
	rgbAzure	= 16777200,
	rgbBeige	= 14480885,
	rgbBisque	= 12903679,
	rgbBlack	= 0,
	rgbBlanchedAlmond	= 13495295,
	rgbBlue	= 16711680,
	rgbBlueViolet	= 14822282,
	rgbBrown	= 2763429,
	rgbBurlyWood	= 8894686,
	rgbCadetBlue	= 10526303,
	rgbChartreuse	= 65407,
	rgbCoral	= 5275647,
	rgbCornflowerBlue	= 15570276,
	rgbCornsilk	= 14481663,
	rgbCrimson	= 3937500,
	rgbDarkBlue	= 9109504,
	rgbDarkCyan	= 9145088,
	rgbDarkGoldenrod	= 755384,
	rgbDarkGreen	= 25600,
	rgbDarkGray	= 11119017,
	rgbDarkGrey	= 11119017,
	rgbDarkKhaki	= 7059389,
	rgbDarkMagenta	= 9109643,
	rgbDarkOliveGreen	= 3107669,
	rgbDarkOrange	= 36095,
	rgbDarkOrchid	= 13382297,
	rgbDarkRed	= 139,
	rgbDarkSalmon	= 8034025,
	rgbDarkSeaGreen	= 9419919,
	rgbDarkSlateBlue	= 9125192,
	rgbDarkSlateGray	= 5197615,
	rgbDarkSlateGrey	= 5197615,
	rgbDarkTurquoise	= 13749760,
	rgbDarkViolet	= 13828244,
	rgbDeepPink	= 9639167,
	rgbDeepSkyBlue	= 16760576,
	rgbDimGray	= 6908265,
	rgbDimGrey	= 6908265,
	rgbDodgerBlue	= 16748574,
	rgbFireBrick	= 2237106,
	rgbFloralWhite	= 15792895,
	rgbForestGreen	= 2263842,
	rgbFuchsia	= 16711935,
	rgbGainsboro	= 14474460,
	rgbGhostWhite	= 16775416,
	rgbGold	= 55295,
	rgbGoldenrod	= 2139610,
	rgbGray	= 8421504,
	rgbGreen	= 32768,
	rgbGrey	= 8421504,
	rgbGreenYellow	= 3145645,
	rgbHoneydew	= 15794160,
	rgbHotPink	= 11823615,
	rgbIndianRed	= 6053069,
	rgbIndigo	= 8519755,
	rgbIvory	= 15794175,
	rgbKhaki	= 9234160,
	rgbLavender	= 16443110,
	rgbLavenderBlush	= 16118015,
	rgbLawnGreen	= 64636,
	rgbLemonChiffon	= 13499135,
	rgbLightBlue	= 15128749,
	rgbLightCoral	= 8421616,
	rgbLightCyan	= 9145088,
	rgbLightGoldenrodYellow	= 13826810,
	rgbLightGray	= 13882323,
	rgbLightGreen	= 9498256,
	rgbLightGrey	= 13882323,
	rgbLightPink	= 12695295,
	rgbLightSalmon	= 8036607,
	rgbLightSeaGreen	= 11186720,
	rgbLightSkyBlue	= 16436871,
	rgbLightSlateGray	= 10061943,
	rgbLightSlateGrey	= 10061943,
	rgbLightSteelBlue	= 14599344,
	rgbLightYellow	= 14745599,
	rgbLime	= 65280,
	rgbLimeGreen	= 3329330,
	rgbLinen	= 15134970,
	rgbMaroon	= 128,
	rgbMediumAquamarine	= 11206502,
	rgbMediumBlue	= 13434880,
	rgbMediumOrchid	= 13850042,
	rgbMediumPurple	= 14381203,
	rgbMediumSeaGreen	= 7451452,
	rgbMediumSlateBlue	= 15624315,
	rgbMediumSpringGreen	= 10156544,
	rgbMediumTurquoise	= 13422920,
	rgbMediumVioletRed	= 8721863,
	rgbMidnightBlue	= 7346457,
	rgbMintCream	= 16449525,
	rgbMistyRose	= 14804223,
	rgbMoccasin	= 11920639,
	rgbNavajoWhite	= 11394815,
	rgbNavy	= 8388608,
	rgbNavyBlue	= 8388608,
	rgbOldLace	= 15136253,
	rgbOlive	= 32896,
	rgbOliveDrab	= 2330219,
	rgbOrange	= 42495,
	rgbOrangeRed	= 17919,
	rgbOrchid	= 14053594,
	rgbPaleGoldenrod	= 7071982,
	rgbPaleGreen	= 10025880,
	rgbPaleTurquoise	= 15658671,
	rgbPaleVioletRed	= 9662683,
	rgbPapayaWhip	= 14020607,
	rgbPeachPuff	= 12180223,
	rgbPeru	= 4163021,
	rgbPink	= 13353215,
	rgbPlum	= 14524637,
	rgbPowderBlue	= 15130800,
	rgbPurple	= 8388736,
	rgbRed	= 255,
	rgbRosyBrown	= 9408444,
	rgbRoyalBlue	= 14772545,
	rgbSalmon	= 7504122,
	rgbSandyBrown	= 6333684,
	rgbSeaGreen	= 5737262,
	rgbSeashell	= 15660543,
	rgbSienna	= 2970272,
	rgbSilver	= 12632256,
	rgbSkyBlue	= 15453831,
	rgbSlateBlue	= 13458026,
	rgbSlateGray	= 9470064,
	rgbSlateGrey	= 9470064,
	rgbSnow	= 16448255,
	rgbSpringGreen	= 8388352,
	rgbSteelBlue	= 11829830,
	rgbTan	= 9221330,
	rgbTeal	= 8421376,
	rgbThistle	= 14204888,
	rgbTomato	= 4678655,
	rgbTurquoise	= 13688896,
	rgbYellow	= 65535,
	rgbYellowGreen	= 3329434,
	rgbViolet	= 15631086,
	rgbWheat	= 11788021,
	rgbWhite	= 16777215,
	rgbWhiteSmoke	= 16119285
    } 	XlRgbColor;

typedef /* [uuid] */  DECLSPEC_UUID("850B18FB-AFB2-489C-A498-DF16AFF614F3") 
enum XlLineStyle
    {	xlContinuous	= 1,
	xlDash	= -4115,
	xlDashDot	= 4,
	xlDashDotDot	= 5,
	xlDot	= -4118,
	xlDouble	= -4119,
	xlSlantDashDot	= 13,
	xlLineStyleNone	= -4142
    } 	XlLineStyle;

typedef /* [uuid] */  DECLSPEC_UUID("B95C5967-64BB-4D6F-9EE8-9916B8637A41") 
enum XlAxisCrosses
    {	xlAxisCrossesAutomatic	= -4105,
	xlAxisCrossesCustom	= -4114,
	xlAxisCrossesMaximum	= 2,
	xlAxisCrossesMinimum	= 4
    } 	XlAxisCrosses;

typedef /* [uuid] */  DECLSPEC_UUID("9F3A2942-5BA4-4578-B6E3-4819C4CAD7B0") 
enum XlAxisGroup
    {	xlPrimary	= 1,
	xlSecondary	= 2
    } 	XlAxisGroup;

typedef /* [uuid] */  DECLSPEC_UUID("DD79733B-5E46-49C9-8400-6BCF316EC79E") 
enum XlAxisType
    {	xlCategory	= 1,
	xlSeriesAxis	= 3,
	xlValue	= 2
    } 	XlAxisType;

typedef /* [uuid] */  DECLSPEC_UUID("D2431A3D-F112-4A83-97B2-BC3CE3C9B73B") 
enum XlBarShape
    {	xlBox	= 0,
	xlPyramidToPoint	= 1,
	xlPyramidToMax	= 2,
	xlCylinder	= 3,
	xlConeToPoint	= 4,
	xlConeToMax	= 5
    } 	XlBarShape;

typedef /* [uuid] */  DECLSPEC_UUID("3918E32A-FD7F-461C-B2E0-F5605207C30B") 
enum XlBorderWeight
    {	xlHairline	= 1,
	xlMedium	= -4138,
	xlThick	= 4,
	xlThin	= 2
    } 	XlBorderWeight;

typedef /* [uuid] */  DECLSPEC_UUID("406223E5-9460-41D9-BABF-B6E6D3C62F2D") 
enum XlCategoryType
    {	xlCategoryScale	= 2,
	xlTimeScale	= 3,
	xlAutomaticScale	= -4105
    } 	XlCategoryType;

typedef /* [uuid] */  DECLSPEC_UUID("A66EB34B-BCC6-40E7-9722-398CF51F2A17") 
enum XlChartElementPosition
    {	xlChartElementPositionAutomatic	= -4105,
	xlChartElementPositionCustom	= -4114
    } 	XlChartElementPosition;

typedef /* [uuid] */  DECLSPEC_UUID("FB55F3EB-2F7C-4410-982E-ED9BC7812E32") 
enum XlChartItem
    {	xlDataLabel	= 0,
	xlChartArea	= 2,
	xlSeries	= 3,
	xlChartTitle	= 4,
	xlWalls	= 5,
	xlCorners	= 6,
	xlDataTable	= 7,
	xlTrendline	= 8,
	xlErrorBars	= 9,
	xlXErrorBars	= 10,
	xlYErrorBars	= 11,
	xlLegendEntry	= 12,
	xlLegendKey	= 13,
	xlShape	= 14,
	xlMajorGridlines	= 15,
	xlMinorGridlines	= 16,
	xlAxisTitle	= 17,
	xlUpBars	= 18,
	xlPlotArea	= 19,
	xlDownBars	= 20,
	xlAxis	= 21,
	xlSeriesLines	= 22,
	xlFloor	= 23,
	xlLegend	= 24,
	xlHiLoLines	= 25,
	xlDropLines	= 26,
	xlRadarAxisLabels	= 27,
	xlNothing	= 28,
	xlLeaderLines	= 29,
	xlDisplayUnitLabel	= 30,
	xlPivotChartFieldButton	= 31,
	xlPivotChartDropZone	= 32
    } 	XlChartItem;

typedef /* [uuid] */  DECLSPEC_UUID("BCC70DFC-C553-4FA1-99CC-C599A711ADD0") 
enum XlOrientation
    {	xlDownward	= -4170,
	xlHorizontal	= -4128,
	xlUpward	= -4171,
	xlVertical	= -4166
    } 	XlOrientation;

typedef /* [uuid] */  DECLSPEC_UUID("DE37E118-9080-45E2-8F09-67161638990F") 
enum XlChartPictureType
    {	xlStackScale	= 3,
	xlStack	= 2,
	xlStretch	= 1
    } 	XlChartPictureType;

typedef /* [uuid] */  DECLSPEC_UUID("878F9AD5-D422-4CA3-80A0-AE420918F413") 
enum XlChartSplitType
    {	xlSplitByPosition	= 1,
	xlSplitByPercentValue	= 3,
	xlSplitByCustomSplit	= 4,
	xlSplitByValue	= 2
    } 	XlChartSplitType;

typedef /* [uuid] */  DECLSPEC_UUID("9DCDA232-6504-4F31-A174-CEEE2EFE5F27") 
enum XlColorIndex
    {	xlColorIndexAutomatic	= -4105,
	xlColorIndexNone	= -4142
    } 	XlColorIndex;

typedef /* [uuid] */  DECLSPEC_UUID("183EB140-C143-4A88-A7E0-15FC6E00C217") 
enum XlConstants
    {	xlAutomatic	= -4105,
	xlCombination	= -4111,
	xlCustom	= -4114,
	xlBar	= 2,
	xlColumn	= 3,
	xl3DBar	= -4099,
	xl3DSurface	= -4103,
	xlDefaultAutoFormat	= -1,
	xlNone	= -4142,
	xlAbove	= 0,
	xlBelow	= 1,
	xlBoth	= 1,
	xlBottom	= -4107,
	xlCenter	= -4108,
	xlChecker	= 9,
	xlCircle	= 8,
	xlCorner	= 2,
	xlCrissCross	= 16,
	xlCross	= 4,
	xlDiamond	= 2,
	xlDistributed	= -4117,
	xlFill	= 5,
	xlFixedValue	= 1,
	xlGeneral	= 1,
	xlGray16	= 17,
	xlGray25	= -4124,
	xlGray50	= -4125,
	xlGray75	= -4126,
	xlGray8	= 18,
	xlGrid	= 15,
	xlHigh	= -4127,
	xlInside	= 2,
	xlJustify	= -4130,
	xlLeft	= -4131,
	xlLightDown	= 13,
	xlLightHorizontal	= 11,
	xlLightUp	= 14,
	xlLightVertical	= 12,
	xlLow	= -4134,
	xlMaximum	= 2,
	xlMinimum	= 4,
	xlMinusValues	= 3,
	xlNextToAxis	= 4,
	xlOpaque	= 3,
	xlOutside	= 3,
	xlPercent	= 2,
	xlPlus	= 9,
	xlPlusValues	= 2,
	xlRight	= -4152,
	xlScale	= 3,
	xlSemiGray75	= 10,
	xlShowLabel	= 4,
	xlShowLabelAndPercent	= 5,
	xlShowPercent	= 3,
	xlShowValue	= 2,
	xlSingle	= 2,
	xlSolid	= 1,
	xlSquare	= 1,
	xlStar	= 5,
	xlStError	= 4,
	xlTop	= -4160,
	xlTransparent	= 2,
	xlTriangle	= 3
    } 	XlConstants;

typedef /* [uuid] */  DECLSPEC_UUID("F11B2572-8FF8-44AE-9876-AEF9A8B749A8") 
enum XlDataLabelPosition
    {	xlLabelPositionCenter	= -4108,
	xlLabelPositionAbove	= 0,
	xlLabelPositionBelow	= 1,
	xlLabelPositionLeft	= -4131,
	xlLabelPositionRight	= -4152,
	xlLabelPositionOutsideEnd	= 2,
	xlLabelPositionInsideEnd	= 3,
	xlLabelPositionInsideBase	= 4,
	xlLabelPositionBestFit	= 5,
	xlLabelPositionMixed	= 6,
	xlLabelPositionCustom	= 7
    } 	XlDataLabelPosition;

typedef /* [uuid] */  DECLSPEC_UUID("840D3BE9-75B9-44F8-A4A9-8C23F48DFFE0") 
enum XlDataLabelsType
    {	xlDataLabelsShowNone	= -4142,
	xlDataLabelsShowValue	= 2,
	xlDataLabelsShowPercent	= 3,
	xlDataLabelsShowLabel	= 4,
	xlDataLabelsShowLabelAndPercent	= 5,
	xlDataLabelsShowBubbleSizes	= 6
    } 	XlDataLabelsType;

typedef /* [uuid] */  DECLSPEC_UUID("04B01227-B5BD-448C-89AB-D990E9E346F4") 
enum XlDisplayBlanksAs
    {	xlInterpolated	= 3,
	xlNotPlotted	= 1,
	xlZero	= 2
    } 	XlDisplayBlanksAs;

typedef /* [uuid] */  DECLSPEC_UUID("87A9A6EE-10D5-41C4-BD53-FDCA6EC7E139") 
enum XlDisplayUnit
    {	xlHundreds	= -2,
	xlThousands	= -3,
	xlTenThousands	= -4,
	xlHundredThousands	= -5,
	xlMillions	= -6,
	xlTenMillions	= -7,
	xlHundredMillions	= -8,
	xlThousandMillions	= -9,
	xlMillionMillions	= -10
    } 	XlDisplayUnit;

typedef /* [uuid] */  DECLSPEC_UUID("7BD721FC-E709-48B5-9358-18408F131030") 
enum XlEndStyleCap
    {	xlCap	= 1,
	xlNoCap	= 2
    } 	XlEndStyleCap;

typedef /* [uuid] */  DECLSPEC_UUID("3AD2FBBD-B1AE-4BED-925D-CE60450115CB") 
enum XlErrorBarDirection
    {	xlChartX	= -4168,
	xlChartY	= 1
    } 	XlErrorBarDirection;

typedef /* [uuid] */  DECLSPEC_UUID("00C9E500-2E7D-4ECF-B7BC-D0B86CB8F3A6") 
enum XlErrorBarInclude
    {	xlErrorBarIncludeBoth	= 1,
	xlErrorBarIncludeMinusValues	= 3,
	xlErrorBarIncludeNone	= -4142,
	xlErrorBarIncludePlusValues	= 2
    } 	XlErrorBarInclude;

typedef /* [uuid] */  DECLSPEC_UUID("00983AAB-CA07-437D-9415-154DAD6918F0") 
enum XlErrorBarType
    {	xlErrorBarTypeCustom	= -4114,
	xlErrorBarTypeFixedValue	= 1,
	xlErrorBarTypePercent	= 2,
	xlErrorBarTypeStDev	= -4155,
	xlErrorBarTypeStError	= 4
    } 	XlErrorBarType;

typedef /* [uuid] */  DECLSPEC_UUID("9D60EF74-103F-4ACB-8042-20C4D100F034") 
enum XlHAlign
    {	xlHAlignCenter	= -4108,
	xlHAlignCenterAcrossSelection	= 7,
	xlHAlignDistributed	= -4117,
	xlHAlignFill	= 5,
	xlHAlignGeneral	= 1,
	xlHAlignJustify	= -4130,
	xlHAlignLeft	= -4131,
	xlHAlignRight	= -4152
    } 	XlHAlign;

typedef /* [uuid] */  DECLSPEC_UUID("DB4B1313-F371-453B-9ECA-9C9495FC23AD") 
enum XlLegendPosition
    {	xlLegendPositionBottom	= -4107,
	xlLegendPositionCorner	= 2,
	xlLegendPositionLeft	= -4131,
	xlLegendPositionRight	= -4152,
	xlLegendPositionTop	= -4160,
	xlLegendPositionCustom	= -4161
    } 	XlLegendPosition;

typedef /* [uuid] */  DECLSPEC_UUID("12B55737-A883-42FF-B5F7-D7360E7B97B4") 
enum XlMarkerStyle
    {	xlMarkerStyleAutomatic	= -4105,
	xlMarkerStyleCircle	= 8,
	xlMarkerStyleDash	= -4115,
	xlMarkerStyleDiamond	= 2,
	xlMarkerStyleDot	= -4118,
	xlMarkerStyleNone	= -4142,
	xlMarkerStylePicture	= -4147,
	xlMarkerStylePlus	= 9,
	xlMarkerStyleSquare	= 1,
	xlMarkerStyleStar	= 5,
	xlMarkerStyleTriangle	= 3,
	xlMarkerStyleX	= -4168
    } 	XlMarkerStyle;

typedef /* [uuid] */  DECLSPEC_UUID("7FAC3690-46D1-49CD-8793-5690439DDC8B") 
enum XlPivotFieldOrientation
    {	xlColumnField	= 2,
	xlDataField	= 4,
	xlHidden	= 0,
	xlPageField	= 3,
	xlRowField	= 1
    } 	XlPivotFieldOrientation;

typedef /* [uuid] */  DECLSPEC_UUID("34A545F2-2447-4991-9CD2-B7F0D5707591") 
enum XlReadingOrder
    {	xlContext	= -5002,
	xlLTR	= -5003,
	xlRTL	= -5004
    } 	XlReadingOrder;

typedef /* [uuid] */  DECLSPEC_UUID("08474527-2498-4302-9408-AAA07DE998D7") 
enum XlRowCol
    {	xlColumns	= 2,
	xlRows	= 1
    } 	XlRowCol;

typedef /* [uuid] */  DECLSPEC_UUID("CA98C99C-D154-4B5E-A142-ED2E49FE6EA1") 
enum XlScaleType
    {	xlScaleLinear	= -4132,
	xlScaleLogarithmic	= -4133
    } 	XlScaleType;

typedef /* [uuid] */  DECLSPEC_UUID("B5C2A6B9-6991-478A-86C0-C4A227F44940") 
enum XlSizeRepresents
    {	xlSizeIsWidth	= 2,
	xlSizeIsArea	= 1
    } 	XlSizeRepresents;

typedef /* [uuid] */  DECLSPEC_UUID("DC28ED70-ABB0-41A1-B45E-73D98203B3B5") 
enum XlTickLabelOrientation
    {	xlTickLabelOrientationAutomatic	= -4105,
	xlTickLabelOrientationDownward	= -4170,
	xlTickLabelOrientationHorizontal	= -4128,
	xlTickLabelOrientationUpward	= -4171,
	xlTickLabelOrientationVertical	= -4166
    } 	XlTickLabelOrientation;

typedef /* [uuid] */  DECLSPEC_UUID("FBB0D012-58F0-4251-ABA7-0C0A5E416514") 
enum XlTickLabelPosition
    {	xlTickLabelPositionHigh	= -4127,
	xlTickLabelPositionLow	= -4134,
	xlTickLabelPositionNextToAxis	= 4,
	xlTickLabelPositionNone	= -4142
    } 	XlTickLabelPosition;

typedef /* [uuid] */  DECLSPEC_UUID("6D1EDF65-FB90-465C-8777-015D7028E975") 
enum XlTickMark
    {	xlTickMarkCross	= 4,
	xlTickMarkInside	= 2,
	xlTickMarkNone	= -4142,
	xlTickMarkOutside	= 3
    } 	XlTickMark;

typedef /* [uuid] */  DECLSPEC_UUID("B5E8C11D-EC7B-491B-96E8-AF57A773EED2") 
enum XlTimeUnit
    {	xlDays	= 0,
	xlMonths	= 1,
	xlYears	= 2
    } 	XlTimeUnit;

typedef /* [uuid] */  DECLSPEC_UUID("F2BFA1D6-B1E6-4375-96F0-11540CD587C2") 
enum XlTrendlineType
    {	xlExponential	= 5,
	xlLinear	= -4132,
	xlLogarithmic	= -4133,
	xlMovingAvg	= 6,
	xlPolynomial	= 3,
	xlPower	= 4
    } 	XlTrendlineType;

typedef /* [uuid] */  DECLSPEC_UUID("DDAFA8B9-3BBB-4679-8D6C-8701B9F234E2") 
enum XlUnderlineStyle
    {	xlUnderlineStyleDouble	= -4119,
	xlUnderlineStyleDoubleAccounting	= 5,
	xlUnderlineStyleNone	= -4142,
	xlUnderlineStyleSingle	= 2,
	xlUnderlineStyleSingleAccounting	= 4
    } 	XlUnderlineStyle;

typedef /* [uuid] */  DECLSPEC_UUID("E0662922-D918-4344-8A6A-D95499304CE2") 
enum XlVAlign
    {	xlVAlignBottom	= -4107,
	xlVAlignCenter	= -4108,
	xlVAlignDistributed	= -4117,
	xlVAlignJustify	= -4130,
	xlVAlignTop	= -4160
    } 	XlVAlign;

typedef /* [uuid] */  DECLSPEC_UUID("CB5DD948-AAB3-405F-9F29-79468F1F5971") 
enum PpResampleMediaProfile
    {	ppResampleMediaProfileCustom	= 1,
	ppResampleMediaProfileSmall	= 2,
	ppResampleMediaProfileSmaller	= 3,
	ppResampleMediaProfileSmallest	= 4
    } 	PpResampleMediaProfile;

typedef /* [uuid] */  DECLSPEC_UUID("B44003E4-31C5-46DA-9FBA-985A62352AFD") 
enum PpMediaTaskStatus
    {	ppMediaTaskStatusNone	= 0,
	ppMediaTaskStatusInProgress	= 1,
	ppMediaTaskStatusQueued	= 2,
	ppMediaTaskStatusDone	= 3,
	ppMediaTaskStatusFailed	= 4
    } 	PpMediaTaskStatus;

typedef /* [uuid] */  DECLSPEC_UUID("1AB5AC71-B868-45CE-94DD-42B327B8BC0F") 
enum PpPlayerState
    {	ppPlaying	= 0,
	ppPaused	= 1,
	ppStopped	= 2,
	ppNotReady	= 3
    } 	PpPlayerState;

typedef /* [uuid] */  DECLSPEC_UUID("33E189F9-6F21-42C5-95CB-B064ABF618EA") 
enum XlPieSliceLocation
    {	xlHorizontalCoordinate	= 1,
	xlVerticalCoordinate	= 2
    } 	XlPieSliceLocation;

typedef /* [uuid] */  DECLSPEC_UUID("C11F48F8-2ECB-4A6D-81CE-96C4C604A765") 
enum XlPieSliceIndex
    {	xlOuterCounterClockwisePoint	= 1,
	xlOuterCenterPoint	= 2,
	xlOuterClockwisePoint	= 3,
	xlMidClockwiseRadiusPoint	= 4,
	xlCenterPoint	= 5,
	xlMidCounterClockwiseRadiusPoint	= 6,
	xlInnerClockwisePoint	= 7,
	xlInnerCenterPoint	= 8,
	xlInnerCounterClockwisePoint	= 9
    } 	XlPieSliceIndex;

typedef /* [uuid] */  DECLSPEC_UUID("7F9B36C7-48CC-335E-B058-49658FD8CECE") 
enum PpProtectedViewCloseReason
    {	ppProtectedViewCloseNormal	= 0,
	ppProtectedViewCloseEdit	= 1,
	ppProtectedViewCloseForced	= 2
    } 	PpProtectedViewCloseReason;

typedef /* [uuid] */  DECLSPEC_UUID("BFFE8F80-6A67-4B7A-AEAA-8823E7932C87") 
enum XlCategoryLabelLevel
    {	xlCategoryLabelLevelNone	= -3,
	xlCategoryLabelLevelCustom	= -2,
	xlCategoryLabelLevelAll	= -1
    } 	XlCategoryLabelLevel;

typedef /* [uuid] */  DECLSPEC_UUID("76D9466C-84C2-4355-81FE-CB1B9CB03C19") 
enum XlSeriesNameLevel
    {	xlSeriesNameLevelNone	= -3,
	xlSeriesNameLevelCustom	= -2,
	xlSeriesNameLevelAll	= -1
    } 	XlSeriesNameLevel;

typedef /* [uuid] */  DECLSPEC_UUID("6E8C12BD-5FD3-4AE8-A61F-D0F27BCBB2D2") 
enum PpGuideOrientation
    {	ppHorizontalGuide	= 1,
	ppVerticalGuide	= 2
    } 	PpGuideOrientation;













































































































































































































extern "C++" const IID LIBID_PowerPoint;

#ifndef __Collection_INTERFACE_DEFINED__
#define __Collection_INTERFACE_DEFINED__

/* interface Collection */
/* [object][oleautomation][dual][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_Collection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493450-5A91-11CF-8700-00AA0060263B")
    Collection : public IDispatch
    {
    public:
        virtual /* [helpcontext][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **_NewEnum) = 0;
        
        virtual /* [helpcontext][restricted][id] */ HRESULT STDMETHODCALLTYPE _Index( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Collection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Collection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Collection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Collection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Collection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Collection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Collection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Collection * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            Collection * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Collection * This,
            /* [retval][out] */ long *Count);
        
        END_INTERFACE
    } CollectionVtbl;

    interface Collection
    {
        CONST_VTBL struct CollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Collection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Collection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Collection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Collection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Collection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Collection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Collection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Collection_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Collection__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define Collection_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Collection_INTERFACE_DEFINED__ */


#ifndef ___Application_INTERFACE_DEFINED__
#define ___Application_INTERFACE_DEFINED__

/* interface _Application */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID__Application;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493442-5A91-11CF-8700-00AA0060263B")
    _Application : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Presentations( 
            /* [retval][out] */ Presentations **Presentations) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Windows( 
            /* [retval][out] */ DocumentWindows **Windows) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Dialogs( 
            /* [retval][out] */ IUnknown **Dialogs) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveWindow( 
            /* [retval][out] */ DocumentWindow **ActiveWindow) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActivePresentation( 
            /* [retval][out] */ Presentation	**ActivePresentation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideShowWindows( 
            /* [retval][out] */ SlideShowWindows **SlideShowWindows) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandBars( 
            /* [retval][out] */ /* external definition not present */ CommandBars **CommandBars) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *Path) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Caption( 
            /* [retval][out] */ BSTR *Caption) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Caption( 
            /* [in] */ BSTR Caption) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Assistant( 
            /* [retval][out] */ /* external definition not present */ Assistant **Assistant) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileSearch( 
            /* [retval][out] */ /* external definition not present */ FileSearch **FileSearch) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileFind( 
            /* [retval][out] */ /* external definition not present */ IFind **FileFind) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Build( 
            /* [retval][out] */ BSTR *Build) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Version( 
            /* [retval][out] */ BSTR *Version) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OperatingSystem( 
            /* [retval][out] */ BSTR *OperatingSystem) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActivePrinter( 
            /* [retval][out] */ BSTR *ActivePrinter) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *Creator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddIns( 
            /* [retval][out] */ AddIns **AddIns) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VBE( 
            /* [retval][out] */ /* external definition not present */ VBE **VBE) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Help( 
            /* [defaultvalue][optional][in] */ BSTR HelpFile = (unsigned short*)u"vbapp10.chm",
            /* [defaultvalue][optional][in] */ int ContextID = 0) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Quit( void) = 0;
        
        virtual /* [helpcontext][vararg][id] */ HRESULT STDMETHODCALLTYPE Run( 
            /* [in] */ BSTR MacroName,
            /* [in] */ SAFEARRAY * *safeArrayOfParams,
            /* [retval][out] */ VARIANT *Run) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE PPFileDialog( 
            /* [in] */ PpFileDialogType Type,
            /* [retval][out] */ IUnknown **PPFileDialog) = 0;
        
        virtual /* [helpcontext][restricted][id] */ HRESULT STDMETHODCALLTYPE LaunchSpelling( 
            /* [in] */ DocumentWindow *pWindow) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ single *Left) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ single Left) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ single *Top) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ single Top) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ single *Width) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ single Width) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ single *Height) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ single Height) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WindowState( 
            /* [retval][out] */ PpWindowState *WindowState) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WindowState( 
            /* [in] */ PpWindowState WindowState) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ MsoTriState *Visible) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ MsoTriState Visible) = 0;
        
        virtual /* [helpcontext][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get_HWND( 
            /* [retval][out] */ long *HWND) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Active( 
            /* [retval][out] */ MsoTriState *Active) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnswerWizard( 
            /* [retval][out] */ /* external definition not present */ AnswerWizard **AnswerWizard) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_COMAddIns( 
            /* [retval][out] */ /* external definition not present */ COMAddIns **COMAddIns) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProductCode( 
            /* [retval][out] */ BSTR *ProductCode) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultWebOptions( 
            /* [retval][out] */ DefaultWebOptions **DefaultWebOptions) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageSettings( 
            /* [retval][out] */ /* external definition not present */ LanguageSettings **LanguageSettings) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_MsoDebugOptions( 
            /* [retval][out] */ /* external definition not present */ MsoDebugOptions **MsoDebugOptions) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowWindowsInTaskbar( 
            /* [retval][out] */ MsoTriState *ShowWindowsInTaskbar) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowWindowsInTaskbar( 
            /* [in] */ MsoTriState ShowWindowsInTaskbar) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Marker( 
            /* [retval][out] */ IUnknown **Marker) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FeatureInstall( 
            /* [retval][out] */ MsoFeatureInstall *FeatureInstall) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FeatureInstall( 
            /* [in] */ MsoFeatureInstall FeatureInstall) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE GetOptionFlag( 
            /* [in] */ long Option,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL Persist,
            /* [retval][out] */ VARIANT_BOOL *GetOptionFlag) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE SetOptionFlag( 
            /* [in] */ long Option,
            /* [in] */ VARIANT_BOOL State,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL Persist = 0) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileDialog( 
            /* [in] */ MsoFileDialogType Type,
            /* [retval][out] */ /* external definition not present */ FileDialog **FileDialog) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayGridLines( 
            /* [retval][out] */ MsoTriState *DisplayGridLines) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayGridLines( 
            /* [in] */ MsoTriState DisplayGridLines) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutomationSecurity( 
            /* [retval][out] */ MsoAutomationSecurity *AutomationSecurity) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutomationSecurity( 
            /* [in] */ MsoAutomationSecurity AutomationSecurity) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NewPresentation( 
            /* [retval][out] */ /* external definition not present */ NewFile **NewPresentation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayAlerts( 
            /* [retval][out] */ PpAlertLevel *DisplayAlerts) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayAlerts( 
            /* [in] */ PpAlertLevel DisplayAlerts) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowStartupDialog( 
            /* [retval][out] */ MsoTriState *ShowStartupDialog) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowStartupDialog( 
            /* [in] */ MsoTriState ShowStartupDialog) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE SetPerfMarker( 
            /* [in] */ int Marker) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoCorrect( 
            /* [retval][out] */ AutoCorrect **AutoCorrect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Options( 
            /* [retval][out] */ Options **Options) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE LaunchPublishSlidesDialog( 
            /* [in] */ BSTR SlideLibraryUrl) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE LaunchSendToPPTDialog( 
            /* [in] */ VARIANT *SlideUrls) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayDocumentInformationPanel( 
            /* [retval][out] */ VARIANT_BOOL *DisplayDocumentInformationPanel) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayDocumentInformationPanel( 
            /* [in] */ VARIANT_BOOL DisplayDocumentInformationPanel) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Assistance( 
            /* [retval][out] */ /* external definition not present */ IAssistance **Assistance) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveEncryptionSession( 
            /* [retval][out] */ long *ActiveEncryptionSession) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileConverters( 
            /* [retval][out] */ FileConverters **FileConverters) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartArtLayouts( 
            /* [retval][out] */ /* external definition not present */ SmartArtLayouts **SmartArtLayouts) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartArtQuickStyles( 
            /* [retval][out] */ /* external definition not present */ SmartArtQuickStyles **SmartArtQuickStyles) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartArtColors( 
            /* [retval][out] */ /* external definition not present */ SmartArtColors **SmartArtColors) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProtectedViewWindows( 
            /* [retval][out] */ ProtectedViewWindows **ProtectedViewWindows) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveProtectedViewWindow( 
            /* [retval][out] */ ProtectedViewWindow **ActiveProtectedViewWindow) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsSandboxed( 
            /* [retval][out] */ VARIANT_BOOL *IsSandboxed) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_ResampleMediaTasks( 
            /* [retval][out] */ ResampleMediaTasks **ResampleMediaTasks) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE StartNewUndoEntry( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileValidation( 
            /* [retval][out] */ MsoFileValidationMode *FileValidation) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FileValidation( 
            /* [in] */ MsoFileValidationMode FileValidation) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenThemeFile( 
            /* [in] */ BSTR themeFileName,
            /* [retval][out] */ Theme **Theme) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChartDataPointTrack( 
            /* [retval][out] */ VARIANT_BOOL *pfChartDataPointTrack) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ChartDataPointTrack( 
            /* [in] */ VARIANT_BOOL pfChartDataPointTrack) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayGuides( 
            /* [retval][out] */ MsoTriState *DisplayGridLines) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayGuides( 
            /* [in] */ MsoTriState DisplayGridLines) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _ApplicationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Application * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Application * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Application * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Application * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Application * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Application * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Application * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Presentations )( 
            _Application * This,
            /* [retval][out] */ Presentations **Presentations);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Windows )( 
            _Application * This,
            /* [retval][out] */ DocumentWindows **Windows);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Dialogs )( 
            _Application * This,
            /* [retval][out] */ IUnknown **Dialogs);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveWindow )( 
            _Application * This,
            /* [retval][out] */ DocumentWindow **ActiveWindow);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActivePresentation )( 
            _Application * This,
            /* [retval][out] */ Presentation	**ActivePresentation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideShowWindows )( 
            _Application * This,
            /* [retval][out] */ SlideShowWindows **SlideShowWindows);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandBars )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ CommandBars **CommandBars);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            _Application * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            _Application * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Caption )( 
            _Application * This,
            /* [retval][out] */ BSTR *Caption);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Caption )( 
            _Application * This,
            /* [in] */ BSTR Caption);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Assistant )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ Assistant **Assistant);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileSearch )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ FileSearch **FileSearch);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileFind )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ IFind **FileFind);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Build )( 
            _Application * This,
            /* [retval][out] */ BSTR *Build);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            _Application * This,
            /* [retval][out] */ BSTR *Version);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OperatingSystem )( 
            _Application * This,
            /* [retval][out] */ BSTR *OperatingSystem);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActivePrinter )( 
            _Application * This,
            /* [retval][out] */ BSTR *ActivePrinter);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            _Application * This,
            /* [retval][out] */ long *Creator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddIns )( 
            _Application * This,
            /* [retval][out] */ AddIns **AddIns);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VBE )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ VBE **VBE);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Help )( 
            _Application * This,
            /* [defaultvalue][optional][in] */ BSTR HelpFile,
            /* [defaultvalue][optional][in] */ int ContextID);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Quit )( 
            _Application * This);
        
        /* [helpcontext][vararg][id] */ HRESULT ( STDMETHODCALLTYPE *Run )( 
            _Application * This,
            /* [in] */ BSTR MacroName,
            /* [in] */ SAFEARRAY * *safeArrayOfParams,
            /* [retval][out] */ VARIANT *Run);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *PPFileDialog )( 
            _Application * This,
            /* [in] */ PpFileDialogType Type,
            /* [retval][out] */ IUnknown **PPFileDialog);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *LaunchSpelling )( 
            _Application * This,
            /* [in] */ DocumentWindow *pWindow);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            _Application * This,
            /* [retval][out] */ single *Left);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            _Application * This,
            /* [in] */ single Left);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            _Application * This,
            /* [retval][out] */ single *Top);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            _Application * This,
            /* [in] */ single Top);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            _Application * This,
            /* [retval][out] */ single *Width);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            _Application * This,
            /* [in] */ single Width);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            _Application * This,
            /* [retval][out] */ single *Height);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            _Application * This,
            /* [in] */ single Height);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowState )( 
            _Application * This,
            /* [retval][out] */ PpWindowState *WindowState);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WindowState )( 
            _Application * This,
            /* [in] */ PpWindowState WindowState);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            _Application * This,
            /* [retval][out] */ MsoTriState *Visible);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            _Application * This,
            /* [in] */ MsoTriState Visible);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HWND )( 
            _Application * This,
            /* [retval][out] */ long *HWND);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Active )( 
            _Application * This,
            /* [retval][out] */ MsoTriState *Active);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            _Application * This);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnswerWizard )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ AnswerWizard **AnswerWizard);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_COMAddIns )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ COMAddIns **COMAddIns);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProductCode )( 
            _Application * This,
            /* [retval][out] */ BSTR *ProductCode);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultWebOptions )( 
            _Application * This,
            /* [retval][out] */ DefaultWebOptions **DefaultWebOptions);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageSettings )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ LanguageSettings **LanguageSettings);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MsoDebugOptions )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ MsoDebugOptions **MsoDebugOptions);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowWindowsInTaskbar )( 
            _Application * This,
            /* [retval][out] */ MsoTriState *ShowWindowsInTaskbar);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowWindowsInTaskbar )( 
            _Application * This,
            /* [in] */ MsoTriState ShowWindowsInTaskbar);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Marker )( 
            _Application * This,
            /* [retval][out] */ IUnknown **Marker);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FeatureInstall )( 
            _Application * This,
            /* [retval][out] */ MsoFeatureInstall *FeatureInstall);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FeatureInstall )( 
            _Application * This,
            /* [in] */ MsoFeatureInstall FeatureInstall);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *GetOptionFlag )( 
            _Application * This,
            /* [in] */ long Option,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL Persist,
            /* [retval][out] */ VARIANT_BOOL *GetOptionFlag);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *SetOptionFlag )( 
            _Application * This,
            /* [in] */ long Option,
            /* [in] */ VARIANT_BOOL State,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL Persist);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileDialog )( 
            _Application * This,
            /* [in] */ MsoFileDialogType Type,
            /* [retval][out] */ /* external definition not present */ FileDialog **FileDialog);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayGridLines )( 
            _Application * This,
            /* [retval][out] */ MsoTriState *DisplayGridLines);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayGridLines )( 
            _Application * This,
            /* [in] */ MsoTriState DisplayGridLines);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutomationSecurity )( 
            _Application * This,
            /* [retval][out] */ MsoAutomationSecurity *AutomationSecurity);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutomationSecurity )( 
            _Application * This,
            /* [in] */ MsoAutomationSecurity AutomationSecurity);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NewPresentation )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ NewFile **NewPresentation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayAlerts )( 
            _Application * This,
            /* [retval][out] */ PpAlertLevel *DisplayAlerts);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayAlerts )( 
            _Application * This,
            /* [in] */ PpAlertLevel DisplayAlerts);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowStartupDialog )( 
            _Application * This,
            /* [retval][out] */ MsoTriState *ShowStartupDialog);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowStartupDialog )( 
            _Application * This,
            /* [in] */ MsoTriState ShowStartupDialog);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *SetPerfMarker )( 
            _Application * This,
            /* [in] */ int Marker);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoCorrect )( 
            _Application * This,
            /* [retval][out] */ AutoCorrect **AutoCorrect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Options )( 
            _Application * This,
            /* [retval][out] */ Options **Options);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *LaunchPublishSlidesDialog )( 
            _Application * This,
            /* [in] */ BSTR SlideLibraryUrl);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *LaunchSendToPPTDialog )( 
            _Application * This,
            /* [in] */ VARIANT *SlideUrls);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayDocumentInformationPanel )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *DisplayDocumentInformationPanel);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayDocumentInformationPanel )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL DisplayDocumentInformationPanel);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Assistance )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ IAssistance **Assistance);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveEncryptionSession )( 
            _Application * This,
            /* [retval][out] */ long *ActiveEncryptionSession);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileConverters )( 
            _Application * This,
            /* [retval][out] */ FileConverters **FileConverters);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartArtLayouts )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ SmartArtLayouts **SmartArtLayouts);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartArtQuickStyles )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ SmartArtQuickStyles **SmartArtQuickStyles);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartArtColors )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ SmartArtColors **SmartArtColors);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProtectedViewWindows )( 
            _Application * This,
            /* [retval][out] */ ProtectedViewWindows **ProtectedViewWindows);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveProtectedViewWindow )( 
            _Application * This,
            /* [retval][out] */ ProtectedViewWindow **ActiveProtectedViewWindow);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsSandboxed )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *IsSandboxed);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResampleMediaTasks )( 
            _Application * This,
            /* [retval][out] */ ResampleMediaTasks **ResampleMediaTasks);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StartNewUndoEntry )( 
            _Application * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileValidation )( 
            _Application * This,
            /* [retval][out] */ MsoFileValidationMode *FileValidation);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FileValidation )( 
            _Application * This,
            /* [in] */ MsoFileValidationMode FileValidation);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenThemeFile )( 
            _Application * This,
            /* [in] */ BSTR themeFileName,
            /* [retval][out] */ Theme **Theme);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChartDataPointTrack )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *pfChartDataPointTrack);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ChartDataPointTrack )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL pfChartDataPointTrack);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayGuides )( 
            _Application * This,
            /* [retval][out] */ MsoTriState *DisplayGridLines);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayGuides )( 
            _Application * This,
            /* [in] */ MsoTriState DisplayGridLines);
        
        END_INTERFACE
    } _ApplicationVtbl;

    interface _Application
    {
        CONST_VTBL struct _ApplicationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Application_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Application_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Application_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Application_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Application_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Application_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Application_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Application_get_Presentations(This,Presentations)	\
    ( (This)->lpVtbl -> get_Presentations(This,Presentations) ) 

#define _Application_get_Windows(This,Windows)	\
    ( (This)->lpVtbl -> get_Windows(This,Windows) ) 

#define _Application_get_Dialogs(This,Dialogs)	\
    ( (This)->lpVtbl -> get_Dialogs(This,Dialogs) ) 

#define _Application_get_ActiveWindow(This,ActiveWindow)	\
    ( (This)->lpVtbl -> get_ActiveWindow(This,ActiveWindow) ) 

#define _Application_get_ActivePresentation(This,ActivePresentation)	\
    ( (This)->lpVtbl -> get_ActivePresentation(This,ActivePresentation) ) 

#define _Application_get_SlideShowWindows(This,SlideShowWindows)	\
    ( (This)->lpVtbl -> get_SlideShowWindows(This,SlideShowWindows) ) 

#define _Application_get_CommandBars(This,CommandBars)	\
    ( (This)->lpVtbl -> get_CommandBars(This,CommandBars) ) 

#define _Application_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define _Application_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define _Application_get_Caption(This,Caption)	\
    ( (This)->lpVtbl -> get_Caption(This,Caption) ) 

#define _Application_put_Caption(This,Caption)	\
    ( (This)->lpVtbl -> put_Caption(This,Caption) ) 

#define _Application_get_Assistant(This,Assistant)	\
    ( (This)->lpVtbl -> get_Assistant(This,Assistant) ) 

#define _Application_get_FileSearch(This,FileSearch)	\
    ( (This)->lpVtbl -> get_FileSearch(This,FileSearch) ) 

#define _Application_get_FileFind(This,FileFind)	\
    ( (This)->lpVtbl -> get_FileFind(This,FileFind) ) 

#define _Application_get_Build(This,Build)	\
    ( (This)->lpVtbl -> get_Build(This,Build) ) 

#define _Application_get_Version(This,Version)	\
    ( (This)->lpVtbl -> get_Version(This,Version) ) 

#define _Application_get_OperatingSystem(This,OperatingSystem)	\
    ( (This)->lpVtbl -> get_OperatingSystem(This,OperatingSystem) ) 

#define _Application_get_ActivePrinter(This,ActivePrinter)	\
    ( (This)->lpVtbl -> get_ActivePrinter(This,ActivePrinter) ) 

#define _Application_get_Creator(This,Creator)	\
    ( (This)->lpVtbl -> get_Creator(This,Creator) ) 

#define _Application_get_AddIns(This,AddIns)	\
    ( (This)->lpVtbl -> get_AddIns(This,AddIns) ) 

#define _Application_get_VBE(This,VBE)	\
    ( (This)->lpVtbl -> get_VBE(This,VBE) ) 

#define _Application_Help(This,HelpFile,ContextID)	\
    ( (This)->lpVtbl -> Help(This,HelpFile,ContextID) ) 

#define _Application_Quit(This)	\
    ( (This)->lpVtbl -> Quit(This) ) 

#define _Application_Run(This,MacroName,safeArrayOfParams,Run)	\
    ( (This)->lpVtbl -> Run(This,MacroName,safeArrayOfParams,Run) ) 

#define _Application_PPFileDialog(This,Type,PPFileDialog)	\
    ( (This)->lpVtbl -> PPFileDialog(This,Type,PPFileDialog) ) 

#define _Application_LaunchSpelling(This,pWindow)	\
    ( (This)->lpVtbl -> LaunchSpelling(This,pWindow) ) 

#define _Application_get_Left(This,Left)	\
    ( (This)->lpVtbl -> get_Left(This,Left) ) 

#define _Application_put_Left(This,Left)	\
    ( (This)->lpVtbl -> put_Left(This,Left) ) 

#define _Application_get_Top(This,Top)	\
    ( (This)->lpVtbl -> get_Top(This,Top) ) 

#define _Application_put_Top(This,Top)	\
    ( (This)->lpVtbl -> put_Top(This,Top) ) 

#define _Application_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define _Application_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#define _Application_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define _Application_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define _Application_get_WindowState(This,WindowState)	\
    ( (This)->lpVtbl -> get_WindowState(This,WindowState) ) 

#define _Application_put_WindowState(This,WindowState)	\
    ( (This)->lpVtbl -> put_WindowState(This,WindowState) ) 

#define _Application_get_Visible(This,Visible)	\
    ( (This)->lpVtbl -> get_Visible(This,Visible) ) 

#define _Application_put_Visible(This,Visible)	\
    ( (This)->lpVtbl -> put_Visible(This,Visible) ) 

#define _Application_get_HWND(This,HWND)	\
    ( (This)->lpVtbl -> get_HWND(This,HWND) ) 

#define _Application_get_Active(This,Active)	\
    ( (This)->lpVtbl -> get_Active(This,Active) ) 

#define _Application_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define _Application_get_AnswerWizard(This,AnswerWizard)	\
    ( (This)->lpVtbl -> get_AnswerWizard(This,AnswerWizard) ) 

#define _Application_get_COMAddIns(This,COMAddIns)	\
    ( (This)->lpVtbl -> get_COMAddIns(This,COMAddIns) ) 

#define _Application_get_ProductCode(This,ProductCode)	\
    ( (This)->lpVtbl -> get_ProductCode(This,ProductCode) ) 

#define _Application_get_DefaultWebOptions(This,DefaultWebOptions)	\
    ( (This)->lpVtbl -> get_DefaultWebOptions(This,DefaultWebOptions) ) 

#define _Application_get_LanguageSettings(This,LanguageSettings)	\
    ( (This)->lpVtbl -> get_LanguageSettings(This,LanguageSettings) ) 

#define _Application_get_MsoDebugOptions(This,MsoDebugOptions)	\
    ( (This)->lpVtbl -> get_MsoDebugOptions(This,MsoDebugOptions) ) 

#define _Application_get_ShowWindowsInTaskbar(This,ShowWindowsInTaskbar)	\
    ( (This)->lpVtbl -> get_ShowWindowsInTaskbar(This,ShowWindowsInTaskbar) ) 

#define _Application_put_ShowWindowsInTaskbar(This,ShowWindowsInTaskbar)	\
    ( (This)->lpVtbl -> put_ShowWindowsInTaskbar(This,ShowWindowsInTaskbar) ) 

#define _Application_get_Marker(This,Marker)	\
    ( (This)->lpVtbl -> get_Marker(This,Marker) ) 

#define _Application_get_FeatureInstall(This,FeatureInstall)	\
    ( (This)->lpVtbl -> get_FeatureInstall(This,FeatureInstall) ) 

#define _Application_put_FeatureInstall(This,FeatureInstall)	\
    ( (This)->lpVtbl -> put_FeatureInstall(This,FeatureInstall) ) 

#define _Application_GetOptionFlag(This,Option,Persist,GetOptionFlag)	\
    ( (This)->lpVtbl -> GetOptionFlag(This,Option,Persist,GetOptionFlag) ) 

#define _Application_SetOptionFlag(This,Option,State,Persist)	\
    ( (This)->lpVtbl -> SetOptionFlag(This,Option,State,Persist) ) 

#define _Application_get_FileDialog(This,Type,FileDialog)	\
    ( (This)->lpVtbl -> get_FileDialog(This,Type,FileDialog) ) 

#define _Application_get_DisplayGridLines(This,DisplayGridLines)	\
    ( (This)->lpVtbl -> get_DisplayGridLines(This,DisplayGridLines) ) 

#define _Application_put_DisplayGridLines(This,DisplayGridLines)	\
    ( (This)->lpVtbl -> put_DisplayGridLines(This,DisplayGridLines) ) 

#define _Application_get_AutomationSecurity(This,AutomationSecurity)	\
    ( (This)->lpVtbl -> get_AutomationSecurity(This,AutomationSecurity) ) 

#define _Application_put_AutomationSecurity(This,AutomationSecurity)	\
    ( (This)->lpVtbl -> put_AutomationSecurity(This,AutomationSecurity) ) 

#define _Application_get_NewPresentation(This,NewPresentation)	\
    ( (This)->lpVtbl -> get_NewPresentation(This,NewPresentation) ) 

#define _Application_get_DisplayAlerts(This,DisplayAlerts)	\
    ( (This)->lpVtbl -> get_DisplayAlerts(This,DisplayAlerts) ) 

#define _Application_put_DisplayAlerts(This,DisplayAlerts)	\
    ( (This)->lpVtbl -> put_DisplayAlerts(This,DisplayAlerts) ) 

#define _Application_get_ShowStartupDialog(This,ShowStartupDialog)	\
    ( (This)->lpVtbl -> get_ShowStartupDialog(This,ShowStartupDialog) ) 

#define _Application_put_ShowStartupDialog(This,ShowStartupDialog)	\
    ( (This)->lpVtbl -> put_ShowStartupDialog(This,ShowStartupDialog) ) 

#define _Application_SetPerfMarker(This,Marker)	\
    ( (This)->lpVtbl -> SetPerfMarker(This,Marker) ) 

#define _Application_get_AutoCorrect(This,AutoCorrect)	\
    ( (This)->lpVtbl -> get_AutoCorrect(This,AutoCorrect) ) 

#define _Application_get_Options(This,Options)	\
    ( (This)->lpVtbl -> get_Options(This,Options) ) 

#define _Application_LaunchPublishSlidesDialog(This,SlideLibraryUrl)	\
    ( (This)->lpVtbl -> LaunchPublishSlidesDialog(This,SlideLibraryUrl) ) 

#define _Application_LaunchSendToPPTDialog(This,SlideUrls)	\
    ( (This)->lpVtbl -> LaunchSendToPPTDialog(This,SlideUrls) ) 

#define _Application_get_DisplayDocumentInformationPanel(This,DisplayDocumentInformationPanel)	\
    ( (This)->lpVtbl -> get_DisplayDocumentInformationPanel(This,DisplayDocumentInformationPanel) ) 

#define _Application_put_DisplayDocumentInformationPanel(This,DisplayDocumentInformationPanel)	\
    ( (This)->lpVtbl -> put_DisplayDocumentInformationPanel(This,DisplayDocumentInformationPanel) ) 

#define _Application_get_Assistance(This,Assistance)	\
    ( (This)->lpVtbl -> get_Assistance(This,Assistance) ) 

#define _Application_get_ActiveEncryptionSession(This,ActiveEncryptionSession)	\
    ( (This)->lpVtbl -> get_ActiveEncryptionSession(This,ActiveEncryptionSession) ) 

#define _Application_get_FileConverters(This,FileConverters)	\
    ( (This)->lpVtbl -> get_FileConverters(This,FileConverters) ) 

#define _Application_get_SmartArtLayouts(This,SmartArtLayouts)	\
    ( (This)->lpVtbl -> get_SmartArtLayouts(This,SmartArtLayouts) ) 

#define _Application_get_SmartArtQuickStyles(This,SmartArtQuickStyles)	\
    ( (This)->lpVtbl -> get_SmartArtQuickStyles(This,SmartArtQuickStyles) ) 

#define _Application_get_SmartArtColors(This,SmartArtColors)	\
    ( (This)->lpVtbl -> get_SmartArtColors(This,SmartArtColors) ) 

#define _Application_get_ProtectedViewWindows(This,ProtectedViewWindows)	\
    ( (This)->lpVtbl -> get_ProtectedViewWindows(This,ProtectedViewWindows) ) 

#define _Application_get_ActiveProtectedViewWindow(This,ActiveProtectedViewWindow)	\
    ( (This)->lpVtbl -> get_ActiveProtectedViewWindow(This,ActiveProtectedViewWindow) ) 

#define _Application_get_IsSandboxed(This,IsSandboxed)	\
    ( (This)->lpVtbl -> get_IsSandboxed(This,IsSandboxed) ) 

#define _Application_get_ResampleMediaTasks(This,ResampleMediaTasks)	\
    ( (This)->lpVtbl -> get_ResampleMediaTasks(This,ResampleMediaTasks) ) 

#define _Application_StartNewUndoEntry(This)	\
    ( (This)->lpVtbl -> StartNewUndoEntry(This) ) 

#define _Application_get_FileValidation(This,FileValidation)	\
    ( (This)->lpVtbl -> get_FileValidation(This,FileValidation) ) 

#define _Application_put_FileValidation(This,FileValidation)	\
    ( (This)->lpVtbl -> put_FileValidation(This,FileValidation) ) 

#define _Application_OpenThemeFile(This,themeFileName,Theme)	\
    ( (This)->lpVtbl -> OpenThemeFile(This,themeFileName,Theme) ) 

#define _Application_get_ChartDataPointTrack(This,pfChartDataPointTrack)	\
    ( (This)->lpVtbl -> get_ChartDataPointTrack(This,pfChartDataPointTrack) ) 

#define _Application_put_ChartDataPointTrack(This,pfChartDataPointTrack)	\
    ( (This)->lpVtbl -> put_ChartDataPointTrack(This,pfChartDataPointTrack) ) 

#define _Application_get_DisplayGuides(This,DisplayGridLines)	\
    ( (This)->lpVtbl -> get_DisplayGuides(This,DisplayGridLines) ) 

#define _Application_put_DisplayGuides(This,DisplayGridLines)	\
    ( (This)->lpVtbl -> put_DisplayGuides(This,DisplayGridLines) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Application_INTERFACE_DEFINED__ */


#ifndef ___Global_INTERFACE_DEFINED__
#define ___Global_INTERFACE_DEFINED__

/* interface _Global */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID__Global;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493451-5A91-11CF-8700-00AA0060263B")
    _Global : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActivePresentation( 
            /* [retval][out] */ Presentation	**ActivePresentation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveWindow( 
            /* [retval][out] */ DocumentWindow **ActiveWindow) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddIns( 
            /* [retval][out] */ AddIns **AddIns) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Assistant( 
            /* [retval][out] */ /* external definition not present */ Assistant **Assistant) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Dialogs( 
            /* [retval][out] */ IUnknown **Dialogs) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Presentations( 
            /* [retval][out] */ Presentations **Presentations) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideShowWindows( 
            /* [retval][out] */ SlideShowWindows **SlideShowWindows) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Windows( 
            /* [retval][out] */ DocumentWindows **Windows) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandBars( 
            /* [retval][out] */ /* external definition not present */ CommandBars **CommandBars) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnswerWizard( 
            /* [retval][out] */ /* external definition not present */ AnswerWizard **AnswerWizard) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileConverters( 
            /* [retval][out] */ FileConverters **FileConverters) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProtectedViewWindows( 
            /* [retval][out] */ ProtectedViewWindows **ProtectedViewWindows) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveProtectedViewWindow( 
            /* [retval][out] */ ProtectedViewWindow **ActiveProtectedViewWindow) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsSandboxed( 
            /* [retval][out] */ VARIANT_BOOL *IsSandboxed) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _GlobalVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Global * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Global * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Global * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Global * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Global * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Global * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Global * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActivePresentation )( 
            _Global * This,
            /* [retval][out] */ Presentation	**ActivePresentation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveWindow )( 
            _Global * This,
            /* [retval][out] */ DocumentWindow **ActiveWindow);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddIns )( 
            _Global * This,
            /* [retval][out] */ AddIns **AddIns);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Global * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Assistant )( 
            _Global * This,
            /* [retval][out] */ /* external definition not present */ Assistant **Assistant);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Dialogs )( 
            _Global * This,
            /* [retval][out] */ IUnknown **Dialogs);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Presentations )( 
            _Global * This,
            /* [retval][out] */ Presentations **Presentations);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideShowWindows )( 
            _Global * This,
            /* [retval][out] */ SlideShowWindows **SlideShowWindows);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Windows )( 
            _Global * This,
            /* [retval][out] */ DocumentWindows **Windows);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandBars )( 
            _Global * This,
            /* [retval][out] */ /* external definition not present */ CommandBars **CommandBars);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnswerWizard )( 
            _Global * This,
            /* [retval][out] */ /* external definition not present */ AnswerWizard **AnswerWizard);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileConverters )( 
            _Global * This,
            /* [retval][out] */ FileConverters **FileConverters);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProtectedViewWindows )( 
            _Global * This,
            /* [retval][out] */ ProtectedViewWindows **ProtectedViewWindows);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveProtectedViewWindow )( 
            _Global * This,
            /* [retval][out] */ ProtectedViewWindow **ActiveProtectedViewWindow);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsSandboxed )( 
            _Global * This,
            /* [retval][out] */ VARIANT_BOOL *IsSandboxed);
        
        END_INTERFACE
    } _GlobalVtbl;

    interface _Global
    {
        CONST_VTBL struct _GlobalVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Global_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Global_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Global_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Global_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Global_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Global_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Global_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Global_get_ActivePresentation(This,ActivePresentation)	\
    ( (This)->lpVtbl -> get_ActivePresentation(This,ActivePresentation) ) 

#define _Global_get_ActiveWindow(This,ActiveWindow)	\
    ( (This)->lpVtbl -> get_ActiveWindow(This,ActiveWindow) ) 

#define _Global_get_AddIns(This,AddIns)	\
    ( (This)->lpVtbl -> get_AddIns(This,AddIns) ) 

#define _Global_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define _Global_get_Assistant(This,Assistant)	\
    ( (This)->lpVtbl -> get_Assistant(This,Assistant) ) 

#define _Global_get_Dialogs(This,Dialogs)	\
    ( (This)->lpVtbl -> get_Dialogs(This,Dialogs) ) 

#define _Global_get_Presentations(This,Presentations)	\
    ( (This)->lpVtbl -> get_Presentations(This,Presentations) ) 

#define _Global_get_SlideShowWindows(This,SlideShowWindows)	\
    ( (This)->lpVtbl -> get_SlideShowWindows(This,SlideShowWindows) ) 

#define _Global_get_Windows(This,Windows)	\
    ( (This)->lpVtbl -> get_Windows(This,Windows) ) 

#define _Global_get_CommandBars(This,CommandBars)	\
    ( (This)->lpVtbl -> get_CommandBars(This,CommandBars) ) 

#define _Global_get_AnswerWizard(This,AnswerWizard)	\
    ( (This)->lpVtbl -> get_AnswerWizard(This,AnswerWizard) ) 

#define _Global_get_FileConverters(This,FileConverters)	\
    ( (This)->lpVtbl -> get_FileConverters(This,FileConverters) ) 

#define _Global_get_ProtectedViewWindows(This,ProtectedViewWindows)	\
    ( (This)->lpVtbl -> get_ProtectedViewWindows(This,ProtectedViewWindows) ) 

#define _Global_get_ActiveProtectedViewWindow(This,ActiveProtectedViewWindow)	\
    ( (This)->lpVtbl -> get_ActiveProtectedViewWindow(This,ActiveProtectedViewWindow) ) 

#define _Global_get_IsSandboxed(This,IsSandboxed)	\
    ( (This)->lpVtbl -> get_IsSandboxed(This,IsSandboxed) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Global_INTERFACE_DEFINED__ */


#ifndef __ColorFormat_INTERFACE_DEFINED__
#define __ColorFormat_INTERFACE_DEFINED__

/* interface ColorFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ColorFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493452-5A91-11CF-8700-00AA0060263B")
    ColorFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RGB( 
            /* [retval][out] */ MsoRGBType *RGB) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RGB( 
            /* [in] */ MsoRGBType RGB) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoColorType *Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SchemeColor( 
            /* [retval][out] */ PpColorSchemeIndex *SchemeColor) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SchemeColor( 
            /* [in] */ PpColorSchemeIndex SchemeColor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TintAndShade( 
            /* [retval][out] */ single *pValue) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TintAndShade( 
            /* [in] */ single pValue) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObjectThemeColor( 
            /* [retval][out] */ MsoThemeColorIndex *ObjectThemeColor) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ObjectThemeColor( 
            /* [in] */ MsoThemeColorIndex ObjectThemeColor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Brightness( 
            /* [retval][out] */ single *Brightness) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Brightness( 
            /* [in] */ single Brightness) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ColorFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ColorFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ColorFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ColorFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ColorFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ColorFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ColorFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ColorFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ColorFormat * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ColorFormat * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ColorFormat * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RGB )( 
            ColorFormat * This,
            /* [retval][out] */ MsoRGBType *RGB);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RGB )( 
            ColorFormat * This,
            /* [in] */ MsoRGBType RGB);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ColorFormat * This,
            /* [retval][out] */ MsoColorType *Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SchemeColor )( 
            ColorFormat * This,
            /* [retval][out] */ PpColorSchemeIndex *SchemeColor);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SchemeColor )( 
            ColorFormat * This,
            /* [in] */ PpColorSchemeIndex SchemeColor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TintAndShade )( 
            ColorFormat * This,
            /* [retval][out] */ single *pValue);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TintAndShade )( 
            ColorFormat * This,
            /* [in] */ single pValue);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectThemeColor )( 
            ColorFormat * This,
            /* [retval][out] */ MsoThemeColorIndex *ObjectThemeColor);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ObjectThemeColor )( 
            ColorFormat * This,
            /* [in] */ MsoThemeColorIndex ObjectThemeColor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Brightness )( 
            ColorFormat * This,
            /* [retval][out] */ single *Brightness);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Brightness )( 
            ColorFormat * This,
            /* [in] */ single Brightness);
        
        END_INTERFACE
    } ColorFormatVtbl;

    interface ColorFormat
    {
        CONST_VTBL struct ColorFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ColorFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ColorFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ColorFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ColorFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ColorFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ColorFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ColorFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ColorFormat_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define ColorFormat_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define ColorFormat_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ColorFormat_get_RGB(This,RGB)	\
    ( (This)->lpVtbl -> get_RGB(This,RGB) ) 

#define ColorFormat_put_RGB(This,RGB)	\
    ( (This)->lpVtbl -> put_RGB(This,RGB) ) 

#define ColorFormat_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define ColorFormat_get_SchemeColor(This,SchemeColor)	\
    ( (This)->lpVtbl -> get_SchemeColor(This,SchemeColor) ) 

#define ColorFormat_put_SchemeColor(This,SchemeColor)	\
    ( (This)->lpVtbl -> put_SchemeColor(This,SchemeColor) ) 

#define ColorFormat_get_TintAndShade(This,pValue)	\
    ( (This)->lpVtbl -> get_TintAndShade(This,pValue) ) 

#define ColorFormat_put_TintAndShade(This,pValue)	\
    ( (This)->lpVtbl -> put_TintAndShade(This,pValue) ) 

#define ColorFormat_get_ObjectThemeColor(This,ObjectThemeColor)	\
    ( (This)->lpVtbl -> get_ObjectThemeColor(This,ObjectThemeColor) ) 

#define ColorFormat_put_ObjectThemeColor(This,ObjectThemeColor)	\
    ( (This)->lpVtbl -> put_ObjectThemeColor(This,ObjectThemeColor) ) 

#define ColorFormat_get_Brightness(This,Brightness)	\
    ( (This)->lpVtbl -> get_Brightness(This,Brightness) ) 

#define ColorFormat_put_Brightness(This,Brightness)	\
    ( (This)->lpVtbl -> put_Brightness(This,Brightness) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ColorFormat_INTERFACE_DEFINED__ */


#ifndef __SlideShowWindow_INTERFACE_DEFINED__
#define __SlideShowWindow_INTERFACE_DEFINED__

/* interface SlideShowWindow */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_SlideShowWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493453-5A91-11CF-8700-00AA0060263B")
    SlideShowWindow : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_View( 
            /* [retval][out] */ SlideShowView **View) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Presentation( 
            /* [retval][out] */ Presentation	**Presentation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsFullScreen( 
            /* [retval][out] */ MsoTriState *IsFullScreen) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ single *Left) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ single Left) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ single *Top) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ single Top) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ single *Width) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ single Width) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ single *Height) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ single Height) = 0;
        
        virtual /* [helpcontext][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get_HWND( 
            /* [retval][out] */ long *HWND) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Active( 
            /* [retval][out] */ MsoTriState *Active) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideNavigation( 
            /* [retval][out] */ SlideNavigation **navigation) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SlideShowWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SlideShowWindow * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SlideShowWindow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SlideShowWindow * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SlideShowWindow * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SlideShowWindow * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SlideShowWindow * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SlideShowWindow * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SlideShowWindow * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SlideShowWindow * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_View )( 
            SlideShowWindow * This,
            /* [retval][out] */ SlideShowView **View);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Presentation )( 
            SlideShowWindow * This,
            /* [retval][out] */ Presentation	**Presentation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsFullScreen )( 
            SlideShowWindow * This,
            /* [retval][out] */ MsoTriState *IsFullScreen);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            SlideShowWindow * This,
            /* [retval][out] */ single *Left);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            SlideShowWindow * This,
            /* [in] */ single Left);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            SlideShowWindow * This,
            /* [retval][out] */ single *Top);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            SlideShowWindow * This,
            /* [in] */ single Top);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            SlideShowWindow * This,
            /* [retval][out] */ single *Width);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            SlideShowWindow * This,
            /* [in] */ single Width);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            SlideShowWindow * This,
            /* [retval][out] */ single *Height);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            SlideShowWindow * This,
            /* [in] */ single Height);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HWND )( 
            SlideShowWindow * This,
            /* [retval][out] */ long *HWND);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Active )( 
            SlideShowWindow * This,
            /* [retval][out] */ MsoTriState *Active);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            SlideShowWindow * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideNavigation )( 
            SlideShowWindow * This,
            /* [retval][out] */ SlideNavigation **navigation);
        
        END_INTERFACE
    } SlideShowWindowVtbl;

    interface SlideShowWindow
    {
        CONST_VTBL struct SlideShowWindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SlideShowWindow_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SlideShowWindow_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SlideShowWindow_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SlideShowWindow_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SlideShowWindow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SlideShowWindow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SlideShowWindow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SlideShowWindow_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define SlideShowWindow_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define SlideShowWindow_get_View(This,View)	\
    ( (This)->lpVtbl -> get_View(This,View) ) 

#define SlideShowWindow_get_Presentation(This,Presentation)	\
    ( (This)->lpVtbl -> get_Presentation(This,Presentation) ) 

#define SlideShowWindow_get_IsFullScreen(This,IsFullScreen)	\
    ( (This)->lpVtbl -> get_IsFullScreen(This,IsFullScreen) ) 

#define SlideShowWindow_get_Left(This,Left)	\
    ( (This)->lpVtbl -> get_Left(This,Left) ) 

#define SlideShowWindow_put_Left(This,Left)	\
    ( (This)->lpVtbl -> put_Left(This,Left) ) 

#define SlideShowWindow_get_Top(This,Top)	\
    ( (This)->lpVtbl -> get_Top(This,Top) ) 

#define SlideShowWindow_put_Top(This,Top)	\
    ( (This)->lpVtbl -> put_Top(This,Top) ) 

#define SlideShowWindow_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define SlideShowWindow_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#define SlideShowWindow_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define SlideShowWindow_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define SlideShowWindow_get_HWND(This,HWND)	\
    ( (This)->lpVtbl -> get_HWND(This,HWND) ) 

#define SlideShowWindow_get_Active(This,Active)	\
    ( (This)->lpVtbl -> get_Active(This,Active) ) 

#define SlideShowWindow_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define SlideShowWindow_get_SlideNavigation(This,navigation)	\
    ( (This)->lpVtbl -> get_SlideNavigation(This,navigation) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SlideShowWindow_INTERFACE_DEFINED__ */


#ifndef __Selection_INTERFACE_DEFINED__
#define __Selection_INTERFACE_DEFINED__

/* interface Selection */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Selection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493454-5A91-11CF-8700-00AA0060263B")
    Selection : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Unselect( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ PpSelectionType *Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideRange( 
            /* [retval][out] */ SlideRange **SlideRange) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShapeRange( 
            /* [retval][out] */ ShapeRange **ShapeRange) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextRange( 
            /* [retval][out] */ TextRange **TextRange) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChildShapeRange( 
            /* [retval][out] */ ShapeRange **ChildShapeRange) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasChildShapeRange( 
            /* [retval][out] */ VARIANT_BOOL *HasChildShapeRange) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextRange2( 
            /* [retval][out] */ /* external definition not present */ TextRange2 **TextRange2) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SelectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Selection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Selection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Selection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Selection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Selection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Selection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Selection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Selection * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Selection * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Unselect )( 
            Selection * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Selection * This,
            /* [retval][out] */ PpSelectionType *Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideRange )( 
            Selection * This,
            /* [retval][out] */ SlideRange **SlideRange);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShapeRange )( 
            Selection * This,
            /* [retval][out] */ ShapeRange **ShapeRange);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRange )( 
            Selection * This,
            /* [retval][out] */ TextRange **TextRange);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChildShapeRange )( 
            Selection * This,
            /* [retval][out] */ ShapeRange **ChildShapeRange);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChildShapeRange )( 
            Selection * This,
            /* [retval][out] */ VARIANT_BOOL *HasChildShapeRange);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRange2 )( 
            Selection * This,
            /* [retval][out] */ /* external definition not present */ TextRange2 **TextRange2);
        
        END_INTERFACE
    } SelectionVtbl;

    interface Selection
    {
        CONST_VTBL struct SelectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Selection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Selection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Selection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Selection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Selection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Selection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Selection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Selection_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Selection_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Selection_Cut(This)	\
    ( (This)->lpVtbl -> Cut(This) ) 

#define Selection_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define Selection_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Selection_Unselect(This)	\
    ( (This)->lpVtbl -> Unselect(This) ) 

#define Selection_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define Selection_get_SlideRange(This,SlideRange)	\
    ( (This)->lpVtbl -> get_SlideRange(This,SlideRange) ) 

#define Selection_get_ShapeRange(This,ShapeRange)	\
    ( (This)->lpVtbl -> get_ShapeRange(This,ShapeRange) ) 

#define Selection_get_TextRange(This,TextRange)	\
    ( (This)->lpVtbl -> get_TextRange(This,TextRange) ) 

#define Selection_get_ChildShapeRange(This,ChildShapeRange)	\
    ( (This)->lpVtbl -> get_ChildShapeRange(This,ChildShapeRange) ) 

#define Selection_get_HasChildShapeRange(This,HasChildShapeRange)	\
    ( (This)->lpVtbl -> get_HasChildShapeRange(This,HasChildShapeRange) ) 

#define Selection_get_TextRange2(This,TextRange2)	\
    ( (This)->lpVtbl -> get_TextRange2(This,TextRange2) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Selection_INTERFACE_DEFINED__ */


#ifndef __DocumentWindows_INTERFACE_DEFINED__
#define __DocumentWindows_INTERFACE_DEFINED__

/* interface DocumentWindows */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_DocumentWindows;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493455-5A91-11CF-8700-00AA0060263B")
    DocumentWindows : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ DocumentWindow **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Arrange( 
            /* [defaultvalue][optional][in] */ PpArrangeStyle arrangeStyle = ppArrangeTiled) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DocumentWindowsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DocumentWindows * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DocumentWindows * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DocumentWindows * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DocumentWindows * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DocumentWindows * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DocumentWindows * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DocumentWindows * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            DocumentWindows * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            DocumentWindows * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            DocumentWindows * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            DocumentWindows * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DocumentWindows * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            DocumentWindows * This,
            /* [in] */ int Index,
            /* [retval][out] */ DocumentWindow **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Arrange )( 
            DocumentWindows * This,
            /* [defaultvalue][optional][in] */ PpArrangeStyle arrangeStyle);
        
        END_INTERFACE
    } DocumentWindowsVtbl;

    interface DocumentWindows
    {
        CONST_VTBL struct DocumentWindowsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DocumentWindows_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DocumentWindows_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DocumentWindows_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DocumentWindows_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DocumentWindows_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DocumentWindows_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DocumentWindows_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DocumentWindows_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define DocumentWindows__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define DocumentWindows_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define DocumentWindows_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define DocumentWindows_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define DocumentWindows_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define DocumentWindows_Arrange(This,arrangeStyle)	\
    ( (This)->lpVtbl -> Arrange(This,arrangeStyle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DocumentWindows_INTERFACE_DEFINED__ */


#ifndef __SlideShowWindows_INTERFACE_DEFINED__
#define __SlideShowWindows_INTERFACE_DEFINED__

/* interface SlideShowWindows */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_SlideShowWindows;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493456-5A91-11CF-8700-00AA0060263B")
    SlideShowWindows : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ SlideShowWindow **Item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SlideShowWindowsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SlideShowWindows * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SlideShowWindows * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SlideShowWindows * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SlideShowWindows * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SlideShowWindows * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SlideShowWindows * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SlideShowWindows * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            SlideShowWindows * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            SlideShowWindows * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SlideShowWindows * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SlideShowWindows * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SlideShowWindows * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            SlideShowWindows * This,
            /* [in] */ int Index,
            /* [retval][out] */ SlideShowWindow **Item);
        
        END_INTERFACE
    } SlideShowWindowsVtbl;

    interface SlideShowWindows
    {
        CONST_VTBL struct SlideShowWindowsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SlideShowWindows_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SlideShowWindows_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SlideShowWindows_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SlideShowWindows_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SlideShowWindows_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SlideShowWindows_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SlideShowWindows_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SlideShowWindows_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define SlideShowWindows__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define SlideShowWindows_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define SlideShowWindows_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define SlideShowWindows_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define SlideShowWindows_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SlideShowWindows_INTERFACE_DEFINED__ */


#ifndef __DocumentWindow_INTERFACE_DEFINED__
#define __DocumentWindow_INTERFACE_DEFINED__

/* interface DocumentWindow */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_DocumentWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493457-5A91-11CF-8700-00AA0060263B")
    DocumentWindow : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [retval][out] */ Selection **Selection) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_View( 
            /* [retval][out] */ View **View) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Presentation( 
            /* [retval][out] */ Presentation	**Presentation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ViewType( 
            /* [retval][out] */ PpViewType *ViewType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ViewType( 
            /* [in] */ PpViewType ViewType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BlackAndWhite( 
            /* [retval][out] */ MsoTriState *BlackAndWhite) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BlackAndWhite( 
            /* [in] */ MsoTriState BlackAndWhite) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Active( 
            /* [retval][out] */ MsoTriState *Active) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WindowState( 
            /* [retval][out] */ PpWindowState *WindowState) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WindowState( 
            /* [in] */ PpWindowState WindowState) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Caption( 
            /* [retval][out] */ BSTR *Caption) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ single *Left) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ single Left) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ single *Top) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ single Top) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ single *Width) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ single Width) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ single *Height) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ single Height) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE FitToPage( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE LargeScroll( 
            /* [defaultvalue][optional][in] */ int Down = 1,
            /* [defaultvalue][optional][in] */ int Up = 0,
            /* [defaultvalue][optional][in] */ int ToRight = 0,
            /* [defaultvalue][optional][in] */ int ToLeft = 0) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SmallScroll( 
            /* [defaultvalue][optional][in] */ int Down = 1,
            /* [defaultvalue][optional][in] */ int Up = 0,
            /* [defaultvalue][optional][in] */ int ToRight = 0,
            /* [defaultvalue][optional][in] */ int ToLeft = 0) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewWindow( 
            /* [retval][out] */ DocumentWindow **NewWindow) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [helpcontext][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get_HWND( 
            /* [retval][out] */ long *HWND) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActivePane( 
            /* [retval][out] */ Pane **ActivePane) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Panes( 
            /* [retval][out] */ Panes **Panes) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SplitVertical( 
            /* [retval][out] */ long *SplitVertical) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SplitVertical( 
            /* [in] */ long SplitVertical) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SplitHorizontal( 
            /* [retval][out] */ long *SplitHorizontal) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SplitHorizontal( 
            /* [in] */ long SplitHorizontal) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RangeFromPoint( 
            /* [in] */ int X,
            /* [in] */ int Y,
            /* [retval][out] */ IDispatch **RangeFromPoint) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PointsToScreenPixelsX( 
            /* [in] */ single Points,
            /* [retval][out] */ int *PointsToScreenPixelsX) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PointsToScreenPixelsY( 
            /* [in] */ single Points,
            /* [retval][out] */ int *PointsToScreenPixelsY) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScrollIntoView( 
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [defaultvalue][optional][in] */ MsoTriState Start = msoTrue) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsSectionExpanded( 
            /* [in] */ int sectionIndex,
            /* [retval][out] */ VARIANT_BOOL *IsSectionExpanded) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExpandSection( 
            /* [in] */ int sectionIndex,
            /* [in] */ VARIANT_BOOL Expand) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DocumentWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DocumentWindow * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DocumentWindow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DocumentWindow * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DocumentWindow * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DocumentWindow * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DocumentWindow * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DocumentWindow * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            DocumentWindow * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DocumentWindow * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            DocumentWindow * This,
            /* [retval][out] */ Selection **Selection);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_View )( 
            DocumentWindow * This,
            /* [retval][out] */ View **View);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Presentation )( 
            DocumentWindow * This,
            /* [retval][out] */ Presentation	**Presentation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ViewType )( 
            DocumentWindow * This,
            /* [retval][out] */ PpViewType *ViewType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ViewType )( 
            DocumentWindow * This,
            /* [in] */ PpViewType ViewType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlackAndWhite )( 
            DocumentWindow * This,
            /* [retval][out] */ MsoTriState *BlackAndWhite);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlackAndWhite )( 
            DocumentWindow * This,
            /* [in] */ MsoTriState BlackAndWhite);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Active )( 
            DocumentWindow * This,
            /* [retval][out] */ MsoTriState *Active);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowState )( 
            DocumentWindow * This,
            /* [retval][out] */ PpWindowState *WindowState);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WindowState )( 
            DocumentWindow * This,
            /* [in] */ PpWindowState WindowState);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Caption )( 
            DocumentWindow * This,
            /* [retval][out] */ BSTR *Caption);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            DocumentWindow * This,
            /* [retval][out] */ single *Left);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            DocumentWindow * This,
            /* [in] */ single Left);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            DocumentWindow * This,
            /* [retval][out] */ single *Top);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            DocumentWindow * This,
            /* [in] */ single Top);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            DocumentWindow * This,
            /* [retval][out] */ single *Width);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            DocumentWindow * This,
            /* [in] */ single Width);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            DocumentWindow * This,
            /* [retval][out] */ single *Height);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            DocumentWindow * This,
            /* [in] */ single Height);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FitToPage )( 
            DocumentWindow * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            DocumentWindow * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LargeScroll )( 
            DocumentWindow * This,
            /* [defaultvalue][optional][in] */ int Down,
            /* [defaultvalue][optional][in] */ int Up,
            /* [defaultvalue][optional][in] */ int ToRight,
            /* [defaultvalue][optional][in] */ int ToLeft);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SmallScroll )( 
            DocumentWindow * This,
            /* [defaultvalue][optional][in] */ int Down,
            /* [defaultvalue][optional][in] */ int Up,
            /* [defaultvalue][optional][in] */ int ToRight,
            /* [defaultvalue][optional][in] */ int ToLeft);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewWindow )( 
            DocumentWindow * This,
            /* [retval][out] */ DocumentWindow **NewWindow);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            DocumentWindow * This);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HWND )( 
            DocumentWindow * This,
            /* [retval][out] */ long *HWND);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActivePane )( 
            DocumentWindow * This,
            /* [retval][out] */ Pane **ActivePane);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Panes )( 
            DocumentWindow * This,
            /* [retval][out] */ Panes **Panes);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SplitVertical )( 
            DocumentWindow * This,
            /* [retval][out] */ long *SplitVertical);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SplitVertical )( 
            DocumentWindow * This,
            /* [in] */ long SplitVertical);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SplitHorizontal )( 
            DocumentWindow * This,
            /* [retval][out] */ long *SplitHorizontal);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SplitHorizontal )( 
            DocumentWindow * This,
            /* [in] */ long SplitHorizontal);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RangeFromPoint )( 
            DocumentWindow * This,
            /* [in] */ int X,
            /* [in] */ int Y,
            /* [retval][out] */ IDispatch **RangeFromPoint);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PointsToScreenPixelsX )( 
            DocumentWindow * This,
            /* [in] */ single Points,
            /* [retval][out] */ int *PointsToScreenPixelsX);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PointsToScreenPixelsY )( 
            DocumentWindow * This,
            /* [in] */ single Points,
            /* [retval][out] */ int *PointsToScreenPixelsY);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScrollIntoView )( 
            DocumentWindow * This,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [defaultvalue][optional][in] */ MsoTriState Start);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsSectionExpanded )( 
            DocumentWindow * This,
            /* [in] */ int sectionIndex,
            /* [retval][out] */ VARIANT_BOOL *IsSectionExpanded);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExpandSection )( 
            DocumentWindow * This,
            /* [in] */ int sectionIndex,
            /* [in] */ VARIANT_BOOL Expand);
        
        END_INTERFACE
    } DocumentWindowVtbl;

    interface DocumentWindow
    {
        CONST_VTBL struct DocumentWindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DocumentWindow_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DocumentWindow_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DocumentWindow_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DocumentWindow_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DocumentWindow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DocumentWindow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DocumentWindow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DocumentWindow_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define DocumentWindow_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define DocumentWindow_get_Selection(This,Selection)	\
    ( (This)->lpVtbl -> get_Selection(This,Selection) ) 

#define DocumentWindow_get_View(This,View)	\
    ( (This)->lpVtbl -> get_View(This,View) ) 

#define DocumentWindow_get_Presentation(This,Presentation)	\
    ( (This)->lpVtbl -> get_Presentation(This,Presentation) ) 

#define DocumentWindow_get_ViewType(This,ViewType)	\
    ( (This)->lpVtbl -> get_ViewType(This,ViewType) ) 

#define DocumentWindow_put_ViewType(This,ViewType)	\
    ( (This)->lpVtbl -> put_ViewType(This,ViewType) ) 

#define DocumentWindow_get_BlackAndWhite(This,BlackAndWhite)	\
    ( (This)->lpVtbl -> get_BlackAndWhite(This,BlackAndWhite) ) 

#define DocumentWindow_put_BlackAndWhite(This,BlackAndWhite)	\
    ( (This)->lpVtbl -> put_BlackAndWhite(This,BlackAndWhite) ) 

#define DocumentWindow_get_Active(This,Active)	\
    ( (This)->lpVtbl -> get_Active(This,Active) ) 

#define DocumentWindow_get_WindowState(This,WindowState)	\
    ( (This)->lpVtbl -> get_WindowState(This,WindowState) ) 

#define DocumentWindow_put_WindowState(This,WindowState)	\
    ( (This)->lpVtbl -> put_WindowState(This,WindowState) ) 

#define DocumentWindow_get_Caption(This,Caption)	\
    ( (This)->lpVtbl -> get_Caption(This,Caption) ) 

#define DocumentWindow_get_Left(This,Left)	\
    ( (This)->lpVtbl -> get_Left(This,Left) ) 

#define DocumentWindow_put_Left(This,Left)	\
    ( (This)->lpVtbl -> put_Left(This,Left) ) 

#define DocumentWindow_get_Top(This,Top)	\
    ( (This)->lpVtbl -> get_Top(This,Top) ) 

#define DocumentWindow_put_Top(This,Top)	\
    ( (This)->lpVtbl -> put_Top(This,Top) ) 

#define DocumentWindow_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define DocumentWindow_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#define DocumentWindow_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define DocumentWindow_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define DocumentWindow_FitToPage(This)	\
    ( (This)->lpVtbl -> FitToPage(This) ) 

#define DocumentWindow_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define DocumentWindow_LargeScroll(This,Down,Up,ToRight,ToLeft)	\
    ( (This)->lpVtbl -> LargeScroll(This,Down,Up,ToRight,ToLeft) ) 

#define DocumentWindow_SmallScroll(This,Down,Up,ToRight,ToLeft)	\
    ( (This)->lpVtbl -> SmallScroll(This,Down,Up,ToRight,ToLeft) ) 

#define DocumentWindow_NewWindow(This,NewWindow)	\
    ( (This)->lpVtbl -> NewWindow(This,NewWindow) ) 

#define DocumentWindow_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define DocumentWindow_get_HWND(This,HWND)	\
    ( (This)->lpVtbl -> get_HWND(This,HWND) ) 

#define DocumentWindow_get_ActivePane(This,ActivePane)	\
    ( (This)->lpVtbl -> get_ActivePane(This,ActivePane) ) 

#define DocumentWindow_get_Panes(This,Panes)	\
    ( (This)->lpVtbl -> get_Panes(This,Panes) ) 

#define DocumentWindow_get_SplitVertical(This,SplitVertical)	\
    ( (This)->lpVtbl -> get_SplitVertical(This,SplitVertical) ) 

#define DocumentWindow_put_SplitVertical(This,SplitVertical)	\
    ( (This)->lpVtbl -> put_SplitVertical(This,SplitVertical) ) 

#define DocumentWindow_get_SplitHorizontal(This,SplitHorizontal)	\
    ( (This)->lpVtbl -> get_SplitHorizontal(This,SplitHorizontal) ) 

#define DocumentWindow_put_SplitHorizontal(This,SplitHorizontal)	\
    ( (This)->lpVtbl -> put_SplitHorizontal(This,SplitHorizontal) ) 

#define DocumentWindow_RangeFromPoint(This,X,Y,RangeFromPoint)	\
    ( (This)->lpVtbl -> RangeFromPoint(This,X,Y,RangeFromPoint) ) 

#define DocumentWindow_PointsToScreenPixelsX(This,Points,PointsToScreenPixelsX)	\
    ( (This)->lpVtbl -> PointsToScreenPixelsX(This,Points,PointsToScreenPixelsX) ) 

#define DocumentWindow_PointsToScreenPixelsY(This,Points,PointsToScreenPixelsY)	\
    ( (This)->lpVtbl -> PointsToScreenPixelsY(This,Points,PointsToScreenPixelsY) ) 

#define DocumentWindow_ScrollIntoView(This,Left,Top,Width,Height,Start)	\
    ( (This)->lpVtbl -> ScrollIntoView(This,Left,Top,Width,Height,Start) ) 

#define DocumentWindow_IsSectionExpanded(This,sectionIndex,IsSectionExpanded)	\
    ( (This)->lpVtbl -> IsSectionExpanded(This,sectionIndex,IsSectionExpanded) ) 

#define DocumentWindow_ExpandSection(This,sectionIndex,Expand)	\
    ( (This)->lpVtbl -> ExpandSection(This,sectionIndex,Expand) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DocumentWindow_INTERFACE_DEFINED__ */


#ifndef __View_INTERFACE_DEFINED__
#define __View_INTERFACE_DEFINED__

/* interface View */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_View;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493458-5A91-11CF-8700-00AA0060263B")
    View : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ PpViewType *Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Zoom( 
            /* [retval][out] */ int *Zoom) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Zoom( 
            /* [in] */ int Zoom) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paste( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Slide( 
            /* [retval][out] */ IDispatch **Slide) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Slide( 
            /* [in] */ IDispatch *Slide) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GotoSlide( 
            /* [in] */ int Index) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplaySlideMiniature( 
            /* [retval][out] */ MsoTriState *DisplaySlideMiniature) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplaySlideMiniature( 
            /* [in] */ MsoTriState DisplaySlideMiniature) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ZoomToFit( 
            /* [retval][out] */ MsoTriState *ZoomToFit) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ZoomToFit( 
            /* [in] */ MsoTriState ZoomToFit) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PasteSpecial( 
            /* [defaultvalue][optional][in] */ PpPasteDataType DataType = ppPasteDefault,
            /* [defaultvalue][optional][in] */ MsoTriState DisplayAsIcon = msoFalse,
            /* [defaultvalue][optional][in] */ BSTR IconFileName = (unsigned short*)u"",
            /* [defaultvalue][optional][in] */ int IconIndex = 0,
            /* [defaultvalue][optional][in] */ BSTR IconLabel = (unsigned short*)u"",
            /* [defaultvalue][optional][in] */ MsoTriState Link = msoFalse) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintOptions( 
            /* [retval][out] */ PrintOptions **PrintOptions) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrintOut( 
            /* [defaultvalue][optional][in] */ int From = -1,
            /* [defaultvalue][optional][in] */ int To = -1,
            /* [defaultvalue][optional][in] */ BSTR PrintToFile = (unsigned short*)u"",
            /* [defaultvalue][optional][in] */ int Copies = 0,
            /* [defaultvalue][optional][in] */ MsoTriState Collate = ( MsoTriState  )-99) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Player( 
            /* [in] */ VARIANT ShapeId,
            /* [retval][out] */ Player **Player) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MediaControlsVisible( 
            /* [retval][out] */ MsoTriState *MediaControlsVisible) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MediaControlsLeft( 
            /* [retval][out] */ single *MediaControlsLeft) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MediaControlsTop( 
            /* [retval][out] */ single *MediaControlsTop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MediaControlsWidth( 
            /* [retval][out] */ single *MediaControlsWidth) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MediaControlsHeight( 
            /* [retval][out] */ single *MediaControlsHeight) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            View * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            View * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            View * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            View * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            View * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            View * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            View * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            View * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            View * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            View * This,
            /* [retval][out] */ PpViewType *Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Zoom )( 
            View * This,
            /* [retval][out] */ int *Zoom);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Zoom )( 
            View * This,
            /* [in] */ int Zoom);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paste )( 
            View * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Slide )( 
            View * This,
            /* [retval][out] */ IDispatch **Slide);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Slide )( 
            View * This,
            /* [in] */ IDispatch *Slide);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GotoSlide )( 
            View * This,
            /* [in] */ int Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplaySlideMiniature )( 
            View * This,
            /* [retval][out] */ MsoTriState *DisplaySlideMiniature);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplaySlideMiniature )( 
            View * This,
            /* [in] */ MsoTriState DisplaySlideMiniature);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZoomToFit )( 
            View * This,
            /* [retval][out] */ MsoTriState *ZoomToFit);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ZoomToFit )( 
            View * This,
            /* [in] */ MsoTriState ZoomToFit);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PasteSpecial )( 
            View * This,
            /* [defaultvalue][optional][in] */ PpPasteDataType DataType,
            /* [defaultvalue][optional][in] */ MsoTriState DisplayAsIcon,
            /* [defaultvalue][optional][in] */ BSTR IconFileName,
            /* [defaultvalue][optional][in] */ int IconIndex,
            /* [defaultvalue][optional][in] */ BSTR IconLabel,
            /* [defaultvalue][optional][in] */ MsoTriState Link);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintOptions )( 
            View * This,
            /* [retval][out] */ PrintOptions **PrintOptions);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOut )( 
            View * This,
            /* [defaultvalue][optional][in] */ int From,
            /* [defaultvalue][optional][in] */ int To,
            /* [defaultvalue][optional][in] */ BSTR PrintToFile,
            /* [defaultvalue][optional][in] */ int Copies,
            /* [defaultvalue][optional][in] */ MsoTriState Collate);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Player )( 
            View * This,
            /* [in] */ VARIANT ShapeId,
            /* [retval][out] */ Player **Player);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MediaControlsVisible )( 
            View * This,
            /* [retval][out] */ MsoTriState *MediaControlsVisible);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MediaControlsLeft )( 
            View * This,
            /* [retval][out] */ single *MediaControlsLeft);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MediaControlsTop )( 
            View * This,
            /* [retval][out] */ single *MediaControlsTop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MediaControlsWidth )( 
            View * This,
            /* [retval][out] */ single *MediaControlsWidth);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MediaControlsHeight )( 
            View * This,
            /* [retval][out] */ single *MediaControlsHeight);
        
        END_INTERFACE
    } ViewVtbl;

    interface View
    {
        CONST_VTBL struct ViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define View_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define View_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define View_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define View_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define View_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define View_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define View_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define View_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define View_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define View_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define View_get_Zoom(This,Zoom)	\
    ( (This)->lpVtbl -> get_Zoom(This,Zoom) ) 

#define View_put_Zoom(This,Zoom)	\
    ( (This)->lpVtbl -> put_Zoom(This,Zoom) ) 

#define View_Paste(This)	\
    ( (This)->lpVtbl -> Paste(This) ) 

#define View_get_Slide(This,Slide)	\
    ( (This)->lpVtbl -> get_Slide(This,Slide) ) 

#define View_put_Slide(This,Slide)	\
    ( (This)->lpVtbl -> put_Slide(This,Slide) ) 

#define View_GotoSlide(This,Index)	\
    ( (This)->lpVtbl -> GotoSlide(This,Index) ) 

#define View_get_DisplaySlideMiniature(This,DisplaySlideMiniature)	\
    ( (This)->lpVtbl -> get_DisplaySlideMiniature(This,DisplaySlideMiniature) ) 

#define View_put_DisplaySlideMiniature(This,DisplaySlideMiniature)	\
    ( (This)->lpVtbl -> put_DisplaySlideMiniature(This,DisplaySlideMiniature) ) 

#define View_get_ZoomToFit(This,ZoomToFit)	\
    ( (This)->lpVtbl -> get_ZoomToFit(This,ZoomToFit) ) 

#define View_put_ZoomToFit(This,ZoomToFit)	\
    ( (This)->lpVtbl -> put_ZoomToFit(This,ZoomToFit) ) 

#define View_PasteSpecial(This,DataType,DisplayAsIcon,IconFileName,IconIndex,IconLabel,Link)	\
    ( (This)->lpVtbl -> PasteSpecial(This,DataType,DisplayAsIcon,IconFileName,IconIndex,IconLabel,Link) ) 

#define View_get_PrintOptions(This,PrintOptions)	\
    ( (This)->lpVtbl -> get_PrintOptions(This,PrintOptions) ) 

#define View_PrintOut(This,From,To,PrintToFile,Copies,Collate)	\
    ( (This)->lpVtbl -> PrintOut(This,From,To,PrintToFile,Copies,Collate) ) 

#define View_Player(This,ShapeId,Player)	\
    ( (This)->lpVtbl -> Player(This,ShapeId,Player) ) 

#define View_get_MediaControlsVisible(This,MediaControlsVisible)	\
    ( (This)->lpVtbl -> get_MediaControlsVisible(This,MediaControlsVisible) ) 

#define View_get_MediaControlsLeft(This,MediaControlsLeft)	\
    ( (This)->lpVtbl -> get_MediaControlsLeft(This,MediaControlsLeft) ) 

#define View_get_MediaControlsTop(This,MediaControlsTop)	\
    ( (This)->lpVtbl -> get_MediaControlsTop(This,MediaControlsTop) ) 

#define View_get_MediaControlsWidth(This,MediaControlsWidth)	\
    ( (This)->lpVtbl -> get_MediaControlsWidth(This,MediaControlsWidth) ) 

#define View_get_MediaControlsHeight(This,MediaControlsHeight)	\
    ( (This)->lpVtbl -> get_MediaControlsHeight(This,MediaControlsHeight) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __View_INTERFACE_DEFINED__ */


#ifndef __SlideShowView_INTERFACE_DEFINED__
#define __SlideShowView_INTERFACE_DEFINED__

/* interface SlideShowView */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_SlideShowView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493459-5A91-11CF-8700-00AA0060263B")
    SlideShowView : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Zoom( 
            /* [retval][out] */ int *Zoom) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Slide( 
            /* [retval][out] */ Slide	**Slide) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PointerType( 
            /* [retval][out] */ PpSlideShowPointerType *PointerType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PointerType( 
            /* [in] */ PpSlideShowPointerType PointerType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_State( 
            /* [retval][out] */ PpSlideShowState *State) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_State( 
            /* [in] */ PpSlideShowState State) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AcceleratorsEnabled( 
            /* [retval][out] */ MsoTriState *AcceleratorsEnabled) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AcceleratorsEnabled( 
            /* [in] */ MsoTriState AcceleratorsEnabled) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresentationElapsedTime( 
            /* [retval][out] */ single *PresentationElapsedTime) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideElapsedTime( 
            /* [retval][out] */ single *SlideElapsedTime) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SlideElapsedTime( 
            /* [in] */ single SlideElapsedTime) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LastSlideViewed( 
            /* [retval][out] */ Slide	**LastSlideViewed) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AdvanceMode( 
            /* [retval][out] */ PpSlideShowAdvanceMode *AdvanceMode) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PointerColor( 
            /* [retval][out] */ ColorFormat **PointerColor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsNamedShow( 
            /* [retval][out] */ MsoTriState *IsNamedShow) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideShowName( 
            /* [retval][out] */ BSTR *SlideShowName) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DrawLine( 
            /* [in] */ single BeginX,
            /* [in] */ single BeginY,
            /* [in] */ single EndX,
            /* [in] */ single EndY) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EraseDrawing( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE First( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Last( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Next( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Previous( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GotoSlide( 
            /* [in] */ int Index,
            /* [defaultvalue][optional][in] */ MsoTriState ResetSlide = msoTrue) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GotoNamedShow( 
            /* [in] */ BSTR SlideShowName) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndNamedShow( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ResetSlideTime( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Exit( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE InstallTracker( 
            /* [in] */ MouseTracker *pTracker,
            /* [in] */ MsoTriState Presenter) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentShowPosition( 
            /* [retval][out] */ int *CurrentShowPosition) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GotoClick( 
            /* [in] */ int Index) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetClickIndex( 
            /* [retval][out] */ int *GetClickIndex) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetClickCount( 
            /* [retval][out] */ int *GetClickCount) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE FirstAnimationIsAutomatic( 
            /* [retval][out] */ VARIANT_BOOL *FirstAnimationIsAutomatic) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Player( 
            /* [in] */ VARIANT ShapeId,
            /* [retval][out] */ Player **Player) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MediaControlsVisible( 
            /* [retval][out] */ MsoTriState *MediaControlsVisible) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MediaControlsLeft( 
            /* [retval][out] */ single *MediaControlsLeft) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MediaControlsTop( 
            /* [retval][out] */ single *MediaControlsTop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MediaControlsWidth( 
            /* [retval][out] */ single *MediaControlsWidth) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MediaControlsHeight( 
            /* [retval][out] */ single *MediaControlsHeight) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SlideShowViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SlideShowView * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SlideShowView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SlideShowView * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SlideShowView * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SlideShowView * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SlideShowView * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SlideShowView * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SlideShowView * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SlideShowView * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Zoom )( 
            SlideShowView * This,
            /* [retval][out] */ int *Zoom);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Slide )( 
            SlideShowView * This,
            /* [retval][out] */ Slide	**Slide);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PointerType )( 
            SlideShowView * This,
            /* [retval][out] */ PpSlideShowPointerType *PointerType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PointerType )( 
            SlideShowView * This,
            /* [in] */ PpSlideShowPointerType PointerType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_State )( 
            SlideShowView * This,
            /* [retval][out] */ PpSlideShowState *State);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_State )( 
            SlideShowView * This,
            /* [in] */ PpSlideShowState State);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AcceleratorsEnabled )( 
            SlideShowView * This,
            /* [retval][out] */ MsoTriState *AcceleratorsEnabled);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AcceleratorsEnabled )( 
            SlideShowView * This,
            /* [in] */ MsoTriState AcceleratorsEnabled);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresentationElapsedTime )( 
            SlideShowView * This,
            /* [retval][out] */ single *PresentationElapsedTime);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideElapsedTime )( 
            SlideShowView * This,
            /* [retval][out] */ single *SlideElapsedTime);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SlideElapsedTime )( 
            SlideShowView * This,
            /* [in] */ single SlideElapsedTime);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastSlideViewed )( 
            SlideShowView * This,
            /* [retval][out] */ Slide	**LastSlideViewed);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AdvanceMode )( 
            SlideShowView * This,
            /* [retval][out] */ PpSlideShowAdvanceMode *AdvanceMode);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PointerColor )( 
            SlideShowView * This,
            /* [retval][out] */ ColorFormat **PointerColor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsNamedShow )( 
            SlideShowView * This,
            /* [retval][out] */ MsoTriState *IsNamedShow);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideShowName )( 
            SlideShowView * This,
            /* [retval][out] */ BSTR *SlideShowName);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DrawLine )( 
            SlideShowView * This,
            /* [in] */ single BeginX,
            /* [in] */ single BeginY,
            /* [in] */ single EndX,
            /* [in] */ single EndY);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EraseDrawing )( 
            SlideShowView * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *First )( 
            SlideShowView * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Last )( 
            SlideShowView * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Next )( 
            SlideShowView * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Previous )( 
            SlideShowView * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GotoSlide )( 
            SlideShowView * This,
            /* [in] */ int Index,
            /* [defaultvalue][optional][in] */ MsoTriState ResetSlide);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GotoNamedShow )( 
            SlideShowView * This,
            /* [in] */ BSTR SlideShowName);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndNamedShow )( 
            SlideShowView * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ResetSlideTime )( 
            SlideShowView * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Exit )( 
            SlideShowView * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *InstallTracker )( 
            SlideShowView * This,
            /* [in] */ MouseTracker *pTracker,
            /* [in] */ MsoTriState Presenter);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentShowPosition )( 
            SlideShowView * This,
            /* [retval][out] */ int *CurrentShowPosition);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GotoClick )( 
            SlideShowView * This,
            /* [in] */ int Index);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetClickIndex )( 
            SlideShowView * This,
            /* [retval][out] */ int *GetClickIndex);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetClickCount )( 
            SlideShowView * This,
            /* [retval][out] */ int *GetClickCount);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FirstAnimationIsAutomatic )( 
            SlideShowView * This,
            /* [retval][out] */ VARIANT_BOOL *FirstAnimationIsAutomatic);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Player )( 
            SlideShowView * This,
            /* [in] */ VARIANT ShapeId,
            /* [retval][out] */ Player **Player);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MediaControlsVisible )( 
            SlideShowView * This,
            /* [retval][out] */ MsoTriState *MediaControlsVisible);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MediaControlsLeft )( 
            SlideShowView * This,
            /* [retval][out] */ single *MediaControlsLeft);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MediaControlsTop )( 
            SlideShowView * This,
            /* [retval][out] */ single *MediaControlsTop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MediaControlsWidth )( 
            SlideShowView * This,
            /* [retval][out] */ single *MediaControlsWidth);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MediaControlsHeight )( 
            SlideShowView * This,
            /* [retval][out] */ single *MediaControlsHeight);
        
        END_INTERFACE
    } SlideShowViewVtbl;

    interface SlideShowView
    {
        CONST_VTBL struct SlideShowViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SlideShowView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SlideShowView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SlideShowView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SlideShowView_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SlideShowView_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SlideShowView_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SlideShowView_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SlideShowView_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define SlideShowView_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define SlideShowView_get_Zoom(This,Zoom)	\
    ( (This)->lpVtbl -> get_Zoom(This,Zoom) ) 

#define SlideShowView_get_Slide(This,Slide)	\
    ( (This)->lpVtbl -> get_Slide(This,Slide) ) 

#define SlideShowView_get_PointerType(This,PointerType)	\
    ( (This)->lpVtbl -> get_PointerType(This,PointerType) ) 

#define SlideShowView_put_PointerType(This,PointerType)	\
    ( (This)->lpVtbl -> put_PointerType(This,PointerType) ) 

#define SlideShowView_get_State(This,State)	\
    ( (This)->lpVtbl -> get_State(This,State) ) 

#define SlideShowView_put_State(This,State)	\
    ( (This)->lpVtbl -> put_State(This,State) ) 

#define SlideShowView_get_AcceleratorsEnabled(This,AcceleratorsEnabled)	\
    ( (This)->lpVtbl -> get_AcceleratorsEnabled(This,AcceleratorsEnabled) ) 

#define SlideShowView_put_AcceleratorsEnabled(This,AcceleratorsEnabled)	\
    ( (This)->lpVtbl -> put_AcceleratorsEnabled(This,AcceleratorsEnabled) ) 

#define SlideShowView_get_PresentationElapsedTime(This,PresentationElapsedTime)	\
    ( (This)->lpVtbl -> get_PresentationElapsedTime(This,PresentationElapsedTime) ) 

#define SlideShowView_get_SlideElapsedTime(This,SlideElapsedTime)	\
    ( (This)->lpVtbl -> get_SlideElapsedTime(This,SlideElapsedTime) ) 

#define SlideShowView_put_SlideElapsedTime(This,SlideElapsedTime)	\
    ( (This)->lpVtbl -> put_SlideElapsedTime(This,SlideElapsedTime) ) 

#define SlideShowView_get_LastSlideViewed(This,LastSlideViewed)	\
    ( (This)->lpVtbl -> get_LastSlideViewed(This,LastSlideViewed) ) 

#define SlideShowView_get_AdvanceMode(This,AdvanceMode)	\
    ( (This)->lpVtbl -> get_AdvanceMode(This,AdvanceMode) ) 

#define SlideShowView_get_PointerColor(This,PointerColor)	\
    ( (This)->lpVtbl -> get_PointerColor(This,PointerColor) ) 

#define SlideShowView_get_IsNamedShow(This,IsNamedShow)	\
    ( (This)->lpVtbl -> get_IsNamedShow(This,IsNamedShow) ) 

#define SlideShowView_get_SlideShowName(This,SlideShowName)	\
    ( (This)->lpVtbl -> get_SlideShowName(This,SlideShowName) ) 

#define SlideShowView_DrawLine(This,BeginX,BeginY,EndX,EndY)	\
    ( (This)->lpVtbl -> DrawLine(This,BeginX,BeginY,EndX,EndY) ) 

#define SlideShowView_EraseDrawing(This)	\
    ( (This)->lpVtbl -> EraseDrawing(This) ) 

#define SlideShowView_First(This)	\
    ( (This)->lpVtbl -> First(This) ) 

#define SlideShowView_Last(This)	\
    ( (This)->lpVtbl -> Last(This) ) 

#define SlideShowView_Next(This)	\
    ( (This)->lpVtbl -> Next(This) ) 

#define SlideShowView_Previous(This)	\
    ( (This)->lpVtbl -> Previous(This) ) 

#define SlideShowView_GotoSlide(This,Index,ResetSlide)	\
    ( (This)->lpVtbl -> GotoSlide(This,Index,ResetSlide) ) 

#define SlideShowView_GotoNamedShow(This,SlideShowName)	\
    ( (This)->lpVtbl -> GotoNamedShow(This,SlideShowName) ) 

#define SlideShowView_EndNamedShow(This)	\
    ( (This)->lpVtbl -> EndNamedShow(This) ) 

#define SlideShowView_ResetSlideTime(This)	\
    ( (This)->lpVtbl -> ResetSlideTime(This) ) 

#define SlideShowView_Exit(This)	\
    ( (This)->lpVtbl -> Exit(This) ) 

#define SlideShowView_InstallTracker(This,pTracker,Presenter)	\
    ( (This)->lpVtbl -> InstallTracker(This,pTracker,Presenter) ) 

#define SlideShowView_get_CurrentShowPosition(This,CurrentShowPosition)	\
    ( (This)->lpVtbl -> get_CurrentShowPosition(This,CurrentShowPosition) ) 

#define SlideShowView_GotoClick(This,Index)	\
    ( (This)->lpVtbl -> GotoClick(This,Index) ) 

#define SlideShowView_GetClickIndex(This,GetClickIndex)	\
    ( (This)->lpVtbl -> GetClickIndex(This,GetClickIndex) ) 

#define SlideShowView_GetClickCount(This,GetClickCount)	\
    ( (This)->lpVtbl -> GetClickCount(This,GetClickCount) ) 

#define SlideShowView_FirstAnimationIsAutomatic(This,FirstAnimationIsAutomatic)	\
    ( (This)->lpVtbl -> FirstAnimationIsAutomatic(This,FirstAnimationIsAutomatic) ) 

#define SlideShowView_Player(This,ShapeId,Player)	\
    ( (This)->lpVtbl -> Player(This,ShapeId,Player) ) 

#define SlideShowView_get_MediaControlsVisible(This,MediaControlsVisible)	\
    ( (This)->lpVtbl -> get_MediaControlsVisible(This,MediaControlsVisible) ) 

#define SlideShowView_get_MediaControlsLeft(This,MediaControlsLeft)	\
    ( (This)->lpVtbl -> get_MediaControlsLeft(This,MediaControlsLeft) ) 

#define SlideShowView_get_MediaControlsTop(This,MediaControlsTop)	\
    ( (This)->lpVtbl -> get_MediaControlsTop(This,MediaControlsTop) ) 

#define SlideShowView_get_MediaControlsWidth(This,MediaControlsWidth)	\
    ( (This)->lpVtbl -> get_MediaControlsWidth(This,MediaControlsWidth) ) 

#define SlideShowView_get_MediaControlsHeight(This,MediaControlsHeight)	\
    ( (This)->lpVtbl -> get_MediaControlsHeight(This,MediaControlsHeight) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SlideShowView_INTERFACE_DEFINED__ */


#ifndef __SlideShowSettings_INTERFACE_DEFINED__
#define __SlideShowSettings_INTERFACE_DEFINED__

/* interface SlideShowSettings */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_SlideShowSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149345A-5A91-11CF-8700-00AA0060263B")
    SlideShowSettings : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PointerColor( 
            /* [retval][out] */ ColorFormat **PointerColor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NamedSlideShows( 
            /* [retval][out] */ NamedSlideShows **NamedSlideShows) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartingSlide( 
            /* [retval][out] */ int *StartingSlide) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartingSlide( 
            /* [in] */ int StartingSlide) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndingSlide( 
            /* [retval][out] */ int *EndingSlide) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EndingSlide( 
            /* [in] */ int EndingSlide) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AdvanceMode( 
            /* [retval][out] */ PpSlideShowAdvanceMode *AdvanceMode) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AdvanceMode( 
            /* [in] */ PpSlideShowAdvanceMode AdvanceMode) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Run( 
            /* [retval][out] */ SlideShowWindow **Run) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LoopUntilStopped( 
            /* [retval][out] */ MsoTriState *LoopUntilStopped) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LoopUntilStopped( 
            /* [in] */ MsoTriState LoopUntilStopped) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowType( 
            /* [retval][out] */ PpSlideShowType *ShowType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowType( 
            /* [in] */ PpSlideShowType ShowType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowWithNarration( 
            /* [retval][out] */ MsoTriState *ShowWithNarration) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowWithNarration( 
            /* [in] */ MsoTriState ShowWithNarration) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowWithAnimation( 
            /* [retval][out] */ MsoTriState *ShowWithAnimation) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowWithAnimation( 
            /* [in] */ MsoTriState ShowWithAnimation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideShowName( 
            /* [retval][out] */ BSTR *SlideShowName) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SlideShowName( 
            /* [in] */ BSTR SlideShowName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RangeType( 
            /* [retval][out] */ PpSlideShowRangeType *RangeType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RangeType( 
            /* [in] */ PpSlideShowRangeType RangeType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowScrollbar( 
            /* [retval][out] */ MsoTriState *ShowScrollbar) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowScrollbar( 
            /* [in] */ MsoTriState ShowScrollbar) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowPresenterView( 
            /* [retval][out] */ MsoTriState *ShowPresenterView) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowPresenterView( 
            /* [in] */ MsoTriState ShowPresenterView) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowMediaControls( 
            /* [retval][out] */ MsoTriState *ShowMediaControls) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowMediaControls( 
            /* [in] */ MsoTriState ShowMediaControls) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SlideShowSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SlideShowSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SlideShowSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SlideShowSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SlideShowSettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SlideShowSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SlideShowSettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SlideShowSettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SlideShowSettings * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SlideShowSettings * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PointerColor )( 
            SlideShowSettings * This,
            /* [retval][out] */ ColorFormat **PointerColor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NamedSlideShows )( 
            SlideShowSettings * This,
            /* [retval][out] */ NamedSlideShows **NamedSlideShows);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartingSlide )( 
            SlideShowSettings * This,
            /* [retval][out] */ int *StartingSlide);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartingSlide )( 
            SlideShowSettings * This,
            /* [in] */ int StartingSlide);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndingSlide )( 
            SlideShowSettings * This,
            /* [retval][out] */ int *EndingSlide);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndingSlide )( 
            SlideShowSettings * This,
            /* [in] */ int EndingSlide);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AdvanceMode )( 
            SlideShowSettings * This,
            /* [retval][out] */ PpSlideShowAdvanceMode *AdvanceMode);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AdvanceMode )( 
            SlideShowSettings * This,
            /* [in] */ PpSlideShowAdvanceMode AdvanceMode);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Run )( 
            SlideShowSettings * This,
            /* [retval][out] */ SlideShowWindow **Run);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LoopUntilStopped )( 
            SlideShowSettings * This,
            /* [retval][out] */ MsoTriState *LoopUntilStopped);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LoopUntilStopped )( 
            SlideShowSettings * This,
            /* [in] */ MsoTriState LoopUntilStopped);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowType )( 
            SlideShowSettings * This,
            /* [retval][out] */ PpSlideShowType *ShowType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowType )( 
            SlideShowSettings * This,
            /* [in] */ PpSlideShowType ShowType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowWithNarration )( 
            SlideShowSettings * This,
            /* [retval][out] */ MsoTriState *ShowWithNarration);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowWithNarration )( 
            SlideShowSettings * This,
            /* [in] */ MsoTriState ShowWithNarration);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowWithAnimation )( 
            SlideShowSettings * This,
            /* [retval][out] */ MsoTriState *ShowWithAnimation);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowWithAnimation )( 
            SlideShowSettings * This,
            /* [in] */ MsoTriState ShowWithAnimation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideShowName )( 
            SlideShowSettings * This,
            /* [retval][out] */ BSTR *SlideShowName);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SlideShowName )( 
            SlideShowSettings * This,
            /* [in] */ BSTR SlideShowName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RangeType )( 
            SlideShowSettings * This,
            /* [retval][out] */ PpSlideShowRangeType *RangeType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RangeType )( 
            SlideShowSettings * This,
            /* [in] */ PpSlideShowRangeType RangeType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowScrollbar )( 
            SlideShowSettings * This,
            /* [retval][out] */ MsoTriState *ShowScrollbar);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowScrollbar )( 
            SlideShowSettings * This,
            /* [in] */ MsoTriState ShowScrollbar);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowPresenterView )( 
            SlideShowSettings * This,
            /* [retval][out] */ MsoTriState *ShowPresenterView);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowPresenterView )( 
            SlideShowSettings * This,
            /* [in] */ MsoTriState ShowPresenterView);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowMediaControls )( 
            SlideShowSettings * This,
            /* [retval][out] */ MsoTriState *ShowMediaControls);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowMediaControls )( 
            SlideShowSettings * This,
            /* [in] */ MsoTriState ShowMediaControls);
        
        END_INTERFACE
    } SlideShowSettingsVtbl;

    interface SlideShowSettings
    {
        CONST_VTBL struct SlideShowSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SlideShowSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SlideShowSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SlideShowSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SlideShowSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SlideShowSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SlideShowSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SlideShowSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SlideShowSettings_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define SlideShowSettings_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define SlideShowSettings_get_PointerColor(This,PointerColor)	\
    ( (This)->lpVtbl -> get_PointerColor(This,PointerColor) ) 

#define SlideShowSettings_get_NamedSlideShows(This,NamedSlideShows)	\
    ( (This)->lpVtbl -> get_NamedSlideShows(This,NamedSlideShows) ) 

#define SlideShowSettings_get_StartingSlide(This,StartingSlide)	\
    ( (This)->lpVtbl -> get_StartingSlide(This,StartingSlide) ) 

#define SlideShowSettings_put_StartingSlide(This,StartingSlide)	\
    ( (This)->lpVtbl -> put_StartingSlide(This,StartingSlide) ) 

#define SlideShowSettings_get_EndingSlide(This,EndingSlide)	\
    ( (This)->lpVtbl -> get_EndingSlide(This,EndingSlide) ) 

#define SlideShowSettings_put_EndingSlide(This,EndingSlide)	\
    ( (This)->lpVtbl -> put_EndingSlide(This,EndingSlide) ) 

#define SlideShowSettings_get_AdvanceMode(This,AdvanceMode)	\
    ( (This)->lpVtbl -> get_AdvanceMode(This,AdvanceMode) ) 

#define SlideShowSettings_put_AdvanceMode(This,AdvanceMode)	\
    ( (This)->lpVtbl -> put_AdvanceMode(This,AdvanceMode) ) 

#define SlideShowSettings_Run(This,Run)	\
    ( (This)->lpVtbl -> Run(This,Run) ) 

#define SlideShowSettings_get_LoopUntilStopped(This,LoopUntilStopped)	\
    ( (This)->lpVtbl -> get_LoopUntilStopped(This,LoopUntilStopped) ) 

#define SlideShowSettings_put_LoopUntilStopped(This,LoopUntilStopped)	\
    ( (This)->lpVtbl -> put_LoopUntilStopped(This,LoopUntilStopped) ) 

#define SlideShowSettings_get_ShowType(This,ShowType)	\
    ( (This)->lpVtbl -> get_ShowType(This,ShowType) ) 

#define SlideShowSettings_put_ShowType(This,ShowType)	\
    ( (This)->lpVtbl -> put_ShowType(This,ShowType) ) 

#define SlideShowSettings_get_ShowWithNarration(This,ShowWithNarration)	\
    ( (This)->lpVtbl -> get_ShowWithNarration(This,ShowWithNarration) ) 

#define SlideShowSettings_put_ShowWithNarration(This,ShowWithNarration)	\
    ( (This)->lpVtbl -> put_ShowWithNarration(This,ShowWithNarration) ) 

#define SlideShowSettings_get_ShowWithAnimation(This,ShowWithAnimation)	\
    ( (This)->lpVtbl -> get_ShowWithAnimation(This,ShowWithAnimation) ) 

#define SlideShowSettings_put_ShowWithAnimation(This,ShowWithAnimation)	\
    ( (This)->lpVtbl -> put_ShowWithAnimation(This,ShowWithAnimation) ) 

#define SlideShowSettings_get_SlideShowName(This,SlideShowName)	\
    ( (This)->lpVtbl -> get_SlideShowName(This,SlideShowName) ) 

#define SlideShowSettings_put_SlideShowName(This,SlideShowName)	\
    ( (This)->lpVtbl -> put_SlideShowName(This,SlideShowName) ) 

#define SlideShowSettings_get_RangeType(This,RangeType)	\
    ( (This)->lpVtbl -> get_RangeType(This,RangeType) ) 

#define SlideShowSettings_put_RangeType(This,RangeType)	\
    ( (This)->lpVtbl -> put_RangeType(This,RangeType) ) 

#define SlideShowSettings_get_ShowScrollbar(This,ShowScrollbar)	\
    ( (This)->lpVtbl -> get_ShowScrollbar(This,ShowScrollbar) ) 

#define SlideShowSettings_put_ShowScrollbar(This,ShowScrollbar)	\
    ( (This)->lpVtbl -> put_ShowScrollbar(This,ShowScrollbar) ) 

#define SlideShowSettings_get_ShowPresenterView(This,ShowPresenterView)	\
    ( (This)->lpVtbl -> get_ShowPresenterView(This,ShowPresenterView) ) 

#define SlideShowSettings_put_ShowPresenterView(This,ShowPresenterView)	\
    ( (This)->lpVtbl -> put_ShowPresenterView(This,ShowPresenterView) ) 

#define SlideShowSettings_get_ShowMediaControls(This,ShowMediaControls)	\
    ( (This)->lpVtbl -> get_ShowMediaControls(This,ShowMediaControls) ) 

#define SlideShowSettings_put_ShowMediaControls(This,ShowMediaControls)	\
    ( (This)->lpVtbl -> put_ShowMediaControls(This,ShowMediaControls) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SlideShowSettings_INTERFACE_DEFINED__ */


#ifndef __NamedSlideShows_INTERFACE_DEFINED__
#define __NamedSlideShows_INTERFACE_DEFINED__

/* interface NamedSlideShows */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_NamedSlideShows;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149345B-5A91-11CF-8700-00AA0060263B")
    NamedSlideShows : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ NamedSlideShow **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT safeArrayOfSlideIDs,
            /* [retval][out] */ NamedSlideShow **Add) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct NamedSlideShowsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            NamedSlideShows * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            NamedSlideShows * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            NamedSlideShows * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            NamedSlideShows * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            NamedSlideShows * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            NamedSlideShows * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            NamedSlideShows * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            NamedSlideShows * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            NamedSlideShows * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            NamedSlideShows * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            NamedSlideShows * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            NamedSlideShows * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            NamedSlideShows * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ NamedSlideShow **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            NamedSlideShows * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT safeArrayOfSlideIDs,
            /* [retval][out] */ NamedSlideShow **Add);
        
        END_INTERFACE
    } NamedSlideShowsVtbl;

    interface NamedSlideShows
    {
        CONST_VTBL struct NamedSlideShowsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define NamedSlideShows_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define NamedSlideShows_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define NamedSlideShows_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define NamedSlideShows_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define NamedSlideShows_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define NamedSlideShows_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define NamedSlideShows_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define NamedSlideShows_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define NamedSlideShows__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define NamedSlideShows_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define NamedSlideShows_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define NamedSlideShows_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define NamedSlideShows_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define NamedSlideShows_Add(This,Name,safeArrayOfSlideIDs,Add)	\
    ( (This)->lpVtbl -> Add(This,Name,safeArrayOfSlideIDs,Add) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __NamedSlideShows_INTERFACE_DEFINED__ */


#ifndef __NamedSlideShow_INTERFACE_DEFINED__
#define __NamedSlideShow_INTERFACE_DEFINED__

/* interface NamedSlideShow */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_NamedSlideShow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149345C-5A91-11CF-8700-00AA0060263B")
    NamedSlideShow : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideIDs( 
            /* [retval][out] */ VARIANT *SlideIDs) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct NamedSlideShowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            NamedSlideShow * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            NamedSlideShow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            NamedSlideShow * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            NamedSlideShow * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            NamedSlideShow * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            NamedSlideShow * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            NamedSlideShow * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            NamedSlideShow * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            NamedSlideShow * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            NamedSlideShow * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            NamedSlideShow * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideIDs )( 
            NamedSlideShow * This,
            /* [retval][out] */ VARIANT *SlideIDs);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            NamedSlideShow * This,
            /* [retval][out] */ long *Count);
        
        END_INTERFACE
    } NamedSlideShowVtbl;

    interface NamedSlideShow
    {
        CONST_VTBL struct NamedSlideShowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define NamedSlideShow_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define NamedSlideShow_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define NamedSlideShow_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define NamedSlideShow_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define NamedSlideShow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define NamedSlideShow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define NamedSlideShow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define NamedSlideShow_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define NamedSlideShow_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define NamedSlideShow_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define NamedSlideShow_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define NamedSlideShow_get_SlideIDs(This,SlideIDs)	\
    ( (This)->lpVtbl -> get_SlideIDs(This,SlideIDs) ) 

#define NamedSlideShow_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __NamedSlideShow_INTERFACE_DEFINED__ */


#ifndef __PrintOptions_INTERFACE_DEFINED__
#define __PrintOptions_INTERFACE_DEFINED__

/* interface PrintOptions */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_PrintOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149345D-5A91-11CF-8700-00AA0060263B")
    PrintOptions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintColorType( 
            /* [retval][out] */ PpPrintColorType *PrintColorType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintColorType( 
            /* [in] */ PpPrintColorType PrintColorType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collate( 
            /* [retval][out] */ MsoTriState *Collate) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Collate( 
            /* [in] */ MsoTriState Collate) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FitToPage( 
            /* [retval][out] */ MsoTriState *FitToPage) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FitToPage( 
            /* [in] */ MsoTriState FitToPage) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FrameSlides( 
            /* [retval][out] */ MsoTriState *FrameSlides) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FrameSlides( 
            /* [in] */ MsoTriState FrameSlides) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberOfCopies( 
            /* [retval][out] */ int *NumberOfCopies) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberOfCopies( 
            /* [in] */ int NumberOfCopies) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OutputType( 
            /* [retval][out] */ PpPrintOutputType *OutputType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OutputType( 
            /* [in] */ PpPrintOutputType OutputType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintHiddenSlides( 
            /* [retval][out] */ MsoTriState *PrintHiddenSlides) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintHiddenSlides( 
            /* [in] */ MsoTriState PrintHiddenSlides) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintInBackground( 
            /* [retval][out] */ MsoTriState *PrintInBackground) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintInBackground( 
            /* [in] */ MsoTriState PrintInBackground) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RangeType( 
            /* [retval][out] */ PpPrintRangeType *RangeType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RangeType( 
            /* [in] */ PpPrintRangeType RangeType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Ranges( 
            /* [retval][out] */ PrintRanges **Ranges) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintFontsAsGraphics( 
            /* [retval][out] */ MsoTriState *PrintFontsAsGraphics) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintFontsAsGraphics( 
            /* [in] */ MsoTriState PrintFontsAsGraphics) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideShowName( 
            /* [retval][out] */ BSTR *SlideShowName) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SlideShowName( 
            /* [in] */ BSTR SlideShowName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActivePrinter( 
            /* [retval][out] */ BSTR *ActivePrinter) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ActivePrinter( 
            /* [in] */ BSTR ActivePrinter) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HandoutOrder( 
            /* [retval][out] */ PpPrintHandoutOrder *HandoutOrder) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HandoutOrder( 
            /* [in] */ PpPrintHandoutOrder HandoutOrder) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintComments( 
            /* [retval][out] */ MsoTriState *PrintComments) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintComments( 
            /* [in] */ MsoTriState PrintComments) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_sectionIndex( 
            /* [retval][out] */ int *sectionIndex) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_sectionIndex( 
            /* [in] */ int sectionIndex) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HighQuality( 
            /* [retval][out] */ MsoTriState *HighQuality) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HighQuality( 
            /* [in] */ MsoTriState HighQuality) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PrintOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PrintOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PrintOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PrintOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PrintOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PrintOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PrintOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PrintOptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            PrintOptions * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintColorType )( 
            PrintOptions * This,
            /* [retval][out] */ PpPrintColorType *PrintColorType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintColorType )( 
            PrintOptions * This,
            /* [in] */ PpPrintColorType PrintColorType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collate )( 
            PrintOptions * This,
            /* [retval][out] */ MsoTriState *Collate);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Collate )( 
            PrintOptions * This,
            /* [in] */ MsoTriState Collate);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FitToPage )( 
            PrintOptions * This,
            /* [retval][out] */ MsoTriState *FitToPage);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FitToPage )( 
            PrintOptions * This,
            /* [in] */ MsoTriState FitToPage);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSlides )( 
            PrintOptions * This,
            /* [retval][out] */ MsoTriState *FrameSlides);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FrameSlides )( 
            PrintOptions * This,
            /* [in] */ MsoTriState FrameSlides);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfCopies )( 
            PrintOptions * This,
            /* [retval][out] */ int *NumberOfCopies);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfCopies )( 
            PrintOptions * This,
            /* [in] */ int NumberOfCopies);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OutputType )( 
            PrintOptions * This,
            /* [retval][out] */ PpPrintOutputType *OutputType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OutputType )( 
            PrintOptions * This,
            /* [in] */ PpPrintOutputType OutputType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PrintOptions * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintHiddenSlides )( 
            PrintOptions * This,
            /* [retval][out] */ MsoTriState *PrintHiddenSlides);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintHiddenSlides )( 
            PrintOptions * This,
            /* [in] */ MsoTriState PrintHiddenSlides);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintInBackground )( 
            PrintOptions * This,
            /* [retval][out] */ MsoTriState *PrintInBackground);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintInBackground )( 
            PrintOptions * This,
            /* [in] */ MsoTriState PrintInBackground);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RangeType )( 
            PrintOptions * This,
            /* [retval][out] */ PpPrintRangeType *RangeType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RangeType )( 
            PrintOptions * This,
            /* [in] */ PpPrintRangeType RangeType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Ranges )( 
            PrintOptions * This,
            /* [retval][out] */ PrintRanges **Ranges);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintFontsAsGraphics )( 
            PrintOptions * This,
            /* [retval][out] */ MsoTriState *PrintFontsAsGraphics);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintFontsAsGraphics )( 
            PrintOptions * This,
            /* [in] */ MsoTriState PrintFontsAsGraphics);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideShowName )( 
            PrintOptions * This,
            /* [retval][out] */ BSTR *SlideShowName);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SlideShowName )( 
            PrintOptions * This,
            /* [in] */ BSTR SlideShowName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActivePrinter )( 
            PrintOptions * This,
            /* [retval][out] */ BSTR *ActivePrinter);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ActivePrinter )( 
            PrintOptions * This,
            /* [in] */ BSTR ActivePrinter);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HandoutOrder )( 
            PrintOptions * This,
            /* [retval][out] */ PpPrintHandoutOrder *HandoutOrder);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HandoutOrder )( 
            PrintOptions * This,
            /* [in] */ PpPrintHandoutOrder HandoutOrder);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintComments )( 
            PrintOptions * This,
            /* [retval][out] */ MsoTriState *PrintComments);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintComments )( 
            PrintOptions * This,
            /* [in] */ MsoTriState PrintComments);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_sectionIndex )( 
            PrintOptions * This,
            /* [retval][out] */ int *sectionIndex);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_sectionIndex )( 
            PrintOptions * This,
            /* [in] */ int sectionIndex);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HighQuality )( 
            PrintOptions * This,
            /* [retval][out] */ MsoTriState *HighQuality);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HighQuality )( 
            PrintOptions * This,
            /* [in] */ MsoTriState HighQuality);
        
        END_INTERFACE
    } PrintOptionsVtbl;

    interface PrintOptions
    {
        CONST_VTBL struct PrintOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PrintOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PrintOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PrintOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PrintOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PrintOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PrintOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PrintOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PrintOptions_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define PrintOptions_get_PrintColorType(This,PrintColorType)	\
    ( (This)->lpVtbl -> get_PrintColorType(This,PrintColorType) ) 

#define PrintOptions_put_PrintColorType(This,PrintColorType)	\
    ( (This)->lpVtbl -> put_PrintColorType(This,PrintColorType) ) 

#define PrintOptions_get_Collate(This,Collate)	\
    ( (This)->lpVtbl -> get_Collate(This,Collate) ) 

#define PrintOptions_put_Collate(This,Collate)	\
    ( (This)->lpVtbl -> put_Collate(This,Collate) ) 

#define PrintOptions_get_FitToPage(This,FitToPage)	\
    ( (This)->lpVtbl -> get_FitToPage(This,FitToPage) ) 

#define PrintOptions_put_FitToPage(This,FitToPage)	\
    ( (This)->lpVtbl -> put_FitToPage(This,FitToPage) ) 

#define PrintOptions_get_FrameSlides(This,FrameSlides)	\
    ( (This)->lpVtbl -> get_FrameSlides(This,FrameSlides) ) 

#define PrintOptions_put_FrameSlides(This,FrameSlides)	\
    ( (This)->lpVtbl -> put_FrameSlides(This,FrameSlides) ) 

#define PrintOptions_get_NumberOfCopies(This,NumberOfCopies)	\
    ( (This)->lpVtbl -> get_NumberOfCopies(This,NumberOfCopies) ) 

#define PrintOptions_put_NumberOfCopies(This,NumberOfCopies)	\
    ( (This)->lpVtbl -> put_NumberOfCopies(This,NumberOfCopies) ) 

#define PrintOptions_get_OutputType(This,OutputType)	\
    ( (This)->lpVtbl -> get_OutputType(This,OutputType) ) 

#define PrintOptions_put_OutputType(This,OutputType)	\
    ( (This)->lpVtbl -> put_OutputType(This,OutputType) ) 

#define PrintOptions_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define PrintOptions_get_PrintHiddenSlides(This,PrintHiddenSlides)	\
    ( (This)->lpVtbl -> get_PrintHiddenSlides(This,PrintHiddenSlides) ) 

#define PrintOptions_put_PrintHiddenSlides(This,PrintHiddenSlides)	\
    ( (This)->lpVtbl -> put_PrintHiddenSlides(This,PrintHiddenSlides) ) 

#define PrintOptions_get_PrintInBackground(This,PrintInBackground)	\
    ( (This)->lpVtbl -> get_PrintInBackground(This,PrintInBackground) ) 

#define PrintOptions_put_PrintInBackground(This,PrintInBackground)	\
    ( (This)->lpVtbl -> put_PrintInBackground(This,PrintInBackground) ) 

#define PrintOptions_get_RangeType(This,RangeType)	\
    ( (This)->lpVtbl -> get_RangeType(This,RangeType) ) 

#define PrintOptions_put_RangeType(This,RangeType)	\
    ( (This)->lpVtbl -> put_RangeType(This,RangeType) ) 

#define PrintOptions_get_Ranges(This,Ranges)	\
    ( (This)->lpVtbl -> get_Ranges(This,Ranges) ) 

#define PrintOptions_get_PrintFontsAsGraphics(This,PrintFontsAsGraphics)	\
    ( (This)->lpVtbl -> get_PrintFontsAsGraphics(This,PrintFontsAsGraphics) ) 

#define PrintOptions_put_PrintFontsAsGraphics(This,PrintFontsAsGraphics)	\
    ( (This)->lpVtbl -> put_PrintFontsAsGraphics(This,PrintFontsAsGraphics) ) 

#define PrintOptions_get_SlideShowName(This,SlideShowName)	\
    ( (This)->lpVtbl -> get_SlideShowName(This,SlideShowName) ) 

#define PrintOptions_put_SlideShowName(This,SlideShowName)	\
    ( (This)->lpVtbl -> put_SlideShowName(This,SlideShowName) ) 

#define PrintOptions_get_ActivePrinter(This,ActivePrinter)	\
    ( (This)->lpVtbl -> get_ActivePrinter(This,ActivePrinter) ) 

#define PrintOptions_put_ActivePrinter(This,ActivePrinter)	\
    ( (This)->lpVtbl -> put_ActivePrinter(This,ActivePrinter) ) 

#define PrintOptions_get_HandoutOrder(This,HandoutOrder)	\
    ( (This)->lpVtbl -> get_HandoutOrder(This,HandoutOrder) ) 

#define PrintOptions_put_HandoutOrder(This,HandoutOrder)	\
    ( (This)->lpVtbl -> put_HandoutOrder(This,HandoutOrder) ) 

#define PrintOptions_get_PrintComments(This,PrintComments)	\
    ( (This)->lpVtbl -> get_PrintComments(This,PrintComments) ) 

#define PrintOptions_put_PrintComments(This,PrintComments)	\
    ( (This)->lpVtbl -> put_PrintComments(This,PrintComments) ) 

#define PrintOptions_get_sectionIndex(This,sectionIndex)	\
    ( (This)->lpVtbl -> get_sectionIndex(This,sectionIndex) ) 

#define PrintOptions_put_sectionIndex(This,sectionIndex)	\
    ( (This)->lpVtbl -> put_sectionIndex(This,sectionIndex) ) 

#define PrintOptions_get_HighQuality(This,HighQuality)	\
    ( (This)->lpVtbl -> get_HighQuality(This,HighQuality) ) 

#define PrintOptions_put_HighQuality(This,HighQuality)	\
    ( (This)->lpVtbl -> put_HighQuality(This,HighQuality) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PrintOptions_INTERFACE_DEFINED__ */


#ifndef __PrintRanges_INTERFACE_DEFINED__
#define __PrintRanges_INTERFACE_DEFINED__

/* interface PrintRanges */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_PrintRanges;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149345E-5A91-11CF-8700-00AA0060263B")
    PrintRanges : public Collection
    {
    public:
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ int Start,
            /* [in] */ int End,
            /* [retval][out] */ PrintRange **Add) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearAll( void) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ PrintRange **Item) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PrintRangesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PrintRanges * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PrintRanges * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PrintRanges * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PrintRanges * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PrintRanges * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PrintRanges * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PrintRanges * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            PrintRanges * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            PrintRanges * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            PrintRanges * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            PrintRanges * This,
            /* [in] */ int Start,
            /* [in] */ int End,
            /* [retval][out] */ PrintRange **Add);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            PrintRanges * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearAll )( 
            PrintRanges * This);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            PrintRanges * This,
            /* [in] */ int Index,
            /* [retval][out] */ PrintRange **Item);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PrintRanges * This,
            /* [retval][out] */ IDispatch **Parent);
        
        END_INTERFACE
    } PrintRangesVtbl;

    interface PrintRanges
    {
        CONST_VTBL struct PrintRangesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PrintRanges_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PrintRanges_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PrintRanges_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PrintRanges_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PrintRanges_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PrintRanges_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PrintRanges_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PrintRanges_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define PrintRanges__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define PrintRanges_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define PrintRanges_Add(This,Start,End,Add)	\
    ( (This)->lpVtbl -> Add(This,Start,End,Add) ) 

#define PrintRanges_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define PrintRanges_ClearAll(This)	\
    ( (This)->lpVtbl -> ClearAll(This) ) 

#define PrintRanges_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define PrintRanges_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PrintRanges_INTERFACE_DEFINED__ */


#ifndef __PrintRange_INTERFACE_DEFINED__
#define __PrintRange_INTERFACE_DEFINED__

/* interface PrintRange */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_PrintRange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149345F-5A91-11CF-8700-00AA0060263B")
    PrintRange : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Start( 
            /* [retval][out] */ int *Start) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_End( 
            /* [retval][out] */ int *End) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PrintRangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PrintRange * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PrintRange * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PrintRange * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PrintRange * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PrintRange * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PrintRange * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PrintRange * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            PrintRange * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PrintRange * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Start )( 
            PrintRange * This,
            /* [retval][out] */ int *Start);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_End )( 
            PrintRange * This,
            /* [retval][out] */ int *End);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            PrintRange * This);
        
        END_INTERFACE
    } PrintRangeVtbl;

    interface PrintRange
    {
        CONST_VTBL struct PrintRangeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PrintRange_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PrintRange_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PrintRange_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PrintRange_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PrintRange_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PrintRange_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PrintRange_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PrintRange_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define PrintRange_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define PrintRange_get_Start(This,Start)	\
    ( (This)->lpVtbl -> get_Start(This,Start) ) 

#define PrintRange_get_End(This,End)	\
    ( (This)->lpVtbl -> get_End(This,End) ) 

#define PrintRange_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PrintRange_INTERFACE_DEFINED__ */


#ifndef __AddIns_INTERFACE_DEFINED__
#define __AddIns_INTERFACE_DEFINED__

/* interface AddIns */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_AddIns;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493460-5A91-11CF-8700-00AA0060263B")
    AddIns : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ AddIn **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR FileName,
            /* [retval][out] */ AddIn **Add) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ VARIANT *Index) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AddInsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AddIns * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AddIns * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AddIns * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AddIns * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AddIns * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AddIns * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AddIns * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            AddIns * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            AddIns * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            AddIns * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            AddIns * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AddIns * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            AddIns * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ AddIn **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            AddIns * This,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ AddIn **Add);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            AddIns * This,
            /* [in] */ VARIANT *Index);
        
        END_INTERFACE
    } AddInsVtbl;

    interface AddIns
    {
        CONST_VTBL struct AddInsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AddIns_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AddIns_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AddIns_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AddIns_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AddIns_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AddIns_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AddIns_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AddIns_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define AddIns__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define AddIns_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define AddIns_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define AddIns_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define AddIns_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define AddIns_Add(This,FileName,Add)	\
    ( (This)->lpVtbl -> Add(This,FileName,Add) ) 

#define AddIns_Remove(This,Index)	\
    ( (This)->lpVtbl -> Remove(This,Index) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AddIns_INTERFACE_DEFINED__ */


#ifndef __AddIn_INTERFACE_DEFINED__
#define __AddIn_INTERFACE_DEFINED__

/* interface AddIn */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_AddIn;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493461-5A91-11CF-8700-00AA0060263B")
    AddIn : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *FullName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *Path) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Registered( 
            /* [retval][out] */ MsoTriState *Registered) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Registered( 
            /* [in] */ MsoTriState Registered) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoLoad( 
            /* [retval][out] */ MsoTriState *AutoLoad) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoLoad( 
            /* [in] */ MsoTriState AutoLoad) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Loaded( 
            /* [retval][out] */ MsoTriState *Loaded) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Loaded( 
            /* [in] */ MsoTriState Loaded) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayAlerts( 
            /* [retval][out] */ MsoTriState *DisplayAlerts) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayAlerts( 
            /* [in] */ MsoTriState DisplayAlerts) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_RegisteredInHKLM( 
            /* [retval][out] */ MsoTriState *RegisteredInHKLM) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AddInVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AddIn * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AddIn * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AddIn * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AddIn * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AddIn * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AddIn * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AddIn * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            AddIn * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AddIn * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            AddIn * This,
            /* [retval][out] */ BSTR *FullName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            AddIn * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            AddIn * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Registered )( 
            AddIn * This,
            /* [retval][out] */ MsoTriState *Registered);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Registered )( 
            AddIn * This,
            /* [in] */ MsoTriState Registered);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoLoad )( 
            AddIn * This,
            /* [retval][out] */ MsoTriState *AutoLoad);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoLoad )( 
            AddIn * This,
            /* [in] */ MsoTriState AutoLoad);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Loaded )( 
            AddIn * This,
            /* [retval][out] */ MsoTriState *Loaded);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Loaded )( 
            AddIn * This,
            /* [in] */ MsoTriState Loaded);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayAlerts )( 
            AddIn * This,
            /* [retval][out] */ MsoTriState *DisplayAlerts);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayAlerts )( 
            AddIn * This,
            /* [in] */ MsoTriState DisplayAlerts);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RegisteredInHKLM )( 
            AddIn * This,
            /* [retval][out] */ MsoTriState *RegisteredInHKLM);
        
        END_INTERFACE
    } AddInVtbl;

    interface AddIn
    {
        CONST_VTBL struct AddInVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AddIn_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AddIn_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AddIn_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AddIn_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AddIn_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AddIn_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AddIn_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AddIn_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define AddIn_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define AddIn_get_FullName(This,FullName)	\
    ( (This)->lpVtbl -> get_FullName(This,FullName) ) 

#define AddIn_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define AddIn_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define AddIn_get_Registered(This,Registered)	\
    ( (This)->lpVtbl -> get_Registered(This,Registered) ) 

#define AddIn_put_Registered(This,Registered)	\
    ( (This)->lpVtbl -> put_Registered(This,Registered) ) 

#define AddIn_get_AutoLoad(This,AutoLoad)	\
    ( (This)->lpVtbl -> get_AutoLoad(This,AutoLoad) ) 

#define AddIn_put_AutoLoad(This,AutoLoad)	\
    ( (This)->lpVtbl -> put_AutoLoad(This,AutoLoad) ) 

#define AddIn_get_Loaded(This,Loaded)	\
    ( (This)->lpVtbl -> get_Loaded(This,Loaded) ) 

#define AddIn_put_Loaded(This,Loaded)	\
    ( (This)->lpVtbl -> put_Loaded(This,Loaded) ) 

#define AddIn_get_DisplayAlerts(This,DisplayAlerts)	\
    ( (This)->lpVtbl -> get_DisplayAlerts(This,DisplayAlerts) ) 

#define AddIn_put_DisplayAlerts(This,DisplayAlerts)	\
    ( (This)->lpVtbl -> put_DisplayAlerts(This,DisplayAlerts) ) 

#define AddIn_get_RegisteredInHKLM(This,RegisteredInHKLM)	\
    ( (This)->lpVtbl -> get_RegisteredInHKLM(This,RegisteredInHKLM) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AddIn_INTERFACE_DEFINED__ */


#ifndef __Presentations_INTERFACE_DEFINED__
#define __Presentations_INTERFACE_DEFINED__

/* interface Presentations */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Presentations;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493462-5A91-11CF-8700-00AA0060263B")
    Presentations : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Presentation	**Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [defaultvalue][optional][in] */ MsoTriState WithWindow,
            /* [retval][out] */ Presentation	**Add) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE OpenOld( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ MsoTriState ReadOnly,
            /* [defaultvalue][optional][in] */ MsoTriState Untitled,
            /* [defaultvalue][optional][in] */ MsoTriState WithWindow,
            /* [retval][out] */ Presentation	**OpenOld) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ MsoTriState ReadOnly,
            /* [defaultvalue][optional][in] */ MsoTriState Untitled,
            /* [defaultvalue][optional][in] */ MsoTriState WithWindow,
            /* [retval][out] */ Presentation	**Open) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckOut( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanCheckOut( 
            /* [in] */ BSTR FileName,
            /* [retval][out] */ VARIANT_BOOL *CanCheckOut) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open2007( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ MsoTriState ReadOnly,
            /* [defaultvalue][optional][in] */ MsoTriState Untitled,
            /* [defaultvalue][optional][in] */ MsoTriState WithWindow,
            /* [defaultvalue][optional][in] */ MsoTriState OpenAndRepair,
            /* [retval][out] */ Presentation	**Open2007) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PresentationsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Presentations * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Presentations * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Presentations * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Presentations * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Presentations * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Presentations * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Presentations * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Presentations * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            Presentations * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Presentations * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Presentations * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Presentations * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Presentations * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Presentation	**Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Presentations * This,
            /* [defaultvalue][optional][in] */ MsoTriState WithWindow,
            /* [retval][out] */ Presentation	**Add);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *OpenOld )( 
            Presentations * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ MsoTriState ReadOnly,
            /* [defaultvalue][optional][in] */ MsoTriState Untitled,
            /* [defaultvalue][optional][in] */ MsoTriState WithWindow,
            /* [retval][out] */ Presentation	**OpenOld);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            Presentations * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ MsoTriState ReadOnly,
            /* [defaultvalue][optional][in] */ MsoTriState Untitled,
            /* [defaultvalue][optional][in] */ MsoTriState WithWindow,
            /* [retval][out] */ Presentation	**Open);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckOut )( 
            Presentations * This,
            /* [in] */ BSTR FileName);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanCheckOut )( 
            Presentations * This,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ VARIANT_BOOL *CanCheckOut);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open2007 )( 
            Presentations * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ MsoTriState ReadOnly,
            /* [defaultvalue][optional][in] */ MsoTriState Untitled,
            /* [defaultvalue][optional][in] */ MsoTriState WithWindow,
            /* [defaultvalue][optional][in] */ MsoTriState OpenAndRepair,
            /* [retval][out] */ Presentation	**Open2007);
        
        END_INTERFACE
    } PresentationsVtbl;

    interface Presentations
    {
        CONST_VTBL struct PresentationsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Presentations_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Presentations_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Presentations_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Presentations_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Presentations_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Presentations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Presentations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Presentations_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Presentations__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define Presentations_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define Presentations_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Presentations_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Presentations_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define Presentations_Add(This,WithWindow,Add)	\
    ( (This)->lpVtbl -> Add(This,WithWindow,Add) ) 

#define Presentations_OpenOld(This,FileName,ReadOnly,Untitled,WithWindow,OpenOld)	\
    ( (This)->lpVtbl -> OpenOld(This,FileName,ReadOnly,Untitled,WithWindow,OpenOld) ) 

#define Presentations_Open(This,FileName,ReadOnly,Untitled,WithWindow,Open)	\
    ( (This)->lpVtbl -> Open(This,FileName,ReadOnly,Untitled,WithWindow,Open) ) 

#define Presentations_CheckOut(This,FileName)	\
    ( (This)->lpVtbl -> CheckOut(This,FileName) ) 

#define Presentations_CanCheckOut(This,FileName,CanCheckOut)	\
    ( (This)->lpVtbl -> CanCheckOut(This,FileName,CanCheckOut) ) 

#define Presentations_Open2007(This,FileName,ReadOnly,Untitled,WithWindow,OpenAndRepair,Open2007)	\
    ( (This)->lpVtbl -> Open2007(This,FileName,ReadOnly,Untitled,WithWindow,OpenAndRepair,Open2007) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Presentations_INTERFACE_DEFINED__ */


#ifndef __PresEvents_INTERFACE_DEFINED__
#define __PresEvents_INTERFACE_DEFINED__

/* interface PresEvents */
/* [object][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_PresEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493463-5A91-11CF-8700-00AA0060263B")
    PresEvents : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct PresEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PresEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PresEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PresEvents * This);
        
        END_INTERFACE
    } PresEventsVtbl;

    interface PresEvents
    {
        CONST_VTBL struct PresEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PresEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PresEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PresEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PresEvents_INTERFACE_DEFINED__ */


#ifndef __Hyperlinks_INTERFACE_DEFINED__
#define __Hyperlinks_INTERFACE_DEFINED__

/* interface Hyperlinks */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Hyperlinks;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493464-5A91-11CF-8700-00AA0060263B")
    Hyperlinks : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ Hyperlink **Item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HyperlinksVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Hyperlinks * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Hyperlinks * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Hyperlinks * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Hyperlinks * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Hyperlinks * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Hyperlinks * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Hyperlinks * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Hyperlinks * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            Hyperlinks * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Hyperlinks * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Hyperlinks * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Hyperlinks * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Hyperlinks * This,
            /* [in] */ int Index,
            /* [retval][out] */ Hyperlink **Item);
        
        END_INTERFACE
    } HyperlinksVtbl;

    interface Hyperlinks
    {
        CONST_VTBL struct HyperlinksVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Hyperlinks_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Hyperlinks_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Hyperlinks_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Hyperlinks_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Hyperlinks_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Hyperlinks_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Hyperlinks_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Hyperlinks_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Hyperlinks__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define Hyperlinks_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define Hyperlinks_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Hyperlinks_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Hyperlinks_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Hyperlinks_INTERFACE_DEFINED__ */


#ifndef __Hyperlink_INTERFACE_DEFINED__
#define __Hyperlink_INTERFACE_DEFINED__

/* interface Hyperlink */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Hyperlink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493465-5A91-11CF-8700-00AA0060263B")
    Hyperlink : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoHyperlinkType *Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Address( 
            /* [retval][out] */ BSTR *Address) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Address( 
            /* [in] */ BSTR Address) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SubAddress( 
            /* [retval][out] */ BSTR *SubAddress) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SubAddress( 
            /* [in] */ BSTR SubAddress) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddToFavorites( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EmailSubject( 
            /* [retval][out] */ BSTR *EmailSubject) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EmailSubject( 
            /* [in] */ BSTR EmailSubject) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScreenTip( 
            /* [retval][out] */ BSTR *ScreenTip) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScreenTip( 
            /* [in] */ BSTR ScreenTip) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextToDisplay( 
            /* [retval][out] */ BSTR *TextToDisplay) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextToDisplay( 
            /* [in] */ BSTR TextToDisplay) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowAndReturn( 
            /* [retval][out] */ MsoTriState *ShowAndReturn) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowAndReturn( 
            /* [in] */ MsoTriState ShowAndReturn) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Follow( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateNewDocument( 
            /* [in] */ BSTR FileName,
            /* [in] */ MsoTriState EditNow,
            /* [in] */ MsoTriState Overwrite) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HyperlinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Hyperlink * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Hyperlink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Hyperlink * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Hyperlink * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Hyperlink * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Hyperlink * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Hyperlink * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Hyperlink * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Hyperlink * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Hyperlink * This,
            /* [retval][out] */ MsoHyperlinkType *Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Address )( 
            Hyperlink * This,
            /* [retval][out] */ BSTR *Address);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Address )( 
            Hyperlink * This,
            /* [in] */ BSTR Address);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SubAddress )( 
            Hyperlink * This,
            /* [retval][out] */ BSTR *SubAddress);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SubAddress )( 
            Hyperlink * This,
            /* [in] */ BSTR SubAddress);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddToFavorites )( 
            Hyperlink * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EmailSubject )( 
            Hyperlink * This,
            /* [retval][out] */ BSTR *EmailSubject);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EmailSubject )( 
            Hyperlink * This,
            /* [in] */ BSTR EmailSubject);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScreenTip )( 
            Hyperlink * This,
            /* [retval][out] */ BSTR *ScreenTip);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScreenTip )( 
            Hyperlink * This,
            /* [in] */ BSTR ScreenTip);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextToDisplay )( 
            Hyperlink * This,
            /* [retval][out] */ BSTR *TextToDisplay);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextToDisplay )( 
            Hyperlink * This,
            /* [in] */ BSTR TextToDisplay);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowAndReturn )( 
            Hyperlink * This,
            /* [retval][out] */ MsoTriState *ShowAndReturn);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowAndReturn )( 
            Hyperlink * This,
            /* [in] */ MsoTriState ShowAndReturn);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Follow )( 
            Hyperlink * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateNewDocument )( 
            Hyperlink * This,
            /* [in] */ BSTR FileName,
            /* [in] */ MsoTriState EditNow,
            /* [in] */ MsoTriState Overwrite);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Hyperlink * This);
        
        END_INTERFACE
    } HyperlinkVtbl;

    interface Hyperlink
    {
        CONST_VTBL struct HyperlinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Hyperlink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Hyperlink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Hyperlink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Hyperlink_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Hyperlink_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Hyperlink_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Hyperlink_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Hyperlink_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Hyperlink_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Hyperlink_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define Hyperlink_get_Address(This,Address)	\
    ( (This)->lpVtbl -> get_Address(This,Address) ) 

#define Hyperlink_put_Address(This,Address)	\
    ( (This)->lpVtbl -> put_Address(This,Address) ) 

#define Hyperlink_get_SubAddress(This,SubAddress)	\
    ( (This)->lpVtbl -> get_SubAddress(This,SubAddress) ) 

#define Hyperlink_put_SubAddress(This,SubAddress)	\
    ( (This)->lpVtbl -> put_SubAddress(This,SubAddress) ) 

#define Hyperlink_AddToFavorites(This)	\
    ( (This)->lpVtbl -> AddToFavorites(This) ) 

#define Hyperlink_get_EmailSubject(This,EmailSubject)	\
    ( (This)->lpVtbl -> get_EmailSubject(This,EmailSubject) ) 

#define Hyperlink_put_EmailSubject(This,EmailSubject)	\
    ( (This)->lpVtbl -> put_EmailSubject(This,EmailSubject) ) 

#define Hyperlink_get_ScreenTip(This,ScreenTip)	\
    ( (This)->lpVtbl -> get_ScreenTip(This,ScreenTip) ) 

#define Hyperlink_put_ScreenTip(This,ScreenTip)	\
    ( (This)->lpVtbl -> put_ScreenTip(This,ScreenTip) ) 

#define Hyperlink_get_TextToDisplay(This,TextToDisplay)	\
    ( (This)->lpVtbl -> get_TextToDisplay(This,TextToDisplay) ) 

#define Hyperlink_put_TextToDisplay(This,TextToDisplay)	\
    ( (This)->lpVtbl -> put_TextToDisplay(This,TextToDisplay) ) 

#define Hyperlink_get_ShowAndReturn(This,ShowAndReturn)	\
    ( (This)->lpVtbl -> get_ShowAndReturn(This,ShowAndReturn) ) 

#define Hyperlink_put_ShowAndReturn(This,ShowAndReturn)	\
    ( (This)->lpVtbl -> put_ShowAndReturn(This,ShowAndReturn) ) 

#define Hyperlink_Follow(This)	\
    ( (This)->lpVtbl -> Follow(This) ) 

#define Hyperlink_CreateNewDocument(This,FileName,EditNow,Overwrite)	\
    ( (This)->lpVtbl -> CreateNewDocument(This,FileName,EditNow,Overwrite) ) 

#define Hyperlink_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Hyperlink_INTERFACE_DEFINED__ */


#ifndef __PageSetup_INTERFACE_DEFINED__
#define __PageSetup_INTERFACE_DEFINED__

/* interface PageSetup */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_PageSetup;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493466-5A91-11CF-8700-00AA0060263B")
    PageSetup : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstSlideNumber( 
            /* [retval][out] */ int *FirstSlideNumber) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FirstSlideNumber( 
            /* [in] */ int FirstSlideNumber) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideHeight( 
            /* [retval][out] */ single *SlideHeight) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SlideHeight( 
            /* [in] */ single SlideHeight) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideWidth( 
            /* [retval][out] */ single *SlideWidth) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SlideWidth( 
            /* [in] */ single SlideWidth) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideSize( 
            /* [retval][out] */ PpSlideSizeType *SlideSize) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SlideSize( 
            /* [in] */ PpSlideSizeType SlideSize) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NotesOrientation( 
            /* [retval][out] */ MsoOrientation *NotesOrientation) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NotesOrientation( 
            /* [in] */ MsoOrientation NotesOrientation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideOrientation( 
            /* [retval][out] */ MsoOrientation *SlideOrientation) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SlideOrientation( 
            /* [in] */ MsoOrientation SlideOrientation) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PageSetupVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PageSetup * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PageSetup * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PageSetup * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PageSetup * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PageSetup * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PageSetup * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PageSetup * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            PageSetup * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PageSetup * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstSlideNumber )( 
            PageSetup * This,
            /* [retval][out] */ int *FirstSlideNumber);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FirstSlideNumber )( 
            PageSetup * This,
            /* [in] */ int FirstSlideNumber);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideHeight )( 
            PageSetup * This,
            /* [retval][out] */ single *SlideHeight);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SlideHeight )( 
            PageSetup * This,
            /* [in] */ single SlideHeight);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideWidth )( 
            PageSetup * This,
            /* [retval][out] */ single *SlideWidth);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SlideWidth )( 
            PageSetup * This,
            /* [in] */ single SlideWidth);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideSize )( 
            PageSetup * This,
            /* [retval][out] */ PpSlideSizeType *SlideSize);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SlideSize )( 
            PageSetup * This,
            /* [in] */ PpSlideSizeType SlideSize);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NotesOrientation )( 
            PageSetup * This,
            /* [retval][out] */ MsoOrientation *NotesOrientation);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NotesOrientation )( 
            PageSetup * This,
            /* [in] */ MsoOrientation NotesOrientation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideOrientation )( 
            PageSetup * This,
            /* [retval][out] */ MsoOrientation *SlideOrientation);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SlideOrientation )( 
            PageSetup * This,
            /* [in] */ MsoOrientation SlideOrientation);
        
        END_INTERFACE
    } PageSetupVtbl;

    interface PageSetup
    {
        CONST_VTBL struct PageSetupVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PageSetup_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PageSetup_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PageSetup_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PageSetup_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PageSetup_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PageSetup_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PageSetup_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PageSetup_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define PageSetup_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define PageSetup_get_FirstSlideNumber(This,FirstSlideNumber)	\
    ( (This)->lpVtbl -> get_FirstSlideNumber(This,FirstSlideNumber) ) 

#define PageSetup_put_FirstSlideNumber(This,FirstSlideNumber)	\
    ( (This)->lpVtbl -> put_FirstSlideNumber(This,FirstSlideNumber) ) 

#define PageSetup_get_SlideHeight(This,SlideHeight)	\
    ( (This)->lpVtbl -> get_SlideHeight(This,SlideHeight) ) 

#define PageSetup_put_SlideHeight(This,SlideHeight)	\
    ( (This)->lpVtbl -> put_SlideHeight(This,SlideHeight) ) 

#define PageSetup_get_SlideWidth(This,SlideWidth)	\
    ( (This)->lpVtbl -> get_SlideWidth(This,SlideWidth) ) 

#define PageSetup_put_SlideWidth(This,SlideWidth)	\
    ( (This)->lpVtbl -> put_SlideWidth(This,SlideWidth) ) 

#define PageSetup_get_SlideSize(This,SlideSize)	\
    ( (This)->lpVtbl -> get_SlideSize(This,SlideSize) ) 

#define PageSetup_put_SlideSize(This,SlideSize)	\
    ( (This)->lpVtbl -> put_SlideSize(This,SlideSize) ) 

#define PageSetup_get_NotesOrientation(This,NotesOrientation)	\
    ( (This)->lpVtbl -> get_NotesOrientation(This,NotesOrientation) ) 

#define PageSetup_put_NotesOrientation(This,NotesOrientation)	\
    ( (This)->lpVtbl -> put_NotesOrientation(This,NotesOrientation) ) 

#define PageSetup_get_SlideOrientation(This,SlideOrientation)	\
    ( (This)->lpVtbl -> get_SlideOrientation(This,SlideOrientation) ) 

#define PageSetup_put_SlideOrientation(This,SlideOrientation)	\
    ( (This)->lpVtbl -> put_SlideOrientation(This,SlideOrientation) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PageSetup_INTERFACE_DEFINED__ */


#ifndef __Fonts_INTERFACE_DEFINED__
#define __Fonts_INTERFACE_DEFINED__

/* interface Fonts */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Fonts;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493467-5A91-11CF-8700-00AA0060263B")
    Fonts : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Font **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Replace( 
            /* [in] */ BSTR Original,
            /* [in] */ BSTR Replacement) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FontsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Fonts * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Fonts * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Fonts * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Fonts * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Fonts * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Fonts * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Fonts * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Fonts * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            Fonts * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Fonts * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Fonts * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Fonts * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Fonts * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Font **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Replace )( 
            Fonts * This,
            /* [in] */ BSTR Original,
            /* [in] */ BSTR Replacement);
        
        END_INTERFACE
    } FontsVtbl;

    interface Fonts
    {
        CONST_VTBL struct FontsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Fonts_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Fonts_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Fonts_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Fonts_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Fonts_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Fonts_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Fonts_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Fonts_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Fonts__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define Fonts_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define Fonts_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Fonts_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Fonts_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define Fonts_Replace(This,Original,Replacement)	\
    ( (This)->lpVtbl -> Replace(This,Original,Replacement) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Fonts_INTERFACE_DEFINED__ */


#ifndef __ExtraColors_INTERFACE_DEFINED__
#define __ExtraColors_INTERFACE_DEFINED__

/* interface ExtraColors */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ExtraColors;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493468-5A91-11CF-8700-00AA0060263B")
    ExtraColors : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ MsoRGBType *Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ MsoRGBType Type) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ExtraColorsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ExtraColors * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ExtraColors * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ExtraColors * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ExtraColors * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ExtraColors * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ExtraColors * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ExtraColors * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ExtraColors * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            ExtraColors * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ExtraColors * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ExtraColors * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ExtraColors * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ExtraColors * This,
            /* [in] */ int Index,
            /* [retval][out] */ MsoRGBType *Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ExtraColors * This,
            /* [in] */ MsoRGBType Type);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ExtraColors * This);
        
        END_INTERFACE
    } ExtraColorsVtbl;

    interface ExtraColors
    {
        CONST_VTBL struct ExtraColorsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ExtraColors_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ExtraColors_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ExtraColors_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ExtraColors_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ExtraColors_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ExtraColors_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ExtraColors_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ExtraColors_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define ExtraColors__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define ExtraColors_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define ExtraColors_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ExtraColors_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ExtraColors_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define ExtraColors_Add(This,Type)	\
    ( (This)->lpVtbl -> Add(This,Type) ) 

#define ExtraColors_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ExtraColors_INTERFACE_DEFINED__ */


#ifndef __TextRange_INTERFACE_DEFINED__
#define __TextRange_INTERFACE_DEFINED__

/* interface TextRange */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_TextRange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149348F-5A91-11CF-8700-00AA0060263B")
    TextRange : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActionSettings( 
            /* [retval][out] */ ActionSettings **ActionSettings) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Start( 
            /* [retval][out] */ long *Start) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ long *Length) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BoundLeft( 
            /* [retval][out] */ single *BoundLeft) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BoundTop( 
            /* [retval][out] */ single *BoundTop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BoundWidth( 
            /* [retval][out] */ single *BoundWidth) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BoundHeight( 
            /* [retval][out] */ single *BoundHeight) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paragraphs( 
            /* [defaultvalue][optional][in] */ int Start,
            /* [defaultvalue][optional][in] */ int Length,
            /* [retval][out] */ TextRange **Paragraphs) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Sentences( 
            /* [defaultvalue][optional][in] */ int Start,
            /* [defaultvalue][optional][in] */ int Length,
            /* [retval][out] */ TextRange **Sentences) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Words( 
            /* [defaultvalue][optional][in] */ int Start,
            /* [defaultvalue][optional][in] */ int Length,
            /* [retval][out] */ TextRange **Words) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Characters( 
            /* [defaultvalue][optional][in] */ int Start,
            /* [defaultvalue][optional][in] */ int Length,
            /* [retval][out] */ TextRange **Characters) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Lines( 
            /* [defaultvalue][optional][in] */ int Start,
            /* [defaultvalue][optional][in] */ int Length,
            /* [retval][out] */ TextRange **Lines) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Runs( 
            /* [defaultvalue][optional][in] */ int Start,
            /* [defaultvalue][optional][in] */ int Length,
            /* [retval][out] */ TextRange **Runs) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TrimText( 
            /* [retval][out] */ TextRange **TrimText) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *Text) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertAfter( 
            /* [defaultvalue][optional][in] */ BSTR NewText,
            /* [retval][out] */ TextRange **After) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertBefore( 
            /* [defaultvalue][optional][in] */ BSTR NewText,
            /* [retval][out] */ TextRange **Before) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertDateTime( 
            /* [in] */ PpDateTimeFormat DateTimeFormat,
            /* [defaultvalue][optional][in] */ MsoTriState InsertAsField,
            /* [retval][out] */ TextRange **DateTime) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertSlideNumber( 
            /* [retval][out] */ TextRange **SlideNumber) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertSymbol( 
            /* [in] */ BSTR FontName,
            /* [in] */ int CharNumber,
            /* [defaultvalue][optional][in] */ MsoTriState Unicode,
            /* [retval][out] */ TextRange **Symbol) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ Font **Font) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ParagraphFormat( 
            /* [retval][out] */ ParagraphFormat **ParagraphFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IndentLevel( 
            /* [retval][out] */ int *IndentLevel) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IndentLevel( 
            /* [in] */ int IndentLevel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paste( 
            /* [retval][out] */ TextRange **Paste) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ChangeCase( 
            /* [in] */ PpChangeCase Type) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPeriods( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemovePeriods( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Find( 
            /* [in] */ BSTR FindWhat,
            /* [defaultvalue][optional][in] */ int After,
            /* [defaultvalue][optional][in] */ MsoTriState MatchCase,
            /* [defaultvalue][optional][in] */ MsoTriState WholeWords,
            /* [retval][out] */ TextRange **Find) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Replace( 
            /* [in] */ BSTR FindWhat,
            /* [in] */ BSTR ReplaceWhat,
            /* [defaultvalue][optional][in] */ int After,
            /* [defaultvalue][optional][in] */ MsoTriState MatchCase,
            /* [defaultvalue][optional][in] */ MsoTriState WholeWords,
            /* [retval][out] */ TextRange **Replace) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RotatedBounds( 
            /* [out] */ single *X1,
            /* [out] */ single *Y1,
            /* [out] */ single *X2,
            /* [out] */ single *Y2,
            /* [out] */ single *X3,
            /* [out] */ single *Y3,
            /* [out] */ single *x4,
            /* [out] */ single *y4) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageID( 
            /* [retval][out] */ MsoLanguageID *LanguageID) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageID( 
            /* [in] */ MsoLanguageID LanguageID) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RtlRun( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE LtrRun( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PasteSpecial( 
            /* [defaultvalue][optional][in] */ PpPasteDataType DataType,
            /* [defaultvalue][optional][in] */ MsoTriState DisplayAsIcon,
            /* [defaultvalue][optional][in] */ BSTR IconFileName,
            /* [defaultvalue][optional][in] */ int IconIndex,
            /* [defaultvalue][optional][in] */ BSTR IconLabel,
            /* [defaultvalue][optional][in] */ MsoTriState Link,
            /* [retval][out] */ TextRange **PasteSpecial) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextRangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextRange * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextRange * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextRange * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextRange * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextRange * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextRange * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextRange * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            TextRange * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            TextRange * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TextRange * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TextRange * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextRange * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActionSettings )( 
            TextRange * This,
            /* [retval][out] */ ActionSettings **ActionSettings);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Start )( 
            TextRange * This,
            /* [retval][out] */ long *Start);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            TextRange * This,
            /* [retval][out] */ long *Length);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BoundLeft )( 
            TextRange * This,
            /* [retval][out] */ single *BoundLeft);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BoundTop )( 
            TextRange * This,
            /* [retval][out] */ single *BoundTop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BoundWidth )( 
            TextRange * This,
            /* [retval][out] */ single *BoundWidth);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BoundHeight )( 
            TextRange * This,
            /* [retval][out] */ single *BoundHeight);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paragraphs )( 
            TextRange * This,
            /* [defaultvalue][optional][in] */ int Start,
            /* [defaultvalue][optional][in] */ int Length,
            /* [retval][out] */ TextRange **Paragraphs);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Sentences )( 
            TextRange * This,
            /* [defaultvalue][optional][in] */ int Start,
            /* [defaultvalue][optional][in] */ int Length,
            /* [retval][out] */ TextRange **Sentences);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Words )( 
            TextRange * This,
            /* [defaultvalue][optional][in] */ int Start,
            /* [defaultvalue][optional][in] */ int Length,
            /* [retval][out] */ TextRange **Words);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Characters )( 
            TextRange * This,
            /* [defaultvalue][optional][in] */ int Start,
            /* [defaultvalue][optional][in] */ int Length,
            /* [retval][out] */ TextRange **Characters);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Lines )( 
            TextRange * This,
            /* [defaultvalue][optional][in] */ int Start,
            /* [defaultvalue][optional][in] */ int Length,
            /* [retval][out] */ TextRange **Lines);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Runs )( 
            TextRange * This,
            /* [defaultvalue][optional][in] */ int Start,
            /* [defaultvalue][optional][in] */ int Length,
            /* [retval][out] */ TextRange **Runs);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TrimText )( 
            TextRange * This,
            /* [retval][out] */ TextRange **TrimText);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            TextRange * This,
            /* [retval][out] */ BSTR *Text);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            TextRange * This,
            /* [in] */ BSTR Text);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertAfter )( 
            TextRange * This,
            /* [defaultvalue][optional][in] */ BSTR NewText,
            /* [retval][out] */ TextRange **After);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertBefore )( 
            TextRange * This,
            /* [defaultvalue][optional][in] */ BSTR NewText,
            /* [retval][out] */ TextRange **Before);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertDateTime )( 
            TextRange * This,
            /* [in] */ PpDateTimeFormat DateTimeFormat,
            /* [defaultvalue][optional][in] */ MsoTriState InsertAsField,
            /* [retval][out] */ TextRange **DateTime);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertSlideNumber )( 
            TextRange * This,
            /* [retval][out] */ TextRange **SlideNumber);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertSymbol )( 
            TextRange * This,
            /* [in] */ BSTR FontName,
            /* [in] */ int CharNumber,
            /* [defaultvalue][optional][in] */ MsoTriState Unicode,
            /* [retval][out] */ TextRange **Symbol);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            TextRange * This,
            /* [retval][out] */ Font **Font);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ParagraphFormat )( 
            TextRange * This,
            /* [retval][out] */ ParagraphFormat **ParagraphFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IndentLevel )( 
            TextRange * This,
            /* [retval][out] */ int *IndentLevel);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IndentLevel )( 
            TextRange * This,
            /* [in] */ int IndentLevel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            TextRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            TextRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            TextRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            TextRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paste )( 
            TextRange * This,
            /* [retval][out] */ TextRange **Paste);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ChangeCase )( 
            TextRange * This,
            /* [in] */ PpChangeCase Type);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPeriods )( 
            TextRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemovePeriods )( 
            TextRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Find )( 
            TextRange * This,
            /* [in] */ BSTR FindWhat,
            /* [defaultvalue][optional][in] */ int After,
            /* [defaultvalue][optional][in] */ MsoTriState MatchCase,
            /* [defaultvalue][optional][in] */ MsoTriState WholeWords,
            /* [retval][out] */ TextRange **Find);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Replace )( 
            TextRange * This,
            /* [in] */ BSTR FindWhat,
            /* [in] */ BSTR ReplaceWhat,
            /* [defaultvalue][optional][in] */ int After,
            /* [defaultvalue][optional][in] */ MsoTriState MatchCase,
            /* [defaultvalue][optional][in] */ MsoTriState WholeWords,
            /* [retval][out] */ TextRange **Replace);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RotatedBounds )( 
            TextRange * This,
            /* [out] */ single *X1,
            /* [out] */ single *Y1,
            /* [out] */ single *X2,
            /* [out] */ single *Y2,
            /* [out] */ single *X3,
            /* [out] */ single *Y3,
            /* [out] */ single *x4,
            /* [out] */ single *y4);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageID )( 
            TextRange * This,
            /* [retval][out] */ MsoLanguageID *LanguageID);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageID )( 
            TextRange * This,
            /* [in] */ MsoLanguageID LanguageID);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RtlRun )( 
            TextRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LtrRun )( 
            TextRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PasteSpecial )( 
            TextRange * This,
            /* [defaultvalue][optional][in] */ PpPasteDataType DataType,
            /* [defaultvalue][optional][in] */ MsoTriState DisplayAsIcon,
            /* [defaultvalue][optional][in] */ BSTR IconFileName,
            /* [defaultvalue][optional][in] */ int IconIndex,
            /* [defaultvalue][optional][in] */ BSTR IconLabel,
            /* [defaultvalue][optional][in] */ MsoTriState Link,
            /* [retval][out] */ TextRange **PasteSpecial);
        
        END_INTERFACE
    } TextRangeVtbl;

    interface TextRange
    {
        CONST_VTBL struct TextRangeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextRange_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TextRange_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TextRange_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TextRange_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TextRange_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TextRange_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TextRange_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TextRange_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define TextRange__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define TextRange_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define TextRange_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define TextRange_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define TextRange_get_ActionSettings(This,ActionSettings)	\
    ( (This)->lpVtbl -> get_ActionSettings(This,ActionSettings) ) 

#define TextRange_get_Start(This,Start)	\
    ( (This)->lpVtbl -> get_Start(This,Start) ) 

#define TextRange_get_Length(This,Length)	\
    ( (This)->lpVtbl -> get_Length(This,Length) ) 

#define TextRange_get_BoundLeft(This,BoundLeft)	\
    ( (This)->lpVtbl -> get_BoundLeft(This,BoundLeft) ) 

#define TextRange_get_BoundTop(This,BoundTop)	\
    ( (This)->lpVtbl -> get_BoundTop(This,BoundTop) ) 

#define TextRange_get_BoundWidth(This,BoundWidth)	\
    ( (This)->lpVtbl -> get_BoundWidth(This,BoundWidth) ) 

#define TextRange_get_BoundHeight(This,BoundHeight)	\
    ( (This)->lpVtbl -> get_BoundHeight(This,BoundHeight) ) 

#define TextRange_Paragraphs(This,Start,Length,Paragraphs)	\
    ( (This)->lpVtbl -> Paragraphs(This,Start,Length,Paragraphs) ) 

#define TextRange_Sentences(This,Start,Length,Sentences)	\
    ( (This)->lpVtbl -> Sentences(This,Start,Length,Sentences) ) 

#define TextRange_Words(This,Start,Length,Words)	\
    ( (This)->lpVtbl -> Words(This,Start,Length,Words) ) 

#define TextRange_Characters(This,Start,Length,Characters)	\
    ( (This)->lpVtbl -> Characters(This,Start,Length,Characters) ) 

#define TextRange_Lines(This,Start,Length,Lines)	\
    ( (This)->lpVtbl -> Lines(This,Start,Length,Lines) ) 

#define TextRange_Runs(This,Start,Length,Runs)	\
    ( (This)->lpVtbl -> Runs(This,Start,Length,Runs) ) 

#define TextRange_TrimText(This,TrimText)	\
    ( (This)->lpVtbl -> TrimText(This,TrimText) ) 

#define TextRange_get_Text(This,Text)	\
    ( (This)->lpVtbl -> get_Text(This,Text) ) 

#define TextRange_put_Text(This,Text)	\
    ( (This)->lpVtbl -> put_Text(This,Text) ) 

#define TextRange_InsertAfter(This,NewText,After)	\
    ( (This)->lpVtbl -> InsertAfter(This,NewText,After) ) 

#define TextRange_InsertBefore(This,NewText,Before)	\
    ( (This)->lpVtbl -> InsertBefore(This,NewText,Before) ) 

#define TextRange_InsertDateTime(This,DateTimeFormat,InsertAsField,DateTime)	\
    ( (This)->lpVtbl -> InsertDateTime(This,DateTimeFormat,InsertAsField,DateTime) ) 

#define TextRange_InsertSlideNumber(This,SlideNumber)	\
    ( (This)->lpVtbl -> InsertSlideNumber(This,SlideNumber) ) 

#define TextRange_InsertSymbol(This,FontName,CharNumber,Unicode,Symbol)	\
    ( (This)->lpVtbl -> InsertSymbol(This,FontName,CharNumber,Unicode,Symbol) ) 

#define TextRange_get_Font(This,Font)	\
    ( (This)->lpVtbl -> get_Font(This,Font) ) 

#define TextRange_get_ParagraphFormat(This,ParagraphFormat)	\
    ( (This)->lpVtbl -> get_ParagraphFormat(This,ParagraphFormat) ) 

#define TextRange_get_IndentLevel(This,IndentLevel)	\
    ( (This)->lpVtbl -> get_IndentLevel(This,IndentLevel) ) 

#define TextRange_put_IndentLevel(This,IndentLevel)	\
    ( (This)->lpVtbl -> put_IndentLevel(This,IndentLevel) ) 

#define TextRange_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define TextRange_Cut(This)	\
    ( (This)->lpVtbl -> Cut(This) ) 

#define TextRange_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define TextRange_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define TextRange_Paste(This,Paste)	\
    ( (This)->lpVtbl -> Paste(This,Paste) ) 

#define TextRange_ChangeCase(This,Type)	\
    ( (This)->lpVtbl -> ChangeCase(This,Type) ) 

#define TextRange_AddPeriods(This)	\
    ( (This)->lpVtbl -> AddPeriods(This) ) 

#define TextRange_RemovePeriods(This)	\
    ( (This)->lpVtbl -> RemovePeriods(This) ) 

#define TextRange_Find(This,FindWhat,After,MatchCase,WholeWords,Find)	\
    ( (This)->lpVtbl -> Find(This,FindWhat,After,MatchCase,WholeWords,Find) ) 

#define TextRange_Replace(This,FindWhat,ReplaceWhat,After,MatchCase,WholeWords,Replace)	\
    ( (This)->lpVtbl -> Replace(This,FindWhat,ReplaceWhat,After,MatchCase,WholeWords,Replace) ) 

#define TextRange_RotatedBounds(This,X1,Y1,X2,Y2,X3,Y3,x4,y4)	\
    ( (This)->lpVtbl -> RotatedBounds(This,X1,Y1,X2,Y2,X3,Y3,x4,y4) ) 

#define TextRange_get_LanguageID(This,LanguageID)	\
    ( (This)->lpVtbl -> get_LanguageID(This,LanguageID) ) 

#define TextRange_put_LanguageID(This,LanguageID)	\
    ( (This)->lpVtbl -> put_LanguageID(This,LanguageID) ) 

#define TextRange_RtlRun(This)	\
    ( (This)->lpVtbl -> RtlRun(This) ) 

#define TextRange_LtrRun(This)	\
    ( (This)->lpVtbl -> LtrRun(This) ) 

#define TextRange_PasteSpecial(This,DataType,DisplayAsIcon,IconFileName,IconIndex,IconLabel,Link,PasteSpecial)	\
    ( (This)->lpVtbl -> PasteSpecial(This,DataType,DisplayAsIcon,IconFileName,IconIndex,IconLabel,Link,PasteSpecial) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TextRange_INTERFACE_DEFINED__ */


#ifndef __TextFrame_INTERFACE_DEFINED__
#define __TextFrame_INTERFACE_DEFINED__

/* interface TextFrame */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_TextFrame;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493484-5A91-11CF-8700-00AA0060263B")
    TextFrame : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarginBottom( 
            /* [retval][out] */ single *MarginBottom) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarginBottom( 
            /* [in] */ single MarginBottom) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarginLeft( 
            /* [retval][out] */ single *MarginLeft) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarginLeft( 
            /* [in] */ single MarginLeft) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarginRight( 
            /* [retval][out] */ single *MarginRight) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarginRight( 
            /* [in] */ single MarginRight) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarginTop( 
            /* [retval][out] */ single *MarginTop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarginTop( 
            /* [in] */ single MarginTop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ MsoTextOrientation *Orientation) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Orientation( 
            /* [in] */ MsoTextOrientation Orientation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasText( 
            /* [retval][out] */ MsoTriState *HasText) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextRange( 
            /* [retval][out] */ TextRange **TextRange) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Ruler( 
            /* [retval][out] */ Ruler **Ruler) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalAnchor( 
            /* [retval][out] */ MsoHorizontalAnchor *HorizontalAnchor) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalAnchor( 
            /* [in] */ MsoHorizontalAnchor HorizontalAnchor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalAnchor( 
            /* [retval][out] */ MsoVerticalAnchor *VerticalAnchor) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalAnchor( 
            /* [in] */ MsoVerticalAnchor VerticalAnchor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoSize( 
            /* [retval][out] */ PpAutoSize *AutoSize) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoSize( 
            /* [in] */ PpAutoSize AutoSize) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WordWrap( 
            /* [retval][out] */ MsoTriState *WordWrap) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WordWrap( 
            /* [in] */ MsoTriState WordWrap) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteText( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextFrameVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextFrame * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextFrame * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextFrame * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextFrame * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextFrame * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextFrame * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextFrame * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TextFrame * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TextFrame * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextFrame * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarginBottom )( 
            TextFrame * This,
            /* [retval][out] */ single *MarginBottom);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarginBottom )( 
            TextFrame * This,
            /* [in] */ single MarginBottom);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarginLeft )( 
            TextFrame * This,
            /* [retval][out] */ single *MarginLeft);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarginLeft )( 
            TextFrame * This,
            /* [in] */ single MarginLeft);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarginRight )( 
            TextFrame * This,
            /* [retval][out] */ single *MarginRight);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarginRight )( 
            TextFrame * This,
            /* [in] */ single MarginRight);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarginTop )( 
            TextFrame * This,
            /* [retval][out] */ single *MarginTop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarginTop )( 
            TextFrame * This,
            /* [in] */ single MarginTop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Orientation )( 
            TextFrame * This,
            /* [retval][out] */ MsoTextOrientation *Orientation);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Orientation )( 
            TextFrame * This,
            /* [in] */ MsoTextOrientation Orientation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasText )( 
            TextFrame * This,
            /* [retval][out] */ MsoTriState *HasText);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRange )( 
            TextFrame * This,
            /* [retval][out] */ TextRange **TextRange);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Ruler )( 
            TextFrame * This,
            /* [retval][out] */ Ruler **Ruler);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalAnchor )( 
            TextFrame * This,
            /* [retval][out] */ MsoHorizontalAnchor *HorizontalAnchor);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalAnchor )( 
            TextFrame * This,
            /* [in] */ MsoHorizontalAnchor HorizontalAnchor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAnchor )( 
            TextFrame * This,
            /* [retval][out] */ MsoVerticalAnchor *VerticalAnchor);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAnchor )( 
            TextFrame * This,
            /* [in] */ MsoVerticalAnchor VerticalAnchor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSize )( 
            TextFrame * This,
            /* [retval][out] */ PpAutoSize *AutoSize);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoSize )( 
            TextFrame * This,
            /* [in] */ PpAutoSize AutoSize);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WordWrap )( 
            TextFrame * This,
            /* [retval][out] */ MsoTriState *WordWrap);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WordWrap )( 
            TextFrame * This,
            /* [in] */ MsoTriState WordWrap);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteText )( 
            TextFrame * This);
        
        END_INTERFACE
    } TextFrameVtbl;

    interface TextFrame
    {
        CONST_VTBL struct TextFrameVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextFrame_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TextFrame_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TextFrame_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TextFrame_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TextFrame_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TextFrame_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TextFrame_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TextFrame_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define TextFrame_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define TextFrame_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define TextFrame_get_MarginBottom(This,MarginBottom)	\
    ( (This)->lpVtbl -> get_MarginBottom(This,MarginBottom) ) 

#define TextFrame_put_MarginBottom(This,MarginBottom)	\
    ( (This)->lpVtbl -> put_MarginBottom(This,MarginBottom) ) 

#define TextFrame_get_MarginLeft(This,MarginLeft)	\
    ( (This)->lpVtbl -> get_MarginLeft(This,MarginLeft) ) 

#define TextFrame_put_MarginLeft(This,MarginLeft)	\
    ( (This)->lpVtbl -> put_MarginLeft(This,MarginLeft) ) 

#define TextFrame_get_MarginRight(This,MarginRight)	\
    ( (This)->lpVtbl -> get_MarginRight(This,MarginRight) ) 

#define TextFrame_put_MarginRight(This,MarginRight)	\
    ( (This)->lpVtbl -> put_MarginRight(This,MarginRight) ) 

#define TextFrame_get_MarginTop(This,MarginTop)	\
    ( (This)->lpVtbl -> get_MarginTop(This,MarginTop) ) 

#define TextFrame_put_MarginTop(This,MarginTop)	\
    ( (This)->lpVtbl -> put_MarginTop(This,MarginTop) ) 

#define TextFrame_get_Orientation(This,Orientation)	\
    ( (This)->lpVtbl -> get_Orientation(This,Orientation) ) 

#define TextFrame_put_Orientation(This,Orientation)	\
    ( (This)->lpVtbl -> put_Orientation(This,Orientation) ) 

#define TextFrame_get_HasText(This,HasText)	\
    ( (This)->lpVtbl -> get_HasText(This,HasText) ) 

#define TextFrame_get_TextRange(This,TextRange)	\
    ( (This)->lpVtbl -> get_TextRange(This,TextRange) ) 

#define TextFrame_get_Ruler(This,Ruler)	\
    ( (This)->lpVtbl -> get_Ruler(This,Ruler) ) 

#define TextFrame_get_HorizontalAnchor(This,HorizontalAnchor)	\
    ( (This)->lpVtbl -> get_HorizontalAnchor(This,HorizontalAnchor) ) 

#define TextFrame_put_HorizontalAnchor(This,HorizontalAnchor)	\
    ( (This)->lpVtbl -> put_HorizontalAnchor(This,HorizontalAnchor) ) 

#define TextFrame_get_VerticalAnchor(This,VerticalAnchor)	\
    ( (This)->lpVtbl -> get_VerticalAnchor(This,VerticalAnchor) ) 

#define TextFrame_put_VerticalAnchor(This,VerticalAnchor)	\
    ( (This)->lpVtbl -> put_VerticalAnchor(This,VerticalAnchor) ) 

#define TextFrame_get_AutoSize(This,AutoSize)	\
    ( (This)->lpVtbl -> get_AutoSize(This,AutoSize) ) 

#define TextFrame_put_AutoSize(This,AutoSize)	\
    ( (This)->lpVtbl -> put_AutoSize(This,AutoSize) ) 

#define TextFrame_get_WordWrap(This,WordWrap)	\
    ( (This)->lpVtbl -> get_WordWrap(This,WordWrap) ) 

#define TextFrame_put_WordWrap(This,WordWrap)	\
    ( (This)->lpVtbl -> put_WordWrap(This,WordWrap) ) 

#define TextFrame_DeleteText(This)	\
    ( (This)->lpVtbl -> DeleteText(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TextFrame_INTERFACE_DEFINED__ */


#ifndef __Shape_INTERFACE_DEFINED__
#define __Shape_INTERFACE_DEFINED__

/* interface Shape */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Shape;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493479-5A91-11CF-8700-00AA0060263B")
    Shape : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Apply( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Flip( 
            /* [in] */ MsoFlipCmd FlipCmd) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementLeft( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementRotation( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementTop( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PickUp( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RerouteConnections( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScaleHeight( 
            /* [in] */ single Factor,
            /* [in] */ MsoTriState RelativeToOriginalSize,
            /* [defaultvalue][optional][in] */ MsoScaleFrom fScale = msoScaleFromTopLeft) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScaleWidth( 
            /* [in] */ single Factor,
            /* [in] */ MsoTriState RelativeToOriginalSize,
            /* [defaultvalue][optional][in] */ MsoScaleFrom fScale = msoScaleFromTopLeft) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetShapesDefaultProperties( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Ungroup( 
            /* [retval][out] */ ShapeRange **Ungroup) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ZOrder( 
            /* [in] */ MsoZOrderCmd ZOrderCmd) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Adjustments( 
            /* [retval][out] */ Adjustments **Adjustments) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoShapeType( 
            /* [retval][out] */ MsoAutoShapeType *AutoShapeType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoShapeType( 
            /* [in] */ MsoAutoShapeType AutoShapeType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BlackWhiteMode( 
            /* [retval][out] */ MsoBlackWhiteMode *BlackWhiteMode) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BlackWhiteMode( 
            /* [in] */ MsoBlackWhiteMode BlackWhiteMode) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Callout( 
            /* [retval][out] */ CalloutFormat **Callout) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConnectionSiteCount( 
            /* [retval][out] */ int *ConnectionSiteCount) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Connector( 
            /* [retval][out] */ MsoTriState *Connector) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConnectorFormat( 
            /* [retval][out] */ ConnectorFormat **ConnectorFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ FillFormat **Fill) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GroupItems( 
            /* [retval][out] */ GroupShapes **GroupItems) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ single *Height) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ single Height) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalFlip( 
            /* [retval][out] */ MsoTriState *HorizontalFlip) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ single *Left) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ single Left) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Line( 
            /* [retval][out] */ LineFormat **Line) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LockAspectRatio( 
            /* [retval][out] */ MsoTriState *LockAspectRatio) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LockAspectRatio( 
            /* [in] */ MsoTriState LockAspectRatio) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Nodes( 
            /* [retval][out] */ ShapeNodes **Nodes) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
            /* [retval][out] */ single *Rotation) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
            /* [in] */ single Rotation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureFormat( 
            /* [retval][out] */ PictureFormat **Picture) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ ShadowFormat **Shadow) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextEffect( 
            /* [retval][out] */ TextEffectFormat **TextEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextFrame( 
            /* [retval][out] */ TextFrame **TextFrame) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ThreeD( 
            /* [retval][out] */ ThreeDFormat **ThreeD) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ single *Top) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ single Top) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoShapeType *Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalFlip( 
            /* [retval][out] */ MsoTriState *VerticalFlip) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Vertices( 
            /* [retval][out] */ VARIANT *Vertices) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ MsoTriState *Visible) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ MsoTriState Visible) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ single *Width) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ single Width) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ZOrderPosition( 
            /* [retval][out] */ int *ZOrderPosition) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OLEFormat( 
            /* [retval][out] */ OLEFormat **OLEFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinkFormat( 
            /* [retval][out] */ LinkFormat **LinkFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlaceholderFormat( 
            /* [retval][out] */ PlaceholderFormat **PlaceholderFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnimationSettings( 
            /* [retval][out] */ AnimationSettings **AnimationSettings) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActionSettings( 
            /* [retval][out] */ ActionSettings **ActionSettings) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Tags( 
            /* [retval][out] */ Tags **Tags) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [defaultvalue][optional][in] */ MsoTriState Replace = msoTrue) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Duplicate( 
            /* [retval][out] */ ShapeRange **Duplicate) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MediaType( 
            /* [retval][out] */ PpMediaType *MediaType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasTextFrame( 
            /* [retval][out] */ MsoTriState *HasTextFrame) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_SoundFormat( 
            /* [retval][out] */ SoundFormat **SoundFormat) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Script( 
            /* [retval][out] */ /* external definition not present */ Script **Script) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AlternativeText( 
            /* [retval][out] */ BSTR *AlternativeText) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AlternativeText( 
            /* [in] */ BSTR AlternativeText) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasTable( 
            /* [retval][out] */ MsoTriState *HasTable) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Table( 
            /* [retval][out] */ Table **Table) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Export( 
            /* [in] */ BSTR PathName,
            /* [in] */ PpShapeFormat Filter,
            /* [defaultvalue][optional][in] */ int ScaleWidth = 0,
            /* [defaultvalue][optional][in] */ int ScaleHeight = 0,
            /* [defaultvalue][optional][in] */ PpExportMode ExportMode = ppRelativeToSlide) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasDiagram( 
            /* [retval][out] */ MsoTriState *pHasDiagram) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Diagram( 
            /* [retval][out] */ Diagram **Diagram) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasDiagramNode( 
            /* [retval][out] */ MsoTriState *pHasDiagram) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_DiagramNode( 
            /* [retval][out] */ DiagramNode **DiagramNode) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Child( 
            /* [retval][out] */ MsoTriState *Child) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ParentGroup( 
            /* [retval][out] */ Shape **Parent) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanvasItems( 
            /* [retval][out] */ CanvasShapes **CanvasShapes) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ int *pid) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE CanvasCropLeft( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE CanvasCropTop( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE CanvasCropRight( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE CanvasCropBottom( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_RTF( 
            /* [in] */ BSTR rhs) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomerData( 
            /* [retval][out] */ CustomerData **CustomerData) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextFrame2( 
            /* [retval][out] */ TextFrame2 **Frame) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasChart( 
            /* [retval][out] */ MsoTriState *pHasChart) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShapeStyle( 
            /* [retval][out] */ MsoShapeStyleIndex *ShapeStyle) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShapeStyle( 
            /* [in] */ MsoShapeStyleIndex ShapeStyle) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundStyle( 
            /* [retval][out] */ MsoBackgroundStyleIndex *BackgroundStyle) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundStyle( 
            /* [in] */ MsoBackgroundStyleIndex BackgroundStyle) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SoftEdge( 
            /* [retval][out] */ /* external definition not present */ SoftEdgeFormat **SoftEdge) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Glow( 
            /* [retval][out] */ /* external definition not present */ GlowFormat **Glow) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Reflection( 
            /* [retval][out] */ /* external definition not present */ ReflectionFormat **Reflection) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Chart( 
            /* [retval][out] */ Chart **Chart) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasSmartArt( 
            /* [retval][out] */ MsoTriState *HasSmartArt) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartArt( 
            /* [retval][out] */ /* external definition not present */ SmartArt **SmartArt) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertTextToSmartArt( 
            /* [in] */ /* external definition not present */ SmartArtLayout *Layout) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Title( 
            /* [retval][out] */ BSTR *Title) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Title( 
            /* [in] */ BSTR Title) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MediaFormat( 
            /* [retval][out] */ MediaFormat **MediaFormat) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PickupAnimation( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyAnimation( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UpgradeMedia( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ShapeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Shape * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Shape * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Shape * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Shape * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Shape * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Shape * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Shape * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Shape * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Shape * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Shape * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Apply )( 
            Shape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Shape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Flip )( 
            Shape * This,
            /* [in] */ MsoFlipCmd FlipCmd);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementLeft )( 
            Shape * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementRotation )( 
            Shape * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementTop )( 
            Shape * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PickUp )( 
            Shape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RerouteConnections )( 
            Shape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleHeight )( 
            Shape * This,
            /* [in] */ single Factor,
            /* [in] */ MsoTriState RelativeToOriginalSize,
            /* [defaultvalue][optional][in] */ MsoScaleFrom fScale);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleWidth )( 
            Shape * This,
            /* [in] */ single Factor,
            /* [in] */ MsoTriState RelativeToOriginalSize,
            /* [defaultvalue][optional][in] */ MsoScaleFrom fScale);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetShapesDefaultProperties )( 
            Shape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Ungroup )( 
            Shape * This,
            /* [retval][out] */ ShapeRange **Ungroup);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ZOrder )( 
            Shape * This,
            /* [in] */ MsoZOrderCmd ZOrderCmd);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Adjustments )( 
            Shape * This,
            /* [retval][out] */ Adjustments **Adjustments);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoShapeType )( 
            Shape * This,
            /* [retval][out] */ MsoAutoShapeType *AutoShapeType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoShapeType )( 
            Shape * This,
            /* [in] */ MsoAutoShapeType AutoShapeType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlackWhiteMode )( 
            Shape * This,
            /* [retval][out] */ MsoBlackWhiteMode *BlackWhiteMode);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlackWhiteMode )( 
            Shape * This,
            /* [in] */ MsoBlackWhiteMode BlackWhiteMode);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Callout )( 
            Shape * This,
            /* [retval][out] */ CalloutFormat **Callout);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectionSiteCount )( 
            Shape * This,
            /* [retval][out] */ int *ConnectionSiteCount);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Connector )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *Connector);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectorFormat )( 
            Shape * This,
            /* [retval][out] */ ConnectorFormat **ConnectorFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            Shape * This,
            /* [retval][out] */ FillFormat **Fill);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GroupItems )( 
            Shape * This,
            /* [retval][out] */ GroupShapes **GroupItems);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Shape * This,
            /* [retval][out] */ single *Height);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            Shape * This,
            /* [in] */ single Height);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalFlip )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *HorizontalFlip);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            Shape * This,
            /* [retval][out] */ single *Left);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            Shape * This,
            /* [in] */ single Left);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            Shape * This,
            /* [retval][out] */ LineFormat **Line);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LockAspectRatio )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *LockAspectRatio);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LockAspectRatio )( 
            Shape * This,
            /* [in] */ MsoTriState LockAspectRatio);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Shape * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            Shape * This,
            /* [in] */ BSTR Name);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Nodes )( 
            Shape * This,
            /* [retval][out] */ ShapeNodes **Nodes);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            Shape * This,
            /* [retval][out] */ single *Rotation);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            Shape * This,
            /* [in] */ single Rotation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureFormat )( 
            Shape * This,
            /* [retval][out] */ PictureFormat **Picture);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            Shape * This,
            /* [retval][out] */ ShadowFormat **Shadow);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextEffect )( 
            Shape * This,
            /* [retval][out] */ TextEffectFormat **TextEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFrame )( 
            Shape * This,
            /* [retval][out] */ TextFrame **TextFrame);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ThreeD )( 
            Shape * This,
            /* [retval][out] */ ThreeDFormat **ThreeD);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            Shape * This,
            /* [retval][out] */ single *Top);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            Shape * This,
            /* [in] */ single Top);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Shape * This,
            /* [retval][out] */ MsoShapeType *Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalFlip )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *VerticalFlip);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Vertices )( 
            Shape * This,
            /* [retval][out] */ VARIANT *Vertices);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *Visible);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            Shape * This,
            /* [in] */ MsoTriState Visible);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Shape * This,
            /* [retval][out] */ single *Width);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            Shape * This,
            /* [in] */ single Width);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZOrderPosition )( 
            Shape * This,
            /* [retval][out] */ int *ZOrderPosition);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OLEFormat )( 
            Shape * This,
            /* [retval][out] */ OLEFormat **OLEFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinkFormat )( 
            Shape * This,
            /* [retval][out] */ LinkFormat **LinkFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlaceholderFormat )( 
            Shape * This,
            /* [retval][out] */ PlaceholderFormat **PlaceholderFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnimationSettings )( 
            Shape * This,
            /* [retval][out] */ AnimationSettings **AnimationSettings);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActionSettings )( 
            Shape * This,
            /* [retval][out] */ ActionSettings **ActionSettings);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Tags )( 
            Shape * This,
            /* [retval][out] */ Tags **Tags);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            Shape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            Shape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Shape * This,
            /* [defaultvalue][optional][in] */ MsoTriState Replace);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Duplicate )( 
            Shape * This,
            /* [retval][out] */ ShapeRange **Duplicate);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MediaType )( 
            Shape * This,
            /* [retval][out] */ PpMediaType *MediaType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasTextFrame )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *HasTextFrame);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SoundFormat )( 
            Shape * This,
            /* [retval][out] */ SoundFormat **SoundFormat);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Script )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ Script **Script);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AlternativeText )( 
            Shape * This,
            /* [retval][out] */ BSTR *AlternativeText);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AlternativeText )( 
            Shape * This,
            /* [in] */ BSTR AlternativeText);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasTable )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *HasTable);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Table )( 
            Shape * This,
            /* [retval][out] */ Table **Table);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Export )( 
            Shape * This,
            /* [in] */ BSTR PathName,
            /* [in] */ PpShapeFormat Filter,
            /* [defaultvalue][optional][in] */ int ScaleWidth,
            /* [defaultvalue][optional][in] */ int ScaleHeight,
            /* [defaultvalue][optional][in] */ PpExportMode ExportMode);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasDiagram )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *pHasDiagram);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Diagram )( 
            Shape * This,
            /* [retval][out] */ Diagram **Diagram);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasDiagramNode )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *pHasDiagram);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DiagramNode )( 
            Shape * This,
            /* [retval][out] */ DiagramNode **DiagramNode);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Child )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *Child);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ParentGroup )( 
            Shape * This,
            /* [retval][out] */ Shape **Parent);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanvasItems )( 
            Shape * This,
            /* [retval][out] */ CanvasShapes **CanvasShapes);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            Shape * This,
            /* [retval][out] */ int *pid);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *CanvasCropLeft )( 
            Shape * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *CanvasCropTop )( 
            Shape * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *CanvasCropRight )( 
            Shape * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *CanvasCropBottom )( 
            Shape * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RTF )( 
            Shape * This,
            /* [in] */ BSTR rhs);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomerData )( 
            Shape * This,
            /* [retval][out] */ CustomerData **CustomerData);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFrame2 )( 
            Shape * This,
            /* [retval][out] */ TextFrame2 **Frame);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChart )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *pHasChart);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShapeStyle )( 
            Shape * This,
            /* [retval][out] */ MsoShapeStyleIndex *ShapeStyle);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShapeStyle )( 
            Shape * This,
            /* [in] */ MsoShapeStyleIndex ShapeStyle);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundStyle )( 
            Shape * This,
            /* [retval][out] */ MsoBackgroundStyleIndex *BackgroundStyle);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundStyle )( 
            Shape * This,
            /* [in] */ MsoBackgroundStyleIndex BackgroundStyle);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SoftEdge )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ SoftEdgeFormat **SoftEdge);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Glow )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ GlowFormat **Glow);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Reflection )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ ReflectionFormat **Reflection);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Chart )( 
            Shape * This,
            /* [retval][out] */ Chart **Chart);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasSmartArt )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *HasSmartArt);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartArt )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ SmartArt **SmartArt);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertTextToSmartArt )( 
            Shape * This,
            /* [in] */ /* external definition not present */ SmartArtLayout *Layout);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            Shape * This,
            /* [retval][out] */ BSTR *Title);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Title )( 
            Shape * This,
            /* [in] */ BSTR Title);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MediaFormat )( 
            Shape * This,
            /* [retval][out] */ MediaFormat **MediaFormat);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PickupAnimation )( 
            Shape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyAnimation )( 
            Shape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UpgradeMedia )( 
            Shape * This);
        
        END_INTERFACE
    } ShapeVtbl;

    interface Shape
    {
        CONST_VTBL struct ShapeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Shape_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Shape_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Shape_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Shape_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Shape_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Shape_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Shape_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Shape_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define Shape_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define Shape_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Shape_Apply(This)	\
    ( (This)->lpVtbl -> Apply(This) ) 

#define Shape_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Shape_Flip(This,FlipCmd)	\
    ( (This)->lpVtbl -> Flip(This,FlipCmd) ) 

#define Shape_IncrementLeft(This,Increment)	\
    ( (This)->lpVtbl -> IncrementLeft(This,Increment) ) 

#define Shape_IncrementRotation(This,Increment)	\
    ( (This)->lpVtbl -> IncrementRotation(This,Increment) ) 

#define Shape_IncrementTop(This,Increment)	\
    ( (This)->lpVtbl -> IncrementTop(This,Increment) ) 

#define Shape_PickUp(This)	\
    ( (This)->lpVtbl -> PickUp(This) ) 

#define Shape_RerouteConnections(This)	\
    ( (This)->lpVtbl -> RerouteConnections(This) ) 

#define Shape_ScaleHeight(This,Factor,RelativeToOriginalSize,fScale)	\
    ( (This)->lpVtbl -> ScaleHeight(This,Factor,RelativeToOriginalSize,fScale) ) 

#define Shape_ScaleWidth(This,Factor,RelativeToOriginalSize,fScale)	\
    ( (This)->lpVtbl -> ScaleWidth(This,Factor,RelativeToOriginalSize,fScale) ) 

#define Shape_SetShapesDefaultProperties(This)	\
    ( (This)->lpVtbl -> SetShapesDefaultProperties(This) ) 

#define Shape_Ungroup(This,Ungroup)	\
    ( (This)->lpVtbl -> Ungroup(This,Ungroup) ) 

#define Shape_ZOrder(This,ZOrderCmd)	\
    ( (This)->lpVtbl -> ZOrder(This,ZOrderCmd) ) 

#define Shape_get_Adjustments(This,Adjustments)	\
    ( (This)->lpVtbl -> get_Adjustments(This,Adjustments) ) 

#define Shape_get_AutoShapeType(This,AutoShapeType)	\
    ( (This)->lpVtbl -> get_AutoShapeType(This,AutoShapeType) ) 

#define Shape_put_AutoShapeType(This,AutoShapeType)	\
    ( (This)->lpVtbl -> put_AutoShapeType(This,AutoShapeType) ) 

#define Shape_get_BlackWhiteMode(This,BlackWhiteMode)	\
    ( (This)->lpVtbl -> get_BlackWhiteMode(This,BlackWhiteMode) ) 

#define Shape_put_BlackWhiteMode(This,BlackWhiteMode)	\
    ( (This)->lpVtbl -> put_BlackWhiteMode(This,BlackWhiteMode) ) 

#define Shape_get_Callout(This,Callout)	\
    ( (This)->lpVtbl -> get_Callout(This,Callout) ) 

#define Shape_get_ConnectionSiteCount(This,ConnectionSiteCount)	\
    ( (This)->lpVtbl -> get_ConnectionSiteCount(This,ConnectionSiteCount) ) 

#define Shape_get_Connector(This,Connector)	\
    ( (This)->lpVtbl -> get_Connector(This,Connector) ) 

#define Shape_get_ConnectorFormat(This,ConnectorFormat)	\
    ( (This)->lpVtbl -> get_ConnectorFormat(This,ConnectorFormat) ) 

#define Shape_get_Fill(This,Fill)	\
    ( (This)->lpVtbl -> get_Fill(This,Fill) ) 

#define Shape_get_GroupItems(This,GroupItems)	\
    ( (This)->lpVtbl -> get_GroupItems(This,GroupItems) ) 

#define Shape_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define Shape_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define Shape_get_HorizontalFlip(This,HorizontalFlip)	\
    ( (This)->lpVtbl -> get_HorizontalFlip(This,HorizontalFlip) ) 

#define Shape_get_Left(This,Left)	\
    ( (This)->lpVtbl -> get_Left(This,Left) ) 

#define Shape_put_Left(This,Left)	\
    ( (This)->lpVtbl -> put_Left(This,Left) ) 

#define Shape_get_Line(This,Line)	\
    ( (This)->lpVtbl -> get_Line(This,Line) ) 

#define Shape_get_LockAspectRatio(This,LockAspectRatio)	\
    ( (This)->lpVtbl -> get_LockAspectRatio(This,LockAspectRatio) ) 

#define Shape_put_LockAspectRatio(This,LockAspectRatio)	\
    ( (This)->lpVtbl -> put_LockAspectRatio(This,LockAspectRatio) ) 

#define Shape_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define Shape_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define Shape_get_Nodes(This,Nodes)	\
    ( (This)->lpVtbl -> get_Nodes(This,Nodes) ) 

#define Shape_get_Rotation(This,Rotation)	\
    ( (This)->lpVtbl -> get_Rotation(This,Rotation) ) 

#define Shape_put_Rotation(This,Rotation)	\
    ( (This)->lpVtbl -> put_Rotation(This,Rotation) ) 

#define Shape_get_PictureFormat(This,Picture)	\
    ( (This)->lpVtbl -> get_PictureFormat(This,Picture) ) 

#define Shape_get_Shadow(This,Shadow)	\
    ( (This)->lpVtbl -> get_Shadow(This,Shadow) ) 

#define Shape_get_TextEffect(This,TextEffect)	\
    ( (This)->lpVtbl -> get_TextEffect(This,TextEffect) ) 

#define Shape_get_TextFrame(This,TextFrame)	\
    ( (This)->lpVtbl -> get_TextFrame(This,TextFrame) ) 

#define Shape_get_ThreeD(This,ThreeD)	\
    ( (This)->lpVtbl -> get_ThreeD(This,ThreeD) ) 

#define Shape_get_Top(This,Top)	\
    ( (This)->lpVtbl -> get_Top(This,Top) ) 

#define Shape_put_Top(This,Top)	\
    ( (This)->lpVtbl -> put_Top(This,Top) ) 

#define Shape_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define Shape_get_VerticalFlip(This,VerticalFlip)	\
    ( (This)->lpVtbl -> get_VerticalFlip(This,VerticalFlip) ) 

#define Shape_get_Vertices(This,Vertices)	\
    ( (This)->lpVtbl -> get_Vertices(This,Vertices) ) 

#define Shape_get_Visible(This,Visible)	\
    ( (This)->lpVtbl -> get_Visible(This,Visible) ) 

#define Shape_put_Visible(This,Visible)	\
    ( (This)->lpVtbl -> put_Visible(This,Visible) ) 

#define Shape_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define Shape_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#define Shape_get_ZOrderPosition(This,ZOrderPosition)	\
    ( (This)->lpVtbl -> get_ZOrderPosition(This,ZOrderPosition) ) 

#define Shape_get_OLEFormat(This,OLEFormat)	\
    ( (This)->lpVtbl -> get_OLEFormat(This,OLEFormat) ) 

#define Shape_get_LinkFormat(This,LinkFormat)	\
    ( (This)->lpVtbl -> get_LinkFormat(This,LinkFormat) ) 

#define Shape_get_PlaceholderFormat(This,PlaceholderFormat)	\
    ( (This)->lpVtbl -> get_PlaceholderFormat(This,PlaceholderFormat) ) 

#define Shape_get_AnimationSettings(This,AnimationSettings)	\
    ( (This)->lpVtbl -> get_AnimationSettings(This,AnimationSettings) ) 

#define Shape_get_ActionSettings(This,ActionSettings)	\
    ( (This)->lpVtbl -> get_ActionSettings(This,ActionSettings) ) 

#define Shape_get_Tags(This,Tags)	\
    ( (This)->lpVtbl -> get_Tags(This,Tags) ) 

#define Shape_Cut(This)	\
    ( (This)->lpVtbl -> Cut(This) ) 

#define Shape_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define Shape_Select(This,Replace)	\
    ( (This)->lpVtbl -> Select(This,Replace) ) 

#define Shape_Duplicate(This,Duplicate)	\
    ( (This)->lpVtbl -> Duplicate(This,Duplicate) ) 

#define Shape_get_MediaType(This,MediaType)	\
    ( (This)->lpVtbl -> get_MediaType(This,MediaType) ) 

#define Shape_get_HasTextFrame(This,HasTextFrame)	\
    ( (This)->lpVtbl -> get_HasTextFrame(This,HasTextFrame) ) 

#define Shape_get_SoundFormat(This,SoundFormat)	\
    ( (This)->lpVtbl -> get_SoundFormat(This,SoundFormat) ) 

#define Shape_get_Script(This,Script)	\
    ( (This)->lpVtbl -> get_Script(This,Script) ) 

#define Shape_get_AlternativeText(This,AlternativeText)	\
    ( (This)->lpVtbl -> get_AlternativeText(This,AlternativeText) ) 

#define Shape_put_AlternativeText(This,AlternativeText)	\
    ( (This)->lpVtbl -> put_AlternativeText(This,AlternativeText) ) 

#define Shape_get_HasTable(This,HasTable)	\
    ( (This)->lpVtbl -> get_HasTable(This,HasTable) ) 

#define Shape_get_Table(This,Table)	\
    ( (This)->lpVtbl -> get_Table(This,Table) ) 

#define Shape_Export(This,PathName,Filter,ScaleWidth,ScaleHeight,ExportMode)	\
    ( (This)->lpVtbl -> Export(This,PathName,Filter,ScaleWidth,ScaleHeight,ExportMode) ) 

#define Shape_get_HasDiagram(This,pHasDiagram)	\
    ( (This)->lpVtbl -> get_HasDiagram(This,pHasDiagram) ) 

#define Shape_get_Diagram(This,Diagram)	\
    ( (This)->lpVtbl -> get_Diagram(This,Diagram) ) 

#define Shape_get_HasDiagramNode(This,pHasDiagram)	\
    ( (This)->lpVtbl -> get_HasDiagramNode(This,pHasDiagram) ) 

#define Shape_get_DiagramNode(This,DiagramNode)	\
    ( (This)->lpVtbl -> get_DiagramNode(This,DiagramNode) ) 

#define Shape_get_Child(This,Child)	\
    ( (This)->lpVtbl -> get_Child(This,Child) ) 

#define Shape_get_ParentGroup(This,Parent)	\
    ( (This)->lpVtbl -> get_ParentGroup(This,Parent) ) 

#define Shape_get_CanvasItems(This,CanvasShapes)	\
    ( (This)->lpVtbl -> get_CanvasItems(This,CanvasShapes) ) 

#define Shape_get_Id(This,pid)	\
    ( (This)->lpVtbl -> get_Id(This,pid) ) 

#define Shape_CanvasCropLeft(This,Increment)	\
    ( (This)->lpVtbl -> CanvasCropLeft(This,Increment) ) 

#define Shape_CanvasCropTop(This,Increment)	\
    ( (This)->lpVtbl -> CanvasCropTop(This,Increment) ) 

#define Shape_CanvasCropRight(This,Increment)	\
    ( (This)->lpVtbl -> CanvasCropRight(This,Increment) ) 

#define Shape_CanvasCropBottom(This,Increment)	\
    ( (This)->lpVtbl -> CanvasCropBottom(This,Increment) ) 

#define Shape_put_RTF(This,rhs)	\
    ( (This)->lpVtbl -> put_RTF(This,rhs) ) 

#define Shape_get_CustomerData(This,CustomerData)	\
    ( (This)->lpVtbl -> get_CustomerData(This,CustomerData) ) 

#define Shape_get_TextFrame2(This,Frame)	\
    ( (This)->lpVtbl -> get_TextFrame2(This,Frame) ) 

#define Shape_get_HasChart(This,pHasChart)	\
    ( (This)->lpVtbl -> get_HasChart(This,pHasChart) ) 

#define Shape_get_ShapeStyle(This,ShapeStyle)	\
    ( (This)->lpVtbl -> get_ShapeStyle(This,ShapeStyle) ) 

#define Shape_put_ShapeStyle(This,ShapeStyle)	\
    ( (This)->lpVtbl -> put_ShapeStyle(This,ShapeStyle) ) 

#define Shape_get_BackgroundStyle(This,BackgroundStyle)	\
    ( (This)->lpVtbl -> get_BackgroundStyle(This,BackgroundStyle) ) 

#define Shape_put_BackgroundStyle(This,BackgroundStyle)	\
    ( (This)->lpVtbl -> put_BackgroundStyle(This,BackgroundStyle) ) 

#define Shape_get_SoftEdge(This,SoftEdge)	\
    ( (This)->lpVtbl -> get_SoftEdge(This,SoftEdge) ) 

#define Shape_get_Glow(This,Glow)	\
    ( (This)->lpVtbl -> get_Glow(This,Glow) ) 

#define Shape_get_Reflection(This,Reflection)	\
    ( (This)->lpVtbl -> get_Reflection(This,Reflection) ) 

#define Shape_get_Chart(This,Chart)	\
    ( (This)->lpVtbl -> get_Chart(This,Chart) ) 

#define Shape_get_HasSmartArt(This,HasSmartArt)	\
    ( (This)->lpVtbl -> get_HasSmartArt(This,HasSmartArt) ) 

#define Shape_get_SmartArt(This,SmartArt)	\
    ( (This)->lpVtbl -> get_SmartArt(This,SmartArt) ) 

#define Shape_ConvertTextToSmartArt(This,Layout)	\
    ( (This)->lpVtbl -> ConvertTextToSmartArt(This,Layout) ) 

#define Shape_get_Title(This,Title)	\
    ( (This)->lpVtbl -> get_Title(This,Title) ) 

#define Shape_put_Title(This,Title)	\
    ( (This)->lpVtbl -> put_Title(This,Title) ) 

#define Shape_get_MediaFormat(This,MediaFormat)	\
    ( (This)->lpVtbl -> get_MediaFormat(This,MediaFormat) ) 

#define Shape_PickupAnimation(This)	\
    ( (This)->lpVtbl -> PickupAnimation(This) ) 

#define Shape_ApplyAnimation(This)	\
    ( (This)->lpVtbl -> ApplyAnimation(This) ) 

#define Shape_UpgradeMedia(This)	\
    ( (This)->lpVtbl -> UpgradeMedia(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Shape_INTERFACE_DEFINED__ */


#ifndef __Shapes_INTERFACE_DEFINED__
#define __Shapes_INTERFACE_DEFINED__

/* interface Shapes */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Shapes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493475-5A91-11CF-8700-00AA0060263B")
    Shapes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ int *Count) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Shape **Item) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **_NewEnum) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddCallout( 
            /* [in] */ MsoCalloutType Type,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Callout) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddConnector( 
            /* [in] */ MsoConnectorType Type,
            /* [in] */ single BeginX,
            /* [in] */ single BeginY,
            /* [in] */ single EndX,
            /* [in] */ single EndY,
            /* [retval][out] */ Shape **Connector) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddCurve( 
            /* [in] */ VARIANT SafeArrayOfPoints,
            /* [retval][out] */ Shape **Curve) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddLabel( 
            /* [in] */ MsoTextOrientation Orientation,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Label) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddLine( 
            /* [in] */ single BeginX,
            /* [in] */ single BeginY,
            /* [in] */ single EndX,
            /* [in] */ single EndY,
            /* [retval][out] */ Shape **Line) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPicture( 
            /* [in] */ BSTR FileName,
            /* [in] */ MsoTriState LinkToFile,
            /* [in] */ MsoTriState SaveWithDocument,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **Picture) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPolyline( 
            /* [in] */ VARIANT SafeArrayOfPoints,
            /* [retval][out] */ Shape **Polyline) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddShape( 
            /* [in] */ MsoAutoShapeType Type,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Shape) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddTextEffect( 
            /* [in] */ MsoPresetTextEffect PresetTextEffect,
            /* [in] */ BSTR Text,
            /* [in] */ BSTR FontName,
            /* [in] */ single FontSize,
            /* [in] */ MsoTriState FontBold,
            /* [in] */ MsoTriState FontItalic,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [retval][out] */ Shape **TextEffect) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddTextbox( 
            /* [in] */ MsoTextOrientation Orientation,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Textbox) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE BuildFreeform( 
            /* [in] */ MsoEditingType EditingType,
            /* [in] */ single X1,
            /* [in] */ single Y1,
            /* [retval][out] */ FreeformBuilder **FreeformBuilder) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectAll( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range( 
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ ShapeRange **Range) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasTitle( 
            /* [retval][out] */ MsoTriState *HasTitle) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddTitle( 
            /* [retval][out] */ Shape **Title) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Title( 
            /* [retval][out] */ Shape **Title) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Placeholders( 
            /* [retval][out] */ Placeholders **Placeholders) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddOLEObject( 
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [defaultvalue][optional][in] */ BSTR ClassName,
            /* [defaultvalue][optional][in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ MsoTriState DisplayAsIcon,
            /* [defaultvalue][optional][in] */ BSTR IconFileName,
            /* [defaultvalue][optional][in] */ int IconIndex,
            /* [defaultvalue][optional][in] */ BSTR IconLabel,
            /* [defaultvalue][optional][in] */ MsoTriState Link,
            /* [retval][out] */ Shape **OLEObject) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AddComment( 
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **Comment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPlaceholder( 
            /* [in] */ PpPlaceholderType Type,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **Placeholder) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AddMediaObject( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **MediaObject) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paste( 
            /* [retval][out] */ ShapeRange **Paste) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddTable( 
            /* [in] */ int NumRows,
            /* [in] */ int NumColumns,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **Table) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PasteSpecial( 
            /* [defaultvalue][optional][in] */ PpPasteDataType DataType,
            /* [defaultvalue][optional][in] */ MsoTriState DisplayAsIcon,
            /* [defaultvalue][optional][in] */ BSTR IconFileName,
            /* [defaultvalue][optional][in] */ int IconIndex,
            /* [defaultvalue][optional][in] */ BSTR IconLabel,
            /* [defaultvalue][optional][in] */ MsoTriState Link,
            /* [retval][out] */ ShapeRange **PasteSpecial) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AddDiagram( 
            /* [in] */ MsoDiagramType Type,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Diagram) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AddCanvas( 
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Shape) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AddChart( 
            /* [defaultvalue][optional][in] */ XlChartType Type,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **Chart) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddMediaObject2( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ MsoTriState LinkToFile,
            /* [defaultvalue][optional][in] */ MsoTriState SaveWithDocument,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **MediaObject2) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddMediaObjectFromEmbedTag( 
            /* [in] */ BSTR EmbedTag,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **MediaObjectFromEmbedTag) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddSmartArt( 
            /* [in] */ /* external definition not present */ SmartArtLayout *Layout,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **SmartArt) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddChart2( 
            /* [defaultvalue][optional][in] */ int Style,
            /* [defaultvalue][optional][in] */ XlChartType Type,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL NewLayout,
            /* [retval][out] */ Shape **Chart) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPicture2( 
            /* [in] */ BSTR FileName,
            /* [in] */ MsoTriState LinkToFile,
            /* [in] */ MsoTriState SaveWithDocument,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [defaultvalue][optional][in] */ MsoPictureCompress compress,
            /* [retval][out] */ Shape **Picture) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ShapesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Shapes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Shapes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Shapes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Shapes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Shapes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Shapes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Shapes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Shapes * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Shapes * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Shapes * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Shapes * This,
            /* [retval][out] */ int *Count);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Shapes * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Shape **Item);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Shapes * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddCallout )( 
            Shapes * This,
            /* [in] */ MsoCalloutType Type,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Callout);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddConnector )( 
            Shapes * This,
            /* [in] */ MsoConnectorType Type,
            /* [in] */ single BeginX,
            /* [in] */ single BeginY,
            /* [in] */ single EndX,
            /* [in] */ single EndY,
            /* [retval][out] */ Shape **Connector);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddCurve )( 
            Shapes * This,
            /* [in] */ VARIANT SafeArrayOfPoints,
            /* [retval][out] */ Shape **Curve);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddLabel )( 
            Shapes * This,
            /* [in] */ MsoTextOrientation Orientation,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Label);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddLine )( 
            Shapes * This,
            /* [in] */ single BeginX,
            /* [in] */ single BeginY,
            /* [in] */ single EndX,
            /* [in] */ single EndY,
            /* [retval][out] */ Shape **Line);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPicture )( 
            Shapes * This,
            /* [in] */ BSTR FileName,
            /* [in] */ MsoTriState LinkToFile,
            /* [in] */ MsoTriState SaveWithDocument,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **Picture);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPolyline )( 
            Shapes * This,
            /* [in] */ VARIANT SafeArrayOfPoints,
            /* [retval][out] */ Shape **Polyline);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddShape )( 
            Shapes * This,
            /* [in] */ MsoAutoShapeType Type,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Shape);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddTextEffect )( 
            Shapes * This,
            /* [in] */ MsoPresetTextEffect PresetTextEffect,
            /* [in] */ BSTR Text,
            /* [in] */ BSTR FontName,
            /* [in] */ single FontSize,
            /* [in] */ MsoTriState FontBold,
            /* [in] */ MsoTriState FontItalic,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [retval][out] */ Shape **TextEffect);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddTextbox )( 
            Shapes * This,
            /* [in] */ MsoTextOrientation Orientation,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Textbox);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BuildFreeform )( 
            Shapes * This,
            /* [in] */ MsoEditingType EditingType,
            /* [in] */ single X1,
            /* [in] */ single Y1,
            /* [retval][out] */ FreeformBuilder **FreeformBuilder);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectAll )( 
            Shapes * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Range )( 
            Shapes * This,
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ ShapeRange **Range);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasTitle )( 
            Shapes * This,
            /* [retval][out] */ MsoTriState *HasTitle);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddTitle )( 
            Shapes * This,
            /* [retval][out] */ Shape **Title);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            Shapes * This,
            /* [retval][out] */ Shape **Title);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Placeholders )( 
            Shapes * This,
            /* [retval][out] */ Placeholders **Placeholders);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddOLEObject )( 
            Shapes * This,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [defaultvalue][optional][in] */ BSTR ClassName,
            /* [defaultvalue][optional][in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ MsoTriState DisplayAsIcon,
            /* [defaultvalue][optional][in] */ BSTR IconFileName,
            /* [defaultvalue][optional][in] */ int IconIndex,
            /* [defaultvalue][optional][in] */ BSTR IconLabel,
            /* [defaultvalue][optional][in] */ MsoTriState Link,
            /* [retval][out] */ Shape **OLEObject);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AddComment )( 
            Shapes * This,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **Comment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPlaceholder )( 
            Shapes * This,
            /* [in] */ PpPlaceholderType Type,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **Placeholder);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AddMediaObject )( 
            Shapes * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **MediaObject);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paste )( 
            Shapes * This,
            /* [retval][out] */ ShapeRange **Paste);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddTable )( 
            Shapes * This,
            /* [in] */ int NumRows,
            /* [in] */ int NumColumns,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **Table);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PasteSpecial )( 
            Shapes * This,
            /* [defaultvalue][optional][in] */ PpPasteDataType DataType,
            /* [defaultvalue][optional][in] */ MsoTriState DisplayAsIcon,
            /* [defaultvalue][optional][in] */ BSTR IconFileName,
            /* [defaultvalue][optional][in] */ int IconIndex,
            /* [defaultvalue][optional][in] */ BSTR IconLabel,
            /* [defaultvalue][optional][in] */ MsoTriState Link,
            /* [retval][out] */ ShapeRange **PasteSpecial);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AddDiagram )( 
            Shapes * This,
            /* [in] */ MsoDiagramType Type,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Diagram);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AddCanvas )( 
            Shapes * This,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Shape);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AddChart )( 
            Shapes * This,
            /* [defaultvalue][optional][in] */ XlChartType Type,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **Chart);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddMediaObject2 )( 
            Shapes * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ MsoTriState LinkToFile,
            /* [defaultvalue][optional][in] */ MsoTriState SaveWithDocument,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **MediaObject2);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddMediaObjectFromEmbedTag )( 
            Shapes * This,
            /* [in] */ BSTR EmbedTag,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **MediaObjectFromEmbedTag);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddSmartArt )( 
            Shapes * This,
            /* [in] */ /* external definition not present */ SmartArtLayout *Layout,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **SmartArt);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddChart2 )( 
            Shapes * This,
            /* [defaultvalue][optional][in] */ int Style,
            /* [defaultvalue][optional][in] */ XlChartType Type,
            /* [defaultvalue][optional][in] */ single Left,
            /* [defaultvalue][optional][in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL NewLayout,
            /* [retval][out] */ Shape **Chart);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPicture2 )( 
            Shapes * This,
            /* [in] */ BSTR FileName,
            /* [in] */ MsoTriState LinkToFile,
            /* [in] */ MsoTriState SaveWithDocument,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [defaultvalue][optional][in] */ MsoPictureCompress compress,
            /* [retval][out] */ Shape **Picture);
        
        END_INTERFACE
    } ShapesVtbl;

    interface Shapes
    {
        CONST_VTBL struct ShapesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Shapes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Shapes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Shapes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Shapes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Shapes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Shapes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Shapes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Shapes_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define Shapes_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define Shapes_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Shapes_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 

#define Shapes_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define Shapes_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Shapes_AddCallout(This,Type,Left,Top,Width,Height,Callout)	\
    ( (This)->lpVtbl -> AddCallout(This,Type,Left,Top,Width,Height,Callout) ) 

#define Shapes_AddConnector(This,Type,BeginX,BeginY,EndX,EndY,Connector)	\
    ( (This)->lpVtbl -> AddConnector(This,Type,BeginX,BeginY,EndX,EndY,Connector) ) 

#define Shapes_AddCurve(This,SafeArrayOfPoints,Curve)	\
    ( (This)->lpVtbl -> AddCurve(This,SafeArrayOfPoints,Curve) ) 

#define Shapes_AddLabel(This,Orientation,Left,Top,Width,Height,Label)	\
    ( (This)->lpVtbl -> AddLabel(This,Orientation,Left,Top,Width,Height,Label) ) 

#define Shapes_AddLine(This,BeginX,BeginY,EndX,EndY,Line)	\
    ( (This)->lpVtbl -> AddLine(This,BeginX,BeginY,EndX,EndY,Line) ) 

#define Shapes_AddPicture(This,FileName,LinkToFile,SaveWithDocument,Left,Top,Width,Height,Picture)	\
    ( (This)->lpVtbl -> AddPicture(This,FileName,LinkToFile,SaveWithDocument,Left,Top,Width,Height,Picture) ) 

#define Shapes_AddPolyline(This,SafeArrayOfPoints,Polyline)	\
    ( (This)->lpVtbl -> AddPolyline(This,SafeArrayOfPoints,Polyline) ) 

#define Shapes_AddShape(This,Type,Left,Top,Width,Height,Shape)	\
    ( (This)->lpVtbl -> AddShape(This,Type,Left,Top,Width,Height,Shape) ) 

#define Shapes_AddTextEffect(This,PresetTextEffect,Text,FontName,FontSize,FontBold,FontItalic,Left,Top,TextEffect)	\
    ( (This)->lpVtbl -> AddTextEffect(This,PresetTextEffect,Text,FontName,FontSize,FontBold,FontItalic,Left,Top,TextEffect) ) 

#define Shapes_AddTextbox(This,Orientation,Left,Top,Width,Height,Textbox)	\
    ( (This)->lpVtbl -> AddTextbox(This,Orientation,Left,Top,Width,Height,Textbox) ) 

#define Shapes_BuildFreeform(This,EditingType,X1,Y1,FreeformBuilder)	\
    ( (This)->lpVtbl -> BuildFreeform(This,EditingType,X1,Y1,FreeformBuilder) ) 

#define Shapes_SelectAll(This)	\
    ( (This)->lpVtbl -> SelectAll(This) ) 

#define Shapes_Range(This,Index,Range)	\
    ( (This)->lpVtbl -> Range(This,Index,Range) ) 

#define Shapes_get_HasTitle(This,HasTitle)	\
    ( (This)->lpVtbl -> get_HasTitle(This,HasTitle) ) 

#define Shapes_AddTitle(This,Title)	\
    ( (This)->lpVtbl -> AddTitle(This,Title) ) 

#define Shapes_get_Title(This,Title)	\
    ( (This)->lpVtbl -> get_Title(This,Title) ) 

#define Shapes_get_Placeholders(This,Placeholders)	\
    ( (This)->lpVtbl -> get_Placeholders(This,Placeholders) ) 

#define Shapes_AddOLEObject(This,Left,Top,Width,Height,ClassName,FileName,DisplayAsIcon,IconFileName,IconIndex,IconLabel,Link,OLEObject)	\
    ( (This)->lpVtbl -> AddOLEObject(This,Left,Top,Width,Height,ClassName,FileName,DisplayAsIcon,IconFileName,IconIndex,IconLabel,Link,OLEObject) ) 

#define Shapes_AddComment(This,Left,Top,Width,Height,Comment)	\
    ( (This)->lpVtbl -> AddComment(This,Left,Top,Width,Height,Comment) ) 

#define Shapes_AddPlaceholder(This,Type,Left,Top,Width,Height,Placeholder)	\
    ( (This)->lpVtbl -> AddPlaceholder(This,Type,Left,Top,Width,Height,Placeholder) ) 

#define Shapes_AddMediaObject(This,FileName,Left,Top,Width,Height,MediaObject)	\
    ( (This)->lpVtbl -> AddMediaObject(This,FileName,Left,Top,Width,Height,MediaObject) ) 

#define Shapes_Paste(This,Paste)	\
    ( (This)->lpVtbl -> Paste(This,Paste) ) 

#define Shapes_AddTable(This,NumRows,NumColumns,Left,Top,Width,Height,Table)	\
    ( (This)->lpVtbl -> AddTable(This,NumRows,NumColumns,Left,Top,Width,Height,Table) ) 

#define Shapes_PasteSpecial(This,DataType,DisplayAsIcon,IconFileName,IconIndex,IconLabel,Link,PasteSpecial)	\
    ( (This)->lpVtbl -> PasteSpecial(This,DataType,DisplayAsIcon,IconFileName,IconIndex,IconLabel,Link,PasteSpecial) ) 

#define Shapes_AddDiagram(This,Type,Left,Top,Width,Height,Diagram)	\
    ( (This)->lpVtbl -> AddDiagram(This,Type,Left,Top,Width,Height,Diagram) ) 

#define Shapes_AddCanvas(This,Left,Top,Width,Height,Shape)	\
    ( (This)->lpVtbl -> AddCanvas(This,Left,Top,Width,Height,Shape) ) 

#define Shapes_AddChart(This,Type,Left,Top,Width,Height,Chart)	\
    ( (This)->lpVtbl -> AddChart(This,Type,Left,Top,Width,Height,Chart) ) 

#define Shapes_AddMediaObject2(This,FileName,LinkToFile,SaveWithDocument,Left,Top,Width,Height,MediaObject2)	\
    ( (This)->lpVtbl -> AddMediaObject2(This,FileName,LinkToFile,SaveWithDocument,Left,Top,Width,Height,MediaObject2) ) 

#define Shapes_AddMediaObjectFromEmbedTag(This,EmbedTag,Left,Top,Width,Height,MediaObjectFromEmbedTag)	\
    ( (This)->lpVtbl -> AddMediaObjectFromEmbedTag(This,EmbedTag,Left,Top,Width,Height,MediaObjectFromEmbedTag) ) 

#define Shapes_AddSmartArt(This,Layout,Left,Top,Width,Height,SmartArt)	\
    ( (This)->lpVtbl -> AddSmartArt(This,Layout,Left,Top,Width,Height,SmartArt) ) 

#define Shapes_AddChart2(This,Style,Type,Left,Top,Width,Height,NewLayout,Chart)	\
    ( (This)->lpVtbl -> AddChart2(This,Style,Type,Left,Top,Width,Height,NewLayout,Chart) ) 

#define Shapes_AddPicture2(This,FileName,LinkToFile,SaveWithDocument,Left,Top,Width,Height,compress,Picture)	\
    ( (This)->lpVtbl -> AddPicture2(This,FileName,LinkToFile,SaveWithDocument,Left,Top,Width,Height,compress,Picture) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Shapes_INTERFACE_DEFINED__ */


#ifndef __Slides_INTERFACE_DEFINED__
#define __Slides_INTERFACE_DEFINED__

/* interface Slides */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Slides;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493469-5A91-11CF-8700-00AA0060263B")
    Slides : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Slide	**Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindBySlideID( 
            /* [in] */ long SlideID,
            /* [retval][out] */ Slide	**FindBySlideID) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ int Index,
            /* [in] */ PpSlideLayout Layout,
            /* [retval][out] */ Slide	**Add) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertFromFile( 
            /* [in] */ BSTR FileName,
            /* [in] */ int Index,
            /* [defaultvalue][optional][in] */ int SlideStart,
            /* [defaultvalue][optional][in] */ int SlideEnd,
            /* [retval][out] */ int *FromFile) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range( 
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ SlideRange **Range) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paste( 
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ SlideRange **Paste) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddSlide( 
            /* [in] */ int Index,
            /* [in] */ CustomLayout *pCustomLayout,
            /* [retval][out] */ Slide	**Slide) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SlidesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Slides * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Slides * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Slides * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Slides * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Slides * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Slides * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Slides * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Slides * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            Slides * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Slides * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Slides * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Slides * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Slides * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Slide	**Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindBySlideID )( 
            Slides * This,
            /* [in] */ long SlideID,
            /* [retval][out] */ Slide	**FindBySlideID);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Slides * This,
            /* [in] */ int Index,
            /* [in] */ PpSlideLayout Layout,
            /* [retval][out] */ Slide	**Add);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertFromFile )( 
            Slides * This,
            /* [in] */ BSTR FileName,
            /* [in] */ int Index,
            /* [defaultvalue][optional][in] */ int SlideStart,
            /* [defaultvalue][optional][in] */ int SlideEnd,
            /* [retval][out] */ int *FromFile);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Range )( 
            Slides * This,
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ SlideRange **Range);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paste )( 
            Slides * This,
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ SlideRange **Paste);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddSlide )( 
            Slides * This,
            /* [in] */ int Index,
            /* [in] */ CustomLayout *pCustomLayout,
            /* [retval][out] */ Slide	**Slide);
        
        END_INTERFACE
    } SlidesVtbl;

    interface Slides
    {
        CONST_VTBL struct SlidesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Slides_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Slides_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Slides_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Slides_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Slides_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Slides_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Slides_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Slides_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Slides__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define Slides_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define Slides_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Slides_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Slides_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define Slides_FindBySlideID(This,SlideID,FindBySlideID)	\
    ( (This)->lpVtbl -> FindBySlideID(This,SlideID,FindBySlideID) ) 

#define Slides_Add(This,Index,Layout,Add)	\
    ( (This)->lpVtbl -> Add(This,Index,Layout,Add) ) 

#define Slides_InsertFromFile(This,FileName,Index,SlideStart,SlideEnd,FromFile)	\
    ( (This)->lpVtbl -> InsertFromFile(This,FileName,Index,SlideStart,SlideEnd,FromFile) ) 

#define Slides_Range(This,Index,Range)	\
    ( (This)->lpVtbl -> Range(This,Index,Range) ) 

#define Slides_Paste(This,Index,Paste)	\
    ( (This)->lpVtbl -> Paste(This,Index,Paste) ) 

#define Slides_AddSlide(This,Index,pCustomLayout,Slide)	\
    ( (This)->lpVtbl -> AddSlide(This,Index,pCustomLayout,Slide) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Slides_INTERFACE_DEFINED__ */


#ifndef ___Slide_INTERFACE_DEFINED__
#define ___Slide_INTERFACE_DEFINED__

/* interface _Slide */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID__Slide;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149346A-5A91-11CF-8700-00AA0060263B")
    _Slide : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shapes( 
            /* [retval][out] */ Shapes **Shapes) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeadersFooters( 
            /* [retval][out] */ HeadersFooters **HeadersFooters) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideShowTransition( 
            /* [retval][out] */ SlideShowTransition **SlideShowTransition) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColorScheme( 
            /* [retval][out] */ ColorScheme **ColorScheme) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColorScheme( 
            /* [in] */ ColorScheme *ColorScheme) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Background( 
            /* [retval][out] */ ShapeRange **Background) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideID( 
            /* [retval][out] */ long *SlideID) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintSteps( 
            /* [retval][out] */ int *PrintSteps) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Layout( 
            /* [retval][out] */ PpSlideLayout *Layout) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Layout( 
            /* [in] */ PpSlideLayout Layout) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Duplicate( 
            /* [retval][out] */ SlideRange **Duplicate) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Tags( 
            /* [retval][out] */ Tags **Tags) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideIndex( 
            /* [retval][out] */ int *SlideIndex) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideNumber( 
            /* [retval][out] */ int *SlideNumber) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayMasterShapes( 
            /* [retval][out] */ MsoTriState *DisplayMasterShapes) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayMasterShapes( 
            /* [in] */ MsoTriState DisplayMasterShapes) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FollowMasterBackground( 
            /* [retval][out] */ MsoTriState *FollowMasterBackground) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FollowMasterBackground( 
            /* [in] */ MsoTriState FollowMasterBackground) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NotesPage( 
            /* [retval][out] */ SlideRange **NotesPage) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Master( 
            /* [retval][out] */ _Master **Master) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hyperlinks( 
            /* [retval][out] */ Hyperlinks **Hyperlinks) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Export( 
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR FilterName,
            /* [defaultvalue][optional][in] */ int ScaleWidth = 0,
            /* [defaultvalue][optional][in] */ int ScaleHeight = 0) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Scripts( 
            /* [retval][out] */ /* external definition not present */ Scripts **Scripts) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comments( 
            /* [retval][out] */ Comments **Comments) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Design( 
            /* [retval][out] */ Design **Design) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Design( 
            /* [in] */ Design *Design) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveTo( 
            /* [in] */ int toPos) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TimeLine( 
            /* [retval][out] */ TimeLine **TimeLine) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyTemplate( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_SectionNumber( 
            /* [retval][out] */ int *SectionNumber) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomLayout( 
            /* [retval][out] */ CustomLayout **CustomLayout) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CustomLayout( 
            /* [in] */ CustomLayout *CustomLayout) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyTheme( 
            /* [in] */ BSTR themeName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ThemeColorScheme( 
            /* [retval][out] */ /* external definition not present */ ThemeColorScheme **ThemeColorScheme) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyThemeColorScheme( 
            /* [in] */ BSTR themeColorSchemeName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundStyle( 
            /* [retval][out] */ MsoBackgroundStyleIndex *BackgroundStyle) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundStyle( 
            /* [in] */ MsoBackgroundStyleIndex BackgroundStyle) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomerData( 
            /* [retval][out] */ CustomerData **CustomerData) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PublishSlides( 
            /* [in] */ BSTR SlideLibraryUrl,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL Overwrite = 0,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseSlideOrder = 0) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveToSectionStart( 
            /* [in] */ int toSection) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_sectionIndex( 
            /* [retval][out] */ int *sectionIndex) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasNotesPage( 
            /* [retval][out] */ MsoTriState *HasNotesPage) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyTemplate2( 
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR VariantGUID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _SlideVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Slide * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Slide * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Slide * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Slide * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Slide * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Slide * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Slide * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Slide * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Slide * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shapes )( 
            _Slide * This,
            /* [retval][out] */ Shapes **Shapes);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeadersFooters )( 
            _Slide * This,
            /* [retval][out] */ HeadersFooters **HeadersFooters);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideShowTransition )( 
            _Slide * This,
            /* [retval][out] */ SlideShowTransition **SlideShowTransition);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColorScheme )( 
            _Slide * This,
            /* [retval][out] */ ColorScheme **ColorScheme);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColorScheme )( 
            _Slide * This,
            /* [in] */ ColorScheme *ColorScheme);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Background )( 
            _Slide * This,
            /* [retval][out] */ ShapeRange **Background);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            _Slide * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            _Slide * This,
            /* [in] */ BSTR Name);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideID )( 
            _Slide * This,
            /* [retval][out] */ long *SlideID);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintSteps )( 
            _Slide * This,
            /* [retval][out] */ int *PrintSteps);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            _Slide * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            _Slide * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            _Slide * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layout )( 
            _Slide * This,
            /* [retval][out] */ PpSlideLayout *Layout);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layout )( 
            _Slide * This,
            /* [in] */ PpSlideLayout Layout);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Duplicate )( 
            _Slide * This,
            /* [retval][out] */ SlideRange **Duplicate);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            _Slide * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Tags )( 
            _Slide * This,
            /* [retval][out] */ Tags **Tags);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideIndex )( 
            _Slide * This,
            /* [retval][out] */ int *SlideIndex);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideNumber )( 
            _Slide * This,
            /* [retval][out] */ int *SlideNumber);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayMasterShapes )( 
            _Slide * This,
            /* [retval][out] */ MsoTriState *DisplayMasterShapes);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayMasterShapes )( 
            _Slide * This,
            /* [in] */ MsoTriState DisplayMasterShapes);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FollowMasterBackground )( 
            _Slide * This,
            /* [retval][out] */ MsoTriState *FollowMasterBackground);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FollowMasterBackground )( 
            _Slide * This,
            /* [in] */ MsoTriState FollowMasterBackground);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NotesPage )( 
            _Slide * This,
            /* [retval][out] */ SlideRange **NotesPage);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Master )( 
            _Slide * This,
            /* [retval][out] */ _Master **Master);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            _Slide * This,
            /* [retval][out] */ Hyperlinks **Hyperlinks);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Export )( 
            _Slide * This,
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR FilterName,
            /* [defaultvalue][optional][in] */ int ScaleWidth,
            /* [defaultvalue][optional][in] */ int ScaleHeight);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Scripts )( 
            _Slide * This,
            /* [retval][out] */ /* external definition not present */ Scripts **Scripts);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comments )( 
            _Slide * This,
            /* [retval][out] */ Comments **Comments);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Design )( 
            _Slide * This,
            /* [retval][out] */ Design **Design);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Design )( 
            _Slide * This,
            /* [in] */ Design *Design);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveTo )( 
            _Slide * This,
            /* [in] */ int toPos);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TimeLine )( 
            _Slide * This,
            /* [retval][out] */ TimeLine **TimeLine);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyTemplate )( 
            _Slide * This,
            /* [in] */ BSTR FileName);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SectionNumber )( 
            _Slide * This,
            /* [retval][out] */ int *SectionNumber);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomLayout )( 
            _Slide * This,
            /* [retval][out] */ CustomLayout **CustomLayout);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CustomLayout )( 
            _Slide * This,
            /* [in] */ CustomLayout *CustomLayout);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyTheme )( 
            _Slide * This,
            /* [in] */ BSTR themeName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ThemeColorScheme )( 
            _Slide * This,
            /* [retval][out] */ /* external definition not present */ ThemeColorScheme **ThemeColorScheme);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyThemeColorScheme )( 
            _Slide * This,
            /* [in] */ BSTR themeColorSchemeName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundStyle )( 
            _Slide * This,
            /* [retval][out] */ MsoBackgroundStyleIndex *BackgroundStyle);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundStyle )( 
            _Slide * This,
            /* [in] */ MsoBackgroundStyleIndex BackgroundStyle);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomerData )( 
            _Slide * This,
            /* [retval][out] */ CustomerData **CustomerData);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PublishSlides )( 
            _Slide * This,
            /* [in] */ BSTR SlideLibraryUrl,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL Overwrite,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseSlideOrder);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveToSectionStart )( 
            _Slide * This,
            /* [in] */ int toSection);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_sectionIndex )( 
            _Slide * This,
            /* [retval][out] */ int *sectionIndex);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasNotesPage )( 
            _Slide * This,
            /* [retval][out] */ MsoTriState *HasNotesPage);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyTemplate2 )( 
            _Slide * This,
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR VariantGUID);
        
        END_INTERFACE
    } _SlideVtbl;

    interface _Slide
    {
        CONST_VTBL struct _SlideVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Slide_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Slide_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Slide_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Slide_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Slide_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Slide_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Slide_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Slide_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define _Slide_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define _Slide_get_Shapes(This,Shapes)	\
    ( (This)->lpVtbl -> get_Shapes(This,Shapes) ) 

#define _Slide_get_HeadersFooters(This,HeadersFooters)	\
    ( (This)->lpVtbl -> get_HeadersFooters(This,HeadersFooters) ) 

#define _Slide_get_SlideShowTransition(This,SlideShowTransition)	\
    ( (This)->lpVtbl -> get_SlideShowTransition(This,SlideShowTransition) ) 

#define _Slide_get_ColorScheme(This,ColorScheme)	\
    ( (This)->lpVtbl -> get_ColorScheme(This,ColorScheme) ) 

#define _Slide_put_ColorScheme(This,ColorScheme)	\
    ( (This)->lpVtbl -> put_ColorScheme(This,ColorScheme) ) 

#define _Slide_get_Background(This,Background)	\
    ( (This)->lpVtbl -> get_Background(This,Background) ) 

#define _Slide_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define _Slide_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define _Slide_get_SlideID(This,SlideID)	\
    ( (This)->lpVtbl -> get_SlideID(This,SlideID) ) 

#define _Slide_get_PrintSteps(This,PrintSteps)	\
    ( (This)->lpVtbl -> get_PrintSteps(This,PrintSteps) ) 

#define _Slide_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define _Slide_Cut(This)	\
    ( (This)->lpVtbl -> Cut(This) ) 

#define _Slide_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define _Slide_get_Layout(This,Layout)	\
    ( (This)->lpVtbl -> get_Layout(This,Layout) ) 

#define _Slide_put_Layout(This,Layout)	\
    ( (This)->lpVtbl -> put_Layout(This,Layout) ) 

#define _Slide_Duplicate(This,Duplicate)	\
    ( (This)->lpVtbl -> Duplicate(This,Duplicate) ) 

#define _Slide_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define _Slide_get_Tags(This,Tags)	\
    ( (This)->lpVtbl -> get_Tags(This,Tags) ) 

#define _Slide_get_SlideIndex(This,SlideIndex)	\
    ( (This)->lpVtbl -> get_SlideIndex(This,SlideIndex) ) 

#define _Slide_get_SlideNumber(This,SlideNumber)	\
    ( (This)->lpVtbl -> get_SlideNumber(This,SlideNumber) ) 

#define _Slide_get_DisplayMasterShapes(This,DisplayMasterShapes)	\
    ( (This)->lpVtbl -> get_DisplayMasterShapes(This,DisplayMasterShapes) ) 

#define _Slide_put_DisplayMasterShapes(This,DisplayMasterShapes)	\
    ( (This)->lpVtbl -> put_DisplayMasterShapes(This,DisplayMasterShapes) ) 

#define _Slide_get_FollowMasterBackground(This,FollowMasterBackground)	\
    ( (This)->lpVtbl -> get_FollowMasterBackground(This,FollowMasterBackground) ) 

#define _Slide_put_FollowMasterBackground(This,FollowMasterBackground)	\
    ( (This)->lpVtbl -> put_FollowMasterBackground(This,FollowMasterBackground) ) 

#define _Slide_get_NotesPage(This,NotesPage)	\
    ( (This)->lpVtbl -> get_NotesPage(This,NotesPage) ) 

#define _Slide_get_Master(This,Master)	\
    ( (This)->lpVtbl -> get_Master(This,Master) ) 

#define _Slide_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define _Slide_Export(This,FileName,FilterName,ScaleWidth,ScaleHeight)	\
    ( (This)->lpVtbl -> Export(This,FileName,FilterName,ScaleWidth,ScaleHeight) ) 

#define _Slide_get_Scripts(This,Scripts)	\
    ( (This)->lpVtbl -> get_Scripts(This,Scripts) ) 

#define _Slide_get_Comments(This,Comments)	\
    ( (This)->lpVtbl -> get_Comments(This,Comments) ) 

#define _Slide_get_Design(This,Design)	\
    ( (This)->lpVtbl -> get_Design(This,Design) ) 

#define _Slide_put_Design(This,Design)	\
    ( (This)->lpVtbl -> put_Design(This,Design) ) 

#define _Slide_MoveTo(This,toPos)	\
    ( (This)->lpVtbl -> MoveTo(This,toPos) ) 

#define _Slide_get_TimeLine(This,TimeLine)	\
    ( (This)->lpVtbl -> get_TimeLine(This,TimeLine) ) 

#define _Slide_ApplyTemplate(This,FileName)	\
    ( (This)->lpVtbl -> ApplyTemplate(This,FileName) ) 

#define _Slide_get_SectionNumber(This,SectionNumber)	\
    ( (This)->lpVtbl -> get_SectionNumber(This,SectionNumber) ) 

#define _Slide_get_CustomLayout(This,CustomLayout)	\
    ( (This)->lpVtbl -> get_CustomLayout(This,CustomLayout) ) 

#define _Slide_put_CustomLayout(This,CustomLayout)	\
    ( (This)->lpVtbl -> put_CustomLayout(This,CustomLayout) ) 

#define _Slide_ApplyTheme(This,themeName)	\
    ( (This)->lpVtbl -> ApplyTheme(This,themeName) ) 

#define _Slide_get_ThemeColorScheme(This,ThemeColorScheme)	\
    ( (This)->lpVtbl -> get_ThemeColorScheme(This,ThemeColorScheme) ) 

#define _Slide_ApplyThemeColorScheme(This,themeColorSchemeName)	\
    ( (This)->lpVtbl -> ApplyThemeColorScheme(This,themeColorSchemeName) ) 

#define _Slide_get_BackgroundStyle(This,BackgroundStyle)	\
    ( (This)->lpVtbl -> get_BackgroundStyle(This,BackgroundStyle) ) 

#define _Slide_put_BackgroundStyle(This,BackgroundStyle)	\
    ( (This)->lpVtbl -> put_BackgroundStyle(This,BackgroundStyle) ) 

#define _Slide_get_CustomerData(This,CustomerData)	\
    ( (This)->lpVtbl -> get_CustomerData(This,CustomerData) ) 

#define _Slide_PublishSlides(This,SlideLibraryUrl,Overwrite,UseSlideOrder)	\
    ( (This)->lpVtbl -> PublishSlides(This,SlideLibraryUrl,Overwrite,UseSlideOrder) ) 

#define _Slide_MoveToSectionStart(This,toSection)	\
    ( (This)->lpVtbl -> MoveToSectionStart(This,toSection) ) 

#define _Slide_get_sectionIndex(This,sectionIndex)	\
    ( (This)->lpVtbl -> get_sectionIndex(This,sectionIndex) ) 

#define _Slide_get_HasNotesPage(This,HasNotesPage)	\
    ( (This)->lpVtbl -> get_HasNotesPage(This,HasNotesPage) ) 

#define _Slide_ApplyTemplate2(This,FileName,VariantGUID)	\
    ( (This)->lpVtbl -> ApplyTemplate2(This,FileName,VariantGUID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Slide_INTERFACE_DEFINED__ */


#ifndef __SlideRange_INTERFACE_DEFINED__
#define __SlideRange_INTERFACE_DEFINED__

/* interface SlideRange */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_SlideRange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149346B-5A91-11CF-8700-00AA0060263B")
    SlideRange : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shapes( 
            /* [retval][out] */ Shapes **Shapes) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeadersFooters( 
            /* [retval][out] */ HeadersFooters **HeadersFooters) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideShowTransition( 
            /* [retval][out] */ SlideShowTransition **SlideShowTransition) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColorScheme( 
            /* [retval][out] */ ColorScheme **ColorScheme) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColorScheme( 
            /* [in] */ ColorScheme *ColorScheme) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Background( 
            /* [retval][out] */ ShapeRange **Background) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideID( 
            /* [retval][out] */ long *SlideID) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintSteps( 
            /* [retval][out] */ int *PrintSteps) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Layout( 
            /* [retval][out] */ PpSlideLayout *Layout) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Layout( 
            /* [in] */ PpSlideLayout Layout) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Duplicate( 
            /* [retval][out] */ SlideRange **Duplicate) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Tags( 
            /* [retval][out] */ Tags **Tags) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideIndex( 
            /* [retval][out] */ int *SlideIndex) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideNumber( 
            /* [retval][out] */ int *SlideNumber) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayMasterShapes( 
            /* [retval][out] */ MsoTriState *DisplayMasterShapes) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayMasterShapes( 
            /* [in] */ MsoTriState DisplayMasterShapes) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FollowMasterBackground( 
            /* [retval][out] */ MsoTriState *FollowMasterBackground) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FollowMasterBackground( 
            /* [in] */ MsoTriState FollowMasterBackground) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NotesPage( 
            /* [retval][out] */ SlideRange **NotesPage) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Master( 
            /* [retval][out] */ _Master **Master) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hyperlinks( 
            /* [retval][out] */ Hyperlinks **Hyperlinks) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Export( 
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR FilterName,
            /* [defaultvalue][optional][in] */ int ScaleWidth = 0,
            /* [defaultvalue][optional][in] */ int ScaleHeight = 0) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Slide	**Item) = 0;
        
        virtual /* [helpcontext][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **_NewEnum) = 0;
        
        virtual /* [helpcontext][restricted][id] */ HRESULT STDMETHODCALLTYPE _Index( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Scripts( 
            /* [retval][out] */ /* external definition not present */ Scripts **Scripts) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comments( 
            /* [retval][out] */ Comments **Comments) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Design( 
            /* [retval][out] */ Design **Design) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Design( 
            /* [in] */ Design *Design) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveTo( 
            /* [in] */ int toPos) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TimeLine( 
            /* [retval][out] */ TimeLine **TimeLine) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyTemplate( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_SectionNumber( 
            /* [retval][out] */ int *SectionNumber) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomLayout( 
            /* [retval][out] */ CustomLayout **CustomLayout) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CustomLayout( 
            /* [in] */ CustomLayout *CustomLayout) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyTheme( 
            /* [in] */ BSTR themeName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ThemeColorScheme( 
            /* [retval][out] */ /* external definition not present */ ThemeColorScheme **ThemeColorScheme) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyThemeColorScheme( 
            /* [in] */ BSTR themeColorSchemeName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundStyle( 
            /* [retval][out] */ MsoBackgroundStyleIndex *BackgroundStyle) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundStyle( 
            /* [in] */ MsoBackgroundStyleIndex BackgroundStyle) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomerData( 
            /* [retval][out] */ CustomerData **CustomerData) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PublishSlides( 
            /* [in] */ BSTR SlideLibraryUrl,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL Overwrite = 0,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseSlideOrder = 0) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveToSectionStart( 
            /* [in] */ int toSection) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_sectionIndex( 
            /* [retval][out] */ int *sectionIndex) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasNotesPage( 
            /* [retval][out] */ MsoTriState *HasNotesPage) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyTemplate2( 
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR VariantGUID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SlideRangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SlideRange * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SlideRange * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SlideRange * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SlideRange * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SlideRange * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SlideRange * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SlideRange * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SlideRange * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SlideRange * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shapes )( 
            SlideRange * This,
            /* [retval][out] */ Shapes **Shapes);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeadersFooters )( 
            SlideRange * This,
            /* [retval][out] */ HeadersFooters **HeadersFooters);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideShowTransition )( 
            SlideRange * This,
            /* [retval][out] */ SlideShowTransition **SlideShowTransition);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColorScheme )( 
            SlideRange * This,
            /* [retval][out] */ ColorScheme **ColorScheme);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColorScheme )( 
            SlideRange * This,
            /* [in] */ ColorScheme *ColorScheme);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Background )( 
            SlideRange * This,
            /* [retval][out] */ ShapeRange **Background);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            SlideRange * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            SlideRange * This,
            /* [in] */ BSTR Name);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideID )( 
            SlideRange * This,
            /* [retval][out] */ long *SlideID);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintSteps )( 
            SlideRange * This,
            /* [retval][out] */ int *PrintSteps);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            SlideRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            SlideRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            SlideRange * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layout )( 
            SlideRange * This,
            /* [retval][out] */ PpSlideLayout *Layout);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layout )( 
            SlideRange * This,
            /* [in] */ PpSlideLayout Layout);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Duplicate )( 
            SlideRange * This,
            /* [retval][out] */ SlideRange **Duplicate);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            SlideRange * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Tags )( 
            SlideRange * This,
            /* [retval][out] */ Tags **Tags);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideIndex )( 
            SlideRange * This,
            /* [retval][out] */ int *SlideIndex);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideNumber )( 
            SlideRange * This,
            /* [retval][out] */ int *SlideNumber);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayMasterShapes )( 
            SlideRange * This,
            /* [retval][out] */ MsoTriState *DisplayMasterShapes);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayMasterShapes )( 
            SlideRange * This,
            /* [in] */ MsoTriState DisplayMasterShapes);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FollowMasterBackground )( 
            SlideRange * This,
            /* [retval][out] */ MsoTriState *FollowMasterBackground);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FollowMasterBackground )( 
            SlideRange * This,
            /* [in] */ MsoTriState FollowMasterBackground);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NotesPage )( 
            SlideRange * This,
            /* [retval][out] */ SlideRange **NotesPage);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Master )( 
            SlideRange * This,
            /* [retval][out] */ _Master **Master);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            SlideRange * This,
            /* [retval][out] */ Hyperlinks **Hyperlinks);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Export )( 
            SlideRange * This,
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR FilterName,
            /* [defaultvalue][optional][in] */ int ScaleWidth,
            /* [defaultvalue][optional][in] */ int ScaleHeight);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            SlideRange * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Slide	**Item);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            SlideRange * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            SlideRange * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SlideRange * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Scripts )( 
            SlideRange * This,
            /* [retval][out] */ /* external definition not present */ Scripts **Scripts);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comments )( 
            SlideRange * This,
            /* [retval][out] */ Comments **Comments);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Design )( 
            SlideRange * This,
            /* [retval][out] */ Design **Design);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Design )( 
            SlideRange * This,
            /* [in] */ Design *Design);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveTo )( 
            SlideRange * This,
            /* [in] */ int toPos);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TimeLine )( 
            SlideRange * This,
            /* [retval][out] */ TimeLine **TimeLine);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyTemplate )( 
            SlideRange * This,
            /* [in] */ BSTR FileName);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SectionNumber )( 
            SlideRange * This,
            /* [retval][out] */ int *SectionNumber);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomLayout )( 
            SlideRange * This,
            /* [retval][out] */ CustomLayout **CustomLayout);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CustomLayout )( 
            SlideRange * This,
            /* [in] */ CustomLayout *CustomLayout);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyTheme )( 
            SlideRange * This,
            /* [in] */ BSTR themeName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ThemeColorScheme )( 
            SlideRange * This,
            /* [retval][out] */ /* external definition not present */ ThemeColorScheme **ThemeColorScheme);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyThemeColorScheme )( 
            SlideRange * This,
            /* [in] */ BSTR themeColorSchemeName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundStyle )( 
            SlideRange * This,
            /* [retval][out] */ MsoBackgroundStyleIndex *BackgroundStyle);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundStyle )( 
            SlideRange * This,
            /* [in] */ MsoBackgroundStyleIndex BackgroundStyle);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomerData )( 
            SlideRange * This,
            /* [retval][out] */ CustomerData **CustomerData);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PublishSlides )( 
            SlideRange * This,
            /* [in] */ BSTR SlideLibraryUrl,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL Overwrite,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseSlideOrder);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveToSectionStart )( 
            SlideRange * This,
            /* [in] */ int toSection);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_sectionIndex )( 
            SlideRange * This,
            /* [retval][out] */ int *sectionIndex);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasNotesPage )( 
            SlideRange * This,
            /* [retval][out] */ MsoTriState *HasNotesPage);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyTemplate2 )( 
            SlideRange * This,
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR VariantGUID);
        
        END_INTERFACE
    } SlideRangeVtbl;

    interface SlideRange
    {
        CONST_VTBL struct SlideRangeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SlideRange_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SlideRange_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SlideRange_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SlideRange_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SlideRange_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SlideRange_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SlideRange_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SlideRange_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define SlideRange_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define SlideRange_get_Shapes(This,Shapes)	\
    ( (This)->lpVtbl -> get_Shapes(This,Shapes) ) 

#define SlideRange_get_HeadersFooters(This,HeadersFooters)	\
    ( (This)->lpVtbl -> get_HeadersFooters(This,HeadersFooters) ) 

#define SlideRange_get_SlideShowTransition(This,SlideShowTransition)	\
    ( (This)->lpVtbl -> get_SlideShowTransition(This,SlideShowTransition) ) 

#define SlideRange_get_ColorScheme(This,ColorScheme)	\
    ( (This)->lpVtbl -> get_ColorScheme(This,ColorScheme) ) 

#define SlideRange_put_ColorScheme(This,ColorScheme)	\
    ( (This)->lpVtbl -> put_ColorScheme(This,ColorScheme) ) 

#define SlideRange_get_Background(This,Background)	\
    ( (This)->lpVtbl -> get_Background(This,Background) ) 

#define SlideRange_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define SlideRange_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define SlideRange_get_SlideID(This,SlideID)	\
    ( (This)->lpVtbl -> get_SlideID(This,SlideID) ) 

#define SlideRange_get_PrintSteps(This,PrintSteps)	\
    ( (This)->lpVtbl -> get_PrintSteps(This,PrintSteps) ) 

#define SlideRange_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define SlideRange_Cut(This)	\
    ( (This)->lpVtbl -> Cut(This) ) 

#define SlideRange_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define SlideRange_get_Layout(This,Layout)	\
    ( (This)->lpVtbl -> get_Layout(This,Layout) ) 

#define SlideRange_put_Layout(This,Layout)	\
    ( (This)->lpVtbl -> put_Layout(This,Layout) ) 

#define SlideRange_Duplicate(This,Duplicate)	\
    ( (This)->lpVtbl -> Duplicate(This,Duplicate) ) 

#define SlideRange_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define SlideRange_get_Tags(This,Tags)	\
    ( (This)->lpVtbl -> get_Tags(This,Tags) ) 

#define SlideRange_get_SlideIndex(This,SlideIndex)	\
    ( (This)->lpVtbl -> get_SlideIndex(This,SlideIndex) ) 

#define SlideRange_get_SlideNumber(This,SlideNumber)	\
    ( (This)->lpVtbl -> get_SlideNumber(This,SlideNumber) ) 

#define SlideRange_get_DisplayMasterShapes(This,DisplayMasterShapes)	\
    ( (This)->lpVtbl -> get_DisplayMasterShapes(This,DisplayMasterShapes) ) 

#define SlideRange_put_DisplayMasterShapes(This,DisplayMasterShapes)	\
    ( (This)->lpVtbl -> put_DisplayMasterShapes(This,DisplayMasterShapes) ) 

#define SlideRange_get_FollowMasterBackground(This,FollowMasterBackground)	\
    ( (This)->lpVtbl -> get_FollowMasterBackground(This,FollowMasterBackground) ) 

#define SlideRange_put_FollowMasterBackground(This,FollowMasterBackground)	\
    ( (This)->lpVtbl -> put_FollowMasterBackground(This,FollowMasterBackground) ) 

#define SlideRange_get_NotesPage(This,NotesPage)	\
    ( (This)->lpVtbl -> get_NotesPage(This,NotesPage) ) 

#define SlideRange_get_Master(This,Master)	\
    ( (This)->lpVtbl -> get_Master(This,Master) ) 

#define SlideRange_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define SlideRange_Export(This,FileName,FilterName,ScaleWidth,ScaleHeight)	\
    ( (This)->lpVtbl -> Export(This,FileName,FilterName,ScaleWidth,ScaleHeight) ) 

#define SlideRange_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define SlideRange_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define SlideRange__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define SlideRange_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 

#define SlideRange_get_Scripts(This,Scripts)	\
    ( (This)->lpVtbl -> get_Scripts(This,Scripts) ) 

#define SlideRange_get_Comments(This,Comments)	\
    ( (This)->lpVtbl -> get_Comments(This,Comments) ) 

#define SlideRange_get_Design(This,Design)	\
    ( (This)->lpVtbl -> get_Design(This,Design) ) 

#define SlideRange_put_Design(This,Design)	\
    ( (This)->lpVtbl -> put_Design(This,Design) ) 

#define SlideRange_MoveTo(This,toPos)	\
    ( (This)->lpVtbl -> MoveTo(This,toPos) ) 

#define SlideRange_get_TimeLine(This,TimeLine)	\
    ( (This)->lpVtbl -> get_TimeLine(This,TimeLine) ) 

#define SlideRange_ApplyTemplate(This,FileName)	\
    ( (This)->lpVtbl -> ApplyTemplate(This,FileName) ) 

#define SlideRange_get_SectionNumber(This,SectionNumber)	\
    ( (This)->lpVtbl -> get_SectionNumber(This,SectionNumber) ) 

#define SlideRange_get_CustomLayout(This,CustomLayout)	\
    ( (This)->lpVtbl -> get_CustomLayout(This,CustomLayout) ) 

#define SlideRange_put_CustomLayout(This,CustomLayout)	\
    ( (This)->lpVtbl -> put_CustomLayout(This,CustomLayout) ) 

#define SlideRange_ApplyTheme(This,themeName)	\
    ( (This)->lpVtbl -> ApplyTheme(This,themeName) ) 

#define SlideRange_get_ThemeColorScheme(This,ThemeColorScheme)	\
    ( (This)->lpVtbl -> get_ThemeColorScheme(This,ThemeColorScheme) ) 

#define SlideRange_ApplyThemeColorScheme(This,themeColorSchemeName)	\
    ( (This)->lpVtbl -> ApplyThemeColorScheme(This,themeColorSchemeName) ) 

#define SlideRange_get_BackgroundStyle(This,BackgroundStyle)	\
    ( (This)->lpVtbl -> get_BackgroundStyle(This,BackgroundStyle) ) 

#define SlideRange_put_BackgroundStyle(This,BackgroundStyle)	\
    ( (This)->lpVtbl -> put_BackgroundStyle(This,BackgroundStyle) ) 

#define SlideRange_get_CustomerData(This,CustomerData)	\
    ( (This)->lpVtbl -> get_CustomerData(This,CustomerData) ) 

#define SlideRange_PublishSlides(This,SlideLibraryUrl,Overwrite,UseSlideOrder)	\
    ( (This)->lpVtbl -> PublishSlides(This,SlideLibraryUrl,Overwrite,UseSlideOrder) ) 

#define SlideRange_MoveToSectionStart(This,toSection)	\
    ( (This)->lpVtbl -> MoveToSectionStart(This,toSection) ) 

#define SlideRange_get_sectionIndex(This,sectionIndex)	\
    ( (This)->lpVtbl -> get_sectionIndex(This,sectionIndex) ) 

#define SlideRange_get_HasNotesPage(This,HasNotesPage)	\
    ( (This)->lpVtbl -> get_HasNotesPage(This,HasNotesPage) ) 

#define SlideRange_ApplyTemplate2(This,FileName,VariantGUID)	\
    ( (This)->lpVtbl -> ApplyTemplate2(This,FileName,VariantGUID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SlideRange_INTERFACE_DEFINED__ */


#ifndef ___Master_INTERFACE_DEFINED__
#define ___Master_INTERFACE_DEFINED__

/* interface _Master */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID__Master;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149346C-5A91-11CF-8700-00AA0060263B")
    _Master : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shapes( 
            /* [retval][out] */ Shapes **Shapes) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeadersFooters( 
            /* [retval][out] */ HeadersFooters **HeadersFooters) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColorScheme( 
            /* [retval][out] */ ColorScheme **ColorScheme) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColorScheme( 
            /* [in] */ ColorScheme *ColorScheme) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Background( 
            /* [retval][out] */ ShapeRange **Background) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ single *Height) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ single *Width) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextStyles( 
            /* [retval][out] */ TextStyles **TextStyles) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hyperlinks( 
            /* [retval][out] */ Hyperlinks **Hyperlinks) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Scripts( 
            /* [retval][out] */ /* external definition not present */ Scripts **Scripts) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Design( 
            /* [retval][out] */ Design **Design) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TimeLine( 
            /* [retval][out] */ TimeLine **TimeLine) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideShowTransition( 
            /* [retval][out] */ SlideShowTransition **SlideShowTransition) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomLayouts( 
            /* [retval][out] */ CustomLayouts **CustomLayouts) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Theme( 
            /* [retval][out] */ /* external definition not present */ OfficeTheme **Theme) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyTheme( 
            /* [in] */ BSTR themeName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundStyle( 
            /* [retval][out] */ MsoBackgroundStyleIndex *BackgroundStyle) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundStyle( 
            /* [in] */ MsoBackgroundStyleIndex BackgroundStyle) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomerData( 
            /* [retval][out] */ CustomerData **CustomerData) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Guides( 
            /* [retval][out] */ Guides **Guides) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _MasterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Master * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Master * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Master * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Master * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Master * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Master * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Master * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Master * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Master * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shapes )( 
            _Master * This,
            /* [retval][out] */ Shapes **Shapes);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeadersFooters )( 
            _Master * This,
            /* [retval][out] */ HeadersFooters **HeadersFooters);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColorScheme )( 
            _Master * This,
            /* [retval][out] */ ColorScheme **ColorScheme);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColorScheme )( 
            _Master * This,
            /* [in] */ ColorScheme *ColorScheme);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Background )( 
            _Master * This,
            /* [retval][out] */ ShapeRange **Background);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            _Master * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            _Master * This,
            /* [in] */ BSTR Name);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            _Master * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            _Master * This,
            /* [retval][out] */ single *Height);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            _Master * This,
            /* [retval][out] */ single *Width);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextStyles )( 
            _Master * This,
            /* [retval][out] */ TextStyles **TextStyles);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            _Master * This,
            /* [retval][out] */ Hyperlinks **Hyperlinks);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Scripts )( 
            _Master * This,
            /* [retval][out] */ /* external definition not present */ Scripts **Scripts);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Design )( 
            _Master * This,
            /* [retval][out] */ Design **Design);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TimeLine )( 
            _Master * This,
            /* [retval][out] */ TimeLine **TimeLine);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideShowTransition )( 
            _Master * This,
            /* [retval][out] */ SlideShowTransition **SlideShowTransition);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomLayouts )( 
            _Master * This,
            /* [retval][out] */ CustomLayouts **CustomLayouts);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Theme )( 
            _Master * This,
            /* [retval][out] */ /* external definition not present */ OfficeTheme **Theme);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyTheme )( 
            _Master * This,
            /* [in] */ BSTR themeName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundStyle )( 
            _Master * This,
            /* [retval][out] */ MsoBackgroundStyleIndex *BackgroundStyle);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundStyle )( 
            _Master * This,
            /* [in] */ MsoBackgroundStyleIndex BackgroundStyle);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomerData )( 
            _Master * This,
            /* [retval][out] */ CustomerData **CustomerData);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Guides )( 
            _Master * This,
            /* [retval][out] */ Guides **Guides);
        
        END_INTERFACE
    } _MasterVtbl;

    interface _Master
    {
        CONST_VTBL struct _MasterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Master_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Master_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Master_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Master_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Master_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Master_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Master_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Master_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define _Master_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define _Master_get_Shapes(This,Shapes)	\
    ( (This)->lpVtbl -> get_Shapes(This,Shapes) ) 

#define _Master_get_HeadersFooters(This,HeadersFooters)	\
    ( (This)->lpVtbl -> get_HeadersFooters(This,HeadersFooters) ) 

#define _Master_get_ColorScheme(This,ColorScheme)	\
    ( (This)->lpVtbl -> get_ColorScheme(This,ColorScheme) ) 

#define _Master_put_ColorScheme(This,ColorScheme)	\
    ( (This)->lpVtbl -> put_ColorScheme(This,ColorScheme) ) 

#define _Master_get_Background(This,Background)	\
    ( (This)->lpVtbl -> get_Background(This,Background) ) 

#define _Master_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define _Master_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define _Master_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define _Master_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define _Master_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define _Master_get_TextStyles(This,TextStyles)	\
    ( (This)->lpVtbl -> get_TextStyles(This,TextStyles) ) 

#define _Master_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define _Master_get_Scripts(This,Scripts)	\
    ( (This)->lpVtbl -> get_Scripts(This,Scripts) ) 

#define _Master_get_Design(This,Design)	\
    ( (This)->lpVtbl -> get_Design(This,Design) ) 

#define _Master_get_TimeLine(This,TimeLine)	\
    ( (This)->lpVtbl -> get_TimeLine(This,TimeLine) ) 

#define _Master_get_SlideShowTransition(This,SlideShowTransition)	\
    ( (This)->lpVtbl -> get_SlideShowTransition(This,SlideShowTransition) ) 

#define _Master_get_CustomLayouts(This,CustomLayouts)	\
    ( (This)->lpVtbl -> get_CustomLayouts(This,CustomLayouts) ) 

#define _Master_get_Theme(This,Theme)	\
    ( (This)->lpVtbl -> get_Theme(This,Theme) ) 

#define _Master_ApplyTheme(This,themeName)	\
    ( (This)->lpVtbl -> ApplyTheme(This,themeName) ) 

#define _Master_get_BackgroundStyle(This,BackgroundStyle)	\
    ( (This)->lpVtbl -> get_BackgroundStyle(This,BackgroundStyle) ) 

#define _Master_put_BackgroundStyle(This,BackgroundStyle)	\
    ( (This)->lpVtbl -> put_BackgroundStyle(This,BackgroundStyle) ) 

#define _Master_get_CustomerData(This,CustomerData)	\
    ( (This)->lpVtbl -> get_CustomerData(This,CustomerData) ) 

#define _Master_get_Guides(This,Guides)	\
    ( (This)->lpVtbl -> get_Guides(This,Guides) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Master_INTERFACE_DEFINED__ */


#ifndef __SldEvents_INTERFACE_DEFINED__
#define __SldEvents_INTERFACE_DEFINED__

/* interface SldEvents */
/* [object][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_SldEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149346D-5A91-11CF-8700-00AA0060263B")
    SldEvents : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct SldEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SldEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SldEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SldEvents * This);
        
        END_INTERFACE
    } SldEventsVtbl;

    interface SldEvents
    {
        CONST_VTBL struct SldEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SldEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SldEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SldEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SldEvents_INTERFACE_DEFINED__ */


#ifndef __ColorSchemes_INTERFACE_DEFINED__
#define __ColorSchemes_INTERFACE_DEFINED__

/* interface ColorSchemes */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ColorSchemes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149346E-5A91-11CF-8700-00AA0060263B")
    ColorSchemes : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ ColorScheme **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [defaultvalue][optional][in] */ ColorScheme *Scheme,
            /* [retval][out] */ ColorScheme **Add) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ColorSchemesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ColorSchemes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ColorSchemes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ColorSchemes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ColorSchemes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ColorSchemes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ColorSchemes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ColorSchemes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ColorSchemes * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            ColorSchemes * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ColorSchemes * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ColorSchemes * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ColorSchemes * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ColorSchemes * This,
            /* [in] */ int Index,
            /* [retval][out] */ ColorScheme **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ColorSchemes * This,
            /* [defaultvalue][optional][in] */ ColorScheme *Scheme,
            /* [retval][out] */ ColorScheme **Add);
        
        END_INTERFACE
    } ColorSchemesVtbl;

    interface ColorSchemes
    {
        CONST_VTBL struct ColorSchemesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ColorSchemes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ColorSchemes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ColorSchemes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ColorSchemes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ColorSchemes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ColorSchemes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ColorSchemes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ColorSchemes_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define ColorSchemes__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define ColorSchemes_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define ColorSchemes_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ColorSchemes_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ColorSchemes_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define ColorSchemes_Add(This,Scheme,Add)	\
    ( (This)->lpVtbl -> Add(This,Scheme,Add) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ColorSchemes_INTERFACE_DEFINED__ */


#ifndef __ColorScheme_INTERFACE_DEFINED__
#define __ColorScheme_INTERFACE_DEFINED__

/* interface ColorScheme */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ColorScheme;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149346F-5A91-11CF-8700-00AA0060263B")
    ColorScheme : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Colors( 
            /* [in] */ PpColorSchemeIndex SchemeColor,
            /* [retval][out] */ RGBColor **Colors) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ColorSchemeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ColorScheme * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ColorScheme * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ColorScheme * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ColorScheme * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ColorScheme * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ColorScheme * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ColorScheme * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ColorScheme * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            ColorScheme * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ColorScheme * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ColorScheme * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ColorScheme * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Colors )( 
            ColorScheme * This,
            /* [in] */ PpColorSchemeIndex SchemeColor,
            /* [retval][out] */ RGBColor **Colors);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ColorScheme * This);
        
        END_INTERFACE
    } ColorSchemeVtbl;

    interface ColorScheme
    {
        CONST_VTBL struct ColorSchemeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ColorScheme_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ColorScheme_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ColorScheme_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ColorScheme_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ColorScheme_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ColorScheme_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ColorScheme_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ColorScheme_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define ColorScheme__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define ColorScheme_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define ColorScheme_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ColorScheme_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ColorScheme_Colors(This,SchemeColor,Colors)	\
    ( (This)->lpVtbl -> Colors(This,SchemeColor,Colors) ) 

#define ColorScheme_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ColorScheme_INTERFACE_DEFINED__ */


#ifndef __RGBColor_INTERFACE_DEFINED__
#define __RGBColor_INTERFACE_DEFINED__

/* interface RGBColor */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_RGBColor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493470-5A91-11CF-8700-00AA0060263B")
    RGBColor : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RGB( 
            /* [retval][out] */ MsoRGBType *RGB) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RGB( 
            /* [in] */ MsoRGBType RGB) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RGBColorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            RGBColor * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            RGBColor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            RGBColor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            RGBColor * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            RGBColor * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            RGBColor * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            RGBColor * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            RGBColor * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            RGBColor * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RGB )( 
            RGBColor * This,
            /* [retval][out] */ MsoRGBType *RGB);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RGB )( 
            RGBColor * This,
            /* [in] */ MsoRGBType RGB);
        
        END_INTERFACE
    } RGBColorVtbl;

    interface RGBColor
    {
        CONST_VTBL struct RGBColorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define RGBColor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define RGBColor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define RGBColor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define RGBColor_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define RGBColor_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define RGBColor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define RGBColor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define RGBColor_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define RGBColor_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define RGBColor_get_RGB(This,RGB)	\
    ( (This)->lpVtbl -> get_RGB(This,RGB) ) 

#define RGBColor_put_RGB(This,RGB)	\
    ( (This)->lpVtbl -> put_RGB(This,RGB) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __RGBColor_INTERFACE_DEFINED__ */


#ifndef __SlideShowTransition_INTERFACE_DEFINED__
#define __SlideShowTransition_INTERFACE_DEFINED__

/* interface SlideShowTransition */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_SlideShowTransition;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493471-5A91-11CF-8700-00AA0060263B")
    SlideShowTransition : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AdvanceOnClick( 
            /* [retval][out] */ MsoTriState *AdvanceOnClick) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AdvanceOnClick( 
            /* [in] */ MsoTriState AdvanceOnClick) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AdvanceOnTime( 
            /* [retval][out] */ MsoTriState *AdvanceOnTime) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AdvanceOnTime( 
            /* [in] */ MsoTriState AdvanceOnTime) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AdvanceTime( 
            /* [retval][out] */ single *AdvanceTime) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AdvanceTime( 
            /* [in] */ single AdvanceTime) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EntryEffect( 
            /* [retval][out] */ PpEntryEffect *EntryEffect) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EntryEffect( 
            /* [in] */ PpEntryEffect EntryEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hidden( 
            /* [retval][out] */ MsoTriState *Hidden) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Hidden( 
            /* [in] */ MsoTriState Hidden) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LoopSoundUntilNext( 
            /* [retval][out] */ MsoTriState *LoopSoundUntilNext) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LoopSoundUntilNext( 
            /* [in] */ MsoTriState LoopSoundUntilNext) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SoundEffect( 
            /* [retval][out] */ SoundEffect **SoundEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Speed( 
            /* [retval][out] */ PpTransitionSpeed *Speed) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Speed( 
            /* [in] */ PpTransitionSpeed Speed) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Duration( 
            /* [retval][out] */ single *Duration) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Duration( 
            /* [in] */ single Duration) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SlideShowTransitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SlideShowTransition * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SlideShowTransition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SlideShowTransition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SlideShowTransition * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SlideShowTransition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SlideShowTransition * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SlideShowTransition * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SlideShowTransition * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SlideShowTransition * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AdvanceOnClick )( 
            SlideShowTransition * This,
            /* [retval][out] */ MsoTriState *AdvanceOnClick);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AdvanceOnClick )( 
            SlideShowTransition * This,
            /* [in] */ MsoTriState AdvanceOnClick);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AdvanceOnTime )( 
            SlideShowTransition * This,
            /* [retval][out] */ MsoTriState *AdvanceOnTime);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AdvanceOnTime )( 
            SlideShowTransition * This,
            /* [in] */ MsoTriState AdvanceOnTime);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AdvanceTime )( 
            SlideShowTransition * This,
            /* [retval][out] */ single *AdvanceTime);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AdvanceTime )( 
            SlideShowTransition * This,
            /* [in] */ single AdvanceTime);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntryEffect )( 
            SlideShowTransition * This,
            /* [retval][out] */ PpEntryEffect *EntryEffect);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntryEffect )( 
            SlideShowTransition * This,
            /* [in] */ PpEntryEffect EntryEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hidden )( 
            SlideShowTransition * This,
            /* [retval][out] */ MsoTriState *Hidden);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Hidden )( 
            SlideShowTransition * This,
            /* [in] */ MsoTriState Hidden);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LoopSoundUntilNext )( 
            SlideShowTransition * This,
            /* [retval][out] */ MsoTriState *LoopSoundUntilNext);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LoopSoundUntilNext )( 
            SlideShowTransition * This,
            /* [in] */ MsoTriState LoopSoundUntilNext);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SoundEffect )( 
            SlideShowTransition * This,
            /* [retval][out] */ SoundEffect **SoundEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Speed )( 
            SlideShowTransition * This,
            /* [retval][out] */ PpTransitionSpeed *Speed);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Speed )( 
            SlideShowTransition * This,
            /* [in] */ PpTransitionSpeed Speed);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            SlideShowTransition * This,
            /* [retval][out] */ single *Duration);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Duration )( 
            SlideShowTransition * This,
            /* [in] */ single Duration);
        
        END_INTERFACE
    } SlideShowTransitionVtbl;

    interface SlideShowTransition
    {
        CONST_VTBL struct SlideShowTransitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SlideShowTransition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SlideShowTransition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SlideShowTransition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SlideShowTransition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SlideShowTransition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SlideShowTransition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SlideShowTransition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SlideShowTransition_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define SlideShowTransition_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define SlideShowTransition_get_AdvanceOnClick(This,AdvanceOnClick)	\
    ( (This)->lpVtbl -> get_AdvanceOnClick(This,AdvanceOnClick) ) 

#define SlideShowTransition_put_AdvanceOnClick(This,AdvanceOnClick)	\
    ( (This)->lpVtbl -> put_AdvanceOnClick(This,AdvanceOnClick) ) 

#define SlideShowTransition_get_AdvanceOnTime(This,AdvanceOnTime)	\
    ( (This)->lpVtbl -> get_AdvanceOnTime(This,AdvanceOnTime) ) 

#define SlideShowTransition_put_AdvanceOnTime(This,AdvanceOnTime)	\
    ( (This)->lpVtbl -> put_AdvanceOnTime(This,AdvanceOnTime) ) 

#define SlideShowTransition_get_AdvanceTime(This,AdvanceTime)	\
    ( (This)->lpVtbl -> get_AdvanceTime(This,AdvanceTime) ) 

#define SlideShowTransition_put_AdvanceTime(This,AdvanceTime)	\
    ( (This)->lpVtbl -> put_AdvanceTime(This,AdvanceTime) ) 

#define SlideShowTransition_get_EntryEffect(This,EntryEffect)	\
    ( (This)->lpVtbl -> get_EntryEffect(This,EntryEffect) ) 

#define SlideShowTransition_put_EntryEffect(This,EntryEffect)	\
    ( (This)->lpVtbl -> put_EntryEffect(This,EntryEffect) ) 

#define SlideShowTransition_get_Hidden(This,Hidden)	\
    ( (This)->lpVtbl -> get_Hidden(This,Hidden) ) 

#define SlideShowTransition_put_Hidden(This,Hidden)	\
    ( (This)->lpVtbl -> put_Hidden(This,Hidden) ) 

#define SlideShowTransition_get_LoopSoundUntilNext(This,LoopSoundUntilNext)	\
    ( (This)->lpVtbl -> get_LoopSoundUntilNext(This,LoopSoundUntilNext) ) 

#define SlideShowTransition_put_LoopSoundUntilNext(This,LoopSoundUntilNext)	\
    ( (This)->lpVtbl -> put_LoopSoundUntilNext(This,LoopSoundUntilNext) ) 

#define SlideShowTransition_get_SoundEffect(This,SoundEffect)	\
    ( (This)->lpVtbl -> get_SoundEffect(This,SoundEffect) ) 

#define SlideShowTransition_get_Speed(This,Speed)	\
    ( (This)->lpVtbl -> get_Speed(This,Speed) ) 

#define SlideShowTransition_put_Speed(This,Speed)	\
    ( (This)->lpVtbl -> put_Speed(This,Speed) ) 

#define SlideShowTransition_get_Duration(This,Duration)	\
    ( (This)->lpVtbl -> get_Duration(This,Duration) ) 

#define SlideShowTransition_put_Duration(This,Duration)	\
    ( (This)->lpVtbl -> put_Duration(This,Duration) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SlideShowTransition_INTERFACE_DEFINED__ */


#ifndef __SoundEffect_INTERFACE_DEFINED__
#define __SoundEffect_INTERFACE_DEFINED__

/* interface SoundEffect */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_SoundEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493472-5A91-11CF-8700-00AA0060263B")
    SoundEffect : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ PpSoundEffectType *Type) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ PpSoundEffectType Type) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ImportFromFile( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Play( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SoundEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SoundEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SoundEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SoundEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SoundEffect * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SoundEffect * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SoundEffect * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SoundEffect * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SoundEffect * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SoundEffect * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            SoundEffect * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            SoundEffect * This,
            /* [in] */ BSTR Name);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            SoundEffect * This,
            /* [retval][out] */ PpSoundEffectType *Type);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            SoundEffect * This,
            /* [in] */ PpSoundEffectType Type);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ImportFromFile )( 
            SoundEffect * This,
            /* [in] */ BSTR FileName);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Play )( 
            SoundEffect * This);
        
        END_INTERFACE
    } SoundEffectVtbl;

    interface SoundEffect
    {
        CONST_VTBL struct SoundEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SoundEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SoundEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SoundEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SoundEffect_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SoundEffect_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SoundEffect_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SoundEffect_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SoundEffect_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define SoundEffect_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define SoundEffect_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define SoundEffect_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define SoundEffect_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define SoundEffect_put_Type(This,Type)	\
    ( (This)->lpVtbl -> put_Type(This,Type) ) 

#define SoundEffect_ImportFromFile(This,FileName)	\
    ( (This)->lpVtbl -> ImportFromFile(This,FileName) ) 

#define SoundEffect_Play(This)	\
    ( (This)->lpVtbl -> Play(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SoundEffect_INTERFACE_DEFINED__ */


#ifndef __SoundFormat_INTERFACE_DEFINED__
#define __SoundFormat_INTERFACE_DEFINED__

/* interface SoundFormat */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_SoundFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493473-5A91-11CF-8700-00AA0060263B")
    SoundFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Play( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Import( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Export( 
            /* [in] */ BSTR FileName,
            /* [retval][out] */ PpSoundFormatType *Export) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ PpSoundFormatType *Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SourceFullName( 
            /* [retval][out] */ BSTR *SourceFullName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SoundFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SoundFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SoundFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SoundFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SoundFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SoundFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SoundFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SoundFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Play )( 
            SoundFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Import )( 
            SoundFormat * This,
            /* [in] */ BSTR FileName);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Export )( 
            SoundFormat * This,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ PpSoundFormatType *Export);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            SoundFormat * This,
            /* [retval][out] */ PpSoundFormatType *Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceFullName )( 
            SoundFormat * This,
            /* [retval][out] */ BSTR *SourceFullName);
        
        END_INTERFACE
    } SoundFormatVtbl;

    interface SoundFormat
    {
        CONST_VTBL struct SoundFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SoundFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SoundFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SoundFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SoundFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SoundFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SoundFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SoundFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SoundFormat_Play(This)	\
    ( (This)->lpVtbl -> Play(This) ) 

#define SoundFormat_Import(This,FileName)	\
    ( (This)->lpVtbl -> Import(This,FileName) ) 

#define SoundFormat_Export(This,FileName,Export)	\
    ( (This)->lpVtbl -> Export(This,FileName,Export) ) 

#define SoundFormat_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define SoundFormat_get_SourceFullName(This,SourceFullName)	\
    ( (This)->lpVtbl -> get_SourceFullName(This,SourceFullName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SoundFormat_INTERFACE_DEFINED__ */


#ifndef __HeadersFooters_INTERFACE_DEFINED__
#define __HeadersFooters_INTERFACE_DEFINED__

/* interface HeadersFooters */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_HeadersFooters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493474-5A91-11CF-8700-00AA0060263B")
    HeadersFooters : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DateAndTime( 
            /* [retval][out] */ HeaderFooter **DateAndTime) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideNumber( 
            /* [retval][out] */ HeaderFooter **SlideNumber) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Header( 
            /* [retval][out] */ HeaderFooter **Header) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Footer( 
            /* [retval][out] */ HeaderFooter **Footer) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayOnTitleSlide( 
            /* [retval][out] */ MsoTriState *DisplayOnTitleSlide) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayOnTitleSlide( 
            /* [in] */ MsoTriState DisplayOnTitleSlide) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HeadersFootersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HeadersFooters * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HeadersFooters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HeadersFooters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HeadersFooters * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HeadersFooters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HeadersFooters * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HeadersFooters * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            HeadersFooters * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HeadersFooters * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DateAndTime )( 
            HeadersFooters * This,
            /* [retval][out] */ HeaderFooter **DateAndTime);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideNumber )( 
            HeadersFooters * This,
            /* [retval][out] */ HeaderFooter **SlideNumber);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Header )( 
            HeadersFooters * This,
            /* [retval][out] */ HeaderFooter **Header);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Footer )( 
            HeadersFooters * This,
            /* [retval][out] */ HeaderFooter **Footer);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayOnTitleSlide )( 
            HeadersFooters * This,
            /* [retval][out] */ MsoTriState *DisplayOnTitleSlide);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayOnTitleSlide )( 
            HeadersFooters * This,
            /* [in] */ MsoTriState DisplayOnTitleSlide);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            HeadersFooters * This);
        
        END_INTERFACE
    } HeadersFootersVtbl;

    interface HeadersFooters
    {
        CONST_VTBL struct HeadersFootersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HeadersFooters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HeadersFooters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HeadersFooters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HeadersFooters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HeadersFooters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HeadersFooters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HeadersFooters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HeadersFooters_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define HeadersFooters_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define HeadersFooters_get_DateAndTime(This,DateAndTime)	\
    ( (This)->lpVtbl -> get_DateAndTime(This,DateAndTime) ) 

#define HeadersFooters_get_SlideNumber(This,SlideNumber)	\
    ( (This)->lpVtbl -> get_SlideNumber(This,SlideNumber) ) 

#define HeadersFooters_get_Header(This,Header)	\
    ( (This)->lpVtbl -> get_Header(This,Header) ) 

#define HeadersFooters_get_Footer(This,Footer)	\
    ( (This)->lpVtbl -> get_Footer(This,Footer) ) 

#define HeadersFooters_get_DisplayOnTitleSlide(This,DisplayOnTitleSlide)	\
    ( (This)->lpVtbl -> get_DisplayOnTitleSlide(This,DisplayOnTitleSlide) ) 

#define HeadersFooters_put_DisplayOnTitleSlide(This,DisplayOnTitleSlide)	\
    ( (This)->lpVtbl -> put_DisplayOnTitleSlide(This,DisplayOnTitleSlide) ) 

#define HeadersFooters_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HeadersFooters_INTERFACE_DEFINED__ */


#ifndef __Placeholders_INTERFACE_DEFINED__
#define __Placeholders_INTERFACE_DEFINED__

/* interface Placeholders */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Placeholders;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493476-5A91-11CF-8700-00AA0060263B")
    Placeholders : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ Shape **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindByName( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Shape **FindByName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PlaceholdersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Placeholders * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Placeholders * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Placeholders * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Placeholders * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Placeholders * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Placeholders * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Placeholders * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Placeholders * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            Placeholders * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Placeholders * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Placeholders * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Placeholders * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Placeholders * This,
            /* [in] */ int Index,
            /* [retval][out] */ Shape **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindByName )( 
            Placeholders * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Shape **FindByName);
        
        END_INTERFACE
    } PlaceholdersVtbl;

    interface Placeholders
    {
        CONST_VTBL struct PlaceholdersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Placeholders_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Placeholders_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Placeholders_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Placeholders_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Placeholders_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Placeholders_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Placeholders_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Placeholders_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Placeholders__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define Placeholders_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define Placeholders_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Placeholders_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Placeholders_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define Placeholders_FindByName(This,Index,FindByName)	\
    ( (This)->lpVtbl -> FindByName(This,Index,FindByName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Placeholders_INTERFACE_DEFINED__ */


#ifndef __PlaceholderFormat_INTERFACE_DEFINED__
#define __PlaceholderFormat_INTERFACE_DEFINED__

/* interface PlaceholderFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_PlaceholderFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493477-5A91-11CF-8700-00AA0060263B")
    PlaceholderFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ PpPlaceholderType *Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContainedType( 
            /* [retval][out] */ MsoShapeType *ContainedType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PlaceholderFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PlaceholderFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PlaceholderFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PlaceholderFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PlaceholderFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PlaceholderFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PlaceholderFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PlaceholderFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            PlaceholderFormat * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PlaceholderFormat * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            PlaceholderFormat * This,
            /* [retval][out] */ PpPlaceholderType *Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            PlaceholderFormat * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            PlaceholderFormat * This,
            /* [in] */ BSTR Name);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContainedType )( 
            PlaceholderFormat * This,
            /* [retval][out] */ MsoShapeType *ContainedType);
        
        END_INTERFACE
    } PlaceholderFormatVtbl;

    interface PlaceholderFormat
    {
        CONST_VTBL struct PlaceholderFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PlaceholderFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PlaceholderFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PlaceholderFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PlaceholderFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PlaceholderFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PlaceholderFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PlaceholderFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PlaceholderFormat_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define PlaceholderFormat_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define PlaceholderFormat_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define PlaceholderFormat_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define PlaceholderFormat_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define PlaceholderFormat_get_ContainedType(This,ContainedType)	\
    ( (This)->lpVtbl -> get_ContainedType(This,ContainedType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PlaceholderFormat_INTERFACE_DEFINED__ */


#ifndef __FreeformBuilder_INTERFACE_DEFINED__
#define __FreeformBuilder_INTERFACE_DEFINED__

/* interface FreeformBuilder */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_FreeformBuilder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493478-5A91-11CF-8700-00AA0060263B")
    FreeformBuilder : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNodes( 
            /* [in] */ MsoSegmentType SegmentType,
            /* [in] */ MsoEditingType EditingType,
            /* [in] */ single X1,
            /* [in] */ single Y1,
            /* [defaultvalue][optional][in] */ single X2 = 0,
            /* [defaultvalue][optional][in] */ single Y2 = 0,
            /* [defaultvalue][optional][in] */ single X3 = 0,
            /* [defaultvalue][optional][in] */ single Y3 = 0) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToShape( 
            /* [retval][out] */ Shape **Freeform) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FreeformBuilderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FreeformBuilder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FreeformBuilder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FreeformBuilder * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FreeformBuilder * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FreeformBuilder * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FreeformBuilder * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FreeformBuilder * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            FreeformBuilder * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            FreeformBuilder * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FreeformBuilder * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNodes )( 
            FreeformBuilder * This,
            /* [in] */ MsoSegmentType SegmentType,
            /* [in] */ MsoEditingType EditingType,
            /* [in] */ single X1,
            /* [in] */ single Y1,
            /* [defaultvalue][optional][in] */ single X2,
            /* [defaultvalue][optional][in] */ single Y2,
            /* [defaultvalue][optional][in] */ single X3,
            /* [defaultvalue][optional][in] */ single Y3);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToShape )( 
            FreeformBuilder * This,
            /* [retval][out] */ Shape **Freeform);
        
        END_INTERFACE
    } FreeformBuilderVtbl;

    interface FreeformBuilder
    {
        CONST_VTBL struct FreeformBuilderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FreeformBuilder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FreeformBuilder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FreeformBuilder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FreeformBuilder_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FreeformBuilder_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FreeformBuilder_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FreeformBuilder_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FreeformBuilder_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define FreeformBuilder_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define FreeformBuilder_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define FreeformBuilder_AddNodes(This,SegmentType,EditingType,X1,Y1,X2,Y2,X3,Y3)	\
    ( (This)->lpVtbl -> AddNodes(This,SegmentType,EditingType,X1,Y1,X2,Y2,X3,Y3) ) 

#define FreeformBuilder_ConvertToShape(This,Freeform)	\
    ( (This)->lpVtbl -> ConvertToShape(This,Freeform) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FreeformBuilder_INTERFACE_DEFINED__ */


#ifndef __ShapeRange_INTERFACE_DEFINED__
#define __ShapeRange_INTERFACE_DEFINED__

/* interface ShapeRange */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ShapeRange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149347A-5A91-11CF-8700-00AA0060263B")
    ShapeRange : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Apply( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Flip( 
            /* [in] */ MsoFlipCmd FlipCmd) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementLeft( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementRotation( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementTop( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PickUp( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RerouteConnections( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScaleHeight( 
            /* [in] */ single Factor,
            /* [in] */ MsoTriState RelativeToOriginalSize,
            /* [defaultvalue][optional][in] */ MsoScaleFrom fScale = msoScaleFromTopLeft) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScaleWidth( 
            /* [in] */ single Factor,
            /* [in] */ MsoTriState RelativeToOriginalSize,
            /* [defaultvalue][optional][in] */ MsoScaleFrom fScale = msoScaleFromTopLeft) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetShapesDefaultProperties( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Ungroup( 
            /* [retval][out] */ ShapeRange **Ungroup) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ZOrder( 
            /* [in] */ MsoZOrderCmd ZOrderCmd) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Adjustments( 
            /* [retval][out] */ Adjustments **Adjustments) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoShapeType( 
            /* [retval][out] */ MsoAutoShapeType *AutoShapeType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoShapeType( 
            /* [in] */ MsoAutoShapeType AutoShapeType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BlackWhiteMode( 
            /* [retval][out] */ MsoBlackWhiteMode *BlackWhiteMode) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BlackWhiteMode( 
            /* [in] */ MsoBlackWhiteMode BlackWhiteMode) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Callout( 
            /* [retval][out] */ CalloutFormat **Callout) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConnectionSiteCount( 
            /* [retval][out] */ int *ConnectionSiteCount) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Connector( 
            /* [retval][out] */ MsoTriState *Connector) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConnectorFormat( 
            /* [retval][out] */ ConnectorFormat **ConnectorFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ FillFormat **Fill) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GroupItems( 
            /* [retval][out] */ GroupShapes **GroupItems) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ single *Height) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ single Height) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalFlip( 
            /* [retval][out] */ MsoTriState *HorizontalFlip) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ single *Left) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ single Left) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Line( 
            /* [retval][out] */ LineFormat **Line) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LockAspectRatio( 
            /* [retval][out] */ MsoTriState *LockAspectRatio) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LockAspectRatio( 
            /* [in] */ MsoTriState LockAspectRatio) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Nodes( 
            /* [retval][out] */ ShapeNodes **Nodes) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
            /* [retval][out] */ single *Rotation) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
            /* [in] */ single Rotation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureFormat( 
            /* [retval][out] */ PictureFormat **Picture) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ ShadowFormat **Shadow) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextEffect( 
            /* [retval][out] */ TextEffectFormat **TextEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextFrame( 
            /* [retval][out] */ TextFrame **TextFrame) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ThreeD( 
            /* [retval][out] */ ThreeDFormat **ThreeD) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ single *Top) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ single Top) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoShapeType *Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalFlip( 
            /* [retval][out] */ MsoTriState *VerticalFlip) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Vertices( 
            /* [retval][out] */ VARIANT *Vertices) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ MsoTriState *Visible) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ MsoTriState Visible) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ single *Width) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ single Width) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ZOrderPosition( 
            /* [retval][out] */ int *ZOrderPosition) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OLEFormat( 
            /* [retval][out] */ OLEFormat **OLEFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinkFormat( 
            /* [retval][out] */ LinkFormat **LinkFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlaceholderFormat( 
            /* [retval][out] */ PlaceholderFormat **PlaceholderFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnimationSettings( 
            /* [retval][out] */ AnimationSettings **AnimationSettings) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActionSettings( 
            /* [retval][out] */ ActionSettings **ActionSettings) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Tags( 
            /* [retval][out] */ Tags **Tags) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [defaultvalue][optional][in] */ MsoTriState Replace = msoTrue) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Duplicate( 
            /* [retval][out] */ ShapeRange **Duplicate) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MediaType( 
            /* [retval][out] */ PpMediaType *MediaType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasTextFrame( 
            /* [retval][out] */ MsoTriState *HasTextFrame) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_SoundFormat( 
            /* [retval][out] */ SoundFormat **SoundFormat) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Shape **Item) = 0;
        
        virtual /* [helpcontext][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **_NewEnum) = 0;
        
        virtual /* [helpcontext][restricted][id] */ HRESULT STDMETHODCALLTYPE _Index( 
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Group( 
            /* [retval][out] */ Shape **Group) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Regroup( 
            /* [retval][out] */ Shape **Regroup) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Align( 
            /* [in] */ MsoAlignCmd AlignCmd,
            /* [in] */ MsoTriState RelativeTo) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Distribute( 
            /* [in] */ MsoDistributeCmd DistributeCmd,
            /* [in] */ MsoTriState RelativeTo) = 0;
        
        virtual /* [helpcontext][restricted][id] */ HRESULT STDMETHODCALLTYPE GetPolygonalRepresentation( 
            /* [in] */ unsigned long maxPointsInBuffer,
            /* [in] */ single *pPoints,
            /* [out] */ unsigned long *numPointsInPolygon,
            /* [out] */ MsoTriState *IsOpen) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Script( 
            /* [retval][out] */ /* external definition not present */ Script **Script) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AlternativeText( 
            /* [retval][out] */ BSTR *AlternativeText) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AlternativeText( 
            /* [in] */ BSTR AlternativeText) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasTable( 
            /* [retval][out] */ MsoTriState *HasTable) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Table( 
            /* [retval][out] */ Table **Table) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Export( 
            /* [in] */ BSTR PathName,
            /* [in] */ PpShapeFormat Filter,
            /* [defaultvalue][optional][in] */ int ScaleWidth = 0,
            /* [defaultvalue][optional][in] */ int ScaleHeight = 0,
            /* [defaultvalue][optional][in] */ PpExportMode ExportMode = ppRelativeToSlide) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasDiagram( 
            /* [retval][out] */ MsoTriState *pHasDiagram) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Diagram( 
            /* [retval][out] */ Diagram **Diagram) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasDiagramNode( 
            /* [retval][out] */ MsoTriState *pHasDiagram) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_DiagramNode( 
            /* [retval][out] */ DiagramNode **DiagramNode) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Child( 
            /* [retval][out] */ MsoTriState *Child) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ParentGroup( 
            /* [retval][out] */ Shape **Parent) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanvasItems( 
            /* [retval][out] */ CanvasShapes **CanvasShapes) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ int *pid) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE CanvasCropLeft( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE CanvasCropTop( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE CanvasCropRight( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE CanvasCropBottom( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_RTF( 
            /* [in] */ BSTR rhs) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomerData( 
            /* [retval][out] */ CustomerData **CustomerData) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextFrame2( 
            /* [retval][out] */ TextFrame2 **Frame) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasChart( 
            /* [retval][out] */ MsoTriState *pHasChart) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShapeStyle( 
            /* [retval][out] */ MsoShapeStyleIndex *ShapeStyle) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShapeStyle( 
            /* [in] */ MsoShapeStyleIndex ShapeStyle) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundStyle( 
            /* [retval][out] */ MsoBackgroundStyleIndex *BackgroundStyle) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundStyle( 
            /* [in] */ MsoBackgroundStyleIndex BackgroundStyle) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SoftEdge( 
            /* [retval][out] */ /* external definition not present */ SoftEdgeFormat **SoftEdge) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Glow( 
            /* [retval][out] */ /* external definition not present */ GlowFormat **Glow) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Reflection( 
            /* [retval][out] */ /* external definition not present */ ReflectionFormat **Reflection) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Chart( 
            /* [retval][out] */ Chart **Chart) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasSmartArt( 
            /* [retval][out] */ MsoTriState *HasSmartArt) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartArt( 
            /* [retval][out] */ /* external definition not present */ SmartArt **SmartArt) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertTextToSmartArt( 
            /* [in] */ /* external definition not present */ SmartArtLayout *Layout) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Title( 
            /* [retval][out] */ BSTR *Title) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Title( 
            /* [in] */ BSTR Title) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MediaFormat( 
            /* [retval][out] */ MediaFormat **MediaFormat) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PickupAnimation( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyAnimation( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UpgradeMedia( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MergeShapes( 
            /* [in] */ MsoMergeCmd MergeCmd,
            /* [defaultvalue][optional][in] */ Shape *PrimaryShape = 0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ShapeRangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ShapeRange * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ShapeRange * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ShapeRange * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ShapeRange * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ShapeRange * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ShapeRange * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ShapeRange * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ShapeRange * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ShapeRange * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ShapeRange * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Apply )( 
            ShapeRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ShapeRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Flip )( 
            ShapeRange * This,
            /* [in] */ MsoFlipCmd FlipCmd);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementLeft )( 
            ShapeRange * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementRotation )( 
            ShapeRange * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementTop )( 
            ShapeRange * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PickUp )( 
            ShapeRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RerouteConnections )( 
            ShapeRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleHeight )( 
            ShapeRange * This,
            /* [in] */ single Factor,
            /* [in] */ MsoTriState RelativeToOriginalSize,
            /* [defaultvalue][optional][in] */ MsoScaleFrom fScale);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleWidth )( 
            ShapeRange * This,
            /* [in] */ single Factor,
            /* [in] */ MsoTriState RelativeToOriginalSize,
            /* [defaultvalue][optional][in] */ MsoScaleFrom fScale);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetShapesDefaultProperties )( 
            ShapeRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Ungroup )( 
            ShapeRange * This,
            /* [retval][out] */ ShapeRange **Ungroup);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ZOrder )( 
            ShapeRange * This,
            /* [in] */ MsoZOrderCmd ZOrderCmd);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Adjustments )( 
            ShapeRange * This,
            /* [retval][out] */ Adjustments **Adjustments);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoShapeType )( 
            ShapeRange * This,
            /* [retval][out] */ MsoAutoShapeType *AutoShapeType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoShapeType )( 
            ShapeRange * This,
            /* [in] */ MsoAutoShapeType AutoShapeType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlackWhiteMode )( 
            ShapeRange * This,
            /* [retval][out] */ MsoBlackWhiteMode *BlackWhiteMode);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlackWhiteMode )( 
            ShapeRange * This,
            /* [in] */ MsoBlackWhiteMode BlackWhiteMode);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Callout )( 
            ShapeRange * This,
            /* [retval][out] */ CalloutFormat **Callout);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectionSiteCount )( 
            ShapeRange * This,
            /* [retval][out] */ int *ConnectionSiteCount);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Connector )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *Connector);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectorFormat )( 
            ShapeRange * This,
            /* [retval][out] */ ConnectorFormat **ConnectorFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            ShapeRange * This,
            /* [retval][out] */ FillFormat **Fill);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GroupItems )( 
            ShapeRange * This,
            /* [retval][out] */ GroupShapes **GroupItems);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            ShapeRange * This,
            /* [retval][out] */ single *Height);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            ShapeRange * This,
            /* [in] */ single Height);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalFlip )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *HorizontalFlip);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            ShapeRange * This,
            /* [retval][out] */ single *Left);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            ShapeRange * This,
            /* [in] */ single Left);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            ShapeRange * This,
            /* [retval][out] */ LineFormat **Line);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LockAspectRatio )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *LockAspectRatio);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LockAspectRatio )( 
            ShapeRange * This,
            /* [in] */ MsoTriState LockAspectRatio);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ShapeRange * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ShapeRange * This,
            /* [in] */ BSTR Name);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Nodes )( 
            ShapeRange * This,
            /* [retval][out] */ ShapeNodes **Nodes);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            ShapeRange * This,
            /* [retval][out] */ single *Rotation);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            ShapeRange * This,
            /* [in] */ single Rotation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureFormat )( 
            ShapeRange * This,
            /* [retval][out] */ PictureFormat **Picture);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            ShapeRange * This,
            /* [retval][out] */ ShadowFormat **Shadow);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextEffect )( 
            ShapeRange * This,
            /* [retval][out] */ TextEffectFormat **TextEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFrame )( 
            ShapeRange * This,
            /* [retval][out] */ TextFrame **TextFrame);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ThreeD )( 
            ShapeRange * This,
            /* [retval][out] */ ThreeDFormat **ThreeD);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            ShapeRange * This,
            /* [retval][out] */ single *Top);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            ShapeRange * This,
            /* [in] */ single Top);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ShapeRange * This,
            /* [retval][out] */ MsoShapeType *Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalFlip )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *VerticalFlip);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Vertices )( 
            ShapeRange * This,
            /* [retval][out] */ VARIANT *Vertices);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *Visible);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            ShapeRange * This,
            /* [in] */ MsoTriState Visible);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            ShapeRange * This,
            /* [retval][out] */ single *Width);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            ShapeRange * This,
            /* [in] */ single Width);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZOrderPosition )( 
            ShapeRange * This,
            /* [retval][out] */ int *ZOrderPosition);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OLEFormat )( 
            ShapeRange * This,
            /* [retval][out] */ OLEFormat **OLEFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinkFormat )( 
            ShapeRange * This,
            /* [retval][out] */ LinkFormat **LinkFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlaceholderFormat )( 
            ShapeRange * This,
            /* [retval][out] */ PlaceholderFormat **PlaceholderFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnimationSettings )( 
            ShapeRange * This,
            /* [retval][out] */ AnimationSettings **AnimationSettings);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActionSettings )( 
            ShapeRange * This,
            /* [retval][out] */ ActionSettings **ActionSettings);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Tags )( 
            ShapeRange * This,
            /* [retval][out] */ Tags **Tags);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            ShapeRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            ShapeRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            ShapeRange * This,
            /* [defaultvalue][optional][in] */ MsoTriState Replace);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Duplicate )( 
            ShapeRange * This,
            /* [retval][out] */ ShapeRange **Duplicate);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MediaType )( 
            ShapeRange * This,
            /* [retval][out] */ PpMediaType *MediaType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasTextFrame )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *HasTextFrame);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SoundFormat )( 
            ShapeRange * This,
            /* [retval][out] */ SoundFormat **SoundFormat);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ShapeRange * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Shape **Item);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ShapeRange * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            ShapeRange * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ShapeRange * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Group )( 
            ShapeRange * This,
            /* [retval][out] */ Shape **Group);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Regroup )( 
            ShapeRange * This,
            /* [retval][out] */ Shape **Regroup);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Align )( 
            ShapeRange * This,
            /* [in] */ MsoAlignCmd AlignCmd,
            /* [in] */ MsoTriState RelativeTo);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Distribute )( 
            ShapeRange * This,
            /* [in] */ MsoDistributeCmd DistributeCmd,
            /* [in] */ MsoTriState RelativeTo);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *GetPolygonalRepresentation )( 
            ShapeRange * This,
            /* [in] */ unsigned long maxPointsInBuffer,
            /* [in] */ single *pPoints,
            /* [out] */ unsigned long *numPointsInPolygon,
            /* [out] */ MsoTriState *IsOpen);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Script )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ Script **Script);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AlternativeText )( 
            ShapeRange * This,
            /* [retval][out] */ BSTR *AlternativeText);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AlternativeText )( 
            ShapeRange * This,
            /* [in] */ BSTR AlternativeText);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasTable )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *HasTable);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Table )( 
            ShapeRange * This,
            /* [retval][out] */ Table **Table);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Export )( 
            ShapeRange * This,
            /* [in] */ BSTR PathName,
            /* [in] */ PpShapeFormat Filter,
            /* [defaultvalue][optional][in] */ int ScaleWidth,
            /* [defaultvalue][optional][in] */ int ScaleHeight,
            /* [defaultvalue][optional][in] */ PpExportMode ExportMode);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasDiagram )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *pHasDiagram);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Diagram )( 
            ShapeRange * This,
            /* [retval][out] */ Diagram **Diagram);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasDiagramNode )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *pHasDiagram);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DiagramNode )( 
            ShapeRange * This,
            /* [retval][out] */ DiagramNode **DiagramNode);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Child )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *Child);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ParentGroup )( 
            ShapeRange * This,
            /* [retval][out] */ Shape **Parent);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanvasItems )( 
            ShapeRange * This,
            /* [retval][out] */ CanvasShapes **CanvasShapes);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            ShapeRange * This,
            /* [retval][out] */ int *pid);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *CanvasCropLeft )( 
            ShapeRange * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *CanvasCropTop )( 
            ShapeRange * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *CanvasCropRight )( 
            ShapeRange * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *CanvasCropBottom )( 
            ShapeRange * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RTF )( 
            ShapeRange * This,
            /* [in] */ BSTR rhs);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomerData )( 
            ShapeRange * This,
            /* [retval][out] */ CustomerData **CustomerData);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFrame2 )( 
            ShapeRange * This,
            /* [retval][out] */ TextFrame2 **Frame);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChart )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *pHasChart);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShapeStyle )( 
            ShapeRange * This,
            /* [retval][out] */ MsoShapeStyleIndex *ShapeStyle);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShapeStyle )( 
            ShapeRange * This,
            /* [in] */ MsoShapeStyleIndex ShapeStyle);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundStyle )( 
            ShapeRange * This,
            /* [retval][out] */ MsoBackgroundStyleIndex *BackgroundStyle);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundStyle )( 
            ShapeRange * This,
            /* [in] */ MsoBackgroundStyleIndex BackgroundStyle);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SoftEdge )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ SoftEdgeFormat **SoftEdge);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Glow )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ GlowFormat **Glow);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Reflection )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ ReflectionFormat **Reflection);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Chart )( 
            ShapeRange * This,
            /* [retval][out] */ Chart **Chart);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasSmartArt )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *HasSmartArt);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartArt )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ SmartArt **SmartArt);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertTextToSmartArt )( 
            ShapeRange * This,
            /* [in] */ /* external definition not present */ SmartArtLayout *Layout);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            ShapeRange * This,
            /* [retval][out] */ BSTR *Title);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Title )( 
            ShapeRange * This,
            /* [in] */ BSTR Title);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MediaFormat )( 
            ShapeRange * This,
            /* [retval][out] */ MediaFormat **MediaFormat);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PickupAnimation )( 
            ShapeRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyAnimation )( 
            ShapeRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UpgradeMedia )( 
            ShapeRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MergeShapes )( 
            ShapeRange * This,
            /* [in] */ MsoMergeCmd MergeCmd,
            /* [defaultvalue][optional][in] */ Shape *PrimaryShape);
        
        END_INTERFACE
    } ShapeRangeVtbl;

    interface ShapeRange
    {
        CONST_VTBL struct ShapeRangeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ShapeRange_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ShapeRange_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ShapeRange_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ShapeRange_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ShapeRange_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ShapeRange_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ShapeRange_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ShapeRange_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define ShapeRange_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define ShapeRange_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ShapeRange_Apply(This)	\
    ( (This)->lpVtbl -> Apply(This) ) 

#define ShapeRange_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define ShapeRange_Flip(This,FlipCmd)	\
    ( (This)->lpVtbl -> Flip(This,FlipCmd) ) 

#define ShapeRange_IncrementLeft(This,Increment)	\
    ( (This)->lpVtbl -> IncrementLeft(This,Increment) ) 

#define ShapeRange_IncrementRotation(This,Increment)	\
    ( (This)->lpVtbl -> IncrementRotation(This,Increment) ) 

#define ShapeRange_IncrementTop(This,Increment)	\
    ( (This)->lpVtbl -> IncrementTop(This,Increment) ) 

#define ShapeRange_PickUp(This)	\
    ( (This)->lpVtbl -> PickUp(This) ) 

#define ShapeRange_RerouteConnections(This)	\
    ( (This)->lpVtbl -> RerouteConnections(This) ) 

#define ShapeRange_ScaleHeight(This,Factor,RelativeToOriginalSize,fScale)	\
    ( (This)->lpVtbl -> ScaleHeight(This,Factor,RelativeToOriginalSize,fScale) ) 

#define ShapeRange_ScaleWidth(This,Factor,RelativeToOriginalSize,fScale)	\
    ( (This)->lpVtbl -> ScaleWidth(This,Factor,RelativeToOriginalSize,fScale) ) 

#define ShapeRange_SetShapesDefaultProperties(This)	\
    ( (This)->lpVtbl -> SetShapesDefaultProperties(This) ) 

#define ShapeRange_Ungroup(This,Ungroup)	\
    ( (This)->lpVtbl -> Ungroup(This,Ungroup) ) 

#define ShapeRange_ZOrder(This,ZOrderCmd)	\
    ( (This)->lpVtbl -> ZOrder(This,ZOrderCmd) ) 

#define ShapeRange_get_Adjustments(This,Adjustments)	\
    ( (This)->lpVtbl -> get_Adjustments(This,Adjustments) ) 

#define ShapeRange_get_AutoShapeType(This,AutoShapeType)	\
    ( (This)->lpVtbl -> get_AutoShapeType(This,AutoShapeType) ) 

#define ShapeRange_put_AutoShapeType(This,AutoShapeType)	\
    ( (This)->lpVtbl -> put_AutoShapeType(This,AutoShapeType) ) 

#define ShapeRange_get_BlackWhiteMode(This,BlackWhiteMode)	\
    ( (This)->lpVtbl -> get_BlackWhiteMode(This,BlackWhiteMode) ) 

#define ShapeRange_put_BlackWhiteMode(This,BlackWhiteMode)	\
    ( (This)->lpVtbl -> put_BlackWhiteMode(This,BlackWhiteMode) ) 

#define ShapeRange_get_Callout(This,Callout)	\
    ( (This)->lpVtbl -> get_Callout(This,Callout) ) 

#define ShapeRange_get_ConnectionSiteCount(This,ConnectionSiteCount)	\
    ( (This)->lpVtbl -> get_ConnectionSiteCount(This,ConnectionSiteCount) ) 

#define ShapeRange_get_Connector(This,Connector)	\
    ( (This)->lpVtbl -> get_Connector(This,Connector) ) 

#define ShapeRange_get_ConnectorFormat(This,ConnectorFormat)	\
    ( (This)->lpVtbl -> get_ConnectorFormat(This,ConnectorFormat) ) 

#define ShapeRange_get_Fill(This,Fill)	\
    ( (This)->lpVtbl -> get_Fill(This,Fill) ) 

#define ShapeRange_get_GroupItems(This,GroupItems)	\
    ( (This)->lpVtbl -> get_GroupItems(This,GroupItems) ) 

#define ShapeRange_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define ShapeRange_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define ShapeRange_get_HorizontalFlip(This,HorizontalFlip)	\
    ( (This)->lpVtbl -> get_HorizontalFlip(This,HorizontalFlip) ) 

#define ShapeRange_get_Left(This,Left)	\
    ( (This)->lpVtbl -> get_Left(This,Left) ) 

#define ShapeRange_put_Left(This,Left)	\
    ( (This)->lpVtbl -> put_Left(This,Left) ) 

#define ShapeRange_get_Line(This,Line)	\
    ( (This)->lpVtbl -> get_Line(This,Line) ) 

#define ShapeRange_get_LockAspectRatio(This,LockAspectRatio)	\
    ( (This)->lpVtbl -> get_LockAspectRatio(This,LockAspectRatio) ) 

#define ShapeRange_put_LockAspectRatio(This,LockAspectRatio)	\
    ( (This)->lpVtbl -> put_LockAspectRatio(This,LockAspectRatio) ) 

#define ShapeRange_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define ShapeRange_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define ShapeRange_get_Nodes(This,Nodes)	\
    ( (This)->lpVtbl -> get_Nodes(This,Nodes) ) 

#define ShapeRange_get_Rotation(This,Rotation)	\
    ( (This)->lpVtbl -> get_Rotation(This,Rotation) ) 

#define ShapeRange_put_Rotation(This,Rotation)	\
    ( (This)->lpVtbl -> put_Rotation(This,Rotation) ) 

#define ShapeRange_get_PictureFormat(This,Picture)	\
    ( (This)->lpVtbl -> get_PictureFormat(This,Picture) ) 

#define ShapeRange_get_Shadow(This,Shadow)	\
    ( (This)->lpVtbl -> get_Shadow(This,Shadow) ) 

#define ShapeRange_get_TextEffect(This,TextEffect)	\
    ( (This)->lpVtbl -> get_TextEffect(This,TextEffect) ) 

#define ShapeRange_get_TextFrame(This,TextFrame)	\
    ( (This)->lpVtbl -> get_TextFrame(This,TextFrame) ) 

#define ShapeRange_get_ThreeD(This,ThreeD)	\
    ( (This)->lpVtbl -> get_ThreeD(This,ThreeD) ) 

#define ShapeRange_get_Top(This,Top)	\
    ( (This)->lpVtbl -> get_Top(This,Top) ) 

#define ShapeRange_put_Top(This,Top)	\
    ( (This)->lpVtbl -> put_Top(This,Top) ) 

#define ShapeRange_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define ShapeRange_get_VerticalFlip(This,VerticalFlip)	\
    ( (This)->lpVtbl -> get_VerticalFlip(This,VerticalFlip) ) 

#define ShapeRange_get_Vertices(This,Vertices)	\
    ( (This)->lpVtbl -> get_Vertices(This,Vertices) ) 

#define ShapeRange_get_Visible(This,Visible)	\
    ( (This)->lpVtbl -> get_Visible(This,Visible) ) 

#define ShapeRange_put_Visible(This,Visible)	\
    ( (This)->lpVtbl -> put_Visible(This,Visible) ) 

#define ShapeRange_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define ShapeRange_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#define ShapeRange_get_ZOrderPosition(This,ZOrderPosition)	\
    ( (This)->lpVtbl -> get_ZOrderPosition(This,ZOrderPosition) ) 

#define ShapeRange_get_OLEFormat(This,OLEFormat)	\
    ( (This)->lpVtbl -> get_OLEFormat(This,OLEFormat) ) 

#define ShapeRange_get_LinkFormat(This,LinkFormat)	\
    ( (This)->lpVtbl -> get_LinkFormat(This,LinkFormat) ) 

#define ShapeRange_get_PlaceholderFormat(This,PlaceholderFormat)	\
    ( (This)->lpVtbl -> get_PlaceholderFormat(This,PlaceholderFormat) ) 

#define ShapeRange_get_AnimationSettings(This,AnimationSettings)	\
    ( (This)->lpVtbl -> get_AnimationSettings(This,AnimationSettings) ) 

#define ShapeRange_get_ActionSettings(This,ActionSettings)	\
    ( (This)->lpVtbl -> get_ActionSettings(This,ActionSettings) ) 

#define ShapeRange_get_Tags(This,Tags)	\
    ( (This)->lpVtbl -> get_Tags(This,Tags) ) 

#define ShapeRange_Cut(This)	\
    ( (This)->lpVtbl -> Cut(This) ) 

#define ShapeRange_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define ShapeRange_Select(This,Replace)	\
    ( (This)->lpVtbl -> Select(This,Replace) ) 

#define ShapeRange_Duplicate(This,Duplicate)	\
    ( (This)->lpVtbl -> Duplicate(This,Duplicate) ) 

#define ShapeRange_get_MediaType(This,MediaType)	\
    ( (This)->lpVtbl -> get_MediaType(This,MediaType) ) 

#define ShapeRange_get_HasTextFrame(This,HasTextFrame)	\
    ( (This)->lpVtbl -> get_HasTextFrame(This,HasTextFrame) ) 

#define ShapeRange_get_SoundFormat(This,SoundFormat)	\
    ( (This)->lpVtbl -> get_SoundFormat(This,SoundFormat) ) 

#define ShapeRange_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define ShapeRange_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define ShapeRange__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define ShapeRange_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 

#define ShapeRange_Group(This,Group)	\
    ( (This)->lpVtbl -> Group(This,Group) ) 

#define ShapeRange_Regroup(This,Regroup)	\
    ( (This)->lpVtbl -> Regroup(This,Regroup) ) 

#define ShapeRange_Align(This,AlignCmd,RelativeTo)	\
    ( (This)->lpVtbl -> Align(This,AlignCmd,RelativeTo) ) 

#define ShapeRange_Distribute(This,DistributeCmd,RelativeTo)	\
    ( (This)->lpVtbl -> Distribute(This,DistributeCmd,RelativeTo) ) 

#define ShapeRange_GetPolygonalRepresentation(This,maxPointsInBuffer,pPoints,numPointsInPolygon,IsOpen)	\
    ( (This)->lpVtbl -> GetPolygonalRepresentation(This,maxPointsInBuffer,pPoints,numPointsInPolygon,IsOpen) ) 

#define ShapeRange_get_Script(This,Script)	\
    ( (This)->lpVtbl -> get_Script(This,Script) ) 

#define ShapeRange_get_AlternativeText(This,AlternativeText)	\
    ( (This)->lpVtbl -> get_AlternativeText(This,AlternativeText) ) 

#define ShapeRange_put_AlternativeText(This,AlternativeText)	\
    ( (This)->lpVtbl -> put_AlternativeText(This,AlternativeText) ) 

#define ShapeRange_get_HasTable(This,HasTable)	\
    ( (This)->lpVtbl -> get_HasTable(This,HasTable) ) 

#define ShapeRange_get_Table(This,Table)	\
    ( (This)->lpVtbl -> get_Table(This,Table) ) 

#define ShapeRange_Export(This,PathName,Filter,ScaleWidth,ScaleHeight,ExportMode)	\
    ( (This)->lpVtbl -> Export(This,PathName,Filter,ScaleWidth,ScaleHeight,ExportMode) ) 

#define ShapeRange_get_HasDiagram(This,pHasDiagram)	\
    ( (This)->lpVtbl -> get_HasDiagram(This,pHasDiagram) ) 

#define ShapeRange_get_Diagram(This,Diagram)	\
    ( (This)->lpVtbl -> get_Diagram(This,Diagram) ) 

#define ShapeRange_get_HasDiagramNode(This,pHasDiagram)	\
    ( (This)->lpVtbl -> get_HasDiagramNode(This,pHasDiagram) ) 

#define ShapeRange_get_DiagramNode(This,DiagramNode)	\
    ( (This)->lpVtbl -> get_DiagramNode(This,DiagramNode) ) 

#define ShapeRange_get_Child(This,Child)	\
    ( (This)->lpVtbl -> get_Child(This,Child) ) 

#define ShapeRange_get_ParentGroup(This,Parent)	\
    ( (This)->lpVtbl -> get_ParentGroup(This,Parent) ) 

#define ShapeRange_get_CanvasItems(This,CanvasShapes)	\
    ( (This)->lpVtbl -> get_CanvasItems(This,CanvasShapes) ) 

#define ShapeRange_get_Id(This,pid)	\
    ( (This)->lpVtbl -> get_Id(This,pid) ) 

#define ShapeRange_CanvasCropLeft(This,Increment)	\
    ( (This)->lpVtbl -> CanvasCropLeft(This,Increment) ) 

#define ShapeRange_CanvasCropTop(This,Increment)	\
    ( (This)->lpVtbl -> CanvasCropTop(This,Increment) ) 

#define ShapeRange_CanvasCropRight(This,Increment)	\
    ( (This)->lpVtbl -> CanvasCropRight(This,Increment) ) 

#define ShapeRange_CanvasCropBottom(This,Increment)	\
    ( (This)->lpVtbl -> CanvasCropBottom(This,Increment) ) 

#define ShapeRange_put_RTF(This,rhs)	\
    ( (This)->lpVtbl -> put_RTF(This,rhs) ) 

#define ShapeRange_get_CustomerData(This,CustomerData)	\
    ( (This)->lpVtbl -> get_CustomerData(This,CustomerData) ) 

#define ShapeRange_get_TextFrame2(This,Frame)	\
    ( (This)->lpVtbl -> get_TextFrame2(This,Frame) ) 

#define ShapeRange_get_HasChart(This,pHasChart)	\
    ( (This)->lpVtbl -> get_HasChart(This,pHasChart) ) 

#define ShapeRange_get_ShapeStyle(This,ShapeStyle)	\
    ( (This)->lpVtbl -> get_ShapeStyle(This,ShapeStyle) ) 

#define ShapeRange_put_ShapeStyle(This,ShapeStyle)	\
    ( (This)->lpVtbl -> put_ShapeStyle(This,ShapeStyle) ) 

#define ShapeRange_get_BackgroundStyle(This,BackgroundStyle)	\
    ( (This)->lpVtbl -> get_BackgroundStyle(This,BackgroundStyle) ) 

#define ShapeRange_put_BackgroundStyle(This,BackgroundStyle)	\
    ( (This)->lpVtbl -> put_BackgroundStyle(This,BackgroundStyle) ) 

#define ShapeRange_get_SoftEdge(This,SoftEdge)	\
    ( (This)->lpVtbl -> get_SoftEdge(This,SoftEdge) ) 

#define ShapeRange_get_Glow(This,Glow)	\
    ( (This)->lpVtbl -> get_Glow(This,Glow) ) 

#define ShapeRange_get_Reflection(This,Reflection)	\
    ( (This)->lpVtbl -> get_Reflection(This,Reflection) ) 

#define ShapeRange_get_Chart(This,Chart)	\
    ( (This)->lpVtbl -> get_Chart(This,Chart) ) 

#define ShapeRange_get_HasSmartArt(This,HasSmartArt)	\
    ( (This)->lpVtbl -> get_HasSmartArt(This,HasSmartArt) ) 

#define ShapeRange_get_SmartArt(This,SmartArt)	\
    ( (This)->lpVtbl -> get_SmartArt(This,SmartArt) ) 

#define ShapeRange_ConvertTextToSmartArt(This,Layout)	\
    ( (This)->lpVtbl -> ConvertTextToSmartArt(This,Layout) ) 

#define ShapeRange_get_Title(This,Title)	\
    ( (This)->lpVtbl -> get_Title(This,Title) ) 

#define ShapeRange_put_Title(This,Title)	\
    ( (This)->lpVtbl -> put_Title(This,Title) ) 

#define ShapeRange_get_MediaFormat(This,MediaFormat)	\
    ( (This)->lpVtbl -> get_MediaFormat(This,MediaFormat) ) 

#define ShapeRange_PickupAnimation(This)	\
    ( (This)->lpVtbl -> PickupAnimation(This) ) 

#define ShapeRange_ApplyAnimation(This)	\
    ( (This)->lpVtbl -> ApplyAnimation(This) ) 

#define ShapeRange_UpgradeMedia(This)	\
    ( (This)->lpVtbl -> UpgradeMedia(This) ) 

#define ShapeRange_MergeShapes(This,MergeCmd,PrimaryShape)	\
    ( (This)->lpVtbl -> MergeShapes(This,MergeCmd,PrimaryShape) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ShapeRange_INTERFACE_DEFINED__ */


#ifndef __GroupShapes_INTERFACE_DEFINED__
#define __GroupShapes_INTERFACE_DEFINED__

/* interface GroupShapes */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_GroupShapes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149347B-5A91-11CF-8700-00AA0060263B")
    GroupShapes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ int *pnShapes) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Shape **Item) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **ppienum) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ ShapeRange **Range) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct GroupShapesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            GroupShapes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            GroupShapes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            GroupShapes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            GroupShapes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            GroupShapes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            GroupShapes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            GroupShapes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            GroupShapes * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            GroupShapes * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            GroupShapes * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            GroupShapes * This,
            /* [retval][out] */ int *pnShapes);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            GroupShapes * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Shape **Item);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            GroupShapes * This,
            /* [retval][out] */ IUnknown **ppienum);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Range )( 
            GroupShapes * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ ShapeRange **Range);
        
        END_INTERFACE
    } GroupShapesVtbl;

    interface GroupShapes
    {
        CONST_VTBL struct GroupShapesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define GroupShapes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define GroupShapes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define GroupShapes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define GroupShapes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define GroupShapes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define GroupShapes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define GroupShapes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define GroupShapes_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define GroupShapes_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define GroupShapes_get_Parent(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Parent(This,ppidisp) ) 

#define GroupShapes_get_Count(This,pnShapes)	\
    ( (This)->lpVtbl -> get_Count(This,pnShapes) ) 

#define GroupShapes_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define GroupShapes_get__NewEnum(This,ppienum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,ppienum) ) 

#define GroupShapes_Range(This,Index,Range)	\
    ( (This)->lpVtbl -> Range(This,Index,Range) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __GroupShapes_INTERFACE_DEFINED__ */


#ifndef __Adjustments_INTERFACE_DEFINED__
#define __Adjustments_INTERFACE_DEFINED__

/* interface Adjustments */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Adjustments;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149347C-5A91-11CF-8700-00AA0060263B")
    Adjustments : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ int *Count) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ int Index,
            /* [retval][out] */ single *Val) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Item( 
            /* [in] */ int Index,
            /* [in] */ single Val) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AdjustmentsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Adjustments * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Adjustments * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Adjustments * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Adjustments * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Adjustments * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Adjustments * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Adjustments * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Adjustments * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Adjustments * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Adjustments * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Adjustments * This,
            /* [retval][out] */ int *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            Adjustments * This,
            /* [in] */ int Index,
            /* [retval][out] */ single *Val);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Item )( 
            Adjustments * This,
            /* [in] */ int Index,
            /* [in] */ single Val);
        
        END_INTERFACE
    } AdjustmentsVtbl;

    interface Adjustments
    {
        CONST_VTBL struct AdjustmentsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Adjustments_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Adjustments_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Adjustments_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Adjustments_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Adjustments_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Adjustments_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Adjustments_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Adjustments_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define Adjustments_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define Adjustments_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Adjustments_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 

#define Adjustments_get_Item(This,Index,Val)	\
    ( (This)->lpVtbl -> get_Item(This,Index,Val) ) 

#define Adjustments_put_Item(This,Index,Val)	\
    ( (This)->lpVtbl -> put_Item(This,Index,Val) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Adjustments_INTERFACE_DEFINED__ */


#ifndef __PictureFormat_INTERFACE_DEFINED__
#define __PictureFormat_INTERFACE_DEFINED__

/* interface PictureFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_PictureFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149347D-5A91-11CF-8700-00AA0060263B")
    PictureFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementBrightness( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementContrast( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Brightness( 
            /* [retval][out] */ single *Brightness) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Brightness( 
            /* [in] */ single Brightness) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColorType( 
            /* [retval][out] */ MsoPictureColorType *ColorType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColorType( 
            /* [in] */ MsoPictureColorType ColorType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Contrast( 
            /* [retval][out] */ single *Contrast) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Contrast( 
            /* [in] */ single Contrast) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CropBottom( 
            /* [retval][out] */ single *CropBottom) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CropBottom( 
            /* [in] */ single CropBottom) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CropLeft( 
            /* [retval][out] */ single *CropLeft) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CropLeft( 
            /* [in] */ single CropLeft) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CropRight( 
            /* [retval][out] */ single *CropRight) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CropRight( 
            /* [in] */ single CropRight) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CropTop( 
            /* [retval][out] */ single *CropTop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CropTop( 
            /* [in] */ single CropTop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TransparencyColor( 
            /* [retval][out] */ MsoRGBType *TransparencyColor) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TransparencyColor( 
            /* [in] */ MsoRGBType TransparencyColor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TransparentBackground( 
            /* [retval][out] */ MsoTriState *TransparentBackground) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TransparentBackground( 
            /* [in] */ MsoTriState TransparentBackground) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Crop( 
            /* [retval][out] */ /* external definition not present */ Crop **Crop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PictureFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PictureFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PictureFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PictureFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PictureFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PictureFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PictureFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PictureFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            PictureFormat * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            PictureFormat * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PictureFormat * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementBrightness )( 
            PictureFormat * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementContrast )( 
            PictureFormat * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Brightness )( 
            PictureFormat * This,
            /* [retval][out] */ single *Brightness);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Brightness )( 
            PictureFormat * This,
            /* [in] */ single Brightness);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColorType )( 
            PictureFormat * This,
            /* [retval][out] */ MsoPictureColorType *ColorType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColorType )( 
            PictureFormat * This,
            /* [in] */ MsoPictureColorType ColorType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Contrast )( 
            PictureFormat * This,
            /* [retval][out] */ single *Contrast);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Contrast )( 
            PictureFormat * This,
            /* [in] */ single Contrast);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CropBottom )( 
            PictureFormat * This,
            /* [retval][out] */ single *CropBottom);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CropBottom )( 
            PictureFormat * This,
            /* [in] */ single CropBottom);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CropLeft )( 
            PictureFormat * This,
            /* [retval][out] */ single *CropLeft);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CropLeft )( 
            PictureFormat * This,
            /* [in] */ single CropLeft);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CropRight )( 
            PictureFormat * This,
            /* [retval][out] */ single *CropRight);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CropRight )( 
            PictureFormat * This,
            /* [in] */ single CropRight);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CropTop )( 
            PictureFormat * This,
            /* [retval][out] */ single *CropTop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CropTop )( 
            PictureFormat * This,
            /* [in] */ single CropTop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TransparencyColor )( 
            PictureFormat * This,
            /* [retval][out] */ MsoRGBType *TransparencyColor);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TransparencyColor )( 
            PictureFormat * This,
            /* [in] */ MsoRGBType TransparencyColor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TransparentBackground )( 
            PictureFormat * This,
            /* [retval][out] */ MsoTriState *TransparentBackground);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TransparentBackground )( 
            PictureFormat * This,
            /* [in] */ MsoTriState TransparentBackground);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Crop )( 
            PictureFormat * This,
            /* [retval][out] */ /* external definition not present */ Crop **Crop);
        
        END_INTERFACE
    } PictureFormatVtbl;

    interface PictureFormat
    {
        CONST_VTBL struct PictureFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PictureFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PictureFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PictureFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PictureFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PictureFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PictureFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PictureFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PictureFormat_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define PictureFormat_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define PictureFormat_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define PictureFormat_IncrementBrightness(This,Increment)	\
    ( (This)->lpVtbl -> IncrementBrightness(This,Increment) ) 

#define PictureFormat_IncrementContrast(This,Increment)	\
    ( (This)->lpVtbl -> IncrementContrast(This,Increment) ) 

#define PictureFormat_get_Brightness(This,Brightness)	\
    ( (This)->lpVtbl -> get_Brightness(This,Brightness) ) 

#define PictureFormat_put_Brightness(This,Brightness)	\
    ( (This)->lpVtbl -> put_Brightness(This,Brightness) ) 

#define PictureFormat_get_ColorType(This,ColorType)	\
    ( (This)->lpVtbl -> get_ColorType(This,ColorType) ) 

#define PictureFormat_put_ColorType(This,ColorType)	\
    ( (This)->lpVtbl -> put_ColorType(This,ColorType) ) 

#define PictureFormat_get_Contrast(This,Contrast)	\
    ( (This)->lpVtbl -> get_Contrast(This,Contrast) ) 

#define PictureFormat_put_Contrast(This,Contrast)	\
    ( (This)->lpVtbl -> put_Contrast(This,Contrast) ) 

#define PictureFormat_get_CropBottom(This,CropBottom)	\
    ( (This)->lpVtbl -> get_CropBottom(This,CropBottom) ) 

#define PictureFormat_put_CropBottom(This,CropBottom)	\
    ( (This)->lpVtbl -> put_CropBottom(This,CropBottom) ) 

#define PictureFormat_get_CropLeft(This,CropLeft)	\
    ( (This)->lpVtbl -> get_CropLeft(This,CropLeft) ) 

#define PictureFormat_put_CropLeft(This,CropLeft)	\
    ( (This)->lpVtbl -> put_CropLeft(This,CropLeft) ) 

#define PictureFormat_get_CropRight(This,CropRight)	\
    ( (This)->lpVtbl -> get_CropRight(This,CropRight) ) 

#define PictureFormat_put_CropRight(This,CropRight)	\
    ( (This)->lpVtbl -> put_CropRight(This,CropRight) ) 

#define PictureFormat_get_CropTop(This,CropTop)	\
    ( (This)->lpVtbl -> get_CropTop(This,CropTop) ) 

#define PictureFormat_put_CropTop(This,CropTop)	\
    ( (This)->lpVtbl -> put_CropTop(This,CropTop) ) 

#define PictureFormat_get_TransparencyColor(This,TransparencyColor)	\
    ( (This)->lpVtbl -> get_TransparencyColor(This,TransparencyColor) ) 

#define PictureFormat_put_TransparencyColor(This,TransparencyColor)	\
    ( (This)->lpVtbl -> put_TransparencyColor(This,TransparencyColor) ) 

#define PictureFormat_get_TransparentBackground(This,TransparentBackground)	\
    ( (This)->lpVtbl -> get_TransparentBackground(This,TransparentBackground) ) 

#define PictureFormat_put_TransparentBackground(This,TransparentBackground)	\
    ( (This)->lpVtbl -> put_TransparentBackground(This,TransparentBackground) ) 

#define PictureFormat_get_Crop(This,Crop)	\
    ( (This)->lpVtbl -> get_Crop(This,Crop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PictureFormat_INTERFACE_DEFINED__ */


#ifndef __FillFormat_INTERFACE_DEFINED__
#define __FillFormat_INTERFACE_DEFINED__

/* interface FillFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_FillFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149347E-5A91-11CF-8700-00AA0060263B")
    FillFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Background( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OneColorGradient( 
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ int Variant,
            /* [in] */ single Degree) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Patterned( 
            /* [in] */ MsoPatternType Pattern) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PresetGradient( 
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ int Variant,
            /* [in] */ MsoPresetGradientType PresetGradientType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PresetTextured( 
            /* [in] */ MsoPresetTexture PresetTexture) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Solid( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TwoColorGradient( 
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ int Variant) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UserPicture( 
            /* [in] */ BSTR PictureFile) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UserTextured( 
            /* [in] */ BSTR TextureFile) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackColor( 
            /* [retval][out] */ ColorFormat **BackColor) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackColor( 
            /* [in] */ ColorFormat *BackColor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForeColor( 
            /* [retval][out] */ ColorFormat **ForeColor) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForeColor( 
            /* [in] */ ColorFormat *ForeColor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientColorType( 
            /* [retval][out] */ MsoGradientColorType *GradientColorType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientDegree( 
            /* [retval][out] */ single *GradientDegree) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientStyle( 
            /* [retval][out] */ MsoGradientStyle *GradientStyle) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientVariant( 
            /* [retval][out] */ int *GradientVariant) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Pattern( 
            /* [retval][out] */ MsoPatternType *Pattern) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetGradientType( 
            /* [retval][out] */ MsoPresetGradientType *PresetGradientType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetTexture( 
            /* [retval][out] */ MsoPresetTexture *PresetTexture) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextureName( 
            /* [retval][out] */ BSTR *TextureName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextureType( 
            /* [retval][out] */ MsoTextureType *TextureType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Transparency( 
            /* [retval][out] */ single *Transparency) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Transparency( 
            /* [in] */ single Transparency) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoFillType *Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ MsoTriState *Visible) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ MsoTriState Visible) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientStops( 
            /* [retval][out] */ /* external definition not present */ GradientStops **GradientStops) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextureOffsetX( 
            /* [retval][out] */ single *TextureOffsetX) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextureOffsetX( 
            /* [in] */ single TextureOffsetX) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextureOffsetY( 
            /* [retval][out] */ single *TextureOffsetY) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextureOffsetY( 
            /* [in] */ single TextureOffsetY) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextureAlignment( 
            /* [retval][out] */ MsoTextureAlignment *TextureAlignment) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextureAlignment( 
            /* [in] */ MsoTextureAlignment TextureAlignment) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextureHorizontalScale( 
            /* [retval][out] */ single *HorizontalScale) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextureHorizontalScale( 
            /* [in] */ single HorizontalScale) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextureVerticalScale( 
            /* [retval][out] */ single *VerticalScale) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextureVerticalScale( 
            /* [in] */ single VerticalScale) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextureTile( 
            /* [retval][out] */ MsoTriState *TextureTile) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextureTile( 
            /* [in] */ MsoTriState TextureTile) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RotateWithObject( 
            /* [retval][out] */ MsoTriState *RotateWithObject) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RotateWithObject( 
            /* [in] */ MsoTriState RotateWithObject) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureEffects( 
            /* [retval][out] */ /* external definition not present */ PictureEffects **PictureEffects) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientAngle( 
            /* [retval][out] */ single *GradientAngle) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GradientAngle( 
            /* [in] */ single GradientAngle) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FillFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FillFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FillFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FillFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FillFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FillFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FillFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FillFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            FillFormat * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            FillFormat * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FillFormat * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Background )( 
            FillFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OneColorGradient )( 
            FillFormat * This,
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ int Variant,
            /* [in] */ single Degree);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Patterned )( 
            FillFormat * This,
            /* [in] */ MsoPatternType Pattern);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PresetGradient )( 
            FillFormat * This,
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ int Variant,
            /* [in] */ MsoPresetGradientType PresetGradientType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PresetTextured )( 
            FillFormat * This,
            /* [in] */ MsoPresetTexture PresetTexture);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Solid )( 
            FillFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TwoColorGradient )( 
            FillFormat * This,
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ int Variant);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UserPicture )( 
            FillFormat * This,
            /* [in] */ BSTR PictureFile);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UserTextured )( 
            FillFormat * This,
            /* [in] */ BSTR TextureFile);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackColor )( 
            FillFormat * This,
            /* [retval][out] */ ColorFormat **BackColor);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackColor )( 
            FillFormat * This,
            /* [in] */ ColorFormat *BackColor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForeColor )( 
            FillFormat * This,
            /* [retval][out] */ ColorFormat **ForeColor);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForeColor )( 
            FillFormat * This,
            /* [in] */ ColorFormat *ForeColor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientColorType )( 
            FillFormat * This,
            /* [retval][out] */ MsoGradientColorType *GradientColorType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientDegree )( 
            FillFormat * This,
            /* [retval][out] */ single *GradientDegree);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientStyle )( 
            FillFormat * This,
            /* [retval][out] */ MsoGradientStyle *GradientStyle);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientVariant )( 
            FillFormat * This,
            /* [retval][out] */ int *GradientVariant);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Pattern )( 
            FillFormat * This,
            /* [retval][out] */ MsoPatternType *Pattern);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetGradientType )( 
            FillFormat * This,
            /* [retval][out] */ MsoPresetGradientType *PresetGradientType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetTexture )( 
            FillFormat * This,
            /* [retval][out] */ MsoPresetTexture *PresetTexture);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextureName )( 
            FillFormat * This,
            /* [retval][out] */ BSTR *TextureName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextureType )( 
            FillFormat * This,
            /* [retval][out] */ MsoTextureType *TextureType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Transparency )( 
            FillFormat * This,
            /* [retval][out] */ single *Transparency);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Transparency )( 
            FillFormat * This,
            /* [in] */ single Transparency);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            FillFormat * This,
            /* [retval][out] */ MsoFillType *Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            FillFormat * This,
            /* [retval][out] */ MsoTriState *Visible);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            FillFormat * This,
            /* [in] */ MsoTriState Visible);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientStops )( 
            FillFormat * This,
            /* [retval][out] */ /* external definition not present */ GradientStops **GradientStops);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextureOffsetX )( 
            FillFormat * This,
            /* [retval][out] */ single *TextureOffsetX);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextureOffsetX )( 
            FillFormat * This,
            /* [in] */ single TextureOffsetX);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextureOffsetY )( 
            FillFormat * This,
            /* [retval][out] */ single *TextureOffsetY);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextureOffsetY )( 
            FillFormat * This,
            /* [in] */ single TextureOffsetY);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextureAlignment )( 
            FillFormat * This,
            /* [retval][out] */ MsoTextureAlignment *TextureAlignment);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextureAlignment )( 
            FillFormat * This,
            /* [in] */ MsoTextureAlignment TextureAlignment);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextureHorizontalScale )( 
            FillFormat * This,
            /* [retval][out] */ single *HorizontalScale);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextureHorizontalScale )( 
            FillFormat * This,
            /* [in] */ single HorizontalScale);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextureVerticalScale )( 
            FillFormat * This,
            /* [retval][out] */ single *VerticalScale);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextureVerticalScale )( 
            FillFormat * This,
            /* [in] */ single VerticalScale);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextureTile )( 
            FillFormat * This,
            /* [retval][out] */ MsoTriState *TextureTile);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextureTile )( 
            FillFormat * This,
            /* [in] */ MsoTriState TextureTile);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RotateWithObject )( 
            FillFormat * This,
            /* [retval][out] */ MsoTriState *RotateWithObject);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RotateWithObject )( 
            FillFormat * This,
            /* [in] */ MsoTriState RotateWithObject);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureEffects )( 
            FillFormat * This,
            /* [retval][out] */ /* external definition not present */ PictureEffects **PictureEffects);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientAngle )( 
            FillFormat * This,
            /* [retval][out] */ single *GradientAngle);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GradientAngle )( 
            FillFormat * This,
            /* [in] */ single GradientAngle);
        
        END_INTERFACE
    } FillFormatVtbl;

    interface FillFormat
    {
        CONST_VTBL struct FillFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FillFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FillFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FillFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FillFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FillFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FillFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FillFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FillFormat_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define FillFormat_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define FillFormat_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define FillFormat_Background(This)	\
    ( (This)->lpVtbl -> Background(This) ) 

#define FillFormat_OneColorGradient(This,Style,Variant,Degree)	\
    ( (This)->lpVtbl -> OneColorGradient(This,Style,Variant,Degree) ) 

#define FillFormat_Patterned(This,Pattern)	\
    ( (This)->lpVtbl -> Patterned(This,Pattern) ) 

#define FillFormat_PresetGradient(This,Style,Variant,PresetGradientType)	\
    ( (This)->lpVtbl -> PresetGradient(This,Style,Variant,PresetGradientType) ) 

#define FillFormat_PresetTextured(This,PresetTexture)	\
    ( (This)->lpVtbl -> PresetTextured(This,PresetTexture) ) 

#define FillFormat_Solid(This)	\
    ( (This)->lpVtbl -> Solid(This) ) 

#define FillFormat_TwoColorGradient(This,Style,Variant)	\
    ( (This)->lpVtbl -> TwoColorGradient(This,Style,Variant) ) 

#define FillFormat_UserPicture(This,PictureFile)	\
    ( (This)->lpVtbl -> UserPicture(This,PictureFile) ) 

#define FillFormat_UserTextured(This,TextureFile)	\
    ( (This)->lpVtbl -> UserTextured(This,TextureFile) ) 

#define FillFormat_get_BackColor(This,BackColor)	\
    ( (This)->lpVtbl -> get_BackColor(This,BackColor) ) 

#define FillFormat_put_BackColor(This,BackColor)	\
    ( (This)->lpVtbl -> put_BackColor(This,BackColor) ) 

#define FillFormat_get_ForeColor(This,ForeColor)	\
    ( (This)->lpVtbl -> get_ForeColor(This,ForeColor) ) 

#define FillFormat_put_ForeColor(This,ForeColor)	\
    ( (This)->lpVtbl -> put_ForeColor(This,ForeColor) ) 

#define FillFormat_get_GradientColorType(This,GradientColorType)	\
    ( (This)->lpVtbl -> get_GradientColorType(This,GradientColorType) ) 

#define FillFormat_get_GradientDegree(This,GradientDegree)	\
    ( (This)->lpVtbl -> get_GradientDegree(This,GradientDegree) ) 

#define FillFormat_get_GradientStyle(This,GradientStyle)	\
    ( (This)->lpVtbl -> get_GradientStyle(This,GradientStyle) ) 

#define FillFormat_get_GradientVariant(This,GradientVariant)	\
    ( (This)->lpVtbl -> get_GradientVariant(This,GradientVariant) ) 

#define FillFormat_get_Pattern(This,Pattern)	\
    ( (This)->lpVtbl -> get_Pattern(This,Pattern) ) 

#define FillFormat_get_PresetGradientType(This,PresetGradientType)	\
    ( (This)->lpVtbl -> get_PresetGradientType(This,PresetGradientType) ) 

#define FillFormat_get_PresetTexture(This,PresetTexture)	\
    ( (This)->lpVtbl -> get_PresetTexture(This,PresetTexture) ) 

#define FillFormat_get_TextureName(This,TextureName)	\
    ( (This)->lpVtbl -> get_TextureName(This,TextureName) ) 

#define FillFormat_get_TextureType(This,TextureType)	\
    ( (This)->lpVtbl -> get_TextureType(This,TextureType) ) 

#define FillFormat_get_Transparency(This,Transparency)	\
    ( (This)->lpVtbl -> get_Transparency(This,Transparency) ) 

#define FillFormat_put_Transparency(This,Transparency)	\
    ( (This)->lpVtbl -> put_Transparency(This,Transparency) ) 

#define FillFormat_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define FillFormat_get_Visible(This,Visible)	\
    ( (This)->lpVtbl -> get_Visible(This,Visible) ) 

#define FillFormat_put_Visible(This,Visible)	\
    ( (This)->lpVtbl -> put_Visible(This,Visible) ) 

#define FillFormat_get_GradientStops(This,GradientStops)	\
    ( (This)->lpVtbl -> get_GradientStops(This,GradientStops) ) 

#define FillFormat_get_TextureOffsetX(This,TextureOffsetX)	\
    ( (This)->lpVtbl -> get_TextureOffsetX(This,TextureOffsetX) ) 

#define FillFormat_put_TextureOffsetX(This,TextureOffsetX)	\
    ( (This)->lpVtbl -> put_TextureOffsetX(This,TextureOffsetX) ) 

#define FillFormat_get_TextureOffsetY(This,TextureOffsetY)	\
    ( (This)->lpVtbl -> get_TextureOffsetY(This,TextureOffsetY) ) 

#define FillFormat_put_TextureOffsetY(This,TextureOffsetY)	\
    ( (This)->lpVtbl -> put_TextureOffsetY(This,TextureOffsetY) ) 

#define FillFormat_get_TextureAlignment(This,TextureAlignment)	\
    ( (This)->lpVtbl -> get_TextureAlignment(This,TextureAlignment) ) 

#define FillFormat_put_TextureAlignment(This,TextureAlignment)	\
    ( (This)->lpVtbl -> put_TextureAlignment(This,TextureAlignment) ) 

#define FillFormat_get_TextureHorizontalScale(This,HorizontalScale)	\
    ( (This)->lpVtbl -> get_TextureHorizontalScale(This,HorizontalScale) ) 

#define FillFormat_put_TextureHorizontalScale(This,HorizontalScale)	\
    ( (This)->lpVtbl -> put_TextureHorizontalScale(This,HorizontalScale) ) 

#define FillFormat_get_TextureVerticalScale(This,VerticalScale)	\
    ( (This)->lpVtbl -> get_TextureVerticalScale(This,VerticalScale) ) 

#define FillFormat_put_TextureVerticalScale(This,VerticalScale)	\
    ( (This)->lpVtbl -> put_TextureVerticalScale(This,VerticalScale) ) 

#define FillFormat_get_TextureTile(This,TextureTile)	\
    ( (This)->lpVtbl -> get_TextureTile(This,TextureTile) ) 

#define FillFormat_put_TextureTile(This,TextureTile)	\
    ( (This)->lpVtbl -> put_TextureTile(This,TextureTile) ) 

#define FillFormat_get_RotateWithObject(This,RotateWithObject)	\
    ( (This)->lpVtbl -> get_RotateWithObject(This,RotateWithObject) ) 

#define FillFormat_put_RotateWithObject(This,RotateWithObject)	\
    ( (This)->lpVtbl -> put_RotateWithObject(This,RotateWithObject) ) 

#define FillFormat_get_PictureEffects(This,PictureEffects)	\
    ( (This)->lpVtbl -> get_PictureEffects(This,PictureEffects) ) 

#define FillFormat_get_GradientAngle(This,GradientAngle)	\
    ( (This)->lpVtbl -> get_GradientAngle(This,GradientAngle) ) 

#define FillFormat_put_GradientAngle(This,GradientAngle)	\
    ( (This)->lpVtbl -> put_GradientAngle(This,GradientAngle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FillFormat_INTERFACE_DEFINED__ */


#ifndef __LineFormat_INTERFACE_DEFINED__
#define __LineFormat_INTERFACE_DEFINED__

/* interface LineFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_LineFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149347F-5A91-11CF-8700-00AA0060263B")
    LineFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackColor( 
            /* [retval][out] */ ColorFormat **BackColor) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackColor( 
            /* [in] */ ColorFormat *BackColor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BeginArrowheadLength( 
            /* [retval][out] */ MsoArrowheadLength *BeginArrowheadLength) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BeginArrowheadLength( 
            /* [in] */ MsoArrowheadLength BeginArrowheadLength) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BeginArrowheadStyle( 
            /* [retval][out] */ MsoArrowheadStyle *BeginArrowheadStyle) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BeginArrowheadStyle( 
            /* [in] */ MsoArrowheadStyle BeginArrowheadStyle) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BeginArrowheadWidth( 
            /* [retval][out] */ MsoArrowheadWidth *BeginArrowheadWidth) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BeginArrowheadWidth( 
            /* [in] */ MsoArrowheadWidth BeginArrowheadWidth) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DashStyle( 
            /* [retval][out] */ MsoLineDashStyle *DashStyle) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DashStyle( 
            /* [in] */ MsoLineDashStyle DashStyle) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndArrowheadLength( 
            /* [retval][out] */ MsoArrowheadLength *EndArrowheadLength) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EndArrowheadLength( 
            /* [in] */ MsoArrowheadLength EndArrowheadLength) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndArrowheadStyle( 
            /* [retval][out] */ MsoArrowheadStyle *EndArrowheadStyle) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EndArrowheadStyle( 
            /* [in] */ MsoArrowheadStyle EndArrowheadStyle) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndArrowheadWidth( 
            /* [retval][out] */ MsoArrowheadWidth *EndArrowheadWidth) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EndArrowheadWidth( 
            /* [in] */ MsoArrowheadWidth EndArrowheadWidth) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForeColor( 
            /* [retval][out] */ ColorFormat **ForeColor) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForeColor( 
            /* [in] */ ColorFormat *ForeColor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Pattern( 
            /* [retval][out] */ MsoPatternType *Pattern) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Pattern( 
            /* [in] */ MsoPatternType Pattern) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ MsoLineStyle *Style) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Style( 
            /* [in] */ MsoLineStyle Style) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Transparency( 
            /* [retval][out] */ single *Transparency) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Transparency( 
            /* [in] */ single Transparency) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ MsoTriState *Visible) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ MsoTriState Visible) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Weight( 
            /* [retval][out] */ single *Weight) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Weight( 
            /* [in] */ single Weight) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsetPen( 
            /* [retval][out] */ MsoTriState *InsetPen) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsetPen( 
            /* [in] */ MsoTriState InsetPen) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LineFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            LineFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            LineFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            LineFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            LineFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            LineFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            LineFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            LineFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            LineFormat * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            LineFormat * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            LineFormat * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackColor )( 
            LineFormat * This,
            /* [retval][out] */ ColorFormat **BackColor);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackColor )( 
            LineFormat * This,
            /* [in] */ ColorFormat *BackColor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BeginArrowheadLength )( 
            LineFormat * This,
            /* [retval][out] */ MsoArrowheadLength *BeginArrowheadLength);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BeginArrowheadLength )( 
            LineFormat * This,
            /* [in] */ MsoArrowheadLength BeginArrowheadLength);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BeginArrowheadStyle )( 
            LineFormat * This,
            /* [retval][out] */ MsoArrowheadStyle *BeginArrowheadStyle);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BeginArrowheadStyle )( 
            LineFormat * This,
            /* [in] */ MsoArrowheadStyle BeginArrowheadStyle);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BeginArrowheadWidth )( 
            LineFormat * This,
            /* [retval][out] */ MsoArrowheadWidth *BeginArrowheadWidth);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BeginArrowheadWidth )( 
            LineFormat * This,
            /* [in] */ MsoArrowheadWidth BeginArrowheadWidth);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DashStyle )( 
            LineFormat * This,
            /* [retval][out] */ MsoLineDashStyle *DashStyle);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DashStyle )( 
            LineFormat * This,
            /* [in] */ MsoLineDashStyle DashStyle);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndArrowheadLength )( 
            LineFormat * This,
            /* [retval][out] */ MsoArrowheadLength *EndArrowheadLength);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndArrowheadLength )( 
            LineFormat * This,
            /* [in] */ MsoArrowheadLength EndArrowheadLength);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndArrowheadStyle )( 
            LineFormat * This,
            /* [retval][out] */ MsoArrowheadStyle *EndArrowheadStyle);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndArrowheadStyle )( 
            LineFormat * This,
            /* [in] */ MsoArrowheadStyle EndArrowheadStyle);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndArrowheadWidth )( 
            LineFormat * This,
            /* [retval][out] */ MsoArrowheadWidth *EndArrowheadWidth);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndArrowheadWidth )( 
            LineFormat * This,
            /* [in] */ MsoArrowheadWidth EndArrowheadWidth);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForeColor )( 
            LineFormat * This,
            /* [retval][out] */ ColorFormat **ForeColor);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForeColor )( 
            LineFormat * This,
            /* [in] */ ColorFormat *ForeColor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Pattern )( 
            LineFormat * This,
            /* [retval][out] */ MsoPatternType *Pattern);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Pattern )( 
            LineFormat * This,
            /* [in] */ MsoPatternType Pattern);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            LineFormat * This,
            /* [retval][out] */ MsoLineStyle *Style);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            LineFormat * This,
            /* [in] */ MsoLineStyle Style);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Transparency )( 
            LineFormat * This,
            /* [retval][out] */ single *Transparency);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Transparency )( 
            LineFormat * This,
            /* [in] */ single Transparency);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            LineFormat * This,
            /* [retval][out] */ MsoTriState *Visible);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            LineFormat * This,
            /* [in] */ MsoTriState Visible);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Weight )( 
            LineFormat * This,
            /* [retval][out] */ single *Weight);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Weight )( 
            LineFormat * This,
            /* [in] */ single Weight);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsetPen )( 
            LineFormat * This,
            /* [retval][out] */ MsoTriState *InsetPen);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsetPen )( 
            LineFormat * This,
            /* [in] */ MsoTriState InsetPen);
        
        END_INTERFACE
    } LineFormatVtbl;

    interface LineFormat
    {
        CONST_VTBL struct LineFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define LineFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define LineFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define LineFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define LineFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define LineFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define LineFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define LineFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define LineFormat_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define LineFormat_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define LineFormat_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define LineFormat_get_BackColor(This,BackColor)	\
    ( (This)->lpVtbl -> get_BackColor(This,BackColor) ) 

#define LineFormat_put_BackColor(This,BackColor)	\
    ( (This)->lpVtbl -> put_BackColor(This,BackColor) ) 

#define LineFormat_get_BeginArrowheadLength(This,BeginArrowheadLength)	\
    ( (This)->lpVtbl -> get_BeginArrowheadLength(This,BeginArrowheadLength) ) 

#define LineFormat_put_BeginArrowheadLength(This,BeginArrowheadLength)	\
    ( (This)->lpVtbl -> put_BeginArrowheadLength(This,BeginArrowheadLength) ) 

#define LineFormat_get_BeginArrowheadStyle(This,BeginArrowheadStyle)	\
    ( (This)->lpVtbl -> get_BeginArrowheadStyle(This,BeginArrowheadStyle) ) 

#define LineFormat_put_BeginArrowheadStyle(This,BeginArrowheadStyle)	\
    ( (This)->lpVtbl -> put_BeginArrowheadStyle(This,BeginArrowheadStyle) ) 

#define LineFormat_get_BeginArrowheadWidth(This,BeginArrowheadWidth)	\
    ( (This)->lpVtbl -> get_BeginArrowheadWidth(This,BeginArrowheadWidth) ) 

#define LineFormat_put_BeginArrowheadWidth(This,BeginArrowheadWidth)	\
    ( (This)->lpVtbl -> put_BeginArrowheadWidth(This,BeginArrowheadWidth) ) 

#define LineFormat_get_DashStyle(This,DashStyle)	\
    ( (This)->lpVtbl -> get_DashStyle(This,DashStyle) ) 

#define LineFormat_put_DashStyle(This,DashStyle)	\
    ( (This)->lpVtbl -> put_DashStyle(This,DashStyle) ) 

#define LineFormat_get_EndArrowheadLength(This,EndArrowheadLength)	\
    ( (This)->lpVtbl -> get_EndArrowheadLength(This,EndArrowheadLength) ) 

#define LineFormat_put_EndArrowheadLength(This,EndArrowheadLength)	\
    ( (This)->lpVtbl -> put_EndArrowheadLength(This,EndArrowheadLength) ) 

#define LineFormat_get_EndArrowheadStyle(This,EndArrowheadStyle)	\
    ( (This)->lpVtbl -> get_EndArrowheadStyle(This,EndArrowheadStyle) ) 

#define LineFormat_put_EndArrowheadStyle(This,EndArrowheadStyle)	\
    ( (This)->lpVtbl -> put_EndArrowheadStyle(This,EndArrowheadStyle) ) 

#define LineFormat_get_EndArrowheadWidth(This,EndArrowheadWidth)	\
    ( (This)->lpVtbl -> get_EndArrowheadWidth(This,EndArrowheadWidth) ) 

#define LineFormat_put_EndArrowheadWidth(This,EndArrowheadWidth)	\
    ( (This)->lpVtbl -> put_EndArrowheadWidth(This,EndArrowheadWidth) ) 

#define LineFormat_get_ForeColor(This,ForeColor)	\
    ( (This)->lpVtbl -> get_ForeColor(This,ForeColor) ) 

#define LineFormat_put_ForeColor(This,ForeColor)	\
    ( (This)->lpVtbl -> put_ForeColor(This,ForeColor) ) 

#define LineFormat_get_Pattern(This,Pattern)	\
    ( (This)->lpVtbl -> get_Pattern(This,Pattern) ) 

#define LineFormat_put_Pattern(This,Pattern)	\
    ( (This)->lpVtbl -> put_Pattern(This,Pattern) ) 

#define LineFormat_get_Style(This,Style)	\
    ( (This)->lpVtbl -> get_Style(This,Style) ) 

#define LineFormat_put_Style(This,Style)	\
    ( (This)->lpVtbl -> put_Style(This,Style) ) 

#define LineFormat_get_Transparency(This,Transparency)	\
    ( (This)->lpVtbl -> get_Transparency(This,Transparency) ) 

#define LineFormat_put_Transparency(This,Transparency)	\
    ( (This)->lpVtbl -> put_Transparency(This,Transparency) ) 

#define LineFormat_get_Visible(This,Visible)	\
    ( (This)->lpVtbl -> get_Visible(This,Visible) ) 

#define LineFormat_put_Visible(This,Visible)	\
    ( (This)->lpVtbl -> put_Visible(This,Visible) ) 

#define LineFormat_get_Weight(This,Weight)	\
    ( (This)->lpVtbl -> get_Weight(This,Weight) ) 

#define LineFormat_put_Weight(This,Weight)	\
    ( (This)->lpVtbl -> put_Weight(This,Weight) ) 

#define LineFormat_get_InsetPen(This,InsetPen)	\
    ( (This)->lpVtbl -> get_InsetPen(This,InsetPen) ) 

#define LineFormat_put_InsetPen(This,InsetPen)	\
    ( (This)->lpVtbl -> put_InsetPen(This,InsetPen) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __LineFormat_INTERFACE_DEFINED__ */


#ifndef __ShadowFormat_INTERFACE_DEFINED__
#define __ShadowFormat_INTERFACE_DEFINED__

/* interface ShadowFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ShadowFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493480-5A91-11CF-8700-00AA0060263B")
    ShadowFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementOffsetX( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementOffsetY( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForeColor( 
            /* [retval][out] */ ColorFormat **ForeColor) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForeColor( 
            /* [in] */ ColorFormat *ForeColor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Obscured( 
            /* [retval][out] */ MsoTriState *Obscured) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Obscured( 
            /* [in] */ MsoTriState Obscured) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OffsetX( 
            /* [retval][out] */ single *OffsetX) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OffsetX( 
            /* [in] */ single OffsetX) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OffsetY( 
            /* [retval][out] */ single *OffsetY) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OffsetY( 
            /* [in] */ single OffsetY) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Transparency( 
            /* [retval][out] */ single *Transparency) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Transparency( 
            /* [in] */ single Transparency) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoShadowType *Type) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ MsoShadowType Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ MsoTriState *Visible) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ MsoTriState Visible) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ MsoShadowStyle *ShadowStyle) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Style( 
            /* [in] */ MsoShadowStyle ShadowStyle) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Blur( 
            /* [retval][out] */ single *Blur) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Blur( 
            /* [in] */ single Blur) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ single *Size) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Size( 
            /* [in] */ single Size) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RotateWithShape( 
            /* [retval][out] */ MsoTriState *RotateWithShape) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RotateWithShape( 
            /* [in] */ MsoTriState RotateWithShape) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ShadowFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ShadowFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ShadowFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ShadowFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ShadowFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ShadowFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ShadowFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ShadowFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ShadowFormat * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ShadowFormat * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ShadowFormat * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementOffsetX )( 
            ShadowFormat * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementOffsetY )( 
            ShadowFormat * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForeColor )( 
            ShadowFormat * This,
            /* [retval][out] */ ColorFormat **ForeColor);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForeColor )( 
            ShadowFormat * This,
            /* [in] */ ColorFormat *ForeColor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Obscured )( 
            ShadowFormat * This,
            /* [retval][out] */ MsoTriState *Obscured);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Obscured )( 
            ShadowFormat * This,
            /* [in] */ MsoTriState Obscured);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OffsetX )( 
            ShadowFormat * This,
            /* [retval][out] */ single *OffsetX);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OffsetX )( 
            ShadowFormat * This,
            /* [in] */ single OffsetX);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OffsetY )( 
            ShadowFormat * This,
            /* [retval][out] */ single *OffsetY);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OffsetY )( 
            ShadowFormat * This,
            /* [in] */ single OffsetY);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Transparency )( 
            ShadowFormat * This,
            /* [retval][out] */ single *Transparency);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Transparency )( 
            ShadowFormat * This,
            /* [in] */ single Transparency);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ShadowFormat * This,
            /* [retval][out] */ MsoShadowType *Type);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            ShadowFormat * This,
            /* [in] */ MsoShadowType Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            ShadowFormat * This,
            /* [retval][out] */ MsoTriState *Visible);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            ShadowFormat * This,
            /* [in] */ MsoTriState Visible);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            ShadowFormat * This,
            /* [retval][out] */ MsoShadowStyle *ShadowStyle);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            ShadowFormat * This,
            /* [in] */ MsoShadowStyle ShadowStyle);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Blur )( 
            ShadowFormat * This,
            /* [retval][out] */ single *Blur);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Blur )( 
            ShadowFormat * This,
            /* [in] */ single Blur);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            ShadowFormat * This,
            /* [retval][out] */ single *Size);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Size )( 
            ShadowFormat * This,
            /* [in] */ single Size);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RotateWithShape )( 
            ShadowFormat * This,
            /* [retval][out] */ MsoTriState *RotateWithShape);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RotateWithShape )( 
            ShadowFormat * This,
            /* [in] */ MsoTriState RotateWithShape);
        
        END_INTERFACE
    } ShadowFormatVtbl;

    interface ShadowFormat
    {
        CONST_VTBL struct ShadowFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ShadowFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ShadowFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ShadowFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ShadowFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ShadowFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ShadowFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ShadowFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ShadowFormat_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define ShadowFormat_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define ShadowFormat_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ShadowFormat_IncrementOffsetX(This,Increment)	\
    ( (This)->lpVtbl -> IncrementOffsetX(This,Increment) ) 

#define ShadowFormat_IncrementOffsetY(This,Increment)	\
    ( (This)->lpVtbl -> IncrementOffsetY(This,Increment) ) 

#define ShadowFormat_get_ForeColor(This,ForeColor)	\
    ( (This)->lpVtbl -> get_ForeColor(This,ForeColor) ) 

#define ShadowFormat_put_ForeColor(This,ForeColor)	\
    ( (This)->lpVtbl -> put_ForeColor(This,ForeColor) ) 

#define ShadowFormat_get_Obscured(This,Obscured)	\
    ( (This)->lpVtbl -> get_Obscured(This,Obscured) ) 

#define ShadowFormat_put_Obscured(This,Obscured)	\
    ( (This)->lpVtbl -> put_Obscured(This,Obscured) ) 

#define ShadowFormat_get_OffsetX(This,OffsetX)	\
    ( (This)->lpVtbl -> get_OffsetX(This,OffsetX) ) 

#define ShadowFormat_put_OffsetX(This,OffsetX)	\
    ( (This)->lpVtbl -> put_OffsetX(This,OffsetX) ) 

#define ShadowFormat_get_OffsetY(This,OffsetY)	\
    ( (This)->lpVtbl -> get_OffsetY(This,OffsetY) ) 

#define ShadowFormat_put_OffsetY(This,OffsetY)	\
    ( (This)->lpVtbl -> put_OffsetY(This,OffsetY) ) 

#define ShadowFormat_get_Transparency(This,Transparency)	\
    ( (This)->lpVtbl -> get_Transparency(This,Transparency) ) 

#define ShadowFormat_put_Transparency(This,Transparency)	\
    ( (This)->lpVtbl -> put_Transparency(This,Transparency) ) 

#define ShadowFormat_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define ShadowFormat_put_Type(This,Type)	\
    ( (This)->lpVtbl -> put_Type(This,Type) ) 

#define ShadowFormat_get_Visible(This,Visible)	\
    ( (This)->lpVtbl -> get_Visible(This,Visible) ) 

#define ShadowFormat_put_Visible(This,Visible)	\
    ( (This)->lpVtbl -> put_Visible(This,Visible) ) 

#define ShadowFormat_get_Style(This,ShadowStyle)	\
    ( (This)->lpVtbl -> get_Style(This,ShadowStyle) ) 

#define ShadowFormat_put_Style(This,ShadowStyle)	\
    ( (This)->lpVtbl -> put_Style(This,ShadowStyle) ) 

#define ShadowFormat_get_Blur(This,Blur)	\
    ( (This)->lpVtbl -> get_Blur(This,Blur) ) 

#define ShadowFormat_put_Blur(This,Blur)	\
    ( (This)->lpVtbl -> put_Blur(This,Blur) ) 

#define ShadowFormat_get_Size(This,Size)	\
    ( (This)->lpVtbl -> get_Size(This,Size) ) 

#define ShadowFormat_put_Size(This,Size)	\
    ( (This)->lpVtbl -> put_Size(This,Size) ) 

#define ShadowFormat_get_RotateWithShape(This,RotateWithShape)	\
    ( (This)->lpVtbl -> get_RotateWithShape(This,RotateWithShape) ) 

#define ShadowFormat_put_RotateWithShape(This,RotateWithShape)	\
    ( (This)->lpVtbl -> put_RotateWithShape(This,RotateWithShape) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ShadowFormat_INTERFACE_DEFINED__ */


#ifndef __ConnectorFormat_INTERFACE_DEFINED__
#define __ConnectorFormat_INTERFACE_DEFINED__

/* interface ConnectorFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ConnectorFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493481-5A91-11CF-8700-00AA0060263B")
    ConnectorFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE BeginConnect( 
            /* [in] */ Shape *ConnectedShape,
            /* [in] */ int ConnectionSite) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE BeginDisconnect( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndConnect( 
            /* [in] */ Shape *ConnectedShape,
            /* [in] */ int ConnectionSite) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndDisconnect( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BeginConnected( 
            /* [retval][out] */ MsoTriState *BeginConnected) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BeginConnectedShape( 
            /* [retval][out] */ Shape **BeginConnectedShape) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BeginConnectionSite( 
            /* [retval][out] */ int *BeginConnectionSite) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndConnected( 
            /* [retval][out] */ MsoTriState *EndConnected) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndConnectedShape( 
            /* [retval][out] */ Shape **EndConnectedShape) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndConnectionSite( 
            /* [retval][out] */ int *EndConnectionSite) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoConnectorType *Type) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ MsoConnectorType Type) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ConnectorFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ConnectorFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ConnectorFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ConnectorFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ConnectorFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ConnectorFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ConnectorFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ConnectorFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ConnectorFormat * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ConnectorFormat * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ConnectorFormat * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BeginConnect )( 
            ConnectorFormat * This,
            /* [in] */ Shape *ConnectedShape,
            /* [in] */ int ConnectionSite);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BeginDisconnect )( 
            ConnectorFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndConnect )( 
            ConnectorFormat * This,
            /* [in] */ Shape *ConnectedShape,
            /* [in] */ int ConnectionSite);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndDisconnect )( 
            ConnectorFormat * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BeginConnected )( 
            ConnectorFormat * This,
            /* [retval][out] */ MsoTriState *BeginConnected);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BeginConnectedShape )( 
            ConnectorFormat * This,
            /* [retval][out] */ Shape **BeginConnectedShape);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BeginConnectionSite )( 
            ConnectorFormat * This,
            /* [retval][out] */ int *BeginConnectionSite);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndConnected )( 
            ConnectorFormat * This,
            /* [retval][out] */ MsoTriState *EndConnected);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndConnectedShape )( 
            ConnectorFormat * This,
            /* [retval][out] */ Shape **EndConnectedShape);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndConnectionSite )( 
            ConnectorFormat * This,
            /* [retval][out] */ int *EndConnectionSite);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ConnectorFormat * This,
            /* [retval][out] */ MsoConnectorType *Type);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            ConnectorFormat * This,
            /* [in] */ MsoConnectorType Type);
        
        END_INTERFACE
    } ConnectorFormatVtbl;

    interface ConnectorFormat
    {
        CONST_VTBL struct ConnectorFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ConnectorFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ConnectorFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ConnectorFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ConnectorFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ConnectorFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ConnectorFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ConnectorFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ConnectorFormat_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define ConnectorFormat_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define ConnectorFormat_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ConnectorFormat_BeginConnect(This,ConnectedShape,ConnectionSite)	\
    ( (This)->lpVtbl -> BeginConnect(This,ConnectedShape,ConnectionSite) ) 

#define ConnectorFormat_BeginDisconnect(This)	\
    ( (This)->lpVtbl -> BeginDisconnect(This) ) 

#define ConnectorFormat_EndConnect(This,ConnectedShape,ConnectionSite)	\
    ( (This)->lpVtbl -> EndConnect(This,ConnectedShape,ConnectionSite) ) 

#define ConnectorFormat_EndDisconnect(This)	\
    ( (This)->lpVtbl -> EndDisconnect(This) ) 

#define ConnectorFormat_get_BeginConnected(This,BeginConnected)	\
    ( (This)->lpVtbl -> get_BeginConnected(This,BeginConnected) ) 

#define ConnectorFormat_get_BeginConnectedShape(This,BeginConnectedShape)	\
    ( (This)->lpVtbl -> get_BeginConnectedShape(This,BeginConnectedShape) ) 

#define ConnectorFormat_get_BeginConnectionSite(This,BeginConnectionSite)	\
    ( (This)->lpVtbl -> get_BeginConnectionSite(This,BeginConnectionSite) ) 

#define ConnectorFormat_get_EndConnected(This,EndConnected)	\
    ( (This)->lpVtbl -> get_EndConnected(This,EndConnected) ) 

#define ConnectorFormat_get_EndConnectedShape(This,EndConnectedShape)	\
    ( (This)->lpVtbl -> get_EndConnectedShape(This,EndConnectedShape) ) 

#define ConnectorFormat_get_EndConnectionSite(This,EndConnectionSite)	\
    ( (This)->lpVtbl -> get_EndConnectionSite(This,EndConnectionSite) ) 

#define ConnectorFormat_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define ConnectorFormat_put_Type(This,Type)	\
    ( (This)->lpVtbl -> put_Type(This,Type) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ConnectorFormat_INTERFACE_DEFINED__ */


#ifndef __TextEffectFormat_INTERFACE_DEFINED__
#define __TextEffectFormat_INTERFACE_DEFINED__

/* interface TextEffectFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_TextEffectFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493482-5A91-11CF-8700-00AA0060263B")
    TextEffectFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToggleVerticalText( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ MsoTextEffectAlignment *Alignment) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ MsoTextEffectAlignment Alignment) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontBold( 
            /* [retval][out] */ MsoTriState *FontBold) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontBold( 
            /* [in] */ MsoTriState FontBold) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontItalic( 
            /* [retval][out] */ MsoTriState *FontItalic) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontItalic( 
            /* [in] */ MsoTriState FontItalic) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontName( 
            /* [retval][out] */ BSTR *FontName) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontName( 
            /* [in] */ BSTR FontName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontSize( 
            /* [retval][out] */ single *FontSize) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontSize( 
            /* [in] */ single FontSize) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KernedPairs( 
            /* [retval][out] */ MsoTriState *KernedPairs) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_KernedPairs( 
            /* [in] */ MsoTriState KernedPairs) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NormalizedHeight( 
            /* [retval][out] */ MsoTriState *NormalizedHeight) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NormalizedHeight( 
            /* [in] */ MsoTriState NormalizedHeight) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetShape( 
            /* [retval][out] */ MsoPresetTextEffectShape *PresetShape) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PresetShape( 
            /* [in] */ MsoPresetTextEffectShape PresetShape) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetTextEffect( 
            /* [retval][out] */ MsoPresetTextEffect *Preset) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PresetTextEffect( 
            /* [in] */ MsoPresetTextEffect Preset) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RotatedChars( 
            /* [retval][out] */ MsoTriState *RotatedChars) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RotatedChars( 
            /* [in] */ MsoTriState RotatedChars) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *Text) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Tracking( 
            /* [retval][out] */ single *Tracking) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Tracking( 
            /* [in] */ single Tracking) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextEffectFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextEffectFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextEffectFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextEffectFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextEffectFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextEffectFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextEffectFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextEffectFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TextEffectFormat * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TextEffectFormat * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextEffectFormat * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ToggleVerticalText )( 
            TextEffectFormat * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            TextEffectFormat * This,
            /* [retval][out] */ MsoTextEffectAlignment *Alignment);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            TextEffectFormat * This,
            /* [in] */ MsoTextEffectAlignment Alignment);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontBold )( 
            TextEffectFormat * This,
            /* [retval][out] */ MsoTriState *FontBold);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontBold )( 
            TextEffectFormat * This,
            /* [in] */ MsoTriState FontBold);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontItalic )( 
            TextEffectFormat * This,
            /* [retval][out] */ MsoTriState *FontItalic);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontItalic )( 
            TextEffectFormat * This,
            /* [in] */ MsoTriState FontItalic);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontName )( 
            TextEffectFormat * This,
            /* [retval][out] */ BSTR *FontName);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontName )( 
            TextEffectFormat * This,
            /* [in] */ BSTR FontName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontSize )( 
            TextEffectFormat * This,
            /* [retval][out] */ single *FontSize);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontSize )( 
            TextEffectFormat * This,
            /* [in] */ single FontSize);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KernedPairs )( 
            TextEffectFormat * This,
            /* [retval][out] */ MsoTriState *KernedPairs);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_KernedPairs )( 
            TextEffectFormat * This,
            /* [in] */ MsoTriState KernedPairs);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NormalizedHeight )( 
            TextEffectFormat * This,
            /* [retval][out] */ MsoTriState *NormalizedHeight);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NormalizedHeight )( 
            TextEffectFormat * This,
            /* [in] */ MsoTriState NormalizedHeight);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetShape )( 
            TextEffectFormat * This,
            /* [retval][out] */ MsoPresetTextEffectShape *PresetShape);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PresetShape )( 
            TextEffectFormat * This,
            /* [in] */ MsoPresetTextEffectShape PresetShape);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetTextEffect )( 
            TextEffectFormat * This,
            /* [retval][out] */ MsoPresetTextEffect *Preset);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PresetTextEffect )( 
            TextEffectFormat * This,
            /* [in] */ MsoPresetTextEffect Preset);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RotatedChars )( 
            TextEffectFormat * This,
            /* [retval][out] */ MsoTriState *RotatedChars);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RotatedChars )( 
            TextEffectFormat * This,
            /* [in] */ MsoTriState RotatedChars);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            TextEffectFormat * This,
            /* [retval][out] */ BSTR *Text);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            TextEffectFormat * This,
            /* [in] */ BSTR Text);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Tracking )( 
            TextEffectFormat * This,
            /* [retval][out] */ single *Tracking);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Tracking )( 
            TextEffectFormat * This,
            /* [in] */ single Tracking);
        
        END_INTERFACE
    } TextEffectFormatVtbl;

    interface TextEffectFormat
    {
        CONST_VTBL struct TextEffectFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextEffectFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TextEffectFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TextEffectFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TextEffectFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TextEffectFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TextEffectFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TextEffectFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TextEffectFormat_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define TextEffectFormat_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define TextEffectFormat_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define TextEffectFormat_ToggleVerticalText(This)	\
    ( (This)->lpVtbl -> ToggleVerticalText(This) ) 

#define TextEffectFormat_get_Alignment(This,Alignment)	\
    ( (This)->lpVtbl -> get_Alignment(This,Alignment) ) 

#define TextEffectFormat_put_Alignment(This,Alignment)	\
    ( (This)->lpVtbl -> put_Alignment(This,Alignment) ) 

#define TextEffectFormat_get_FontBold(This,FontBold)	\
    ( (This)->lpVtbl -> get_FontBold(This,FontBold) ) 

#define TextEffectFormat_put_FontBold(This,FontBold)	\
    ( (This)->lpVtbl -> put_FontBold(This,FontBold) ) 

#define TextEffectFormat_get_FontItalic(This,FontItalic)	\
    ( (This)->lpVtbl -> get_FontItalic(This,FontItalic) ) 

#define TextEffectFormat_put_FontItalic(This,FontItalic)	\
    ( (This)->lpVtbl -> put_FontItalic(This,FontItalic) ) 

#define TextEffectFormat_get_FontName(This,FontName)	\
    ( (This)->lpVtbl -> get_FontName(This,FontName) ) 

#define TextEffectFormat_put_FontName(This,FontName)	\
    ( (This)->lpVtbl -> put_FontName(This,FontName) ) 

#define TextEffectFormat_get_FontSize(This,FontSize)	\
    ( (This)->lpVtbl -> get_FontSize(This,FontSize) ) 

#define TextEffectFormat_put_FontSize(This,FontSize)	\
    ( (This)->lpVtbl -> put_FontSize(This,FontSize) ) 

#define TextEffectFormat_get_KernedPairs(This,KernedPairs)	\
    ( (This)->lpVtbl -> get_KernedPairs(This,KernedPairs) ) 

#define TextEffectFormat_put_KernedPairs(This,KernedPairs)	\
    ( (This)->lpVtbl -> put_KernedPairs(This,KernedPairs) ) 

#define TextEffectFormat_get_NormalizedHeight(This,NormalizedHeight)	\
    ( (This)->lpVtbl -> get_NormalizedHeight(This,NormalizedHeight) ) 

#define TextEffectFormat_put_NormalizedHeight(This,NormalizedHeight)	\
    ( (This)->lpVtbl -> put_NormalizedHeight(This,NormalizedHeight) ) 

#define TextEffectFormat_get_PresetShape(This,PresetShape)	\
    ( (This)->lpVtbl -> get_PresetShape(This,PresetShape) ) 

#define TextEffectFormat_put_PresetShape(This,PresetShape)	\
    ( (This)->lpVtbl -> put_PresetShape(This,PresetShape) ) 

#define TextEffectFormat_get_PresetTextEffect(This,Preset)	\
    ( (This)->lpVtbl -> get_PresetTextEffect(This,Preset) ) 

#define TextEffectFormat_put_PresetTextEffect(This,Preset)	\
    ( (This)->lpVtbl -> put_PresetTextEffect(This,Preset) ) 

#define TextEffectFormat_get_RotatedChars(This,RotatedChars)	\
    ( (This)->lpVtbl -> get_RotatedChars(This,RotatedChars) ) 

#define TextEffectFormat_put_RotatedChars(This,RotatedChars)	\
    ( (This)->lpVtbl -> put_RotatedChars(This,RotatedChars) ) 

#define TextEffectFormat_get_Text(This,Text)	\
    ( (This)->lpVtbl -> get_Text(This,Text) ) 

#define TextEffectFormat_put_Text(This,Text)	\
    ( (This)->lpVtbl -> put_Text(This,Text) ) 

#define TextEffectFormat_get_Tracking(This,Tracking)	\
    ( (This)->lpVtbl -> get_Tracking(This,Tracking) ) 

#define TextEffectFormat_put_Tracking(This,Tracking)	\
    ( (This)->lpVtbl -> put_Tracking(This,Tracking) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TextEffectFormat_INTERFACE_DEFINED__ */


#ifndef __ThreeDFormat_INTERFACE_DEFINED__
#define __ThreeDFormat_INTERFACE_DEFINED__

/* interface ThreeDFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ThreeDFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493483-5A91-11CF-8700-00AA0060263B")
    ThreeDFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementRotationX( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementRotationY( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ResetRotation( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetThreeDFormat( 
            /* [in] */ MsoPresetThreeDFormat PresetThreeDFormat) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetExtrusionDirection( 
            /* [in] */ MsoPresetExtrusionDirection PresetExtrusionDirection) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Depth( 
            /* [retval][out] */ single *Depth) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Depth( 
            /* [in] */ single Depth) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtrusionColor( 
            /* [retval][out] */ ColorFormat **ExtrusionColor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtrusionColorType( 
            /* [retval][out] */ MsoExtrusionColorType *ExtrusionColorType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtrusionColorType( 
            /* [in] */ MsoExtrusionColorType ExtrusionColorType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Perspective( 
            /* [retval][out] */ MsoTriState *Perspective) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Perspective( 
            /* [in] */ MsoTriState Perspective) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetExtrusionDirection( 
            /* [retval][out] */ MsoPresetExtrusionDirection *PresetExtrusionDirection) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetLightingDirection( 
            /* [retval][out] */ MsoPresetLightingDirection *PresetLightingDirection) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PresetLightingDirection( 
            /* [in] */ MsoPresetLightingDirection PresetLightingDirection) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetLightingSoftness( 
            /* [retval][out] */ MsoPresetLightingSoftness *PresetLightingSoftness) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PresetLightingSoftness( 
            /* [in] */ MsoPresetLightingSoftness PresetLightingSoftness) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetMaterial( 
            /* [retval][out] */ MsoPresetMaterial *PresetMaterial) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PresetMaterial( 
            /* [in] */ MsoPresetMaterial PresetMaterial) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetThreeDFormat( 
            /* [retval][out] */ MsoPresetThreeDFormat *PresetThreeDFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RotationX( 
            /* [retval][out] */ single *RotationX) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RotationX( 
            /* [in] */ single RotationX) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RotationY( 
            /* [retval][out] */ single *RotationY) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RotationY( 
            /* [in] */ single RotationY) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ MsoTriState *Visible) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ MsoTriState Visible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetPresetCamera( 
            /* [in] */ MsoPresetCamera PresetCamera) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementRotationZ( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementRotationHorizontal( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementRotationVertical( 
            /* [in] */ single Increment) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetLighting( 
            /* [retval][out] */ MsoLightRigType *PresetLightRigType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PresetLighting( 
            /* [in] */ MsoLightRigType PresetLightRigType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Z( 
            /* [retval][out] */ single *Z) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Z( 
            /* [in] */ single Z) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BevelTopType( 
            /* [retval][out] */ MsoBevelType *BevelTopType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BevelTopType( 
            /* [in] */ MsoBevelType BevelTopType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BevelTopInset( 
            /* [retval][out] */ single *BevelTopInset) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BevelTopInset( 
            /* [in] */ single BevelTopInset) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BevelTopDepth( 
            /* [retval][out] */ single *BevelTopDepth) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BevelTopDepth( 
            /* [in] */ single BevelTopDepth) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BevelBottomType( 
            /* [retval][out] */ MsoBevelType *BevelBottomType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BevelBottomType( 
            /* [in] */ MsoBevelType BevelBottomType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BevelBottomInset( 
            /* [retval][out] */ single *BevelBottomInset) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BevelBottomInset( 
            /* [in] */ single BevelBottomInset) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BevelBottomDepth( 
            /* [retval][out] */ single *BevelBottomDepth) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BevelBottomDepth( 
            /* [in] */ single BevelBottomDepth) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetCamera( 
            /* [retval][out] */ MsoPresetCamera *PresetCamera) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RotationZ( 
            /* [retval][out] */ single *RotationZ) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RotationZ( 
            /* [in] */ single RotationZ) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContourWidth( 
            /* [retval][out] */ single *Width) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ContourWidth( 
            /* [in] */ single Width) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContourColor( 
            /* [retval][out] */ ColorFormat **ContourColor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FieldOfView( 
            /* [retval][out] */ single *FOV) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FieldOfView( 
            /* [in] */ single FOV) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectText( 
            /* [retval][out] */ MsoTriState *ProjectText) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ProjectText( 
            /* [in] */ MsoTriState ProjectText) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LightAngle( 
            /* [retval][out] */ single *LightAngle) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LightAngle( 
            /* [in] */ single LightAngle) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ThreeDFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ThreeDFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ThreeDFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ThreeDFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ThreeDFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ThreeDFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ThreeDFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ThreeDFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ThreeDFormat * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ThreeDFormat * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ThreeDFormat * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementRotationX )( 
            ThreeDFormat * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementRotationY )( 
            ThreeDFormat * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ResetRotation )( 
            ThreeDFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetThreeDFormat )( 
            ThreeDFormat * This,
            /* [in] */ MsoPresetThreeDFormat PresetThreeDFormat);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetExtrusionDirection )( 
            ThreeDFormat * This,
            /* [in] */ MsoPresetExtrusionDirection PresetExtrusionDirection);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Depth )( 
            ThreeDFormat * This,
            /* [retval][out] */ single *Depth);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Depth )( 
            ThreeDFormat * This,
            /* [in] */ single Depth);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtrusionColor )( 
            ThreeDFormat * This,
            /* [retval][out] */ ColorFormat **ExtrusionColor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtrusionColorType )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoExtrusionColorType *ExtrusionColorType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtrusionColorType )( 
            ThreeDFormat * This,
            /* [in] */ MsoExtrusionColorType ExtrusionColorType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Perspective )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoTriState *Perspective);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Perspective )( 
            ThreeDFormat * This,
            /* [in] */ MsoTriState Perspective);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetExtrusionDirection )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoPresetExtrusionDirection *PresetExtrusionDirection);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetLightingDirection )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoPresetLightingDirection *PresetLightingDirection);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PresetLightingDirection )( 
            ThreeDFormat * This,
            /* [in] */ MsoPresetLightingDirection PresetLightingDirection);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetLightingSoftness )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoPresetLightingSoftness *PresetLightingSoftness);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PresetLightingSoftness )( 
            ThreeDFormat * This,
            /* [in] */ MsoPresetLightingSoftness PresetLightingSoftness);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetMaterial )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoPresetMaterial *PresetMaterial);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PresetMaterial )( 
            ThreeDFormat * This,
            /* [in] */ MsoPresetMaterial PresetMaterial);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetThreeDFormat )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoPresetThreeDFormat *PresetThreeDFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RotationX )( 
            ThreeDFormat * This,
            /* [retval][out] */ single *RotationX);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RotationX )( 
            ThreeDFormat * This,
            /* [in] */ single RotationX);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RotationY )( 
            ThreeDFormat * This,
            /* [retval][out] */ single *RotationY);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RotationY )( 
            ThreeDFormat * This,
            /* [in] */ single RotationY);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoTriState *Visible);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            ThreeDFormat * This,
            /* [in] */ MsoTriState Visible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetPresetCamera )( 
            ThreeDFormat * This,
            /* [in] */ MsoPresetCamera PresetCamera);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementRotationZ )( 
            ThreeDFormat * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementRotationHorizontal )( 
            ThreeDFormat * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementRotationVertical )( 
            ThreeDFormat * This,
            /* [in] */ single Increment);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetLighting )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoLightRigType *PresetLightRigType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PresetLighting )( 
            ThreeDFormat * This,
            /* [in] */ MsoLightRigType PresetLightRigType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Z )( 
            ThreeDFormat * This,
            /* [retval][out] */ single *Z);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Z )( 
            ThreeDFormat * This,
            /* [in] */ single Z);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BevelTopType )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoBevelType *BevelTopType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BevelTopType )( 
            ThreeDFormat * This,
            /* [in] */ MsoBevelType BevelTopType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BevelTopInset )( 
            ThreeDFormat * This,
            /* [retval][out] */ single *BevelTopInset);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BevelTopInset )( 
            ThreeDFormat * This,
            /* [in] */ single BevelTopInset);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BevelTopDepth )( 
            ThreeDFormat * This,
            /* [retval][out] */ single *BevelTopDepth);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BevelTopDepth )( 
            ThreeDFormat * This,
            /* [in] */ single BevelTopDepth);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BevelBottomType )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoBevelType *BevelBottomType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BevelBottomType )( 
            ThreeDFormat * This,
            /* [in] */ MsoBevelType BevelBottomType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BevelBottomInset )( 
            ThreeDFormat * This,
            /* [retval][out] */ single *BevelBottomInset);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BevelBottomInset )( 
            ThreeDFormat * This,
            /* [in] */ single BevelBottomInset);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BevelBottomDepth )( 
            ThreeDFormat * This,
            /* [retval][out] */ single *BevelBottomDepth);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BevelBottomDepth )( 
            ThreeDFormat * This,
            /* [in] */ single BevelBottomDepth);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetCamera )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoPresetCamera *PresetCamera);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RotationZ )( 
            ThreeDFormat * This,
            /* [retval][out] */ single *RotationZ);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RotationZ )( 
            ThreeDFormat * This,
            /* [in] */ single RotationZ);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContourWidth )( 
            ThreeDFormat * This,
            /* [retval][out] */ single *Width);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ContourWidth )( 
            ThreeDFormat * This,
            /* [in] */ single Width);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContourColor )( 
            ThreeDFormat * This,
            /* [retval][out] */ ColorFormat **ContourColor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FieldOfView )( 
            ThreeDFormat * This,
            /* [retval][out] */ single *FOV);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FieldOfView )( 
            ThreeDFormat * This,
            /* [in] */ single FOV);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectText )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoTriState *ProjectText);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ProjectText )( 
            ThreeDFormat * This,
            /* [in] */ MsoTriState ProjectText);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LightAngle )( 
            ThreeDFormat * This,
            /* [retval][out] */ single *LightAngle);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LightAngle )( 
            ThreeDFormat * This,
            /* [in] */ single LightAngle);
        
        END_INTERFACE
    } ThreeDFormatVtbl;

    interface ThreeDFormat
    {
        CONST_VTBL struct ThreeDFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ThreeDFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ThreeDFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ThreeDFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ThreeDFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ThreeDFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ThreeDFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ThreeDFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ThreeDFormat_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define ThreeDFormat_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define ThreeDFormat_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ThreeDFormat_IncrementRotationX(This,Increment)	\
    ( (This)->lpVtbl -> IncrementRotationX(This,Increment) ) 

#define ThreeDFormat_IncrementRotationY(This,Increment)	\
    ( (This)->lpVtbl -> IncrementRotationY(This,Increment) ) 

#define ThreeDFormat_ResetRotation(This)	\
    ( (This)->lpVtbl -> ResetRotation(This) ) 

#define ThreeDFormat_SetThreeDFormat(This,PresetThreeDFormat)	\
    ( (This)->lpVtbl -> SetThreeDFormat(This,PresetThreeDFormat) ) 

#define ThreeDFormat_SetExtrusionDirection(This,PresetExtrusionDirection)	\
    ( (This)->lpVtbl -> SetExtrusionDirection(This,PresetExtrusionDirection) ) 

#define ThreeDFormat_get_Depth(This,Depth)	\
    ( (This)->lpVtbl -> get_Depth(This,Depth) ) 

#define ThreeDFormat_put_Depth(This,Depth)	\
    ( (This)->lpVtbl -> put_Depth(This,Depth) ) 

#define ThreeDFormat_get_ExtrusionColor(This,ExtrusionColor)	\
    ( (This)->lpVtbl -> get_ExtrusionColor(This,ExtrusionColor) ) 

#define ThreeDFormat_get_ExtrusionColorType(This,ExtrusionColorType)	\
    ( (This)->lpVtbl -> get_ExtrusionColorType(This,ExtrusionColorType) ) 

#define ThreeDFormat_put_ExtrusionColorType(This,ExtrusionColorType)	\
    ( (This)->lpVtbl -> put_ExtrusionColorType(This,ExtrusionColorType) ) 

#define ThreeDFormat_get_Perspective(This,Perspective)	\
    ( (This)->lpVtbl -> get_Perspective(This,Perspective) ) 

#define ThreeDFormat_put_Perspective(This,Perspective)	\
    ( (This)->lpVtbl -> put_Perspective(This,Perspective) ) 

#define ThreeDFormat_get_PresetExtrusionDirection(This,PresetExtrusionDirection)	\
    ( (This)->lpVtbl -> get_PresetExtrusionDirection(This,PresetExtrusionDirection) ) 

#define ThreeDFormat_get_PresetLightingDirection(This,PresetLightingDirection)	\
    ( (This)->lpVtbl -> get_PresetLightingDirection(This,PresetLightingDirection) ) 

#define ThreeDFormat_put_PresetLightingDirection(This,PresetLightingDirection)	\
    ( (This)->lpVtbl -> put_PresetLightingDirection(This,PresetLightingDirection) ) 

#define ThreeDFormat_get_PresetLightingSoftness(This,PresetLightingSoftness)	\
    ( (This)->lpVtbl -> get_PresetLightingSoftness(This,PresetLightingSoftness) ) 

#define ThreeDFormat_put_PresetLightingSoftness(This,PresetLightingSoftness)	\
    ( (This)->lpVtbl -> put_PresetLightingSoftness(This,PresetLightingSoftness) ) 

#define ThreeDFormat_get_PresetMaterial(This,PresetMaterial)	\
    ( (This)->lpVtbl -> get_PresetMaterial(This,PresetMaterial) ) 

#define ThreeDFormat_put_PresetMaterial(This,PresetMaterial)	\
    ( (This)->lpVtbl -> put_PresetMaterial(This,PresetMaterial) ) 

#define ThreeDFormat_get_PresetThreeDFormat(This,PresetThreeDFormat)	\
    ( (This)->lpVtbl -> get_PresetThreeDFormat(This,PresetThreeDFormat) ) 

#define ThreeDFormat_get_RotationX(This,RotationX)	\
    ( (This)->lpVtbl -> get_RotationX(This,RotationX) ) 

#define ThreeDFormat_put_RotationX(This,RotationX)	\
    ( (This)->lpVtbl -> put_RotationX(This,RotationX) ) 

#define ThreeDFormat_get_RotationY(This,RotationY)	\
    ( (This)->lpVtbl -> get_RotationY(This,RotationY) ) 

#define ThreeDFormat_put_RotationY(This,RotationY)	\
    ( (This)->lpVtbl -> put_RotationY(This,RotationY) ) 

#define ThreeDFormat_get_Visible(This,Visible)	\
    ( (This)->lpVtbl -> get_Visible(This,Visible) ) 

#define ThreeDFormat_put_Visible(This,Visible)	\
    ( (This)->lpVtbl -> put_Visible(This,Visible) ) 

#define ThreeDFormat_SetPresetCamera(This,PresetCamera)	\
    ( (This)->lpVtbl -> SetPresetCamera(This,PresetCamera) ) 

#define ThreeDFormat_IncrementRotationZ(This,Increment)	\
    ( (This)->lpVtbl -> IncrementRotationZ(This,Increment) ) 

#define ThreeDFormat_IncrementRotationHorizontal(This,Increment)	\
    ( (This)->lpVtbl -> IncrementRotationHorizontal(This,Increment) ) 

#define ThreeDFormat_IncrementRotationVertical(This,Increment)	\
    ( (This)->lpVtbl -> IncrementRotationVertical(This,Increment) ) 

#define ThreeDFormat_get_PresetLighting(This,PresetLightRigType)	\
    ( (This)->lpVtbl -> get_PresetLighting(This,PresetLightRigType) ) 

#define ThreeDFormat_put_PresetLighting(This,PresetLightRigType)	\
    ( (This)->lpVtbl -> put_PresetLighting(This,PresetLightRigType) ) 

#define ThreeDFormat_get_Z(This,Z)	\
    ( (This)->lpVtbl -> get_Z(This,Z) ) 

#define ThreeDFormat_put_Z(This,Z)	\
    ( (This)->lpVtbl -> put_Z(This,Z) ) 

#define ThreeDFormat_get_BevelTopType(This,BevelTopType)	\
    ( (This)->lpVtbl -> get_BevelTopType(This,BevelTopType) ) 

#define ThreeDFormat_put_BevelTopType(This,BevelTopType)	\
    ( (This)->lpVtbl -> put_BevelTopType(This,BevelTopType) ) 

#define ThreeDFormat_get_BevelTopInset(This,BevelTopInset)	\
    ( (This)->lpVtbl -> get_BevelTopInset(This,BevelTopInset) ) 

#define ThreeDFormat_put_BevelTopInset(This,BevelTopInset)	\
    ( (This)->lpVtbl -> put_BevelTopInset(This,BevelTopInset) ) 

#define ThreeDFormat_get_BevelTopDepth(This,BevelTopDepth)	\
    ( (This)->lpVtbl -> get_BevelTopDepth(This,BevelTopDepth) ) 

#define ThreeDFormat_put_BevelTopDepth(This,BevelTopDepth)	\
    ( (This)->lpVtbl -> put_BevelTopDepth(This,BevelTopDepth) ) 

#define ThreeDFormat_get_BevelBottomType(This,BevelBottomType)	\
    ( (This)->lpVtbl -> get_BevelBottomType(This,BevelBottomType) ) 

#define ThreeDFormat_put_BevelBottomType(This,BevelBottomType)	\
    ( (This)->lpVtbl -> put_BevelBottomType(This,BevelBottomType) ) 

#define ThreeDFormat_get_BevelBottomInset(This,BevelBottomInset)	\
    ( (This)->lpVtbl -> get_BevelBottomInset(This,BevelBottomInset) ) 

#define ThreeDFormat_put_BevelBottomInset(This,BevelBottomInset)	\
    ( (This)->lpVtbl -> put_BevelBottomInset(This,BevelBottomInset) ) 

#define ThreeDFormat_get_BevelBottomDepth(This,BevelBottomDepth)	\
    ( (This)->lpVtbl -> get_BevelBottomDepth(This,BevelBottomDepth) ) 

#define ThreeDFormat_put_BevelBottomDepth(This,BevelBottomDepth)	\
    ( (This)->lpVtbl -> put_BevelBottomDepth(This,BevelBottomDepth) ) 

#define ThreeDFormat_get_PresetCamera(This,PresetCamera)	\
    ( (This)->lpVtbl -> get_PresetCamera(This,PresetCamera) ) 

#define ThreeDFormat_get_RotationZ(This,RotationZ)	\
    ( (This)->lpVtbl -> get_RotationZ(This,RotationZ) ) 

#define ThreeDFormat_put_RotationZ(This,RotationZ)	\
    ( (This)->lpVtbl -> put_RotationZ(This,RotationZ) ) 

#define ThreeDFormat_get_ContourWidth(This,Width)	\
    ( (This)->lpVtbl -> get_ContourWidth(This,Width) ) 

#define ThreeDFormat_put_ContourWidth(This,Width)	\
    ( (This)->lpVtbl -> put_ContourWidth(This,Width) ) 

#define ThreeDFormat_get_ContourColor(This,ContourColor)	\
    ( (This)->lpVtbl -> get_ContourColor(This,ContourColor) ) 

#define ThreeDFormat_get_FieldOfView(This,FOV)	\
    ( (This)->lpVtbl -> get_FieldOfView(This,FOV) ) 

#define ThreeDFormat_put_FieldOfView(This,FOV)	\
    ( (This)->lpVtbl -> put_FieldOfView(This,FOV) ) 

#define ThreeDFormat_get_ProjectText(This,ProjectText)	\
    ( (This)->lpVtbl -> get_ProjectText(This,ProjectText) ) 

#define ThreeDFormat_put_ProjectText(This,ProjectText)	\
    ( (This)->lpVtbl -> put_ProjectText(This,ProjectText) ) 

#define ThreeDFormat_get_LightAngle(This,LightAngle)	\
    ( (This)->lpVtbl -> get_LightAngle(This,LightAngle) ) 

#define ThreeDFormat_put_LightAngle(This,LightAngle)	\
    ( (This)->lpVtbl -> put_LightAngle(This,LightAngle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ThreeDFormat_INTERFACE_DEFINED__ */


#ifndef __CalloutFormat_INTERFACE_DEFINED__
#define __CalloutFormat_INTERFACE_DEFINED__

/* interface CalloutFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_CalloutFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493485-5A91-11CF-8700-00AA0060263B")
    CalloutFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AutomaticLength( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CustomDrop( 
            /* [in] */ single Drop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CustomLength( 
            /* [in] */ single Length) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PresetDrop( 
            /* [in] */ MsoCalloutDropType DropType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Accent( 
            /* [retval][out] */ MsoTriState *Accent) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Accent( 
            /* [in] */ MsoTriState Accent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Angle( 
            /* [retval][out] */ MsoCalloutAngleType *Angle) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Angle( 
            /* [in] */ MsoCalloutAngleType Angle) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoAttach( 
            /* [retval][out] */ MsoTriState *AutoAttach) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoAttach( 
            /* [in] */ MsoTriState AutoAttach) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoLength( 
            /* [retval][out] */ MsoTriState *AutoLength) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ MsoTriState *Border) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Border( 
            /* [in] */ MsoTriState Border) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Drop( 
            /* [retval][out] */ single *Drop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DropType( 
            /* [retval][out] */ MsoCalloutDropType *DropType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Gap( 
            /* [retval][out] */ single *Gap) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Gap( 
            /* [in] */ single Gap) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ single *Length) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoCalloutType *Type) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ MsoCalloutType Type) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CalloutFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CalloutFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CalloutFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CalloutFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CalloutFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CalloutFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CalloutFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CalloutFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CalloutFormat * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            CalloutFormat * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CalloutFormat * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AutomaticLength )( 
            CalloutFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CustomDrop )( 
            CalloutFormat * This,
            /* [in] */ single Drop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CustomLength )( 
            CalloutFormat * This,
            /* [in] */ single Length);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PresetDrop )( 
            CalloutFormat * This,
            /* [in] */ MsoCalloutDropType DropType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Accent )( 
            CalloutFormat * This,
            /* [retval][out] */ MsoTriState *Accent);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Accent )( 
            CalloutFormat * This,
            /* [in] */ MsoTriState Accent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Angle )( 
            CalloutFormat * This,
            /* [retval][out] */ MsoCalloutAngleType *Angle);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Angle )( 
            CalloutFormat * This,
            /* [in] */ MsoCalloutAngleType Angle);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoAttach )( 
            CalloutFormat * This,
            /* [retval][out] */ MsoTriState *AutoAttach);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoAttach )( 
            CalloutFormat * This,
            /* [in] */ MsoTriState AutoAttach);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoLength )( 
            CalloutFormat * This,
            /* [retval][out] */ MsoTriState *AutoLength);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            CalloutFormat * This,
            /* [retval][out] */ MsoTriState *Border);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Border )( 
            CalloutFormat * This,
            /* [in] */ MsoTriState Border);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Drop )( 
            CalloutFormat * This,
            /* [retval][out] */ single *Drop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DropType )( 
            CalloutFormat * This,
            /* [retval][out] */ MsoCalloutDropType *DropType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Gap )( 
            CalloutFormat * This,
            /* [retval][out] */ single *Gap);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Gap )( 
            CalloutFormat * This,
            /* [in] */ single Gap);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            CalloutFormat * This,
            /* [retval][out] */ single *Length);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            CalloutFormat * This,
            /* [retval][out] */ MsoCalloutType *Type);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            CalloutFormat * This,
            /* [in] */ MsoCalloutType Type);
        
        END_INTERFACE
    } CalloutFormatVtbl;

    interface CalloutFormat
    {
        CONST_VTBL struct CalloutFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CalloutFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CalloutFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CalloutFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CalloutFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CalloutFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CalloutFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CalloutFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CalloutFormat_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define CalloutFormat_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define CalloutFormat_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define CalloutFormat_AutomaticLength(This)	\
    ( (This)->lpVtbl -> AutomaticLength(This) ) 

#define CalloutFormat_CustomDrop(This,Drop)	\
    ( (This)->lpVtbl -> CustomDrop(This,Drop) ) 

#define CalloutFormat_CustomLength(This,Length)	\
    ( (This)->lpVtbl -> CustomLength(This,Length) ) 

#define CalloutFormat_PresetDrop(This,DropType)	\
    ( (This)->lpVtbl -> PresetDrop(This,DropType) ) 

#define CalloutFormat_get_Accent(This,Accent)	\
    ( (This)->lpVtbl -> get_Accent(This,Accent) ) 

#define CalloutFormat_put_Accent(This,Accent)	\
    ( (This)->lpVtbl -> put_Accent(This,Accent) ) 

#define CalloutFormat_get_Angle(This,Angle)	\
    ( (This)->lpVtbl -> get_Angle(This,Angle) ) 

#define CalloutFormat_put_Angle(This,Angle)	\
    ( (This)->lpVtbl -> put_Angle(This,Angle) ) 

#define CalloutFormat_get_AutoAttach(This,AutoAttach)	\
    ( (This)->lpVtbl -> get_AutoAttach(This,AutoAttach) ) 

#define CalloutFormat_put_AutoAttach(This,AutoAttach)	\
    ( (This)->lpVtbl -> put_AutoAttach(This,AutoAttach) ) 

#define CalloutFormat_get_AutoLength(This,AutoLength)	\
    ( (This)->lpVtbl -> get_AutoLength(This,AutoLength) ) 

#define CalloutFormat_get_Border(This,Border)	\
    ( (This)->lpVtbl -> get_Border(This,Border) ) 

#define CalloutFormat_put_Border(This,Border)	\
    ( (This)->lpVtbl -> put_Border(This,Border) ) 

#define CalloutFormat_get_Drop(This,Drop)	\
    ( (This)->lpVtbl -> get_Drop(This,Drop) ) 

#define CalloutFormat_get_DropType(This,DropType)	\
    ( (This)->lpVtbl -> get_DropType(This,DropType) ) 

#define CalloutFormat_get_Gap(This,Gap)	\
    ( (This)->lpVtbl -> get_Gap(This,Gap) ) 

#define CalloutFormat_put_Gap(This,Gap)	\
    ( (This)->lpVtbl -> put_Gap(This,Gap) ) 

#define CalloutFormat_get_Length(This,Length)	\
    ( (This)->lpVtbl -> get_Length(This,Length) ) 

#define CalloutFormat_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define CalloutFormat_put_Type(This,Type)	\
    ( (This)->lpVtbl -> put_Type(This,Type) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CalloutFormat_INTERFACE_DEFINED__ */


#ifndef __ShapeNodes_INTERFACE_DEFINED__
#define __ShapeNodes_INTERFACE_DEFINED__

/* interface ShapeNodes */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ShapeNodes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493486-5A91-11CF-8700-00AA0060263B")
    ShapeNodes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ int *Count) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ ShapeNode **Item) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **_NewEnum) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ int Index) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ int Index,
            /* [in] */ MsoSegmentType SegmentType,
            /* [in] */ MsoEditingType EditingType,
            /* [in] */ single X1,
            /* [in] */ single Y1,
            /* [defaultvalue][optional][in] */ single X2 = 0,
            /* [defaultvalue][optional][in] */ single Y2 = 0,
            /* [defaultvalue][optional][in] */ single X3 = 0,
            /* [defaultvalue][optional][in] */ single Y3 = 0) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetEditingType( 
            /* [in] */ int Index,
            /* [in] */ MsoEditingType EditingType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetPosition( 
            /* [in] */ int Index,
            /* [in] */ single X1,
            /* [in] */ single Y1) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetSegmentType( 
            /* [in] */ int Index,
            /* [in] */ MsoSegmentType SegmentType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ShapeNodesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ShapeNodes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ShapeNodes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ShapeNodes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ShapeNodes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ShapeNodes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ShapeNodes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ShapeNodes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ShapeNodes * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ShapeNodes * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ShapeNodes * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ShapeNodes * This,
            /* [retval][out] */ int *Count);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ShapeNodes * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ ShapeNode **Item);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ShapeNodes * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ShapeNodes * This,
            /* [in] */ int Index);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            ShapeNodes * This,
            /* [in] */ int Index,
            /* [in] */ MsoSegmentType SegmentType,
            /* [in] */ MsoEditingType EditingType,
            /* [in] */ single X1,
            /* [in] */ single Y1,
            /* [defaultvalue][optional][in] */ single X2,
            /* [defaultvalue][optional][in] */ single Y2,
            /* [defaultvalue][optional][in] */ single X3,
            /* [defaultvalue][optional][in] */ single Y3);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetEditingType )( 
            ShapeNodes * This,
            /* [in] */ int Index,
            /* [in] */ MsoEditingType EditingType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetPosition )( 
            ShapeNodes * This,
            /* [in] */ int Index,
            /* [in] */ single X1,
            /* [in] */ single Y1);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetSegmentType )( 
            ShapeNodes * This,
            /* [in] */ int Index,
            /* [in] */ MsoSegmentType SegmentType);
        
        END_INTERFACE
    } ShapeNodesVtbl;

    interface ShapeNodes
    {
        CONST_VTBL struct ShapeNodesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ShapeNodes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ShapeNodes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ShapeNodes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ShapeNodes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ShapeNodes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ShapeNodes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ShapeNodes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ShapeNodes_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define ShapeNodes_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define ShapeNodes_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ShapeNodes_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 

#define ShapeNodes_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define ShapeNodes_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define ShapeNodes_Delete(This,Index)	\
    ( (This)->lpVtbl -> Delete(This,Index) ) 

#define ShapeNodes_Insert(This,Index,SegmentType,EditingType,X1,Y1,X2,Y2,X3,Y3)	\
    ( (This)->lpVtbl -> Insert(This,Index,SegmentType,EditingType,X1,Y1,X2,Y2,X3,Y3) ) 

#define ShapeNodes_SetEditingType(This,Index,EditingType)	\
    ( (This)->lpVtbl -> SetEditingType(This,Index,EditingType) ) 

#define ShapeNodes_SetPosition(This,Index,X1,Y1)	\
    ( (This)->lpVtbl -> SetPosition(This,Index,X1,Y1) ) 

#define ShapeNodes_SetSegmentType(This,Index,SegmentType)	\
    ( (This)->lpVtbl -> SetSegmentType(This,Index,SegmentType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ShapeNodes_INTERFACE_DEFINED__ */


#ifndef __ShapeNode_INTERFACE_DEFINED__
#define __ShapeNode_INTERFACE_DEFINED__

/* interface ShapeNode */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ShapeNode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493487-5A91-11CF-8700-00AA0060263B")
    ShapeNode : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EditingType( 
            /* [retval][out] */ MsoEditingType *EditingType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Points( 
            /* [retval][out] */ VARIANT *Points) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SegmentType( 
            /* [retval][out] */ MsoSegmentType *SegmentType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ShapeNodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ShapeNode * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ShapeNode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ShapeNode * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ShapeNode * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ShapeNode * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ShapeNode * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ShapeNode * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ShapeNode * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ShapeNode * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ShapeNode * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EditingType )( 
            ShapeNode * This,
            /* [retval][out] */ MsoEditingType *EditingType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Points )( 
            ShapeNode * This,
            /* [retval][out] */ VARIANT *Points);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SegmentType )( 
            ShapeNode * This,
            /* [retval][out] */ MsoSegmentType *SegmentType);
        
        END_INTERFACE
    } ShapeNodeVtbl;

    interface ShapeNode
    {
        CONST_VTBL struct ShapeNodeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ShapeNode_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ShapeNode_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ShapeNode_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ShapeNode_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ShapeNode_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ShapeNode_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ShapeNode_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ShapeNode_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define ShapeNode_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define ShapeNode_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ShapeNode_get_EditingType(This,EditingType)	\
    ( (This)->lpVtbl -> get_EditingType(This,EditingType) ) 

#define ShapeNode_get_Points(This,Points)	\
    ( (This)->lpVtbl -> get_Points(This,Points) ) 

#define ShapeNode_get_SegmentType(This,SegmentType)	\
    ( (This)->lpVtbl -> get_SegmentType(This,SegmentType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ShapeNode_INTERFACE_DEFINED__ */


#ifndef __OLEFormat_INTERFACE_DEFINED__
#define __OLEFormat_INTERFACE_DEFINED__

/* interface OLEFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_OLEFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493488-5A91-11CF-8700-00AA0060263B")
    OLEFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObjectVerbs( 
            /* [retval][out] */ ObjectVerbs **ObjectVerbs) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **Object) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProgID( 
            /* [retval][out] */ BSTR *ProgID) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FollowColors( 
            /* [retval][out] */ PpFollowColors *FollowColors) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FollowColors( 
            /* [in] */ PpFollowColors FollowColors) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DoVerb( 
            /* [defaultvalue][optional][in] */ int Index = 0) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OLEFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OLEFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OLEFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OLEFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OLEFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OLEFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OLEFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OLEFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            OLEFormat * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            OLEFormat * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectVerbs )( 
            OLEFormat * This,
            /* [retval][out] */ ObjectVerbs **ObjectVerbs);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            OLEFormat * This,
            /* [retval][out] */ IDispatch **Object);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProgID )( 
            OLEFormat * This,
            /* [retval][out] */ BSTR *ProgID);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FollowColors )( 
            OLEFormat * This,
            /* [retval][out] */ PpFollowColors *FollowColors);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FollowColors )( 
            OLEFormat * This,
            /* [in] */ PpFollowColors FollowColors);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DoVerb )( 
            OLEFormat * This,
            /* [defaultvalue][optional][in] */ int Index);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            OLEFormat * This);
        
        END_INTERFACE
    } OLEFormatVtbl;

    interface OLEFormat
    {
        CONST_VTBL struct OLEFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OLEFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define OLEFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define OLEFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define OLEFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define OLEFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define OLEFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define OLEFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define OLEFormat_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define OLEFormat_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define OLEFormat_get_ObjectVerbs(This,ObjectVerbs)	\
    ( (This)->lpVtbl -> get_ObjectVerbs(This,ObjectVerbs) ) 

#define OLEFormat_get_Object(This,Object)	\
    ( (This)->lpVtbl -> get_Object(This,Object) ) 

#define OLEFormat_get_ProgID(This,ProgID)	\
    ( (This)->lpVtbl -> get_ProgID(This,ProgID) ) 

#define OLEFormat_get_FollowColors(This,FollowColors)	\
    ( (This)->lpVtbl -> get_FollowColors(This,FollowColors) ) 

#define OLEFormat_put_FollowColors(This,FollowColors)	\
    ( (This)->lpVtbl -> put_FollowColors(This,FollowColors) ) 

#define OLEFormat_DoVerb(This,Index)	\
    ( (This)->lpVtbl -> DoVerb(This,Index) ) 

#define OLEFormat_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __OLEFormat_INTERFACE_DEFINED__ */


#ifndef __LinkFormat_INTERFACE_DEFINED__
#define __LinkFormat_INTERFACE_DEFINED__

/* interface LinkFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_LinkFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493489-5A91-11CF-8700-00AA0060263B")
    LinkFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SourceFullName( 
            /* [retval][out] */ BSTR *SourceFullName) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SourceFullName( 
            /* [in] */ BSTR SourceFullName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoUpdate( 
            /* [retval][out] */ PpUpdateOption *AutoUpdate) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoUpdate( 
            /* [in] */ PpUpdateOption AutoUpdate) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE BreakLink( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LinkFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            LinkFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            LinkFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            LinkFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            LinkFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            LinkFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            LinkFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            LinkFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            LinkFormat * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            LinkFormat * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceFullName )( 
            LinkFormat * This,
            /* [retval][out] */ BSTR *SourceFullName);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SourceFullName )( 
            LinkFormat * This,
            /* [in] */ BSTR SourceFullName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdate )( 
            LinkFormat * This,
            /* [retval][out] */ PpUpdateOption *AutoUpdate);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdate )( 
            LinkFormat * This,
            /* [in] */ PpUpdateOption AutoUpdate);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            LinkFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BreakLink )( 
            LinkFormat * This);
        
        END_INTERFACE
    } LinkFormatVtbl;

    interface LinkFormat
    {
        CONST_VTBL struct LinkFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define LinkFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define LinkFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define LinkFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define LinkFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define LinkFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define LinkFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define LinkFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define LinkFormat_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define LinkFormat_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define LinkFormat_get_SourceFullName(This,SourceFullName)	\
    ( (This)->lpVtbl -> get_SourceFullName(This,SourceFullName) ) 

#define LinkFormat_put_SourceFullName(This,SourceFullName)	\
    ( (This)->lpVtbl -> put_SourceFullName(This,SourceFullName) ) 

#define LinkFormat_get_AutoUpdate(This,AutoUpdate)	\
    ( (This)->lpVtbl -> get_AutoUpdate(This,AutoUpdate) ) 

#define LinkFormat_put_AutoUpdate(This,AutoUpdate)	\
    ( (This)->lpVtbl -> put_AutoUpdate(This,AutoUpdate) ) 

#define LinkFormat_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define LinkFormat_BreakLink(This)	\
    ( (This)->lpVtbl -> BreakLink(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __LinkFormat_INTERFACE_DEFINED__ */


#ifndef __ObjectVerbs_INTERFACE_DEFINED__
#define __ObjectVerbs_INTERFACE_DEFINED__

/* interface ObjectVerbs */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ObjectVerbs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149348A-5A91-11CF-8700-00AA0060263B")
    ObjectVerbs : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ BSTR *Item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ObjectVerbsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ObjectVerbs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ObjectVerbs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ObjectVerbs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ObjectVerbs * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ObjectVerbs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ObjectVerbs * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ObjectVerbs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ObjectVerbs * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            ObjectVerbs * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ObjectVerbs * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ObjectVerbs * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ObjectVerbs * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ObjectVerbs * This,
            /* [in] */ int Index,
            /* [retval][out] */ BSTR *Item);
        
        END_INTERFACE
    } ObjectVerbsVtbl;

    interface ObjectVerbs
    {
        CONST_VTBL struct ObjectVerbsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ObjectVerbs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ObjectVerbs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ObjectVerbs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ObjectVerbs_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ObjectVerbs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ObjectVerbs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ObjectVerbs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ObjectVerbs_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define ObjectVerbs__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define ObjectVerbs_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define ObjectVerbs_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ObjectVerbs_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ObjectVerbs_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ObjectVerbs_INTERFACE_DEFINED__ */


#ifndef __AnimationSettings_INTERFACE_DEFINED__
#define __AnimationSettings_INTERFACE_DEFINED__

/* interface AnimationSettings */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_AnimationSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149348B-5A91-11CF-8700-00AA0060263B")
    AnimationSettings : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DimColor( 
            /* [retval][out] */ ColorFormat **DimColor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SoundEffect( 
            /* [retval][out] */ SoundEffect **SoundEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EntryEffect( 
            /* [retval][out] */ PpEntryEffect *EntryEffect) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EntryEffect( 
            /* [in] */ PpEntryEffect EntryEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AfterEffect( 
            /* [retval][out] */ PpAfterEffect *AfterEffect) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AfterEffect( 
            /* [in] */ PpAfterEffect AfterEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnimationOrder( 
            /* [retval][out] */ int *AnimationOrder) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AnimationOrder( 
            /* [in] */ int AnimationOrder) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AdvanceMode( 
            /* [retval][out] */ PpAdvanceMode *AdvanceMode) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AdvanceMode( 
            /* [in] */ PpAdvanceMode AdvanceMode) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AdvanceTime( 
            /* [retval][out] */ single *AdvanceTime) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AdvanceTime( 
            /* [in] */ single AdvanceTime) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlaySettings( 
            /* [retval][out] */ PlaySettings **PlaySettings) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextLevelEffect( 
            /* [retval][out] */ PpTextLevelEffect *TextLevelEffect) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextLevelEffect( 
            /* [in] */ PpTextLevelEffect TextLevelEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextUnitEffect( 
            /* [retval][out] */ PpTextUnitEffect *TextUnitEffect) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextUnitEffect( 
            /* [in] */ PpTextUnitEffect TextUnitEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Animate( 
            /* [retval][out] */ MsoTriState *Animate) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Animate( 
            /* [in] */ MsoTriState Animate) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnimateBackground( 
            /* [retval][out] */ MsoTriState *AnimateBackground) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AnimateBackground( 
            /* [in] */ MsoTriState AnimateBackground) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnimateTextInReverse( 
            /* [retval][out] */ MsoTriState *AnimateTextInReverse) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AnimateTextInReverse( 
            /* [in] */ MsoTriState AnimateTextInReverse) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChartUnitEffect( 
            /* [retval][out] */ PpChartUnitEffect *ChartUnitEffect) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ChartUnitEffect( 
            /* [in] */ PpChartUnitEffect ChartUnitEffect) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AnimationSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AnimationSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AnimationSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AnimationSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AnimationSettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AnimationSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AnimationSettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AnimationSettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            AnimationSettings * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AnimationSettings * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DimColor )( 
            AnimationSettings * This,
            /* [retval][out] */ ColorFormat **DimColor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SoundEffect )( 
            AnimationSettings * This,
            /* [retval][out] */ SoundEffect **SoundEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntryEffect )( 
            AnimationSettings * This,
            /* [retval][out] */ PpEntryEffect *EntryEffect);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntryEffect )( 
            AnimationSettings * This,
            /* [in] */ PpEntryEffect EntryEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AfterEffect )( 
            AnimationSettings * This,
            /* [retval][out] */ PpAfterEffect *AfterEffect);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AfterEffect )( 
            AnimationSettings * This,
            /* [in] */ PpAfterEffect AfterEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnimationOrder )( 
            AnimationSettings * This,
            /* [retval][out] */ int *AnimationOrder);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AnimationOrder )( 
            AnimationSettings * This,
            /* [in] */ int AnimationOrder);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AdvanceMode )( 
            AnimationSettings * This,
            /* [retval][out] */ PpAdvanceMode *AdvanceMode);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AdvanceMode )( 
            AnimationSettings * This,
            /* [in] */ PpAdvanceMode AdvanceMode);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AdvanceTime )( 
            AnimationSettings * This,
            /* [retval][out] */ single *AdvanceTime);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AdvanceTime )( 
            AnimationSettings * This,
            /* [in] */ single AdvanceTime);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlaySettings )( 
            AnimationSettings * This,
            /* [retval][out] */ PlaySettings **PlaySettings);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextLevelEffect )( 
            AnimationSettings * This,
            /* [retval][out] */ PpTextLevelEffect *TextLevelEffect);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextLevelEffect )( 
            AnimationSettings * This,
            /* [in] */ PpTextLevelEffect TextLevelEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextUnitEffect )( 
            AnimationSettings * This,
            /* [retval][out] */ PpTextUnitEffect *TextUnitEffect);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextUnitEffect )( 
            AnimationSettings * This,
            /* [in] */ PpTextUnitEffect TextUnitEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Animate )( 
            AnimationSettings * This,
            /* [retval][out] */ MsoTriState *Animate);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Animate )( 
            AnimationSettings * This,
            /* [in] */ MsoTriState Animate);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnimateBackground )( 
            AnimationSettings * This,
            /* [retval][out] */ MsoTriState *AnimateBackground);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AnimateBackground )( 
            AnimationSettings * This,
            /* [in] */ MsoTriState AnimateBackground);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnimateTextInReverse )( 
            AnimationSettings * This,
            /* [retval][out] */ MsoTriState *AnimateTextInReverse);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AnimateTextInReverse )( 
            AnimationSettings * This,
            /* [in] */ MsoTriState AnimateTextInReverse);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChartUnitEffect )( 
            AnimationSettings * This,
            /* [retval][out] */ PpChartUnitEffect *ChartUnitEffect);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ChartUnitEffect )( 
            AnimationSettings * This,
            /* [in] */ PpChartUnitEffect ChartUnitEffect);
        
        END_INTERFACE
    } AnimationSettingsVtbl;

    interface AnimationSettings
    {
        CONST_VTBL struct AnimationSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AnimationSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AnimationSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AnimationSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AnimationSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AnimationSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AnimationSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AnimationSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AnimationSettings_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define AnimationSettings_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define AnimationSettings_get_DimColor(This,DimColor)	\
    ( (This)->lpVtbl -> get_DimColor(This,DimColor) ) 

#define AnimationSettings_get_SoundEffect(This,SoundEffect)	\
    ( (This)->lpVtbl -> get_SoundEffect(This,SoundEffect) ) 

#define AnimationSettings_get_EntryEffect(This,EntryEffect)	\
    ( (This)->lpVtbl -> get_EntryEffect(This,EntryEffect) ) 

#define AnimationSettings_put_EntryEffect(This,EntryEffect)	\
    ( (This)->lpVtbl -> put_EntryEffect(This,EntryEffect) ) 

#define AnimationSettings_get_AfterEffect(This,AfterEffect)	\
    ( (This)->lpVtbl -> get_AfterEffect(This,AfterEffect) ) 

#define AnimationSettings_put_AfterEffect(This,AfterEffect)	\
    ( (This)->lpVtbl -> put_AfterEffect(This,AfterEffect) ) 

#define AnimationSettings_get_AnimationOrder(This,AnimationOrder)	\
    ( (This)->lpVtbl -> get_AnimationOrder(This,AnimationOrder) ) 

#define AnimationSettings_put_AnimationOrder(This,AnimationOrder)	\
    ( (This)->lpVtbl -> put_AnimationOrder(This,AnimationOrder) ) 

#define AnimationSettings_get_AdvanceMode(This,AdvanceMode)	\
    ( (This)->lpVtbl -> get_AdvanceMode(This,AdvanceMode) ) 

#define AnimationSettings_put_AdvanceMode(This,AdvanceMode)	\
    ( (This)->lpVtbl -> put_AdvanceMode(This,AdvanceMode) ) 

#define AnimationSettings_get_AdvanceTime(This,AdvanceTime)	\
    ( (This)->lpVtbl -> get_AdvanceTime(This,AdvanceTime) ) 

#define AnimationSettings_put_AdvanceTime(This,AdvanceTime)	\
    ( (This)->lpVtbl -> put_AdvanceTime(This,AdvanceTime) ) 

#define AnimationSettings_get_PlaySettings(This,PlaySettings)	\
    ( (This)->lpVtbl -> get_PlaySettings(This,PlaySettings) ) 

#define AnimationSettings_get_TextLevelEffect(This,TextLevelEffect)	\
    ( (This)->lpVtbl -> get_TextLevelEffect(This,TextLevelEffect) ) 

#define AnimationSettings_put_TextLevelEffect(This,TextLevelEffect)	\
    ( (This)->lpVtbl -> put_TextLevelEffect(This,TextLevelEffect) ) 

#define AnimationSettings_get_TextUnitEffect(This,TextUnitEffect)	\
    ( (This)->lpVtbl -> get_TextUnitEffect(This,TextUnitEffect) ) 

#define AnimationSettings_put_TextUnitEffect(This,TextUnitEffect)	\
    ( (This)->lpVtbl -> put_TextUnitEffect(This,TextUnitEffect) ) 

#define AnimationSettings_get_Animate(This,Animate)	\
    ( (This)->lpVtbl -> get_Animate(This,Animate) ) 

#define AnimationSettings_put_Animate(This,Animate)	\
    ( (This)->lpVtbl -> put_Animate(This,Animate) ) 

#define AnimationSettings_get_AnimateBackground(This,AnimateBackground)	\
    ( (This)->lpVtbl -> get_AnimateBackground(This,AnimateBackground) ) 

#define AnimationSettings_put_AnimateBackground(This,AnimateBackground)	\
    ( (This)->lpVtbl -> put_AnimateBackground(This,AnimateBackground) ) 

#define AnimationSettings_get_AnimateTextInReverse(This,AnimateTextInReverse)	\
    ( (This)->lpVtbl -> get_AnimateTextInReverse(This,AnimateTextInReverse) ) 

#define AnimationSettings_put_AnimateTextInReverse(This,AnimateTextInReverse)	\
    ( (This)->lpVtbl -> put_AnimateTextInReverse(This,AnimateTextInReverse) ) 

#define AnimationSettings_get_ChartUnitEffect(This,ChartUnitEffect)	\
    ( (This)->lpVtbl -> get_ChartUnitEffect(This,ChartUnitEffect) ) 

#define AnimationSettings_put_ChartUnitEffect(This,ChartUnitEffect)	\
    ( (This)->lpVtbl -> put_ChartUnitEffect(This,ChartUnitEffect) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AnimationSettings_INTERFACE_DEFINED__ */


#ifndef __ActionSettings_INTERFACE_DEFINED__
#define __ActionSettings_INTERFACE_DEFINED__

/* interface ActionSettings */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ActionSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149348C-5A91-11CF-8700-00AA0060263B")
    ActionSettings : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ PpMouseActivation Index,
            /* [retval][out] */ ActionSetting **Item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ActionSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ActionSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ActionSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ActionSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ActionSettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ActionSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ActionSettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ActionSettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ActionSettings * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            ActionSettings * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ActionSettings * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ActionSettings * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ActionSettings * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ActionSettings * This,
            /* [in] */ PpMouseActivation Index,
            /* [retval][out] */ ActionSetting **Item);
        
        END_INTERFACE
    } ActionSettingsVtbl;

    interface ActionSettings
    {
        CONST_VTBL struct ActionSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ActionSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ActionSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ActionSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ActionSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ActionSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ActionSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ActionSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ActionSettings_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define ActionSettings__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define ActionSettings_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define ActionSettings_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ActionSettings_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ActionSettings_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ActionSettings_INTERFACE_DEFINED__ */


#ifndef __ActionSetting_INTERFACE_DEFINED__
#define __ActionSetting_INTERFACE_DEFINED__

/* interface ActionSetting */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ActionSetting;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149348D-5A91-11CF-8700-00AA0060263B")
    ActionSetting : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Action( 
            /* [retval][out] */ PpActionType *Action) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Action( 
            /* [in] */ PpActionType Action) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActionVerb( 
            /* [retval][out] */ BSTR *ActionVerb) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ActionVerb( 
            /* [in] */ BSTR ActionVerb) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnimateAction( 
            /* [retval][out] */ MsoTriState *AnimateAction) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AnimateAction( 
            /* [in] */ MsoTriState AnimateAction) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Run( 
            /* [retval][out] */ BSTR *Run) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Run( 
            /* [in] */ BSTR Run) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideShowName( 
            /* [retval][out] */ BSTR *SlideShowName) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SlideShowName( 
            /* [in] */ BSTR SlideShowName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hyperlink( 
            /* [retval][out] */ Hyperlink **Hyperlink) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SoundEffect( 
            /* [retval][out] */ SoundEffect **SoundEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowAndReturn( 
            /* [retval][out] */ MsoTriState *ShowAndReturn) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowAndReturn( 
            /* [in] */ MsoTriState ShowAndReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ActionSettingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ActionSetting * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ActionSetting * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ActionSetting * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ActionSetting * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ActionSetting * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ActionSetting * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ActionSetting * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ActionSetting * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ActionSetting * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Action )( 
            ActionSetting * This,
            /* [retval][out] */ PpActionType *Action);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Action )( 
            ActionSetting * This,
            /* [in] */ PpActionType Action);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActionVerb )( 
            ActionSetting * This,
            /* [retval][out] */ BSTR *ActionVerb);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ActionVerb )( 
            ActionSetting * This,
            /* [in] */ BSTR ActionVerb);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnimateAction )( 
            ActionSetting * This,
            /* [retval][out] */ MsoTriState *AnimateAction);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AnimateAction )( 
            ActionSetting * This,
            /* [in] */ MsoTriState AnimateAction);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Run )( 
            ActionSetting * This,
            /* [retval][out] */ BSTR *Run);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Run )( 
            ActionSetting * This,
            /* [in] */ BSTR Run);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideShowName )( 
            ActionSetting * This,
            /* [retval][out] */ BSTR *SlideShowName);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SlideShowName )( 
            ActionSetting * This,
            /* [in] */ BSTR SlideShowName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlink )( 
            ActionSetting * This,
            /* [retval][out] */ Hyperlink **Hyperlink);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SoundEffect )( 
            ActionSetting * This,
            /* [retval][out] */ SoundEffect **SoundEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowAndReturn )( 
            ActionSetting * This,
            /* [retval][out] */ MsoTriState *ShowAndReturn);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowAndReturn )( 
            ActionSetting * This,
            /* [in] */ MsoTriState ShowAndReturn);
        
        END_INTERFACE
    } ActionSettingVtbl;

    interface ActionSetting
    {
        CONST_VTBL struct ActionSettingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ActionSetting_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ActionSetting_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ActionSetting_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ActionSetting_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ActionSetting_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ActionSetting_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ActionSetting_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ActionSetting_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ActionSetting_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ActionSetting_get_Action(This,Action)	\
    ( (This)->lpVtbl -> get_Action(This,Action) ) 

#define ActionSetting_put_Action(This,Action)	\
    ( (This)->lpVtbl -> put_Action(This,Action) ) 

#define ActionSetting_get_ActionVerb(This,ActionVerb)	\
    ( (This)->lpVtbl -> get_ActionVerb(This,ActionVerb) ) 

#define ActionSetting_put_ActionVerb(This,ActionVerb)	\
    ( (This)->lpVtbl -> put_ActionVerb(This,ActionVerb) ) 

#define ActionSetting_get_AnimateAction(This,AnimateAction)	\
    ( (This)->lpVtbl -> get_AnimateAction(This,AnimateAction) ) 

#define ActionSetting_put_AnimateAction(This,AnimateAction)	\
    ( (This)->lpVtbl -> put_AnimateAction(This,AnimateAction) ) 

#define ActionSetting_get_Run(This,Run)	\
    ( (This)->lpVtbl -> get_Run(This,Run) ) 

#define ActionSetting_put_Run(This,Run)	\
    ( (This)->lpVtbl -> put_Run(This,Run) ) 

#define ActionSetting_get_SlideShowName(This,SlideShowName)	\
    ( (This)->lpVtbl -> get_SlideShowName(This,SlideShowName) ) 

#define ActionSetting_put_SlideShowName(This,SlideShowName)	\
    ( (This)->lpVtbl -> put_SlideShowName(This,SlideShowName) ) 

#define ActionSetting_get_Hyperlink(This,Hyperlink)	\
    ( (This)->lpVtbl -> get_Hyperlink(This,Hyperlink) ) 

#define ActionSetting_get_SoundEffect(This,SoundEffect)	\
    ( (This)->lpVtbl -> get_SoundEffect(This,SoundEffect) ) 

#define ActionSetting_get_ShowAndReturn(This,ShowAndReturn)	\
    ( (This)->lpVtbl -> get_ShowAndReturn(This,ShowAndReturn) ) 

#define ActionSetting_put_ShowAndReturn(This,ShowAndReturn)	\
    ( (This)->lpVtbl -> put_ShowAndReturn(This,ShowAndReturn) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ActionSetting_INTERFACE_DEFINED__ */


#ifndef __PlaySettings_INTERFACE_DEFINED__
#define __PlaySettings_INTERFACE_DEFINED__

/* interface PlaySettings */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_PlaySettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149348E-5A91-11CF-8700-00AA0060263B")
    PlaySettings : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActionVerb( 
            /* [retval][out] */ BSTR *ActionVerb) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ActionVerb( 
            /* [in] */ BSTR ActionVerb) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HideWhileNotPlaying( 
            /* [retval][out] */ MsoTriState *HideWhileNotPlaying) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HideWhileNotPlaying( 
            /* [in] */ MsoTriState HideWhileNotPlaying) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LoopUntilStopped( 
            /* [retval][out] */ MsoTriState *LoopUntilStopped) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LoopUntilStopped( 
            /* [in] */ MsoTriState LoopUntilStopped) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlayOnEntry( 
            /* [retval][out] */ MsoTriState *PlayOnEntry) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PlayOnEntry( 
            /* [in] */ MsoTriState PlayOnEntry) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RewindMovie( 
            /* [retval][out] */ MsoTriState *RewindMovie) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RewindMovie( 
            /* [in] */ MsoTriState RewindMovie) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PauseAnimation( 
            /* [retval][out] */ MsoTriState *PauseAnimation) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PauseAnimation( 
            /* [in] */ MsoTriState PauseAnimation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StopAfterSlides( 
            /* [retval][out] */ int *StopAfterSlides) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StopAfterSlides( 
            /* [in] */ int StopAfterSlides) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PlaySettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PlaySettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PlaySettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PlaySettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PlaySettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PlaySettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PlaySettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PlaySettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            PlaySettings * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PlaySettings * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActionVerb )( 
            PlaySettings * This,
            /* [retval][out] */ BSTR *ActionVerb);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ActionVerb )( 
            PlaySettings * This,
            /* [in] */ BSTR ActionVerb);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HideWhileNotPlaying )( 
            PlaySettings * This,
            /* [retval][out] */ MsoTriState *HideWhileNotPlaying);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HideWhileNotPlaying )( 
            PlaySettings * This,
            /* [in] */ MsoTriState HideWhileNotPlaying);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LoopUntilStopped )( 
            PlaySettings * This,
            /* [retval][out] */ MsoTriState *LoopUntilStopped);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LoopUntilStopped )( 
            PlaySettings * This,
            /* [in] */ MsoTriState LoopUntilStopped);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlayOnEntry )( 
            PlaySettings * This,
            /* [retval][out] */ MsoTriState *PlayOnEntry);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlayOnEntry )( 
            PlaySettings * This,
            /* [in] */ MsoTriState PlayOnEntry);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RewindMovie )( 
            PlaySettings * This,
            /* [retval][out] */ MsoTriState *RewindMovie);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RewindMovie )( 
            PlaySettings * This,
            /* [in] */ MsoTriState RewindMovie);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PauseAnimation )( 
            PlaySettings * This,
            /* [retval][out] */ MsoTriState *PauseAnimation);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PauseAnimation )( 
            PlaySettings * This,
            /* [in] */ MsoTriState PauseAnimation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StopAfterSlides )( 
            PlaySettings * This,
            /* [retval][out] */ int *StopAfterSlides);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StopAfterSlides )( 
            PlaySettings * This,
            /* [in] */ int StopAfterSlides);
        
        END_INTERFACE
    } PlaySettingsVtbl;

    interface PlaySettings
    {
        CONST_VTBL struct PlaySettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PlaySettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PlaySettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PlaySettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PlaySettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PlaySettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PlaySettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PlaySettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PlaySettings_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define PlaySettings_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define PlaySettings_get_ActionVerb(This,ActionVerb)	\
    ( (This)->lpVtbl -> get_ActionVerb(This,ActionVerb) ) 

#define PlaySettings_put_ActionVerb(This,ActionVerb)	\
    ( (This)->lpVtbl -> put_ActionVerb(This,ActionVerb) ) 

#define PlaySettings_get_HideWhileNotPlaying(This,HideWhileNotPlaying)	\
    ( (This)->lpVtbl -> get_HideWhileNotPlaying(This,HideWhileNotPlaying) ) 

#define PlaySettings_put_HideWhileNotPlaying(This,HideWhileNotPlaying)	\
    ( (This)->lpVtbl -> put_HideWhileNotPlaying(This,HideWhileNotPlaying) ) 

#define PlaySettings_get_LoopUntilStopped(This,LoopUntilStopped)	\
    ( (This)->lpVtbl -> get_LoopUntilStopped(This,LoopUntilStopped) ) 

#define PlaySettings_put_LoopUntilStopped(This,LoopUntilStopped)	\
    ( (This)->lpVtbl -> put_LoopUntilStopped(This,LoopUntilStopped) ) 

#define PlaySettings_get_PlayOnEntry(This,PlayOnEntry)	\
    ( (This)->lpVtbl -> get_PlayOnEntry(This,PlayOnEntry) ) 

#define PlaySettings_put_PlayOnEntry(This,PlayOnEntry)	\
    ( (This)->lpVtbl -> put_PlayOnEntry(This,PlayOnEntry) ) 

#define PlaySettings_get_RewindMovie(This,RewindMovie)	\
    ( (This)->lpVtbl -> get_RewindMovie(This,RewindMovie) ) 

#define PlaySettings_put_RewindMovie(This,RewindMovie)	\
    ( (This)->lpVtbl -> put_RewindMovie(This,RewindMovie) ) 

#define PlaySettings_get_PauseAnimation(This,PauseAnimation)	\
    ( (This)->lpVtbl -> get_PauseAnimation(This,PauseAnimation) ) 

#define PlaySettings_put_PauseAnimation(This,PauseAnimation)	\
    ( (This)->lpVtbl -> put_PauseAnimation(This,PauseAnimation) ) 

#define PlaySettings_get_StopAfterSlides(This,StopAfterSlides)	\
    ( (This)->lpVtbl -> get_StopAfterSlides(This,StopAfterSlides) ) 

#define PlaySettings_put_StopAfterSlides(This,StopAfterSlides)	\
    ( (This)->lpVtbl -> put_StopAfterSlides(This,StopAfterSlides) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PlaySettings_INTERFACE_DEFINED__ */


#ifndef __Ruler_INTERFACE_DEFINED__
#define __Ruler_INTERFACE_DEFINED__

/* interface Ruler */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Ruler;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493490-5A91-11CF-8700-00AA0060263B")
    Ruler : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TabStops( 
            /* [retval][out] */ TabStops **TabStops) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Levels( 
            /* [retval][out] */ RulerLevels **Levels) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RulerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Ruler * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Ruler * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Ruler * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Ruler * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Ruler * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Ruler * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Ruler * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Ruler * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Ruler * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabStops )( 
            Ruler * This,
            /* [retval][out] */ TabStops **TabStops);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Levels )( 
            Ruler * This,
            /* [retval][out] */ RulerLevels **Levels);
        
        END_INTERFACE
    } RulerVtbl;

    interface Ruler
    {
        CONST_VTBL struct RulerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Ruler_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Ruler_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Ruler_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Ruler_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Ruler_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Ruler_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Ruler_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Ruler_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Ruler_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Ruler_get_TabStops(This,TabStops)	\
    ( (This)->lpVtbl -> get_TabStops(This,TabStops) ) 

#define Ruler_get_Levels(This,Levels)	\
    ( (This)->lpVtbl -> get_Levels(This,Levels) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Ruler_INTERFACE_DEFINED__ */


#ifndef __RulerLevels_INTERFACE_DEFINED__
#define __RulerLevels_INTERFACE_DEFINED__

/* interface RulerLevels */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_RulerLevels;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493491-5A91-11CF-8700-00AA0060263B")
    RulerLevels : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ RulerLevel **Item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RulerLevelsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            RulerLevels * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            RulerLevels * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            RulerLevels * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            RulerLevels * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            RulerLevels * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            RulerLevels * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            RulerLevels * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            RulerLevels * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            RulerLevels * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            RulerLevels * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            RulerLevels * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            RulerLevels * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            RulerLevels * This,
            /* [in] */ int Index,
            /* [retval][out] */ RulerLevel **Item);
        
        END_INTERFACE
    } RulerLevelsVtbl;

    interface RulerLevels
    {
        CONST_VTBL struct RulerLevelsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define RulerLevels_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define RulerLevels_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define RulerLevels_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define RulerLevels_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define RulerLevels_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define RulerLevels_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define RulerLevels_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define RulerLevels_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define RulerLevels__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define RulerLevels_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define RulerLevels_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define RulerLevels_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define RulerLevels_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __RulerLevels_INTERFACE_DEFINED__ */


#ifndef __RulerLevel_INTERFACE_DEFINED__
#define __RulerLevel_INTERFACE_DEFINED__

/* interface RulerLevel */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_RulerLevel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493492-5A91-11CF-8700-00AA0060263B")
    RulerLevel : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstMargin( 
            /* [retval][out] */ single *FirstMargin) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FirstMargin( 
            /* [in] */ single FirstMargin) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeftMargin( 
            /* [retval][out] */ single *LeftMargin) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeftMargin( 
            /* [in] */ single LeftMargin) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RulerLevelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            RulerLevel * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            RulerLevel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            RulerLevel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            RulerLevel * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            RulerLevel * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            RulerLevel * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            RulerLevel * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            RulerLevel * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            RulerLevel * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstMargin )( 
            RulerLevel * This,
            /* [retval][out] */ single *FirstMargin);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FirstMargin )( 
            RulerLevel * This,
            /* [in] */ single FirstMargin);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeftMargin )( 
            RulerLevel * This,
            /* [retval][out] */ single *LeftMargin);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeftMargin )( 
            RulerLevel * This,
            /* [in] */ single LeftMargin);
        
        END_INTERFACE
    } RulerLevelVtbl;

    interface RulerLevel
    {
        CONST_VTBL struct RulerLevelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define RulerLevel_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define RulerLevel_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define RulerLevel_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define RulerLevel_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define RulerLevel_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define RulerLevel_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define RulerLevel_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define RulerLevel_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define RulerLevel_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define RulerLevel_get_FirstMargin(This,FirstMargin)	\
    ( (This)->lpVtbl -> get_FirstMargin(This,FirstMargin) ) 

#define RulerLevel_put_FirstMargin(This,FirstMargin)	\
    ( (This)->lpVtbl -> put_FirstMargin(This,FirstMargin) ) 

#define RulerLevel_get_LeftMargin(This,LeftMargin)	\
    ( (This)->lpVtbl -> get_LeftMargin(This,LeftMargin) ) 

#define RulerLevel_put_LeftMargin(This,LeftMargin)	\
    ( (This)->lpVtbl -> put_LeftMargin(This,LeftMargin) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __RulerLevel_INTERFACE_DEFINED__ */


#ifndef __TabStops_INTERFACE_DEFINED__
#define __TabStops_INTERFACE_DEFINED__

/* interface TabStops */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_TabStops;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493493-5A91-11CF-8700-00AA0060263B")
    TabStops : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ TabStop **Item) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultSpacing( 
            /* [retval][out] */ single *DefaultSpacing) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultSpacing( 
            /* [in] */ single DefaultSpacing) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ PpTabStopType Type,
            /* [in] */ single Position,
            /* [retval][out] */ TabStop **Add) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TabStopsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TabStops * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TabStops * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TabStops * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TabStops * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TabStops * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TabStops * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TabStops * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            TabStops * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            TabStops * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TabStops * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TabStops * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TabStops * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TabStops * This,
            /* [in] */ int Index,
            /* [retval][out] */ TabStop **Item);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultSpacing )( 
            TabStops * This,
            /* [retval][out] */ single *DefaultSpacing);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultSpacing )( 
            TabStops * This,
            /* [in] */ single DefaultSpacing);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            TabStops * This,
            /* [in] */ PpTabStopType Type,
            /* [in] */ single Position,
            /* [retval][out] */ TabStop **Add);
        
        END_INTERFACE
    } TabStopsVtbl;

    interface TabStops
    {
        CONST_VTBL struct TabStopsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TabStops_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TabStops_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TabStops_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TabStops_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TabStops_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TabStops_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TabStops_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TabStops_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define TabStops__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define TabStops_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define TabStops_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define TabStops_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define TabStops_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define TabStops_get_DefaultSpacing(This,DefaultSpacing)	\
    ( (This)->lpVtbl -> get_DefaultSpacing(This,DefaultSpacing) ) 

#define TabStops_put_DefaultSpacing(This,DefaultSpacing)	\
    ( (This)->lpVtbl -> put_DefaultSpacing(This,DefaultSpacing) ) 

#define TabStops_Add(This,Type,Position,Add)	\
    ( (This)->lpVtbl -> Add(This,Type,Position,Add) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TabStops_INTERFACE_DEFINED__ */


#ifndef __TabStop_INTERFACE_DEFINED__
#define __TabStop_INTERFACE_DEFINED__

/* interface TabStop */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_TabStop;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493494-5A91-11CF-8700-00AA0060263B")
    TabStop : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ PpTabStopType *Type) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ PpTabStopType Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ single *Position) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ single Position) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TabStopVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TabStop * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TabStop * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TabStop * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TabStop * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TabStop * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TabStop * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TabStop * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TabStop * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TabStop * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            TabStop * This,
            /* [retval][out] */ PpTabStopType *Type);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            TabStop * This,
            /* [in] */ PpTabStopType Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            TabStop * This,
            /* [retval][out] */ single *Position);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            TabStop * This,
            /* [in] */ single Position);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            TabStop * This);
        
        END_INTERFACE
    } TabStopVtbl;

    interface TabStop
    {
        CONST_VTBL struct TabStopVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TabStop_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TabStop_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TabStop_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TabStop_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TabStop_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TabStop_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TabStop_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TabStop_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define TabStop_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define TabStop_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define TabStop_put_Type(This,Type)	\
    ( (This)->lpVtbl -> put_Type(This,Type) ) 

#define TabStop_get_Position(This,Position)	\
    ( (This)->lpVtbl -> get_Position(This,Position) ) 

#define TabStop_put_Position(This,Position)	\
    ( (This)->lpVtbl -> put_Position(This,Position) ) 

#define TabStop_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TabStop_INTERFACE_DEFINED__ */


#ifndef __Font_INTERFACE_DEFINED__
#define __Font_INTERFACE_DEFINED__

/* interface Font */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Font;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493495-5A91-11CF-8700-00AA0060263B")
    Font : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Color( 
            /* [retval][out] */ ColorFormat **Color) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bold( 
            /* [retval][out] */ MsoTriState *Bold) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Bold( 
            /* [in] */ MsoTriState Bold) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Italic( 
            /* [retval][out] */ MsoTriState *Italic) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Italic( 
            /* [in] */ MsoTriState Italic) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ MsoTriState *Shadow) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Shadow( 
            /* [in] */ MsoTriState Shadow) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Emboss( 
            /* [retval][out] */ MsoTriState *Emboss) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Emboss( 
            /* [in] */ MsoTriState Emboss) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Underline( 
            /* [retval][out] */ MsoTriState *Underline) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Underline( 
            /* [in] */ MsoTriState Underline) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Subscript( 
            /* [retval][out] */ MsoTriState *Subscript) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Subscript( 
            /* [in] */ MsoTriState Subscript) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Superscript( 
            /* [retval][out] */ MsoTriState *Superscript) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Superscript( 
            /* [in] */ MsoTriState Superscript) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BaselineOffset( 
            /* [retval][out] */ single *BaselineOffset) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BaselineOffset( 
            /* [in] */ single BaselineOffset) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Embedded( 
            /* [retval][out] */ MsoTriState *Embedded) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Embeddable( 
            /* [retval][out] */ MsoTriState *Embeddable) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ single *Size) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Size( 
            /* [in] */ single Size) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NameFarEast( 
            /* [retval][out] */ BSTR *NameFarEast) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NameFarEast( 
            /* [in] */ BSTR NameFarEast) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NameAscii( 
            /* [retval][out] */ BSTR *NameAscii) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NameAscii( 
            /* [in] */ BSTR NameAscii) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoRotateNumbers( 
            /* [retval][out] */ MsoTriState *AutoRotateNumbers) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoRotateNumbers( 
            /* [in] */ MsoTriState AutoRotateNumbers) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NameOther( 
            /* [retval][out] */ BSTR *NameOther) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NameOther( 
            /* [in] */ BSTR NameOther) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NameComplexScript( 
            /* [retval][out] */ BSTR *NameComplexScript) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NameComplexScript( 
            /* [in] */ BSTR NameComplexScript) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FontVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Font * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Font * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Font * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Font * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Font * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Font * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Font * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Font * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Font * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            Font * This,
            /* [retval][out] */ ColorFormat **Color);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bold )( 
            Font * This,
            /* [retval][out] */ MsoTriState *Bold);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Bold )( 
            Font * This,
            /* [in] */ MsoTriState Bold);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Italic )( 
            Font * This,
            /* [retval][out] */ MsoTriState *Italic);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Italic )( 
            Font * This,
            /* [in] */ MsoTriState Italic);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            Font * This,
            /* [retval][out] */ MsoTriState *Shadow);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadow )( 
            Font * This,
            /* [in] */ MsoTriState Shadow);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Emboss )( 
            Font * This,
            /* [retval][out] */ MsoTriState *Emboss);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Emboss )( 
            Font * This,
            /* [in] */ MsoTriState Emboss);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Underline )( 
            Font * This,
            /* [retval][out] */ MsoTriState *Underline);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Underline )( 
            Font * This,
            /* [in] */ MsoTriState Underline);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Subscript )( 
            Font * This,
            /* [retval][out] */ MsoTriState *Subscript);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Subscript )( 
            Font * This,
            /* [in] */ MsoTriState Subscript);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Superscript )( 
            Font * This,
            /* [retval][out] */ MsoTriState *Superscript);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Superscript )( 
            Font * This,
            /* [in] */ MsoTriState Superscript);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BaselineOffset )( 
            Font * This,
            /* [retval][out] */ single *BaselineOffset);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BaselineOffset )( 
            Font * This,
            /* [in] */ single BaselineOffset);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Embedded )( 
            Font * This,
            /* [retval][out] */ MsoTriState *Embedded);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Embeddable )( 
            Font * This,
            /* [retval][out] */ MsoTriState *Embeddable);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            Font * This,
            /* [retval][out] */ single *Size);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Size )( 
            Font * This,
            /* [in] */ single Size);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Font * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            Font * This,
            /* [in] */ BSTR Name);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NameFarEast )( 
            Font * This,
            /* [retval][out] */ BSTR *NameFarEast);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NameFarEast )( 
            Font * This,
            /* [in] */ BSTR NameFarEast);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NameAscii )( 
            Font * This,
            /* [retval][out] */ BSTR *NameAscii);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NameAscii )( 
            Font * This,
            /* [in] */ BSTR NameAscii);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoRotateNumbers )( 
            Font * This,
            /* [retval][out] */ MsoTriState *AutoRotateNumbers);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoRotateNumbers )( 
            Font * This,
            /* [in] */ MsoTriState AutoRotateNumbers);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NameOther )( 
            Font * This,
            /* [retval][out] */ BSTR *NameOther);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NameOther )( 
            Font * This,
            /* [in] */ BSTR NameOther);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NameComplexScript )( 
            Font * This,
            /* [retval][out] */ BSTR *NameComplexScript);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NameComplexScript )( 
            Font * This,
            /* [in] */ BSTR NameComplexScript);
        
        END_INTERFACE
    } FontVtbl;

    interface Font
    {
        CONST_VTBL struct FontVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Font_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Font_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Font_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Font_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Font_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Font_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Font_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Font_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Font_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Font_get_Color(This,Color)	\
    ( (This)->lpVtbl -> get_Color(This,Color) ) 

#define Font_get_Bold(This,Bold)	\
    ( (This)->lpVtbl -> get_Bold(This,Bold) ) 

#define Font_put_Bold(This,Bold)	\
    ( (This)->lpVtbl -> put_Bold(This,Bold) ) 

#define Font_get_Italic(This,Italic)	\
    ( (This)->lpVtbl -> get_Italic(This,Italic) ) 

#define Font_put_Italic(This,Italic)	\
    ( (This)->lpVtbl -> put_Italic(This,Italic) ) 

#define Font_get_Shadow(This,Shadow)	\
    ( (This)->lpVtbl -> get_Shadow(This,Shadow) ) 

#define Font_put_Shadow(This,Shadow)	\
    ( (This)->lpVtbl -> put_Shadow(This,Shadow) ) 

#define Font_get_Emboss(This,Emboss)	\
    ( (This)->lpVtbl -> get_Emboss(This,Emboss) ) 

#define Font_put_Emboss(This,Emboss)	\
    ( (This)->lpVtbl -> put_Emboss(This,Emboss) ) 

#define Font_get_Underline(This,Underline)	\
    ( (This)->lpVtbl -> get_Underline(This,Underline) ) 

#define Font_put_Underline(This,Underline)	\
    ( (This)->lpVtbl -> put_Underline(This,Underline) ) 

#define Font_get_Subscript(This,Subscript)	\
    ( (This)->lpVtbl -> get_Subscript(This,Subscript) ) 

#define Font_put_Subscript(This,Subscript)	\
    ( (This)->lpVtbl -> put_Subscript(This,Subscript) ) 

#define Font_get_Superscript(This,Superscript)	\
    ( (This)->lpVtbl -> get_Superscript(This,Superscript) ) 

#define Font_put_Superscript(This,Superscript)	\
    ( (This)->lpVtbl -> put_Superscript(This,Superscript) ) 

#define Font_get_BaselineOffset(This,BaselineOffset)	\
    ( (This)->lpVtbl -> get_BaselineOffset(This,BaselineOffset) ) 

#define Font_put_BaselineOffset(This,BaselineOffset)	\
    ( (This)->lpVtbl -> put_BaselineOffset(This,BaselineOffset) ) 

#define Font_get_Embedded(This,Embedded)	\
    ( (This)->lpVtbl -> get_Embedded(This,Embedded) ) 

#define Font_get_Embeddable(This,Embeddable)	\
    ( (This)->lpVtbl -> get_Embeddable(This,Embeddable) ) 

#define Font_get_Size(This,Size)	\
    ( (This)->lpVtbl -> get_Size(This,Size) ) 

#define Font_put_Size(This,Size)	\
    ( (This)->lpVtbl -> put_Size(This,Size) ) 

#define Font_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define Font_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define Font_get_NameFarEast(This,NameFarEast)	\
    ( (This)->lpVtbl -> get_NameFarEast(This,NameFarEast) ) 

#define Font_put_NameFarEast(This,NameFarEast)	\
    ( (This)->lpVtbl -> put_NameFarEast(This,NameFarEast) ) 

#define Font_get_NameAscii(This,NameAscii)	\
    ( (This)->lpVtbl -> get_NameAscii(This,NameAscii) ) 

#define Font_put_NameAscii(This,NameAscii)	\
    ( (This)->lpVtbl -> put_NameAscii(This,NameAscii) ) 

#define Font_get_AutoRotateNumbers(This,AutoRotateNumbers)	\
    ( (This)->lpVtbl -> get_AutoRotateNumbers(This,AutoRotateNumbers) ) 

#define Font_put_AutoRotateNumbers(This,AutoRotateNumbers)	\
    ( (This)->lpVtbl -> put_AutoRotateNumbers(This,AutoRotateNumbers) ) 

#define Font_get_NameOther(This,NameOther)	\
    ( (This)->lpVtbl -> get_NameOther(This,NameOther) ) 

#define Font_put_NameOther(This,NameOther)	\
    ( (This)->lpVtbl -> put_NameOther(This,NameOther) ) 

#define Font_get_NameComplexScript(This,NameComplexScript)	\
    ( (This)->lpVtbl -> get_NameComplexScript(This,NameComplexScript) ) 

#define Font_put_NameComplexScript(This,NameComplexScript)	\
    ( (This)->lpVtbl -> put_NameComplexScript(This,NameComplexScript) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Font_INTERFACE_DEFINED__ */


#ifndef __ParagraphFormat_INTERFACE_DEFINED__
#define __ParagraphFormat_INTERFACE_DEFINED__

/* interface ParagraphFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ParagraphFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493496-5A91-11CF-8700-00AA0060263B")
    ParagraphFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ PpParagraphAlignment *Alignment) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ PpParagraphAlignment Alignment) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bullet( 
            /* [retval][out] */ BulletFormat **Bullet) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineRuleBefore( 
            /* [retval][out] */ MsoTriState *LineRuleBefore) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineRuleBefore( 
            /* [in] */ MsoTriState LineRuleBefore) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineRuleAfter( 
            /* [retval][out] */ MsoTriState *LineRuleAfter) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineRuleAfter( 
            /* [in] */ MsoTriState LineRuleAfter) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineRuleWithin( 
            /* [retval][out] */ MsoTriState *LineRuleWithin) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineRuleWithin( 
            /* [in] */ MsoTriState LineRuleWithin) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceBefore( 
            /* [retval][out] */ single *SpaceBefore) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceBefore( 
            /* [in] */ single SpaceBefore) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceAfter( 
            /* [retval][out] */ single *SpaceAfter) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceAfter( 
            /* [in] */ single SpaceAfter) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceWithin( 
            /* [retval][out] */ single *SpaceWithin) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceWithin( 
            /* [in] */ single SpaceWithin) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BaseLineAlignment( 
            /* [retval][out] */ PpBaselineAlignment *BaseLineAlignment) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BaseLineAlignment( 
            /* [in] */ PpBaselineAlignment BaseLineAlignment) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FarEastLineBreakControl( 
            /* [retval][out] */ MsoTriState *FarEastLineBreakControl) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FarEastLineBreakControl( 
            /* [in] */ MsoTriState FarEastLineBreakControl) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WordWrap( 
            /* [retval][out] */ MsoTriState *WordWrap) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WordWrap( 
            /* [in] */ MsoTriState WordWrap) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HangingPunctuation( 
            /* [retval][out] */ MsoTriState *HangingPunctuation) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HangingPunctuation( 
            /* [in] */ MsoTriState HangingPunctuation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextDirection( 
            /* [retval][out] */ PpDirection *TextDirection) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextDirection( 
            /* [in] */ PpDirection TextDirection) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ParagraphFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ParagraphFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ParagraphFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ParagraphFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ParagraphFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ParagraphFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ParagraphFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ParagraphFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ParagraphFormat * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ParagraphFormat * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            ParagraphFormat * This,
            /* [retval][out] */ PpParagraphAlignment *Alignment);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            ParagraphFormat * This,
            /* [in] */ PpParagraphAlignment Alignment);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bullet )( 
            ParagraphFormat * This,
            /* [retval][out] */ BulletFormat **Bullet);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineRuleBefore )( 
            ParagraphFormat * This,
            /* [retval][out] */ MsoTriState *LineRuleBefore);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineRuleBefore )( 
            ParagraphFormat * This,
            /* [in] */ MsoTriState LineRuleBefore);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineRuleAfter )( 
            ParagraphFormat * This,
            /* [retval][out] */ MsoTriState *LineRuleAfter);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineRuleAfter )( 
            ParagraphFormat * This,
            /* [in] */ MsoTriState LineRuleAfter);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineRuleWithin )( 
            ParagraphFormat * This,
            /* [retval][out] */ MsoTriState *LineRuleWithin);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineRuleWithin )( 
            ParagraphFormat * This,
            /* [in] */ MsoTriState LineRuleWithin);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceBefore )( 
            ParagraphFormat * This,
            /* [retval][out] */ single *SpaceBefore);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceBefore )( 
            ParagraphFormat * This,
            /* [in] */ single SpaceBefore);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceAfter )( 
            ParagraphFormat * This,
            /* [retval][out] */ single *SpaceAfter);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceAfter )( 
            ParagraphFormat * This,
            /* [in] */ single SpaceAfter);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceWithin )( 
            ParagraphFormat * This,
            /* [retval][out] */ single *SpaceWithin);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceWithin )( 
            ParagraphFormat * This,
            /* [in] */ single SpaceWithin);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BaseLineAlignment )( 
            ParagraphFormat * This,
            /* [retval][out] */ PpBaselineAlignment *BaseLineAlignment);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BaseLineAlignment )( 
            ParagraphFormat * This,
            /* [in] */ PpBaselineAlignment BaseLineAlignment);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FarEastLineBreakControl )( 
            ParagraphFormat * This,
            /* [retval][out] */ MsoTriState *FarEastLineBreakControl);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FarEastLineBreakControl )( 
            ParagraphFormat * This,
            /* [in] */ MsoTriState FarEastLineBreakControl);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WordWrap )( 
            ParagraphFormat * This,
            /* [retval][out] */ MsoTriState *WordWrap);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WordWrap )( 
            ParagraphFormat * This,
            /* [in] */ MsoTriState WordWrap);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HangingPunctuation )( 
            ParagraphFormat * This,
            /* [retval][out] */ MsoTriState *HangingPunctuation);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HangingPunctuation )( 
            ParagraphFormat * This,
            /* [in] */ MsoTriState HangingPunctuation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextDirection )( 
            ParagraphFormat * This,
            /* [retval][out] */ PpDirection *TextDirection);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextDirection )( 
            ParagraphFormat * This,
            /* [in] */ PpDirection TextDirection);
        
        END_INTERFACE
    } ParagraphFormatVtbl;

    interface ParagraphFormat
    {
        CONST_VTBL struct ParagraphFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ParagraphFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ParagraphFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ParagraphFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ParagraphFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ParagraphFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ParagraphFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ParagraphFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ParagraphFormat_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ParagraphFormat_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ParagraphFormat_get_Alignment(This,Alignment)	\
    ( (This)->lpVtbl -> get_Alignment(This,Alignment) ) 

#define ParagraphFormat_put_Alignment(This,Alignment)	\
    ( (This)->lpVtbl -> put_Alignment(This,Alignment) ) 

#define ParagraphFormat_get_Bullet(This,Bullet)	\
    ( (This)->lpVtbl -> get_Bullet(This,Bullet) ) 

#define ParagraphFormat_get_LineRuleBefore(This,LineRuleBefore)	\
    ( (This)->lpVtbl -> get_LineRuleBefore(This,LineRuleBefore) ) 

#define ParagraphFormat_put_LineRuleBefore(This,LineRuleBefore)	\
    ( (This)->lpVtbl -> put_LineRuleBefore(This,LineRuleBefore) ) 

#define ParagraphFormat_get_LineRuleAfter(This,LineRuleAfter)	\
    ( (This)->lpVtbl -> get_LineRuleAfter(This,LineRuleAfter) ) 

#define ParagraphFormat_put_LineRuleAfter(This,LineRuleAfter)	\
    ( (This)->lpVtbl -> put_LineRuleAfter(This,LineRuleAfter) ) 

#define ParagraphFormat_get_LineRuleWithin(This,LineRuleWithin)	\
    ( (This)->lpVtbl -> get_LineRuleWithin(This,LineRuleWithin) ) 

#define ParagraphFormat_put_LineRuleWithin(This,LineRuleWithin)	\
    ( (This)->lpVtbl -> put_LineRuleWithin(This,LineRuleWithin) ) 

#define ParagraphFormat_get_SpaceBefore(This,SpaceBefore)	\
    ( (This)->lpVtbl -> get_SpaceBefore(This,SpaceBefore) ) 

#define ParagraphFormat_put_SpaceBefore(This,SpaceBefore)	\
    ( (This)->lpVtbl -> put_SpaceBefore(This,SpaceBefore) ) 

#define ParagraphFormat_get_SpaceAfter(This,SpaceAfter)	\
    ( (This)->lpVtbl -> get_SpaceAfter(This,SpaceAfter) ) 

#define ParagraphFormat_put_SpaceAfter(This,SpaceAfter)	\
    ( (This)->lpVtbl -> put_SpaceAfter(This,SpaceAfter) ) 

#define ParagraphFormat_get_SpaceWithin(This,SpaceWithin)	\
    ( (This)->lpVtbl -> get_SpaceWithin(This,SpaceWithin) ) 

#define ParagraphFormat_put_SpaceWithin(This,SpaceWithin)	\
    ( (This)->lpVtbl -> put_SpaceWithin(This,SpaceWithin) ) 

#define ParagraphFormat_get_BaseLineAlignment(This,BaseLineAlignment)	\
    ( (This)->lpVtbl -> get_BaseLineAlignment(This,BaseLineAlignment) ) 

#define ParagraphFormat_put_BaseLineAlignment(This,BaseLineAlignment)	\
    ( (This)->lpVtbl -> put_BaseLineAlignment(This,BaseLineAlignment) ) 

#define ParagraphFormat_get_FarEastLineBreakControl(This,FarEastLineBreakControl)	\
    ( (This)->lpVtbl -> get_FarEastLineBreakControl(This,FarEastLineBreakControl) ) 

#define ParagraphFormat_put_FarEastLineBreakControl(This,FarEastLineBreakControl)	\
    ( (This)->lpVtbl -> put_FarEastLineBreakControl(This,FarEastLineBreakControl) ) 

#define ParagraphFormat_get_WordWrap(This,WordWrap)	\
    ( (This)->lpVtbl -> get_WordWrap(This,WordWrap) ) 

#define ParagraphFormat_put_WordWrap(This,WordWrap)	\
    ( (This)->lpVtbl -> put_WordWrap(This,WordWrap) ) 

#define ParagraphFormat_get_HangingPunctuation(This,HangingPunctuation)	\
    ( (This)->lpVtbl -> get_HangingPunctuation(This,HangingPunctuation) ) 

#define ParagraphFormat_put_HangingPunctuation(This,HangingPunctuation)	\
    ( (This)->lpVtbl -> put_HangingPunctuation(This,HangingPunctuation) ) 

#define ParagraphFormat_get_TextDirection(This,TextDirection)	\
    ( (This)->lpVtbl -> get_TextDirection(This,TextDirection) ) 

#define ParagraphFormat_put_TextDirection(This,TextDirection)	\
    ( (This)->lpVtbl -> put_TextDirection(This,TextDirection) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ParagraphFormat_INTERFACE_DEFINED__ */


#ifndef __BulletFormat_INTERFACE_DEFINED__
#define __BulletFormat_INTERFACE_DEFINED__

/* interface BulletFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_BulletFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493497-5A91-11CF-8700-00AA0060263B")
    BulletFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ MsoTriState *Visible) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ MsoTriState Visible) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Character( 
            /* [retval][out] */ int *Character) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Character( 
            /* [in] */ int Character) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelativeSize( 
            /* [retval][out] */ single *RelativeSize) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RelativeSize( 
            /* [in] */ single RelativeSize) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseTextColor( 
            /* [retval][out] */ MsoTriState *UseTextColor) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseTextColor( 
            /* [in] */ MsoTriState UseTextColor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseTextFont( 
            /* [retval][out] */ MsoTriState *UseTextFont) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseTextFont( 
            /* [in] */ MsoTriState UseTextFont) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ Font **Font) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ PpBulletType *Type) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ PpBulletType Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ PpNumberedBulletStyle *Style) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Style( 
            /* [in] */ PpNumberedBulletStyle Style) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartValue( 
            /* [retval][out] */ int *StartValue) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartValue( 
            /* [in] */ int StartValue) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Picture( 
            /* [in] */ BSTR Picture) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Number( 
            /* [retval][out] */ int *Number) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BulletFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BulletFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BulletFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BulletFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BulletFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BulletFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BulletFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BulletFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BulletFormat * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BulletFormat * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            BulletFormat * This,
            /* [retval][out] */ MsoTriState *Visible);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            BulletFormat * This,
            /* [in] */ MsoTriState Visible);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Character )( 
            BulletFormat * This,
            /* [retval][out] */ int *Character);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Character )( 
            BulletFormat * This,
            /* [in] */ int Character);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelativeSize )( 
            BulletFormat * This,
            /* [retval][out] */ single *RelativeSize);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RelativeSize )( 
            BulletFormat * This,
            /* [in] */ single RelativeSize);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseTextColor )( 
            BulletFormat * This,
            /* [retval][out] */ MsoTriState *UseTextColor);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseTextColor )( 
            BulletFormat * This,
            /* [in] */ MsoTriState UseTextColor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseTextFont )( 
            BulletFormat * This,
            /* [retval][out] */ MsoTriState *UseTextFont);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseTextFont )( 
            BulletFormat * This,
            /* [in] */ MsoTriState UseTextFont);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            BulletFormat * This,
            /* [retval][out] */ Font **Font);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            BulletFormat * This,
            /* [retval][out] */ PpBulletType *Type);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            BulletFormat * This,
            /* [in] */ PpBulletType Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            BulletFormat * This,
            /* [retval][out] */ PpNumberedBulletStyle *Style);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            BulletFormat * This,
            /* [in] */ PpNumberedBulletStyle Style);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartValue )( 
            BulletFormat * This,
            /* [retval][out] */ int *StartValue);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartValue )( 
            BulletFormat * This,
            /* [in] */ int StartValue);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Picture )( 
            BulletFormat * This,
            /* [in] */ BSTR Picture);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Number )( 
            BulletFormat * This,
            /* [retval][out] */ int *Number);
        
        END_INTERFACE
    } BulletFormatVtbl;

    interface BulletFormat
    {
        CONST_VTBL struct BulletFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BulletFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BulletFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BulletFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BulletFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BulletFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BulletFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BulletFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BulletFormat_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define BulletFormat_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define BulletFormat_get_Visible(This,Visible)	\
    ( (This)->lpVtbl -> get_Visible(This,Visible) ) 

#define BulletFormat_put_Visible(This,Visible)	\
    ( (This)->lpVtbl -> put_Visible(This,Visible) ) 

#define BulletFormat_get_Character(This,Character)	\
    ( (This)->lpVtbl -> get_Character(This,Character) ) 

#define BulletFormat_put_Character(This,Character)	\
    ( (This)->lpVtbl -> put_Character(This,Character) ) 

#define BulletFormat_get_RelativeSize(This,RelativeSize)	\
    ( (This)->lpVtbl -> get_RelativeSize(This,RelativeSize) ) 

#define BulletFormat_put_RelativeSize(This,RelativeSize)	\
    ( (This)->lpVtbl -> put_RelativeSize(This,RelativeSize) ) 

#define BulletFormat_get_UseTextColor(This,UseTextColor)	\
    ( (This)->lpVtbl -> get_UseTextColor(This,UseTextColor) ) 

#define BulletFormat_put_UseTextColor(This,UseTextColor)	\
    ( (This)->lpVtbl -> put_UseTextColor(This,UseTextColor) ) 

#define BulletFormat_get_UseTextFont(This,UseTextFont)	\
    ( (This)->lpVtbl -> get_UseTextFont(This,UseTextFont) ) 

#define BulletFormat_put_UseTextFont(This,UseTextFont)	\
    ( (This)->lpVtbl -> put_UseTextFont(This,UseTextFont) ) 

#define BulletFormat_get_Font(This,Font)	\
    ( (This)->lpVtbl -> get_Font(This,Font) ) 

#define BulletFormat_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define BulletFormat_put_Type(This,Type)	\
    ( (This)->lpVtbl -> put_Type(This,Type) ) 

#define BulletFormat_get_Style(This,Style)	\
    ( (This)->lpVtbl -> get_Style(This,Style) ) 

#define BulletFormat_put_Style(This,Style)	\
    ( (This)->lpVtbl -> put_Style(This,Style) ) 

#define BulletFormat_get_StartValue(This,StartValue)	\
    ( (This)->lpVtbl -> get_StartValue(This,StartValue) ) 

#define BulletFormat_put_StartValue(This,StartValue)	\
    ( (This)->lpVtbl -> put_StartValue(This,StartValue) ) 

#define BulletFormat_Picture(This,Picture)	\
    ( (This)->lpVtbl -> Picture(This,Picture) ) 

#define BulletFormat_get_Number(This,Number)	\
    ( (This)->lpVtbl -> get_Number(This,Number) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BulletFormat_INTERFACE_DEFINED__ */


#ifndef __TextStyles_INTERFACE_DEFINED__
#define __TextStyles_INTERFACE_DEFINED__

/* interface TextStyles */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_TextStyles;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493498-5A91-11CF-8700-00AA0060263B")
    TextStyles : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ PpTextStyleType Type,
            /* [retval][out] */ TextStyle **Item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextStylesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextStyles * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextStyles * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextStyles * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextStyles * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextStyles * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextStyles * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextStyles * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            TextStyles * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            TextStyles * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TextStyles * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TextStyles * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextStyles * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TextStyles * This,
            /* [in] */ PpTextStyleType Type,
            /* [retval][out] */ TextStyle **Item);
        
        END_INTERFACE
    } TextStylesVtbl;

    interface TextStyles
    {
        CONST_VTBL struct TextStylesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextStyles_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TextStyles_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TextStyles_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TextStyles_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TextStyles_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TextStyles_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TextStyles_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TextStyles_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define TextStyles__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define TextStyles_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define TextStyles_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define TextStyles_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define TextStyles_Item(This,Type,Item)	\
    ( (This)->lpVtbl -> Item(This,Type,Item) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TextStyles_INTERFACE_DEFINED__ */


#ifndef __TextStyle_INTERFACE_DEFINED__
#define __TextStyle_INTERFACE_DEFINED__

/* interface TextStyle */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_TextStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91493499-5A91-11CF-8700-00AA0060263B")
    TextStyle : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Ruler( 
            /* [retval][out] */ Ruler **Ruler) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextFrame( 
            /* [retval][out] */ TextFrame **TextFrame) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Levels( 
            /* [retval][out] */ TextStyleLevels **Levels) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextStyle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TextStyle * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextStyle * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Ruler )( 
            TextStyle * This,
            /* [retval][out] */ Ruler **Ruler);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFrame )( 
            TextStyle * This,
            /* [retval][out] */ TextFrame **TextFrame);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Levels )( 
            TextStyle * This,
            /* [retval][out] */ TextStyleLevels **Levels);
        
        END_INTERFACE
    } TextStyleVtbl;

    interface TextStyle
    {
        CONST_VTBL struct TextStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextStyle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TextStyle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TextStyle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TextStyle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TextStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TextStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TextStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TextStyle_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define TextStyle_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define TextStyle_get_Ruler(This,Ruler)	\
    ( (This)->lpVtbl -> get_Ruler(This,Ruler) ) 

#define TextStyle_get_TextFrame(This,TextFrame)	\
    ( (This)->lpVtbl -> get_TextFrame(This,TextFrame) ) 

#define TextStyle_get_Levels(This,Levels)	\
    ( (This)->lpVtbl -> get_Levels(This,Levels) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TextStyle_INTERFACE_DEFINED__ */


#ifndef __TextStyleLevels_INTERFACE_DEFINED__
#define __TextStyleLevels_INTERFACE_DEFINED__

/* interface TextStyleLevels */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_TextStyleLevels;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149349A-5A91-11CF-8700-00AA0060263B")
    TextStyleLevels : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Level,
            /* [retval][out] */ TextStyleLevel **Item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextStyleLevelsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextStyleLevels * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextStyleLevels * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextStyleLevels * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextStyleLevels * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextStyleLevels * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextStyleLevels * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextStyleLevels * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            TextStyleLevels * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            TextStyleLevels * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TextStyleLevels * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TextStyleLevels * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextStyleLevels * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TextStyleLevels * This,
            /* [in] */ int Level,
            /* [retval][out] */ TextStyleLevel **Item);
        
        END_INTERFACE
    } TextStyleLevelsVtbl;

    interface TextStyleLevels
    {
        CONST_VTBL struct TextStyleLevelsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextStyleLevels_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TextStyleLevels_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TextStyleLevels_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TextStyleLevels_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TextStyleLevels_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TextStyleLevels_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TextStyleLevels_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TextStyleLevels_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define TextStyleLevels__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define TextStyleLevels_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define TextStyleLevels_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define TextStyleLevels_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define TextStyleLevels_Item(This,Level,Item)	\
    ( (This)->lpVtbl -> Item(This,Level,Item) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TextStyleLevels_INTERFACE_DEFINED__ */


#ifndef __TextStyleLevel_INTERFACE_DEFINED__
#define __TextStyleLevel_INTERFACE_DEFINED__

/* interface TextStyleLevel */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_TextStyleLevel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149349B-5A91-11CF-8700-00AA0060263B")
    TextStyleLevel : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ParagraphFormat( 
            /* [retval][out] */ ParagraphFormat **ParagraphFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ Font **Font) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextStyleLevelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextStyleLevel * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextStyleLevel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextStyleLevel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextStyleLevel * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextStyleLevel * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextStyleLevel * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextStyleLevel * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TextStyleLevel * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextStyleLevel * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ParagraphFormat )( 
            TextStyleLevel * This,
            /* [retval][out] */ ParagraphFormat **ParagraphFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            TextStyleLevel * This,
            /* [retval][out] */ Font **Font);
        
        END_INTERFACE
    } TextStyleLevelVtbl;

    interface TextStyleLevel
    {
        CONST_VTBL struct TextStyleLevelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextStyleLevel_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TextStyleLevel_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TextStyleLevel_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TextStyleLevel_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TextStyleLevel_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TextStyleLevel_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TextStyleLevel_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TextStyleLevel_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define TextStyleLevel_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define TextStyleLevel_get_ParagraphFormat(This,ParagraphFormat)	\
    ( (This)->lpVtbl -> get_ParagraphFormat(This,ParagraphFormat) ) 

#define TextStyleLevel_get_Font(This,Font)	\
    ( (This)->lpVtbl -> get_Font(This,Font) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TextStyleLevel_INTERFACE_DEFINED__ */


#ifndef __HeaderFooter_INTERFACE_DEFINED__
#define __HeaderFooter_INTERFACE_DEFINED__

/* interface HeaderFooter */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_HeaderFooter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149349C-5A91-11CF-8700-00AA0060263B")
    HeaderFooter : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ MsoTriState *Visible) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ MsoTriState Visible) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *Text) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseFormat( 
            /* [retval][out] */ MsoTriState *UseFormat) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseFormat( 
            /* [in] */ MsoTriState UseFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ PpDateTimeFormat *Format) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Format( 
            /* [in] */ PpDateTimeFormat Format) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HeaderFooterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HeaderFooter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HeaderFooter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HeaderFooter * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HeaderFooter * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HeaderFooter * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HeaderFooter * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HeaderFooter * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            HeaderFooter * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HeaderFooter * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            HeaderFooter * This,
            /* [retval][out] */ MsoTriState *Visible);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            HeaderFooter * This,
            /* [in] */ MsoTriState Visible);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            HeaderFooter * This,
            /* [retval][out] */ BSTR *Text);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            HeaderFooter * This,
            /* [in] */ BSTR Text);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseFormat )( 
            HeaderFooter * This,
            /* [retval][out] */ MsoTriState *UseFormat);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseFormat )( 
            HeaderFooter * This,
            /* [in] */ MsoTriState UseFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            HeaderFooter * This,
            /* [retval][out] */ PpDateTimeFormat *Format);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Format )( 
            HeaderFooter * This,
            /* [in] */ PpDateTimeFormat Format);
        
        END_INTERFACE
    } HeaderFooterVtbl;

    interface HeaderFooter
    {
        CONST_VTBL struct HeaderFooterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HeaderFooter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HeaderFooter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HeaderFooter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HeaderFooter_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HeaderFooter_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HeaderFooter_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HeaderFooter_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HeaderFooter_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define HeaderFooter_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define HeaderFooter_get_Visible(This,Visible)	\
    ( (This)->lpVtbl -> get_Visible(This,Visible) ) 

#define HeaderFooter_put_Visible(This,Visible)	\
    ( (This)->lpVtbl -> put_Visible(This,Visible) ) 

#define HeaderFooter_get_Text(This,Text)	\
    ( (This)->lpVtbl -> get_Text(This,Text) ) 

#define HeaderFooter_put_Text(This,Text)	\
    ( (This)->lpVtbl -> put_Text(This,Text) ) 

#define HeaderFooter_get_UseFormat(This,UseFormat)	\
    ( (This)->lpVtbl -> get_UseFormat(This,UseFormat) ) 

#define HeaderFooter_put_UseFormat(This,UseFormat)	\
    ( (This)->lpVtbl -> put_UseFormat(This,UseFormat) ) 

#define HeaderFooter_get_Format(This,Format)	\
    ( (This)->lpVtbl -> get_Format(This,Format) ) 

#define HeaderFooter_put_Format(This,Format)	\
    ( (This)->lpVtbl -> put_Format(This,Format) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HeaderFooter_INTERFACE_DEFINED__ */


#ifndef ___Presentation_INTERFACE_DEFINED__
#define ___Presentation_INTERFACE_DEFINED__

/* interface _Presentation */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID__Presentation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9149349D-5A91-11CF-8700-00AA0060263B")
    _Presentation : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideMaster( 
            /* [retval][out] */ _Master **SlideMaster) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TitleMaster( 
            /* [retval][out] */ _Master **TitleMaster) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasTitleMaster( 
            /* [retval][out] */ MsoTriState *HasTitleMaster) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddTitleMaster( 
            /* [retval][out] */ _Master **TitleMaster) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyTemplate( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TemplateName( 
            /* [retval][out] */ BSTR *TemplateName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NotesMaster( 
            /* [retval][out] */ _Master **NotesMaster) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HandoutMaster( 
            /* [retval][out] */ _Master **HandoutMaster) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Slides( 
            /* [retval][out] */ Slides **Slides) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageSetup( 
            /* [retval][out] */ PageSetup **PageSetup) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColorSchemes( 
            /* [retval][out] */ ColorSchemes **ColorSchemes) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtraColors( 
            /* [retval][out] */ ExtraColors **ExtraColors) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideShowSettings( 
            /* [retval][out] */ SlideShowSettings **SlideShowSettings) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fonts( 
            /* [retval][out] */ Fonts **Fonts) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Windows( 
            /* [retval][out] */ DocumentWindows **Windows) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Tags( 
            /* [retval][out] */ Tags **Tags) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultShape( 
            /* [retval][out] */ Shape **DefaultShape) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BuiltInDocumentProperties( 
            /* [retval][out] */ IDispatch **BuiltInDocumentProperties) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomDocumentProperties( 
            /* [retval][out] */ IDispatch **CustomDocumentProperties) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VBProject( 
            /* [retval][out] */ /* external definition not present */ VBProject **VBProject) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadOnly( 
            /* [retval][out] */ MsoTriState *ReadOnly) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *FullName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *Path) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Saved( 
            /* [retval][out] */ MsoTriState *Saved) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Saved( 
            /* [in] */ MsoTriState Saved) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LayoutDirection( 
            /* [retval][out] */ PpDirection *LayoutDirection) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LayoutDirection( 
            /* [in] */ PpDirection LayoutDirection) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewWindow( 
            /* [retval][out] */ DocumentWindow **NewWindow) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE FollowHyperlink( 
            /* [in] */ BSTR Address,
            /* [defaultvalue][optional][in] */ BSTR SubAddress = (unsigned short*)u"",
            /* [defaultvalue][optional][in] */ VARIANT_BOOL NewWindow = 0,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AddHistory = -1,
            /* [defaultvalue][optional][in] */ BSTR ExtraInfo = (unsigned short*)u"",
            /* [defaultvalue][optional][in] */ MsoExtraInfoMethod Method = msoMethodGet,
            /* [defaultvalue][optional][in] */ BSTR HeaderInfo = (unsigned short*)u"") = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddToFavorites( void) = 0;
        
        virtual /* [helpcontext][restricted][id] */ HRESULT STDMETHODCALLTYPE Unused( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintOptions( 
            /* [retval][out] */ PrintOptions **PrintOptions) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrintOut( 
            /* [defaultvalue][optional][in] */ int From = -1,
            /* [defaultvalue][optional][in] */ int To = -1,
            /* [defaultvalue][optional][in] */ BSTR PrintToFile = (unsigned short*)u"",
            /* [defaultvalue][optional][in] */ int Copies = 0,
            /* [defaultvalue][optional][in] */ MsoTriState Collate = ( MsoTriState  )-99) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAs( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ PpSaveAsFileType FileFormat = ppSaveAsDefault,
            /* [defaultvalue][optional][in] */ MsoTriState EmbedTrueTypeFonts = msoTriStateMixed) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveCopyAs( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ PpSaveAsFileType FileFormat = ppSaveAsDefault,
            /* [defaultvalue][optional][in] */ MsoTriState EmbedTrueTypeFonts = msoTriStateMixed) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Export( 
            /* [in] */ BSTR Path,
            /* [in] */ BSTR FilterName,
            /* [defaultvalue][optional][in] */ int ScaleWidth = 0,
            /* [defaultvalue][optional][in] */ int ScaleHeight = 0) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE SetUndoText( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Container( 
            /* [retval][out] */ IDispatch **Container) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayComments( 
            /* [retval][out] */ MsoTriState *DisplayComments) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayComments( 
            /* [in] */ MsoTriState DisplayComments) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FarEastLineBreakLevel( 
            /* [retval][out] */ PpFarEastLineBreakLevel *FarEastLineBreakLevel) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FarEastLineBreakLevel( 
            /* [in] */ PpFarEastLineBreakLevel FarEastLineBreakLevel) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoLineBreakBefore( 
            /* [retval][out] */ BSTR *NoLineBreakBefore) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoLineBreakBefore( 
            /* [in] */ BSTR NoLineBreakBefore) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoLineBreakAfter( 
            /* [retval][out] */ BSTR *NoLineBreakAfter) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoLineBreakAfter( 
            /* [in] */ BSTR NoLineBreakAfter) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UpdateLinks( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideShowWindow( 
            /* [retval][out] */ SlideShowWindow **SlideShowWindow) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FarEastLineBreakLanguage( 
            /* [retval][out] */ MsoFarEastLineBreakLanguageID *FarEastLineBreakLanguage) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FarEastLineBreakLanguage( 
            /* [in] */ MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE WebPagePreview( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultLanguageID( 
            /* [retval][out] */ MsoLanguageID *DefaultLanguageID) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultLanguageID( 
            /* [in] */ MsoLanguageID DefaultLanguageID) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandBars( 
            /* [retval][out] */ /* external definition not present */ CommandBars **CommandBars) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_PublishObjects( 
            /* [retval][out] */ PublishObjects **PublishObjects) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_WebOptions( 
            /* [retval][out] */ WebOptions **WebOptions) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_HTMLProject( 
            /* [retval][out] */ /* external definition not present */ HTMLProject **HTMLProject) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ReloadAs( 
            /* [in] */ MsoEncoding cp) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE MakeIntoTemplate( 
            /* [in] */ MsoTriState IsDesignTemplate) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnvelopeVisible( 
            /* [retval][out] */ MsoTriState *EnvelopeVisible) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EnvelopeVisible( 
            /* [in] */ MsoTriState EnvelopeVisible) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE sblt( 
            /* [in] */ BSTR s) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VBASigned( 
            /* [retval][out] */ MsoTriState *VBASigned) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SnapToGrid( 
            /* [retval][out] */ MsoTriState *SnapToGrid) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SnapToGrid( 
            /* [in] */ MsoTriState SnapToGrid) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GridDistance( 
            /* [retval][out] */ single *GridDistance) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GridDistance( 
            /* [in] */ single GridDistance) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Designs( 
            /* [retval][out] */ Designs **Designs) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Merge( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckIn( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL SaveChanges,
            /* [optional][in] */ VARIANT Comments,
            /* [optional][in] */ VARIANT MakePublic) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanCheckIn( 
            /* [retval][out] */ VARIANT_BOOL *CanCheckIn) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Signatures( 
            /* [retval][out] */ /* external definition not present */ SignatureSet **Signatures) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RemovePersonalInformation( 
            /* [retval][out] */ MsoTriState *RemovePersonalInformation) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RemovePersonalInformation( 
            /* [in] */ MsoTriState RemovePersonalInformation) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE SendForReview( 
            /* [defaultvalue][optional][in] */ BSTR Recipients,
            /* [defaultvalue][optional][in] */ BSTR Subject,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL ShowMessage,
            /* [optional][in] */ VARIANT IncludeAttachment) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ReplyWithChanges( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL ShowMessage = -1) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndReview( void) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasRevisionInfo( 
            /* [retval][out] */ PpRevisionInfo *HasRevisionInfo) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AddBaseline( 
            /* [defaultvalue][optional][in] */ BSTR FileName = (unsigned short*)u"") = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE RemoveBaseline( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PasswordEncryptionProvider( 
            /* [retval][out] */ BSTR *PasswordEncryptionProvider) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PasswordEncryptionAlgorithm( 
            /* [retval][out] */ BSTR *PasswordEncryptionAlgorithm) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PasswordEncryptionKeyLength( 
            /* [retval][out] */ int *PasswordEncryptionKeyLength) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PasswordEncryptionFileProperties( 
            /* [retval][out] */ VARIANT_BOOL *PasswordEncryptionFileProperties) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetPasswordEncryptionOptions( 
            /* [in] */ BSTR PasswordEncryptionProvider,
            /* [in] */ BSTR PasswordEncryptionAlgorithm,
            /* [in] */ int PasswordEncryptionKeyLength,
            /* [in] */ VARIANT_BOOL PasswordEncryptionFileProperties) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Password( 
            /* [retval][out] */ BSTR *Password) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Password( 
            /* [in] */ BSTR Password) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WritePassword( 
            /* [retval][out] */ BSTR *WritePassword) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WritePassword( 
            /* [in] */ BSTR WritePassword) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Permission( 
            /* [retval][out] */ /* external definition not present */ Permission **Permission) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SharedWorkspace( 
            /* [retval][out] */ /* external definition not present */ SharedWorkspace **SharedWorkspace) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Sync( 
            /* [retval][out] */ /* external definition not present */ Sync **Sync) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SendFaxOverInternet( 
            /* [defaultvalue][optional][in] */ BSTR Recipients = (unsigned short*)u"",
            /* [defaultvalue][optional][in] */ BSTR Subject = (unsigned short*)u"",
            /* [defaultvalue][optional][in] */ VARIANT_BOOL ShowMessage = 0) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocumentLibraryVersions( 
            /* [retval][out] */ /* external definition not present */ DocumentLibraryVersions **DocumentLibraryVersions) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContentTypeProperties( 
            /* [retval][out] */ /* external definition not present */ MetaProperties **ContentTypeProperties) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_SectionCount( 
            /* [retval][out] */ int *SectionCount) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasSections( 
            /* [retval][out] */ VARIANT_BOOL *HasSections) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE NewSectionAfter( 
            /* [in] */ int Index,
            /* [in] */ VARIANT_BOOL AfterSlide,
            /* [in] */ BSTR sectionTitle,
            /* [out] */ int *newSectionIndex) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE DeleteSection( 
            /* [in] */ int Index) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE DisableSections( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE sectionTitle( 
            /* [in] */ int Index,
            /* [retval][out] */ BSTR *sectionTitle) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveDocumentInformation( 
            /* [in] */ PpRemoveDocInfoType Type) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckInWithVersion( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL SaveChanges,
            /* [optional][in] */ VARIANT Comments,
            /* [optional][in] */ VARIANT MakePublic,
            /* [optional][in] */ VARIANT VersionType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExportAsFixedFormat( 
            /* [in] */ BSTR Path,
            /* [in] */ PpFixedFormatType FixedFormatType,
            /* [defaultvalue][optional][in] */ PpFixedFormatIntent Intent,
            /* [defaultvalue][optional][in] */ MsoTriState FrameSlides,
            /* [defaultvalue][optional][in] */ PpPrintHandoutOrder HandoutOrder,
            /* [defaultvalue][optional][in] */ PpPrintOutputType OutputType,
            /* [defaultvalue][optional][in] */ MsoTriState PrintHiddenSlides,
            /* [defaultvalue][optional][in] */ PrintRange *PrintRange,
            /* [defaultvalue][optional][in] */ PpPrintRangeType RangeType,
            /* [defaultvalue][optional][in] */ BSTR SlideShowName,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL IncludeDocProperties,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL KeepIRMSettings,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL DocStructureTags,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL BitmapMissingFonts,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseISO19005_1,
            /* [optional][in] */ VARIANT ExternalExporter) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ServerPolicy( 
            /* [retval][out] */ /* external definition not present */ ServerPolicy **ServerPolicy) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetWorkflowTasks( 
            /* [retval][out] */ /* external definition not present */ WorkflowTasks **GetWorkflowTasks) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetWorkflowTemplates( 
            /* [retval][out] */ /* external definition not present */ WorkflowTemplates **GetWorkflowTemplates) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE LockServerFile( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocumentInspectors( 
            /* [retval][out] */ /* external definition not present */ DocumentInspectors **DocumentInspectors) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasVBProject( 
            /* [retval][out] */ VARIANT_BOOL *HasVBProject) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomXMLParts( 
            /* [retval][out] */ /* external definition not present */ CustomXMLParts **CustomXMLParts) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Final( 
            /* [retval][out] */ VARIANT_BOOL *Final) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Final( 
            /* [in] */ VARIANT_BOOL Final) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyTheme( 
            /* [in] */ BSTR themeName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomerData( 
            /* [retval][out] */ CustomerData **CustomerData) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Research( 
            /* [retval][out] */ Research **Research) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PublishSlides( 
            /* [in] */ BSTR SlideLibraryUrl,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL Overwrite = 0,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseSlideOrder = 0) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EncryptionProvider( 
            /* [retval][out] */ BSTR *EncryptionProvider) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EncryptionProvider( 
            /* [in] */ BSTR EncryptionProvider) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Convert( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SectionProperties( 
            /* [retval][out] */ SectionProperties **SectionProperties) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Coauthoring( 
            /* [retval][out] */ Coauthoring **Coauthoring) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MergeWithBaseline( 
            /* [in] */ BSTR withPresentation,
            /* [in] */ BSTR baselinePresentation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InMergeMode( 
            /* [retval][out] */ VARIANT_BOOL *InMergeMode) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AcceptAll( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RejectAll( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EnsureAllMediaUpgraded( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Broadcast( 
            /* [retval][out] */ Broadcast **Broadcast) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasNotesMaster( 
            /* [retval][out] */ VARIANT_BOOL *HasNotesMaster) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasHandoutMaster( 
            /* [retval][out] */ VARIANT_BOOL *HasHandoutMaster) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Convert2( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CreateVideoStatus( 
            /* [retval][out] */ PpMediaTaskStatus *CreateVideoStatus) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateVideo( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseTimingsAndNarrations = -1,
            /* [defaultvalue][optional][in] */ int DefaultSlideDuration = 5,
            /* [defaultvalue][optional][in] */ int VertResolution = 720,
            /* [defaultvalue][optional][in] */ int FramesPerSecond = 30,
            /* [defaultvalue][optional][in] */ int Quality = 85) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyTemplate2( 
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR VariantGUID) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChartDataPointTrack( 
            /* [retval][out] */ VARIANT_BOOL *pfChartDataPointTrack) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ChartDataPointTrack( 
            /* [in] */ VARIANT_BOOL pfChartDataPointTrack) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExportAsFixedFormat2( 
            /* [in] */ BSTR Path,
            /* [in] */ PpFixedFormatType FixedFormatType,
            /* [defaultvalue][optional][in] */ PpFixedFormatIntent Intent,
            /* [defaultvalue][optional][in] */ MsoTriState FrameSlides,
            /* [defaultvalue][optional][in] */ PpPrintHandoutOrder HandoutOrder,
            /* [defaultvalue][optional][in] */ PpPrintOutputType OutputType,
            /* [defaultvalue][optional][in] */ MsoTriState PrintHiddenSlides,
            /* [defaultvalue][optional][in] */ PrintRange *PrintRange,
            /* [defaultvalue][optional][in] */ PpPrintRangeType RangeType,
            /* [defaultvalue][optional][in] */ BSTR SlideShowName,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL IncludeDocProperties,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL KeepIRMSettings,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL DocStructureTags,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL BitmapMissingFonts,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseISO19005_1,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL IncludeMarkup,
            /* [optional][in] */ VARIANT ExternalExporter) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Guides( 
            /* [retval][out] */ Guides **Guides) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _PresentationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Presentation * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Presentation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Presentation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Presentation * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Presentation * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Presentation * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Presentation * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Presentation * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Presentation * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideMaster )( 
            _Presentation * This,
            /* [retval][out] */ _Master **SlideMaster);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TitleMaster )( 
            _Presentation * This,
            /* [retval][out] */ _Master **TitleMaster);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasTitleMaster )( 
            _Presentation * This,
            /* [retval][out] */ MsoTriState *HasTitleMaster);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddTitleMaster )( 
            _Presentation * This,
            /* [retval][out] */ _Master **TitleMaster);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyTemplate )( 
            _Presentation * This,
            /* [in] */ BSTR FileName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TemplateName )( 
            _Presentation * This,
            /* [retval][out] */ BSTR *TemplateName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NotesMaster )( 
            _Presentation * This,
            /* [retval][out] */ _Master **NotesMaster);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HandoutMaster )( 
            _Presentation * This,
            /* [retval][out] */ _Master **HandoutMaster);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Slides )( 
            _Presentation * This,
            /* [retval][out] */ Slides **Slides);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageSetup )( 
            _Presentation * This,
            /* [retval][out] */ PageSetup **PageSetup);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColorSchemes )( 
            _Presentation * This,
            /* [retval][out] */ ColorSchemes **ColorSchemes);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtraColors )( 
            _Presentation * This,
            /* [retval][out] */ ExtraColors **ExtraColors);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideShowSettings )( 
            _Presentation * This,
            /* [retval][out] */ SlideShowSettings **SlideShowSettings);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fonts )( 
            _Presentation * This,
            /* [retval][out] */ Fonts **Fonts);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Windows )( 
            _Presentation * This,
            /* [retval][out] */ DocumentWindows **Windows);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Tags )( 
            _Presentation * This,
            /* [retval][out] */ Tags **Tags);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultShape )( 
            _Presentation * This,
            /* [retval][out] */ Shape **DefaultShape);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BuiltInDocumentProperties )( 
            _Presentation * This,
            /* [retval][out] */ IDispatch **BuiltInDocumentProperties);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomDocumentProperties )( 
            _Presentation * This,
            /* [retval][out] */ IDispatch **CustomDocumentProperties);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VBProject )( 
            _Presentation * This,
            /* [retval][out] */ /* external definition not present */ VBProject **VBProject);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            _Presentation * This,
            /* [retval][out] */ MsoTriState *ReadOnly);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            _Presentation * This,
            /* [retval][out] */ BSTR *FullName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            _Presentation * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            _Presentation * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Saved )( 
            _Presentation * This,
            /* [retval][out] */ MsoTriState *Saved);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Saved )( 
            _Presentation * This,
            /* [in] */ MsoTriState Saved);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LayoutDirection )( 
            _Presentation * This,
            /* [retval][out] */ PpDirection *LayoutDirection);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LayoutDirection )( 
            _Presentation * This,
            /* [in] */ PpDirection LayoutDirection);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewWindow )( 
            _Presentation * This,
            /* [retval][out] */ DocumentWindow **NewWindow);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FollowHyperlink )( 
            _Presentation * This,
            /* [in] */ BSTR Address,
            /* [defaultvalue][optional][in] */ BSTR SubAddress,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL NewWindow,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AddHistory,
            /* [defaultvalue][optional][in] */ BSTR ExtraInfo,
            /* [defaultvalue][optional][in] */ MsoExtraInfoMethod Method,
            /* [defaultvalue][optional][in] */ BSTR HeaderInfo);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddToFavorites )( 
            _Presentation * This);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *Unused )( 
            _Presentation * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintOptions )( 
            _Presentation * This,
            /* [retval][out] */ PrintOptions **PrintOptions);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOut )( 
            _Presentation * This,
            /* [defaultvalue][optional][in] */ int From,
            /* [defaultvalue][optional][in] */ int To,
            /* [defaultvalue][optional][in] */ BSTR PrintToFile,
            /* [defaultvalue][optional][in] */ int Copies,
            /* [defaultvalue][optional][in] */ MsoTriState Collate);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            _Presentation * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAs )( 
            _Presentation * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ PpSaveAsFileType FileFormat,
            /* [defaultvalue][optional][in] */ MsoTriState EmbedTrueTypeFonts);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveCopyAs )( 
            _Presentation * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ PpSaveAsFileType FileFormat,
            /* [defaultvalue][optional][in] */ MsoTriState EmbedTrueTypeFonts);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Export )( 
            _Presentation * This,
            /* [in] */ BSTR Path,
            /* [in] */ BSTR FilterName,
            /* [defaultvalue][optional][in] */ int ScaleWidth,
            /* [defaultvalue][optional][in] */ int ScaleHeight);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            _Presentation * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *SetUndoText )( 
            _Presentation * This,
            /* [in] */ BSTR Text);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Container )( 
            _Presentation * This,
            /* [retval][out] */ IDispatch **Container);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayComments )( 
            _Presentation * This,
            /* [retval][out] */ MsoTriState *DisplayComments);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayComments )( 
            _Presentation * This,
            /* [in] */ MsoTriState DisplayComments);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FarEastLineBreakLevel )( 
            _Presentation * This,
            /* [retval][out] */ PpFarEastLineBreakLevel *FarEastLineBreakLevel);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FarEastLineBreakLevel )( 
            _Presentation * This,
            /* [in] */ PpFarEastLineBreakLevel FarEastLineBreakLevel);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoLineBreakBefore )( 
            _Presentation * This,
            /* [retval][out] */ BSTR *NoLineBreakBefore);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoLineBreakBefore )( 
            _Presentation * This,
            /* [in] */ BSTR NoLineBreakBefore);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoLineBreakAfter )( 
            _Presentation * This,
            /* [retval][out] */ BSTR *NoLineBreakAfter);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoLineBreakAfter )( 
            _Presentation * This,
            /* [in] */ BSTR NoLineBreakAfter);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UpdateLinks )( 
            _Presentation * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideShowWindow )( 
            _Presentation * This,
            /* [retval][out] */ SlideShowWindow **SlideShowWindow);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FarEastLineBreakLanguage )( 
            _Presentation * This,
            /* [retval][out] */ MsoFarEastLineBreakLanguageID *FarEastLineBreakLanguage);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FarEastLineBreakLanguage )( 
            _Presentation * This,
            /* [in] */ MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *WebPagePreview )( 
            _Presentation * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultLanguageID )( 
            _Presentation * This,
            /* [retval][out] */ MsoLanguageID *DefaultLanguageID);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultLanguageID )( 
            _Presentation * This,
            /* [in] */ MsoLanguageID DefaultLanguageID);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandBars )( 
            _Presentation * This,
            /* [retval][out] */ /* external definition not present */ CommandBars **CommandBars);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PublishObjects )( 
            _Presentation * This,
            /* [retval][out] */ PublishObjects **PublishObjects);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WebOptions )( 
            _Presentation * This,
            /* [retval][out] */ WebOptions **WebOptions);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HTMLProject )( 
            _Presentation * This,
            /* [retval][out] */ /* external definition not present */ HTMLProject **HTMLProject);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ReloadAs )( 
            _Presentation * This,
            /* [in] */ MsoEncoding cp);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *MakeIntoTemplate )( 
            _Presentation * This,
            /* [in] */ MsoTriState IsDesignTemplate);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnvelopeVisible )( 
            _Presentation * This,
            /* [retval][out] */ MsoTriState *EnvelopeVisible);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnvelopeVisible )( 
            _Presentation * This,
            /* [in] */ MsoTriState EnvelopeVisible);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *sblt )( 
            _Presentation * This,
            /* [in] */ BSTR s);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VBASigned )( 
            _Presentation * This,
            /* [retval][out] */ MsoTriState *VBASigned);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SnapToGrid )( 
            _Presentation * This,
            /* [retval][out] */ MsoTriState *SnapToGrid);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SnapToGrid )( 
            _Presentation * This,
            /* [in] */ MsoTriState SnapToGrid);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GridDistance )( 
            _Presentation * This,
            /* [retval][out] */ single *GridDistance);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GridDistance )( 
            _Presentation * This,
            /* [in] */ single GridDistance);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Designs )( 
            _Presentation * This,
            /* [retval][out] */ Designs **Designs);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Merge )( 
            _Presentation * This,
            /* [in] */ BSTR Path);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckIn )( 
            _Presentation * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL SaveChanges,
            /* [optional][in] */ VARIANT Comments,
            /* [optional][in] */ VARIANT MakePublic);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanCheckIn )( 
            _Presentation * This,
            /* [retval][out] */ VARIANT_BOOL *CanCheckIn);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Signatures )( 
            _Presentation * This,
            /* [retval][out] */ /* external definition not present */ SignatureSet **Signatures);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RemovePersonalInformation )( 
            _Presentation * This,
            /* [retval][out] */ MsoTriState *RemovePersonalInformation);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RemovePersonalInformation )( 
            _Presentation * This,
            /* [in] */ MsoTriState RemovePersonalInformation);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *SendForReview )( 
            _Presentation * This,
            /* [defaultvalue][optional][in] */ BSTR Recipients,
            /* [defaultvalue][optional][in] */ BSTR Subject,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL ShowMessage,
            /* [optional][in] */ VARIANT IncludeAttachment);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ReplyWithChanges )( 
            _Presentation * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL ShowMessage);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndReview )( 
            _Presentation * This);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasRevisionInfo )( 
            _Presentation * This,
            /* [retval][out] */ PpRevisionInfo *HasRevisionInfo);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AddBaseline )( 
            _Presentation * This,
            /* [defaultvalue][optional][in] */ BSTR FileName);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveBaseline )( 
            _Presentation * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PasswordEncryptionProvider )( 
            _Presentation * This,
            /* [retval][out] */ BSTR *PasswordEncryptionProvider);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PasswordEncryptionAlgorithm )( 
            _Presentation * This,
            /* [retval][out] */ BSTR *PasswordEncryptionAlgorithm);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PasswordEncryptionKeyLength )( 
            _Presentation * This,
            /* [retval][out] */ int *PasswordEncryptionKeyLength);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PasswordEncryptionFileProperties )( 
            _Presentation * This,
            /* [retval][out] */ VARIANT_BOOL *PasswordEncryptionFileProperties);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetPasswordEncryptionOptions )( 
            _Presentation * This,
            /* [in] */ BSTR PasswordEncryptionProvider,
            /* [in] */ BSTR PasswordEncryptionAlgorithm,
            /* [in] */ int PasswordEncryptionKeyLength,
            /* [in] */ VARIANT_BOOL PasswordEncryptionFileProperties);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Password )( 
            _Presentation * This,
            /* [retval][out] */ BSTR *Password);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Password )( 
            _Presentation * This,
            /* [in] */ BSTR Password);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WritePassword )( 
            _Presentation * This,
            /* [retval][out] */ BSTR *WritePassword);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WritePassword )( 
            _Presentation * This,
            /* [in] */ BSTR WritePassword);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Permission )( 
            _Presentation * This,
            /* [retval][out] */ /* external definition not present */ Permission **Permission);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SharedWorkspace )( 
            _Presentation * This,
            /* [retval][out] */ /* external definition not present */ SharedWorkspace **SharedWorkspace);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Sync )( 
            _Presentation * This,
            /* [retval][out] */ /* external definition not present */ Sync **Sync);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SendFaxOverInternet )( 
            _Presentation * This,
            /* [defaultvalue][optional][in] */ BSTR Recipients,
            /* [defaultvalue][optional][in] */ BSTR Subject,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL ShowMessage);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentLibraryVersions )( 
            _Presentation * This,
            /* [retval][out] */ /* external definition not present */ DocumentLibraryVersions **DocumentLibraryVersions);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContentTypeProperties )( 
            _Presentation * This,
            /* [retval][out] */ /* external definition not present */ MetaProperties **ContentTypeProperties);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SectionCount )( 
            _Presentation * This,
            /* [retval][out] */ int *SectionCount);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasSections )( 
            _Presentation * This,
            /* [retval][out] */ VARIANT_BOOL *HasSections);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *NewSectionAfter )( 
            _Presentation * This,
            /* [in] */ int Index,
            /* [in] */ VARIANT_BOOL AfterSlide,
            /* [in] */ BSTR sectionTitle,
            /* [out] */ int *newSectionIndex);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteSection )( 
            _Presentation * This,
            /* [in] */ int Index);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *DisableSections )( 
            _Presentation * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *sectionTitle )( 
            _Presentation * This,
            /* [in] */ int Index,
            /* [retval][out] */ BSTR *sectionTitle);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveDocumentInformation )( 
            _Presentation * This,
            /* [in] */ PpRemoveDocInfoType Type);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckInWithVersion )( 
            _Presentation * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL SaveChanges,
            /* [optional][in] */ VARIANT Comments,
            /* [optional][in] */ VARIANT MakePublic,
            /* [optional][in] */ VARIANT VersionType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExportAsFixedFormat )( 
            _Presentation * This,
            /* [in] */ BSTR Path,
            /* [in] */ PpFixedFormatType FixedFormatType,
            /* [defaultvalue][optional][in] */ PpFixedFormatIntent Intent,
            /* [defaultvalue][optional][in] */ MsoTriState FrameSlides,
            /* [defaultvalue][optional][in] */ PpPrintHandoutOrder HandoutOrder,
            /* [defaultvalue][optional][in] */ PpPrintOutputType OutputType,
            /* [defaultvalue][optional][in] */ MsoTriState PrintHiddenSlides,
            /* [defaultvalue][optional][in] */ PrintRange *PrintRange,
            /* [defaultvalue][optional][in] */ PpPrintRangeType RangeType,
            /* [defaultvalue][optional][in] */ BSTR SlideShowName,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL IncludeDocProperties,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL KeepIRMSettings,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL DocStructureTags,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL BitmapMissingFonts,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseISO19005_1,
            /* [optional][in] */ VARIANT ExternalExporter);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ServerPolicy )( 
            _Presentation * This,
            /* [retval][out] */ /* external definition not present */ ServerPolicy **ServerPolicy);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetWorkflowTasks )( 
            _Presentation * This,
            /* [retval][out] */ /* external definition not present */ WorkflowTasks **GetWorkflowTasks);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetWorkflowTemplates )( 
            _Presentation * This,
            /* [retval][out] */ /* external definition not present */ WorkflowTemplates **GetWorkflowTemplates);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LockServerFile )( 
            _Presentation * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentInspectors )( 
            _Presentation * This,
            /* [retval][out] */ /* external definition not present */ DocumentInspectors **DocumentInspectors);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasVBProject )( 
            _Presentation * This,
            /* [retval][out] */ VARIANT_BOOL *HasVBProject);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomXMLParts )( 
            _Presentation * This,
            /* [retval][out] */ /* external definition not present */ CustomXMLParts **CustomXMLParts);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Final )( 
            _Presentation * This,
            /* [retval][out] */ VARIANT_BOOL *Final);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Final )( 
            _Presentation * This,
            /* [in] */ VARIANT_BOOL Final);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyTheme )( 
            _Presentation * This,
            /* [in] */ BSTR themeName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomerData )( 
            _Presentation * This,
            /* [retval][out] */ CustomerData **CustomerData);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Research )( 
            _Presentation * This,
            /* [retval][out] */ Research **Research);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PublishSlides )( 
            _Presentation * This,
            /* [in] */ BSTR SlideLibraryUrl,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL Overwrite,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseSlideOrder);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EncryptionProvider )( 
            _Presentation * This,
            /* [retval][out] */ BSTR *EncryptionProvider);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EncryptionProvider )( 
            _Presentation * This,
            /* [in] */ BSTR EncryptionProvider);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Convert )( 
            _Presentation * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SectionProperties )( 
            _Presentation * This,
            /* [retval][out] */ SectionProperties **SectionProperties);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Coauthoring )( 
            _Presentation * This,
            /* [retval][out] */ Coauthoring **Coauthoring);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MergeWithBaseline )( 
            _Presentation * This,
            /* [in] */ BSTR withPresentation,
            /* [in] */ BSTR baselinePresentation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InMergeMode )( 
            _Presentation * This,
            /* [retval][out] */ VARIANT_BOOL *InMergeMode);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AcceptAll )( 
            _Presentation * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RejectAll )( 
            _Presentation * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EnsureAllMediaUpgraded )( 
            _Presentation * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Broadcast )( 
            _Presentation * This,
            /* [retval][out] */ Broadcast **Broadcast);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasNotesMaster )( 
            _Presentation * This,
            /* [retval][out] */ VARIANT_BOOL *HasNotesMaster);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasHandoutMaster )( 
            _Presentation * This,
            /* [retval][out] */ VARIANT_BOOL *HasHandoutMaster);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Convert2 )( 
            _Presentation * This,
            /* [in] */ BSTR FileName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CreateVideoStatus )( 
            _Presentation * This,
            /* [retval][out] */ PpMediaTaskStatus *CreateVideoStatus);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateVideo )( 
            _Presentation * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseTimingsAndNarrations,
            /* [defaultvalue][optional][in] */ int DefaultSlideDuration,
            /* [defaultvalue][optional][in] */ int VertResolution,
            /* [defaultvalue][optional][in] */ int FramesPerSecond,
            /* [defaultvalue][optional][in] */ int Quality);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyTemplate2 )( 
            _Presentation * This,
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR VariantGUID);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChartDataPointTrack )( 
            _Presentation * This,
            /* [retval][out] */ VARIANT_BOOL *pfChartDataPointTrack);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ChartDataPointTrack )( 
            _Presentation * This,
            /* [in] */ VARIANT_BOOL pfChartDataPointTrack);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExportAsFixedFormat2 )( 
            _Presentation * This,
            /* [in] */ BSTR Path,
            /* [in] */ PpFixedFormatType FixedFormatType,
            /* [defaultvalue][optional][in] */ PpFixedFormatIntent Intent,
            /* [defaultvalue][optional][in] */ MsoTriState FrameSlides,
            /* [defaultvalue][optional][in] */ PpPrintHandoutOrder HandoutOrder,
            /* [defaultvalue][optional][in] */ PpPrintOutputType OutputType,
            /* [defaultvalue][optional][in] */ MsoTriState PrintHiddenSlides,
            /* [defaultvalue][optional][in] */ PrintRange *PrintRange,
            /* [defaultvalue][optional][in] */ PpPrintRangeType RangeType,
            /* [defaultvalue][optional][in] */ BSTR SlideShowName,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL IncludeDocProperties,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL KeepIRMSettings,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL DocStructureTags,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL BitmapMissingFonts,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseISO19005_1,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL IncludeMarkup,
            /* [optional][in] */ VARIANT ExternalExporter);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Guides )( 
            _Presentation * This,
            /* [retval][out] */ Guides **Guides);
        
        END_INTERFACE
    } _PresentationVtbl;

    interface _Presentation
    {
        CONST_VTBL struct _PresentationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Presentation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Presentation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Presentation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Presentation_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Presentation_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Presentation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Presentation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Presentation_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define _Presentation_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define _Presentation_get_SlideMaster(This,SlideMaster)	\
    ( (This)->lpVtbl -> get_SlideMaster(This,SlideMaster) ) 

#define _Presentation_get_TitleMaster(This,TitleMaster)	\
    ( (This)->lpVtbl -> get_TitleMaster(This,TitleMaster) ) 

#define _Presentation_get_HasTitleMaster(This,HasTitleMaster)	\
    ( (This)->lpVtbl -> get_HasTitleMaster(This,HasTitleMaster) ) 

#define _Presentation_AddTitleMaster(This,TitleMaster)	\
    ( (This)->lpVtbl -> AddTitleMaster(This,TitleMaster) ) 

#define _Presentation_ApplyTemplate(This,FileName)	\
    ( (This)->lpVtbl -> ApplyTemplate(This,FileName) ) 

#define _Presentation_get_TemplateName(This,TemplateName)	\
    ( (This)->lpVtbl -> get_TemplateName(This,TemplateName) ) 

#define _Presentation_get_NotesMaster(This,NotesMaster)	\
    ( (This)->lpVtbl -> get_NotesMaster(This,NotesMaster) ) 

#define _Presentation_get_HandoutMaster(This,HandoutMaster)	\
    ( (This)->lpVtbl -> get_HandoutMaster(This,HandoutMaster) ) 

#define _Presentation_get_Slides(This,Slides)	\
    ( (This)->lpVtbl -> get_Slides(This,Slides) ) 

#define _Presentation_get_PageSetup(This,PageSetup)	\
    ( (This)->lpVtbl -> get_PageSetup(This,PageSetup) ) 

#define _Presentation_get_ColorSchemes(This,ColorSchemes)	\
    ( (This)->lpVtbl -> get_ColorSchemes(This,ColorSchemes) ) 

#define _Presentation_get_ExtraColors(This,ExtraColors)	\
    ( (This)->lpVtbl -> get_ExtraColors(This,ExtraColors) ) 

#define _Presentation_get_SlideShowSettings(This,SlideShowSettings)	\
    ( (This)->lpVtbl -> get_SlideShowSettings(This,SlideShowSettings) ) 

#define _Presentation_get_Fonts(This,Fonts)	\
    ( (This)->lpVtbl -> get_Fonts(This,Fonts) ) 

#define _Presentation_get_Windows(This,Windows)	\
    ( (This)->lpVtbl -> get_Windows(This,Windows) ) 

#define _Presentation_get_Tags(This,Tags)	\
    ( (This)->lpVtbl -> get_Tags(This,Tags) ) 

#define _Presentation_get_DefaultShape(This,DefaultShape)	\
    ( (This)->lpVtbl -> get_DefaultShape(This,DefaultShape) ) 

#define _Presentation_get_BuiltInDocumentProperties(This,BuiltInDocumentProperties)	\
    ( (This)->lpVtbl -> get_BuiltInDocumentProperties(This,BuiltInDocumentProperties) ) 

#define _Presentation_get_CustomDocumentProperties(This,CustomDocumentProperties)	\
    ( (This)->lpVtbl -> get_CustomDocumentProperties(This,CustomDocumentProperties) ) 

#define _Presentation_get_VBProject(This,VBProject)	\
    ( (This)->lpVtbl -> get_VBProject(This,VBProject) ) 

#define _Presentation_get_ReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_ReadOnly(This,ReadOnly) ) 

#define _Presentation_get_FullName(This,FullName)	\
    ( (This)->lpVtbl -> get_FullName(This,FullName) ) 

#define _Presentation_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define _Presentation_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define _Presentation_get_Saved(This,Saved)	\
    ( (This)->lpVtbl -> get_Saved(This,Saved) ) 

#define _Presentation_put_Saved(This,Saved)	\
    ( (This)->lpVtbl -> put_Saved(This,Saved) ) 

#define _Presentation_get_LayoutDirection(This,LayoutDirection)	\
    ( (This)->lpVtbl -> get_LayoutDirection(This,LayoutDirection) ) 

#define _Presentation_put_LayoutDirection(This,LayoutDirection)	\
    ( (This)->lpVtbl -> put_LayoutDirection(This,LayoutDirection) ) 

#define _Presentation_NewWindow(This,NewWindow)	\
    ( (This)->lpVtbl -> NewWindow(This,NewWindow) ) 

#define _Presentation_FollowHyperlink(This,Address,SubAddress,NewWindow,AddHistory,ExtraInfo,Method,HeaderInfo)	\
    ( (This)->lpVtbl -> FollowHyperlink(This,Address,SubAddress,NewWindow,AddHistory,ExtraInfo,Method,HeaderInfo) ) 

#define _Presentation_AddToFavorites(This)	\
    ( (This)->lpVtbl -> AddToFavorites(This) ) 

#define _Presentation_Unused(This)	\
    ( (This)->lpVtbl -> Unused(This) ) 

#define _Presentation_get_PrintOptions(This,PrintOptions)	\
    ( (This)->lpVtbl -> get_PrintOptions(This,PrintOptions) ) 

#define _Presentation_PrintOut(This,From,To,PrintToFile,Copies,Collate)	\
    ( (This)->lpVtbl -> PrintOut(This,From,To,PrintToFile,Copies,Collate) ) 

#define _Presentation_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#define _Presentation_SaveAs(This,FileName,FileFormat,EmbedTrueTypeFonts)	\
    ( (This)->lpVtbl -> SaveAs(This,FileName,FileFormat,EmbedTrueTypeFonts) ) 

#define _Presentation_SaveCopyAs(This,FileName,FileFormat,EmbedTrueTypeFonts)	\
    ( (This)->lpVtbl -> SaveCopyAs(This,FileName,FileFormat,EmbedTrueTypeFonts) ) 

#define _Presentation_Export(This,Path,FilterName,ScaleWidth,ScaleHeight)	\
    ( (This)->lpVtbl -> Export(This,Path,FilterName,ScaleWidth,ScaleHeight) ) 

#define _Presentation_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define _Presentation_SetUndoText(This,Text)	\
    ( (This)->lpVtbl -> SetUndoText(This,Text) ) 

#define _Presentation_get_Container(This,Container)	\
    ( (This)->lpVtbl -> get_Container(This,Container) ) 

#define _Presentation_get_DisplayComments(This,DisplayComments)	\
    ( (This)->lpVtbl -> get_DisplayComments(This,DisplayComments) ) 

#define _Presentation_put_DisplayComments(This,DisplayComments)	\
    ( (This)->lpVtbl -> put_DisplayComments(This,DisplayComments) ) 

#define _Presentation_get_FarEastLineBreakLevel(This,FarEastLineBreakLevel)	\
    ( (This)->lpVtbl -> get_FarEastLineBreakLevel(This,FarEastLineBreakLevel) ) 

#define _Presentation_put_FarEastLineBreakLevel(This,FarEastLineBreakLevel)	\
    ( (This)->lpVtbl -> put_FarEastLineBreakLevel(This,FarEastLineBreakLevel) ) 

#define _Presentation_get_NoLineBreakBefore(This,NoLineBreakBefore)	\
    ( (This)->lpVtbl -> get_NoLineBreakBefore(This,NoLineBreakBefore) ) 

#define _Presentation_put_NoLineBreakBefore(This,NoLineBreakBefore)	\
    ( (This)->lpVtbl -> put_NoLineBreakBefore(This,NoLineBreakBefore) ) 

#define _Presentation_get_NoLineBreakAfter(This,NoLineBreakAfter)	\
    ( (This)->lpVtbl -> get_NoLineBreakAfter(This,NoLineBreakAfter) ) 

#define _Presentation_put_NoLineBreakAfter(This,NoLineBreakAfter)	\
    ( (This)->lpVtbl -> put_NoLineBreakAfter(This,NoLineBreakAfter) ) 

#define _Presentation_UpdateLinks(This)	\
    ( (This)->lpVtbl -> UpdateLinks(This) ) 

#define _Presentation_get_SlideShowWindow(This,SlideShowWindow)	\
    ( (This)->lpVtbl -> get_SlideShowWindow(This,SlideShowWindow) ) 

#define _Presentation_get_FarEastLineBreakLanguage(This,FarEastLineBreakLanguage)	\
    ( (This)->lpVtbl -> get_FarEastLineBreakLanguage(This,FarEastLineBreakLanguage) ) 

#define _Presentation_put_FarEastLineBreakLanguage(This,FarEastLineBreakLanguage)	\
    ( (This)->lpVtbl -> put_FarEastLineBreakLanguage(This,FarEastLineBreakLanguage) ) 

#define _Presentation_WebPagePreview(This)	\
    ( (This)->lpVtbl -> WebPagePreview(This) ) 

#define _Presentation_get_DefaultLanguageID(This,DefaultLanguageID)	\
    ( (This)->lpVtbl -> get_DefaultLanguageID(This,DefaultLanguageID) ) 

#define _Presentation_put_DefaultLanguageID(This,DefaultLanguageID)	\
    ( (This)->lpVtbl -> put_DefaultLanguageID(This,DefaultLanguageID) ) 

#define _Presentation_get_CommandBars(This,CommandBars)	\
    ( (This)->lpVtbl -> get_CommandBars(This,CommandBars) ) 

#define _Presentation_get_PublishObjects(This,PublishObjects)	\
    ( (This)->lpVtbl -> get_PublishObjects(This,PublishObjects) ) 

#define _Presentation_get_WebOptions(This,WebOptions)	\
    ( (This)->lpVtbl -> get_WebOptions(This,WebOptions) ) 

#define _Presentation_get_HTMLProject(This,HTMLProject)	\
    ( (This)->lpVtbl -> get_HTMLProject(This,HTMLProject) ) 

#define _Presentation_ReloadAs(This,cp)	\
    ( (This)->lpVtbl -> ReloadAs(This,cp) ) 

#define _Presentation_MakeIntoTemplate(This,IsDesignTemplate)	\
    ( (This)->lpVtbl -> MakeIntoTemplate(This,IsDesignTemplate) ) 

#define _Presentation_get_EnvelopeVisible(This,EnvelopeVisible)	\
    ( (This)->lpVtbl -> get_EnvelopeVisible(This,EnvelopeVisible) ) 

#define _Presentation_put_EnvelopeVisible(This,EnvelopeVisible)	\
    ( (This)->lpVtbl -> put_EnvelopeVisible(This,EnvelopeVisible) ) 

#define _Presentation_sblt(This,s)	\
    ( (This)->lpVtbl -> sblt(This,s) ) 

#define _Presentation_get_VBASigned(This,VBASigned)	\
    ( (This)->lpVtbl -> get_VBASigned(This,VBASigned) ) 

#define _Presentation_get_SnapToGrid(This,SnapToGrid)	\
    ( (This)->lpVtbl -> get_SnapToGrid(This,SnapToGrid) ) 

#define _Presentation_put_SnapToGrid(This,SnapToGrid)	\
    ( (This)->lpVtbl -> put_SnapToGrid(This,SnapToGrid) ) 

#define _Presentation_get_GridDistance(This,GridDistance)	\
    ( (This)->lpVtbl -> get_GridDistance(This,GridDistance) ) 

#define _Presentation_put_GridDistance(This,GridDistance)	\
    ( (This)->lpVtbl -> put_GridDistance(This,GridDistance) ) 

#define _Presentation_get_Designs(This,Designs)	\
    ( (This)->lpVtbl -> get_Designs(This,Designs) ) 

#define _Presentation_Merge(This,Path)	\
    ( (This)->lpVtbl -> Merge(This,Path) ) 

#define _Presentation_CheckIn(This,SaveChanges,Comments,MakePublic)	\
    ( (This)->lpVtbl -> CheckIn(This,SaveChanges,Comments,MakePublic) ) 

#define _Presentation_CanCheckIn(This,CanCheckIn)	\
    ( (This)->lpVtbl -> CanCheckIn(This,CanCheckIn) ) 

#define _Presentation_get_Signatures(This,Signatures)	\
    ( (This)->lpVtbl -> get_Signatures(This,Signatures) ) 

#define _Presentation_get_RemovePersonalInformation(This,RemovePersonalInformation)	\
    ( (This)->lpVtbl -> get_RemovePersonalInformation(This,RemovePersonalInformation) ) 

#define _Presentation_put_RemovePersonalInformation(This,RemovePersonalInformation)	\
    ( (This)->lpVtbl -> put_RemovePersonalInformation(This,RemovePersonalInformation) ) 

#define _Presentation_SendForReview(This,Recipients,Subject,ShowMessage,IncludeAttachment)	\
    ( (This)->lpVtbl -> SendForReview(This,Recipients,Subject,ShowMessage,IncludeAttachment) ) 

#define _Presentation_ReplyWithChanges(This,ShowMessage)	\
    ( (This)->lpVtbl -> ReplyWithChanges(This,ShowMessage) ) 

#define _Presentation_EndReview(This)	\
    ( (This)->lpVtbl -> EndReview(This) ) 

#define _Presentation_get_HasRevisionInfo(This,HasRevisionInfo)	\
    ( (This)->lpVtbl -> get_HasRevisionInfo(This,HasRevisionInfo) ) 

#define _Presentation_AddBaseline(This,FileName)	\
    ( (This)->lpVtbl -> AddBaseline(This,FileName) ) 

#define _Presentation_RemoveBaseline(This)	\
    ( (This)->lpVtbl -> RemoveBaseline(This) ) 

#define _Presentation_get_PasswordEncryptionProvider(This,PasswordEncryptionProvider)	\
    ( (This)->lpVtbl -> get_PasswordEncryptionProvider(This,PasswordEncryptionProvider) ) 

#define _Presentation_get_PasswordEncryptionAlgorithm(This,PasswordEncryptionAlgorithm)	\
    ( (This)->lpVtbl -> get_PasswordEncryptionAlgorithm(This,PasswordEncryptionAlgorithm) ) 

#define _Presentation_get_PasswordEncryptionKeyLength(This,PasswordEncryptionKeyLength)	\
    ( (This)->lpVtbl -> get_PasswordEncryptionKeyLength(This,PasswordEncryptionKeyLength) ) 

#define _Presentation_get_PasswordEncryptionFileProperties(This,PasswordEncryptionFileProperties)	\
    ( (This)->lpVtbl -> get_PasswordEncryptionFileProperties(This,PasswordEncryptionFileProperties) ) 

#define _Presentation_SetPasswordEncryptionOptions(This,PasswordEncryptionProvider,PasswordEncryptionAlgorithm,PasswordEncryptionKeyLength,PasswordEncryptionFileProperties)	\
    ( (This)->lpVtbl -> SetPasswordEncryptionOptions(This,PasswordEncryptionProvider,PasswordEncryptionAlgorithm,PasswordEncryptionKeyLength,PasswordEncryptionFileProperties) ) 

#define _Presentation_get_Password(This,Password)	\
    ( (This)->lpVtbl -> get_Password(This,Password) ) 

#define _Presentation_put_Password(This,Password)	\
    ( (This)->lpVtbl -> put_Password(This,Password) ) 

#define _Presentation_get_WritePassword(This,WritePassword)	\
    ( (This)->lpVtbl -> get_WritePassword(This,WritePassword) ) 

#define _Presentation_put_WritePassword(This,WritePassword)	\
    ( (This)->lpVtbl -> put_WritePassword(This,WritePassword) ) 

#define _Presentation_get_Permission(This,Permission)	\
    ( (This)->lpVtbl -> get_Permission(This,Permission) ) 

#define _Presentation_get_SharedWorkspace(This,SharedWorkspace)	\
    ( (This)->lpVtbl -> get_SharedWorkspace(This,SharedWorkspace) ) 

#define _Presentation_get_Sync(This,Sync)	\
    ( (This)->lpVtbl -> get_Sync(This,Sync) ) 

#define _Presentation_SendFaxOverInternet(This,Recipients,Subject,ShowMessage)	\
    ( (This)->lpVtbl -> SendFaxOverInternet(This,Recipients,Subject,ShowMessage) ) 

#define _Presentation_get_DocumentLibraryVersions(This,DocumentLibraryVersions)	\
    ( (This)->lpVtbl -> get_DocumentLibraryVersions(This,DocumentLibraryVersions) ) 

#define _Presentation_get_ContentTypeProperties(This,ContentTypeProperties)	\
    ( (This)->lpVtbl -> get_ContentTypeProperties(This,ContentTypeProperties) ) 

#define _Presentation_get_SectionCount(This,SectionCount)	\
    ( (This)->lpVtbl -> get_SectionCount(This,SectionCount) ) 

#define _Presentation_get_HasSections(This,HasSections)	\
    ( (This)->lpVtbl -> get_HasSections(This,HasSections) ) 

#define _Presentation_NewSectionAfter(This,Index,AfterSlide,sectionTitle,newSectionIndex)	\
    ( (This)->lpVtbl -> NewSectionAfter(This,Index,AfterSlide,sectionTitle,newSectionIndex) ) 

#define _Presentation_DeleteSection(This,Index)	\
    ( (This)->lpVtbl -> DeleteSection(This,Index) ) 

#define _Presentation_DisableSections(This)	\
    ( (This)->lpVtbl -> DisableSections(This) ) 

#define _Presentation_sectionTitle(This,Index,sectionTitle)	\
    ( (This)->lpVtbl -> sectionTitle(This,Index,sectionTitle) ) 

#define _Presentation_RemoveDocumentInformation(This,Type)	\
    ( (This)->lpVtbl -> RemoveDocumentInformation(This,Type) ) 

#define _Presentation_CheckInWithVersion(This,SaveChanges,Comments,MakePublic,VersionType)	\
    ( (This)->lpVtbl -> CheckInWithVersion(This,SaveChanges,Comments,MakePublic,VersionType) ) 

#define _Presentation_ExportAsFixedFormat(This,Path,FixedFormatType,Intent,FrameSlides,HandoutOrder,OutputType,PrintHiddenSlides,PrintRange,RangeType,SlideShowName,IncludeDocProperties,KeepIRMSettings,DocStructureTags,BitmapMissingFonts,UseISO19005_1,ExternalExporter)	\
    ( (This)->lpVtbl -> ExportAsFixedFormat(This,Path,FixedFormatType,Intent,FrameSlides,HandoutOrder,OutputType,PrintHiddenSlides,PrintRange,RangeType,SlideShowName,IncludeDocProperties,KeepIRMSettings,DocStructureTags,BitmapMissingFonts,UseISO19005_1,ExternalExporter) ) 

#define _Presentation_get_ServerPolicy(This,ServerPolicy)	\
    ( (This)->lpVtbl -> get_ServerPolicy(This,ServerPolicy) ) 

#define _Presentation_GetWorkflowTasks(This,GetWorkflowTasks)	\
    ( (This)->lpVtbl -> GetWorkflowTasks(This,GetWorkflowTasks) ) 

#define _Presentation_GetWorkflowTemplates(This,GetWorkflowTemplates)	\
    ( (This)->lpVtbl -> GetWorkflowTemplates(This,GetWorkflowTemplates) ) 

#define _Presentation_LockServerFile(This)	\
    ( (This)->lpVtbl -> LockServerFile(This) ) 

#define _Presentation_get_DocumentInspectors(This,DocumentInspectors)	\
    ( (This)->lpVtbl -> get_DocumentInspectors(This,DocumentInspectors) ) 

#define _Presentation_get_HasVBProject(This,HasVBProject)	\
    ( (This)->lpVtbl -> get_HasVBProject(This,HasVBProject) ) 

#define _Presentation_get_CustomXMLParts(This,CustomXMLParts)	\
    ( (This)->lpVtbl -> get_CustomXMLParts(This,CustomXMLParts) ) 

#define _Presentation_get_Final(This,Final)	\
    ( (This)->lpVtbl -> get_Final(This,Final) ) 

#define _Presentation_put_Final(This,Final)	\
    ( (This)->lpVtbl -> put_Final(This,Final) ) 

#define _Presentation_ApplyTheme(This,themeName)	\
    ( (This)->lpVtbl -> ApplyTheme(This,themeName) ) 

#define _Presentation_get_CustomerData(This,CustomerData)	\
    ( (This)->lpVtbl -> get_CustomerData(This,CustomerData) ) 

#define _Presentation_get_Research(This,Research)	\
    ( (This)->lpVtbl -> get_Research(This,Research) ) 

#define _Presentation_PublishSlides(This,SlideLibraryUrl,Overwrite,UseSlideOrder)	\
    ( (This)->lpVtbl -> PublishSlides(This,SlideLibraryUrl,Overwrite,UseSlideOrder) ) 

#define _Presentation_get_EncryptionProvider(This,EncryptionProvider)	\
    ( (This)->lpVtbl -> get_EncryptionProvider(This,EncryptionProvider) ) 

#define _Presentation_put_EncryptionProvider(This,EncryptionProvider)	\
    ( (This)->lpVtbl -> put_EncryptionProvider(This,EncryptionProvider) ) 

#define _Presentation_Convert(This)	\
    ( (This)->lpVtbl -> Convert(This) ) 

#define _Presentation_get_SectionProperties(This,SectionProperties)	\
    ( (This)->lpVtbl -> get_SectionProperties(This,SectionProperties) ) 

#define _Presentation_get_Coauthoring(This,Coauthoring)	\
    ( (This)->lpVtbl -> get_Coauthoring(This,Coauthoring) ) 

#define _Presentation_MergeWithBaseline(This,withPresentation,baselinePresentation)	\
    ( (This)->lpVtbl -> MergeWithBaseline(This,withPresentation,baselinePresentation) ) 

#define _Presentation_get_InMergeMode(This,InMergeMode)	\
    ( (This)->lpVtbl -> get_InMergeMode(This,InMergeMode) ) 

#define _Presentation_AcceptAll(This)	\
    ( (This)->lpVtbl -> AcceptAll(This) ) 

#define _Presentation_RejectAll(This)	\
    ( (This)->lpVtbl -> RejectAll(This) ) 

#define _Presentation_EnsureAllMediaUpgraded(This)	\
    ( (This)->lpVtbl -> EnsureAllMediaUpgraded(This) ) 

#define _Presentation_get_Broadcast(This,Broadcast)	\
    ( (This)->lpVtbl -> get_Broadcast(This,Broadcast) ) 

#define _Presentation_get_HasNotesMaster(This,HasNotesMaster)	\
    ( (This)->lpVtbl -> get_HasNotesMaster(This,HasNotesMaster) ) 

#define _Presentation_get_HasHandoutMaster(This,HasHandoutMaster)	\
    ( (This)->lpVtbl -> get_HasHandoutMaster(This,HasHandoutMaster) ) 

#define _Presentation_Convert2(This,FileName)	\
    ( (This)->lpVtbl -> Convert2(This,FileName) ) 

#define _Presentation_get_CreateVideoStatus(This,CreateVideoStatus)	\
    ( (This)->lpVtbl -> get_CreateVideoStatus(This,CreateVideoStatus) ) 

#define _Presentation_CreateVideo(This,FileName,UseTimingsAndNarrations,DefaultSlideDuration,VertResolution,FramesPerSecond,Quality)	\
    ( (This)->lpVtbl -> CreateVideo(This,FileName,UseTimingsAndNarrations,DefaultSlideDuration,VertResolution,FramesPerSecond,Quality) ) 

#define _Presentation_ApplyTemplate2(This,FileName,VariantGUID)	\
    ( (This)->lpVtbl -> ApplyTemplate2(This,FileName,VariantGUID) ) 

#define _Presentation_get_ChartDataPointTrack(This,pfChartDataPointTrack)	\
    ( (This)->lpVtbl -> get_ChartDataPointTrack(This,pfChartDataPointTrack) ) 

#define _Presentation_put_ChartDataPointTrack(This,pfChartDataPointTrack)	\
    ( (This)->lpVtbl -> put_ChartDataPointTrack(This,pfChartDataPointTrack) ) 

#define _Presentation_ExportAsFixedFormat2(This,Path,FixedFormatType,Intent,FrameSlides,HandoutOrder,OutputType,PrintHiddenSlides,PrintRange,RangeType,SlideShowName,IncludeDocProperties,KeepIRMSettings,DocStructureTags,BitmapMissingFonts,UseISO19005_1,IncludeMarkup,ExternalExporter)	\
    ( (This)->lpVtbl -> ExportAsFixedFormat2(This,Path,FixedFormatType,Intent,FrameSlides,HandoutOrder,OutputType,PrintHiddenSlides,PrintRange,RangeType,SlideShowName,IncludeDocProperties,KeepIRMSettings,DocStructureTags,BitmapMissingFonts,UseISO19005_1,IncludeMarkup,ExternalExporter) ) 

#define _Presentation_get_Guides(This,Guides)	\
    ( (This)->lpVtbl -> get_Guides(This,Guides) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



#if 0
/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Presentation_PublishSlides_Proxy( 
    _Presentation * This,
    /* [in] */ BSTR SlideLibraryUrl,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL Overwrite,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL UseSlideOrder);


void __RPC_STUB _Presentation_PublishSlides_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Presentation_get_EncryptionProvider_Proxy( 
    _Presentation * This,
    /* [retval][out] */ BSTR *EncryptionProvider);


void __RPC_STUB _Presentation_get_EncryptionProvider_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Presentation_put_EncryptionProvider_Proxy( 
    _Presentation * This,
    /* [in] */ BSTR EncryptionProvider);


void __RPC_STUB _Presentation_put_EncryptionProvider_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _Presentation_Convert_Proxy( 
    _Presentation * This);


void __RPC_STUB _Presentation_Convert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Presentation_get_SectionProperties_Proxy( 
    _Presentation * This,
    /* [retval][out] */ SectionProperties **SectionProperties);


void __RPC_STUB _Presentation_get_SectionProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Presentation_get_Coauthoring_Proxy( 
    _Presentation * This,
    /* [retval][out] */ Coauthoring **Coauthoring);


void __RPC_STUB _Presentation_get_Coauthoring_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Presentation_MergeWithBaseline_Proxy( 
    _Presentation * This,
    /* [in] */ BSTR withPresentation,
    /* [in] */ BSTR baselinePresentation);


void __RPC_STUB _Presentation_MergeWithBaseline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Presentation_get_InMergeMode_Proxy( 
    _Presentation * This,
    /* [retval][out] */ VARIANT_BOOL *InMergeMode);


void __RPC_STUB _Presentation_get_InMergeMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Presentation_AcceptAll_Proxy( 
    _Presentation * This);


void __RPC_STUB _Presentation_AcceptAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Presentation_RejectAll_Proxy( 
    _Presentation * This);


void __RPC_STUB _Presentation_RejectAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Presentation_EnsureAllMediaUpgraded_Proxy( 
    _Presentation * This);


void __RPC_STUB _Presentation_EnsureAllMediaUpgraded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Presentation_get_Broadcast_Proxy( 
    _Presentation * This,
    /* [retval][out] */ Broadcast **Broadcast);


void __RPC_STUB _Presentation_get_Broadcast_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Presentation_get_HasNotesMaster_Proxy( 
    _Presentation * This,
    /* [retval][out] */ VARIANT_BOOL *HasNotesMaster);


void __RPC_STUB _Presentation_get_HasNotesMaster_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Presentation_get_HasHandoutMaster_Proxy( 
    _Presentation * This,
    /* [retval][out] */ VARIANT_BOOL *HasHandoutMaster);


void __RPC_STUB _Presentation_get_HasHandoutMaster_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Presentation_Convert2_Proxy( 
    _Presentation * This,
    /* [in] */ BSTR FileName);


void __RPC_STUB _Presentation_Convert2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Presentation_get_CreateVideoStatus_Proxy( 
    _Presentation * This,
    /* [retval][out] */ PpMediaTaskStatus *CreateVideoStatus);


void __RPC_STUB _Presentation_get_CreateVideoStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Presentation_CreateVideo_Proxy( 
    _Presentation * This,
    /* [in] */ BSTR FileName,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL UseTimingsAndNarrations,
    /* [defaultvalue][optional][in] */ int DefaultSlideDuration,
    /* [defaultvalue][optional][in] */ int VertResolution,
    /* [defaultvalue][optional][in] */ int FramesPerSecond,
    /* [defaultvalue][optional][in] */ int Quality);


void __RPC_STUB _Presentation_CreateVideo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Presentation_ApplyTemplate2_Proxy( 
    _Presentation * This,
    /* [in] */ BSTR FileName,
    /* [in] */ BSTR VariantGUID);


void __RPC_STUB _Presentation_ApplyTemplate2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Presentation_get_ChartDataPointTrack_Proxy( 
    _Presentation * This,
    /* [retval][out] */ VARIANT_BOOL *pfChartDataPointTrack);


void __RPC_STUB _Presentation_get_ChartDataPointTrack_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Presentation_put_ChartDataPointTrack_Proxy( 
    _Presentation * This,
    /* [in] */ VARIANT_BOOL pfChartDataPointTrack);


void __RPC_STUB _Presentation_put_ChartDataPointTrack_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Presentation_ExportAsFixedFormat2_Proxy( 
    _Presentation * This,
    /* [in] */ BSTR Path,
    /* [in] */ PpFixedFormatType FixedFormatType,
    /* [defaultvalue][optional][in] */ PpFixedFormatIntent Intent,
    /* [defaultvalue][optional][in] */ MsoTriState FrameSlides,
    /* [defaultvalue][optional][in] */ PpPrintHandoutOrder HandoutOrder,
    /* [defaultvalue][optional][in] */ PpPrintOutputType OutputType,
    /* [defaultvalue][optional][in] */ MsoTriState PrintHiddenSlides,
    /* [defaultvalue][optional][in] */ PrintRange *PrintRange,
    /* [defaultvalue][optional][in] */ PpPrintRangeType RangeType,
    /* [defaultvalue][optional][in] */ BSTR SlideShowName,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL IncludeDocProperties,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL KeepIRMSettings,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL DocStructureTags,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL BitmapMissingFonts,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL UseISO19005_1,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL IncludeMarkup,
    /* [optional][in] */ VARIANT ExternalExporter);


void __RPC_STUB _Presentation_ExportAsFixedFormat2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Presentation_get_Guides_Proxy( 
    _Presentation * This,
    /* [retval][out] */ Guides **Guides);


void __RPC_STUB _Presentation_get_Guides_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


#endif

#endif 	/* ___Presentation_INTERFACE_DEFINED__ */


#ifndef __Tags_INTERFACE_DEFINED__
#define __Tags_INTERFACE_DEFINED__

/* interface Tags */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Tags;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934B9-5A91-11CF-8700-00AA0060263B")
    Tags : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ BSTR *Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [in] */ BSTR Value) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AddBinary( 
            /* [in] */ BSTR Name,
            /* [in] */ BSTR FilePath) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE BinaryValue( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ long *BinaryValue) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Name( 
            /* [in] */ int Index,
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Value( 
            /* [in] */ int Index,
            /* [retval][out] */ BSTR *Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TagsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Tags * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Tags * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Tags * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Tags * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Tags * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Tags * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Tags * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Tags * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            Tags * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Tags * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Tags * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Tags * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Tags * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ BSTR *Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Tags * This,
            /* [in] */ BSTR Name,
            /* [in] */ BSTR Value);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Tags * This,
            /* [in] */ BSTR Name);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AddBinary )( 
            Tags * This,
            /* [in] */ BSTR Name,
            /* [in] */ BSTR FilePath);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *BinaryValue )( 
            Tags * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ long *BinaryValue);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Name )( 
            Tags * This,
            /* [in] */ int Index,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Value )( 
            Tags * This,
            /* [in] */ int Index,
            /* [retval][out] */ BSTR *Value);
        
        END_INTERFACE
    } TagsVtbl;

    interface Tags
    {
        CONST_VTBL struct TagsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Tags_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Tags_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Tags_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Tags_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Tags_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Tags_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Tags_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Tags_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Tags__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define Tags_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define Tags_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Tags_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Tags_Item(This,Name,Item)	\
    ( (This)->lpVtbl -> Item(This,Name,Item) ) 

#define Tags_Add(This,Name,Value)	\
    ( (This)->lpVtbl -> Add(This,Name,Value) ) 

#define Tags_Delete(This,Name)	\
    ( (This)->lpVtbl -> Delete(This,Name) ) 

#define Tags_AddBinary(This,Name,FilePath)	\
    ( (This)->lpVtbl -> AddBinary(This,Name,FilePath) ) 

#define Tags_BinaryValue(This,Name,BinaryValue)	\
    ( (This)->lpVtbl -> BinaryValue(This,Name,BinaryValue) ) 

#define Tags_Name(This,Index,Name)	\
    ( (This)->lpVtbl -> Name(This,Index,Name) ) 

#define Tags_Value(This,Index,Value)	\
    ( (This)->lpVtbl -> Value(This,Index,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Tags_INTERFACE_DEFINED__ */


#ifndef __MouseTracker_INTERFACE_DEFINED__
#define __MouseTracker_INTERFACE_DEFINED__

/* interface MouseTracker */
/* [object][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_MouseTracker;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934BE-5A91-11CF-8700-00AA0060263B")
    MouseTracker : public IUnknown
    {
    public:
        virtual /* [helpcontext] */ HRESULT __stdcall OnTrack( 
            /* [in] */ single X,
            /* [in] */ single Y) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall EndTrack( 
            /* [in] */ single X,
            /* [in] */ single Y) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MouseTrackerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MouseTracker * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MouseTracker * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MouseTracker * This);
        
        /* [helpcontext] */ HRESULT ( __stdcall *OnTrack )( 
            MouseTracker * This,
            /* [in] */ single X,
            /* [in] */ single Y);
        
        /* [helpcontext] */ HRESULT ( __stdcall *EndTrack )( 
            MouseTracker * This,
            /* [in] */ single X,
            /* [in] */ single Y);
        
        END_INTERFACE
    } MouseTrackerVtbl;

    interface MouseTracker
    {
        CONST_VTBL struct MouseTrackerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MouseTracker_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MouseTracker_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MouseTracker_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MouseTracker_OnTrack(This,X,Y)	\
    ( (This)->lpVtbl -> OnTrack(This,X,Y) ) 

#define MouseTracker_EndTrack(This,X,Y)	\
    ( (This)->lpVtbl -> EndTrack(This,X,Y) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MouseTracker_INTERFACE_DEFINED__ */


#ifndef __MouseDownHandler_INTERFACE_DEFINED__
#define __MouseDownHandler_INTERFACE_DEFINED__

/* interface MouseDownHandler */
/* [object][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_MouseDownHandler;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934BF-5A91-11CF-8700-00AA0060263B")
    MouseDownHandler : public IUnknown
    {
    public:
        virtual /* [helpcontext] */ HRESULT __stdcall OnMouseDown( 
            /* [in] */ IUnknown *activeWin) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MouseDownHandlerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MouseDownHandler * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MouseDownHandler * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MouseDownHandler * This);
        
        /* [helpcontext] */ HRESULT ( __stdcall *OnMouseDown )( 
            MouseDownHandler * This,
            /* [in] */ IUnknown *activeWin);
        
        END_INTERFACE
    } MouseDownHandlerVtbl;

    interface MouseDownHandler
    {
        CONST_VTBL struct MouseDownHandlerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MouseDownHandler_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MouseDownHandler_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MouseDownHandler_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MouseDownHandler_OnMouseDown(This,activeWin)	\
    ( (This)->lpVtbl -> OnMouseDown(This,activeWin) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MouseDownHandler_INTERFACE_DEFINED__ */


#ifndef __OCXExtender_INTERFACE_DEFINED__
#define __OCXExtender_INTERFACE_DEFINED__

/* interface OCXExtender */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_OCXExtender;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934C0-5A91-11CF-8700-00AA0060263B")
    OCXExtender : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *Visible) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL Visible) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ single *Left) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ single Left) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ single *Top) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ single Top) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ single *Height) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ single Height) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ single *Width) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ single Width) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ZOrderPosition( 
            /* [retval][out] */ int *ZOrderPosition) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltHTML( 
            /* [retval][out] */ BSTR *AltHTML) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltHTML( 
            /* [in] */ BSTR AltHTML) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OCXExtenderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OCXExtender * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OCXExtender * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OCXExtender * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OCXExtender * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OCXExtender * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OCXExtender * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OCXExtender * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            OCXExtender * This,
            /* [retval][out] */ VARIANT_BOOL *Visible);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            OCXExtender * This,
            /* [in] */ VARIANT_BOOL Visible);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            OCXExtender * This,
            /* [retval][out] */ single *Left);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            OCXExtender * This,
            /* [in] */ single Left);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            OCXExtender * This,
            /* [retval][out] */ single *Top);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            OCXExtender * This,
            /* [in] */ single Top);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            OCXExtender * This,
            /* [retval][out] */ single *Height);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            OCXExtender * This,
            /* [in] */ single Height);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            OCXExtender * This,
            /* [retval][out] */ single *Width);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            OCXExtender * This,
            /* [in] */ single Width);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZOrderPosition )( 
            OCXExtender * This,
            /* [retval][out] */ int *ZOrderPosition);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            OCXExtender * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            OCXExtender * This,
            /* [in] */ BSTR Name);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltHTML )( 
            OCXExtender * This,
            /* [retval][out] */ BSTR *AltHTML);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltHTML )( 
            OCXExtender * This,
            /* [in] */ BSTR AltHTML);
        
        END_INTERFACE
    } OCXExtenderVtbl;

    interface OCXExtender
    {
        CONST_VTBL struct OCXExtenderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OCXExtender_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define OCXExtender_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define OCXExtender_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define OCXExtender_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define OCXExtender_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define OCXExtender_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define OCXExtender_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define OCXExtender_get_Visible(This,Visible)	\
    ( (This)->lpVtbl -> get_Visible(This,Visible) ) 

#define OCXExtender_put_Visible(This,Visible)	\
    ( (This)->lpVtbl -> put_Visible(This,Visible) ) 

#define OCXExtender_get_Left(This,Left)	\
    ( (This)->lpVtbl -> get_Left(This,Left) ) 

#define OCXExtender_put_Left(This,Left)	\
    ( (This)->lpVtbl -> put_Left(This,Left) ) 

#define OCXExtender_get_Top(This,Top)	\
    ( (This)->lpVtbl -> get_Top(This,Top) ) 

#define OCXExtender_put_Top(This,Top)	\
    ( (This)->lpVtbl -> put_Top(This,Top) ) 

#define OCXExtender_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define OCXExtender_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define OCXExtender_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define OCXExtender_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#define OCXExtender_get_ZOrderPosition(This,ZOrderPosition)	\
    ( (This)->lpVtbl -> get_ZOrderPosition(This,ZOrderPosition) ) 

#define OCXExtender_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define OCXExtender_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define OCXExtender_get_AltHTML(This,AltHTML)	\
    ( (This)->lpVtbl -> get_AltHTML(This,AltHTML) ) 

#define OCXExtender_put_AltHTML(This,AltHTML)	\
    ( (This)->lpVtbl -> put_AltHTML(This,AltHTML) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __OCXExtender_INTERFACE_DEFINED__ */


#ifndef __OCXExtenderEvents_INTERFACE_DEFINED__
#define __OCXExtenderEvents_INTERFACE_DEFINED__

/* interface OCXExtenderEvents */
/* [object][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_OCXExtenderEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934C1-5A91-11CF-8700-00AA0060263B")
    OCXExtenderEvents : public IDispatch
    {
    public:
        virtual HRESULT __stdcall GotFocus( void) = 0;
        
        virtual HRESULT __stdcall LostFocus( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OCXExtenderEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OCXExtenderEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OCXExtenderEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OCXExtenderEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OCXExtenderEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OCXExtenderEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OCXExtenderEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OCXExtenderEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( __stdcall *GotFocus )( 
            OCXExtenderEvents * This);
        
        HRESULT ( __stdcall *LostFocus )( 
            OCXExtenderEvents * This);
        
        END_INTERFACE
    } OCXExtenderEventsVtbl;

    interface OCXExtenderEvents
    {
        CONST_VTBL struct OCXExtenderEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OCXExtenderEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define OCXExtenderEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define OCXExtenderEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define OCXExtenderEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define OCXExtenderEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define OCXExtenderEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define OCXExtenderEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define OCXExtenderEvents_GotFocus(This)	\
    ( (This)->lpVtbl -> GotFocus(This) ) 

#define OCXExtenderEvents_LostFocus(This)	\
    ( (This)->lpVtbl -> LostFocus(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __OCXExtenderEvents_INTERFACE_DEFINED__ */


#ifndef __EApplication_INTERFACE_DEFINED__
#define __EApplication_INTERFACE_DEFINED__

/* interface EApplication */
/* [object][helpcontext][uuid] */ 


extern "C++" const IID IID_EApplication;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934C2-5A91-11CF-8700-00AA0060263B")
    EApplication : public IDispatch
    {
    public:
        virtual /* [helpcontext][id] */ HRESULT __stdcall WindowSelectionChange( 
            /* [in] */ Selection *Sel) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall WindowBeforeRightClick( 
            /* [in] */ Selection *Sel,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall WindowBeforeDoubleClick( 
            /* [in] */ Selection *Sel,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall PresentationClose( 
            /* [in] */ Presentation	*Pres) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall PresentationSave( 
            /* [in] */ Presentation	*Pres) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall PresentationOpen( 
            /* [in] */ Presentation	*Pres) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall NewPresentation( 
            /* [in] */ Presentation	*Pres) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall PresentationNewSlide( 
            /* [in] */ Slide	*Sld) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall WindowActivate( 
            /* [in] */ Presentation	*Pres,
            /* [in] */ DocumentWindow *Wn) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall WindowDeactivate( 
            /* [in] */ Presentation	*Pres,
            /* [in] */ DocumentWindow *Wn) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall SlideShowBegin( 
            /* [in] */ SlideShowWindow *Wn) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall SlideShowNextBuild( 
            /* [in] */ SlideShowWindow *Wn) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall SlideShowNextSlide( 
            /* [in] */ SlideShowWindow *Wn) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall SlideShowEnd( 
            /* [in] */ Presentation	*Pres) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT __stdcall PresentationPrint( 
            /* [in] */ Presentation	*Pres) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT __stdcall SlideSelectionChanged( 
            /* [in] */ SlideRange *SldRange) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall ColorSchemeChanged( 
            /* [in] */ SlideRange *SldRange) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall PresentationBeforeSave( 
            /* [in] */ Presentation	*Pres,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall SlideShowNextClick( 
            /* [in] */ SlideShowWindow *Wn,
            /* [in] */ Effect *nEffect) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall AfterNewPresentation( 
            /* [in] */ Presentation	*Pres) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall AfterPresentationOpen( 
            /* [in] */ Presentation	*Pres) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall PresentationSync( 
            /* [in] */ Presentation	*Pres,
            /* [in] */ MsoSyncEventType SyncEventType) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall SlideShowOnNext( 
            /* [in] */ SlideShowWindow *Wn) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall SlideShowOnPrevious( 
            /* [in] */ SlideShowWindow *Wn) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall PresentationBeforeClose( 
            /* [in] */ Presentation	*Pres,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall ProtectedViewWindowOpen( 
            /* [in] */ ProtectedViewWindow *ProtViewWindow) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall ProtectedViewWindowBeforeEdit( 
            /* [in] */ ProtectedViewWindow *ProtViewWindow,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall ProtectedViewWindowBeforeClose( 
            /* [in] */ ProtectedViewWindow *ProtViewWindow,
            /* [in] */ PpProtectedViewCloseReason ProtectedViewCloseReason,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall ProtectedViewWindowActivate( 
            /* [in] */ ProtectedViewWindow *ProtViewWindow) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall ProtectedViewWindowDeactivate( 
            /* [in] */ ProtectedViewWindow *ProtViewWindow) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall PresentationCloseFinal( 
            /* [in] */ Presentation	*Pres) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall AfterDragDropOnSlide( 
            /* [in] */ Slide	*Sld,
            /* [in] */ single X,
            /* [in] */ single Y) = 0;
        
        virtual /* [helpcontext] */ HRESULT __stdcall AfterShapeSizeChange( 
            /* [in] */ Shape *shp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EApplicationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            EApplication * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            EApplication * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            EApplication * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            EApplication * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            EApplication * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            EApplication * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            EApplication * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][id] */ HRESULT ( __stdcall *WindowSelectionChange )( 
            EApplication * This,
            /* [in] */ Selection *Sel);
        
        /* [helpcontext] */ HRESULT ( __stdcall *WindowBeforeRightClick )( 
            EApplication * This,
            /* [in] */ Selection *Sel,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext] */ HRESULT ( __stdcall *WindowBeforeDoubleClick )( 
            EApplication * This,
            /* [in] */ Selection *Sel,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext] */ HRESULT ( __stdcall *PresentationClose )( 
            EApplication * This,
            /* [in] */ Presentation	*Pres);
        
        /* [helpcontext] */ HRESULT ( __stdcall *PresentationSave )( 
            EApplication * This,
            /* [in] */ Presentation	*Pres);
        
        /* [helpcontext] */ HRESULT ( __stdcall *PresentationOpen )( 
            EApplication * This,
            /* [in] */ Presentation	*Pres);
        
        /* [helpcontext] */ HRESULT ( __stdcall *NewPresentation )( 
            EApplication * This,
            /* [in] */ Presentation	*Pres);
        
        /* [helpcontext] */ HRESULT ( __stdcall *PresentationNewSlide )( 
            EApplication * This,
            /* [in] */ Slide	*Sld);
        
        /* [helpcontext] */ HRESULT ( __stdcall *WindowActivate )( 
            EApplication * This,
            /* [in] */ Presentation	*Pres,
            /* [in] */ DocumentWindow *Wn);
        
        /* [helpcontext] */ HRESULT ( __stdcall *WindowDeactivate )( 
            EApplication * This,
            /* [in] */ Presentation	*Pres,
            /* [in] */ DocumentWindow *Wn);
        
        /* [helpcontext] */ HRESULT ( __stdcall *SlideShowBegin )( 
            EApplication * This,
            /* [in] */ SlideShowWindow *Wn);
        
        /* [helpcontext] */ HRESULT ( __stdcall *SlideShowNextBuild )( 
            EApplication * This,
            /* [in] */ SlideShowWindow *Wn);
        
        /* [helpcontext] */ HRESULT ( __stdcall *SlideShowNextSlide )( 
            EApplication * This,
            /* [in] */ SlideShowWindow *Wn);
        
        /* [helpcontext] */ HRESULT ( __stdcall *SlideShowEnd )( 
            EApplication * This,
            /* [in] */ Presentation	*Pres);
        
        /* [helpcontext][id] */ HRESULT ( __stdcall *PresentationPrint )( 
            EApplication * This,
            /* [in] */ Presentation	*Pres);
        
        /* [helpcontext][id] */ HRESULT ( __stdcall *SlideSelectionChanged )( 
            EApplication * This,
            /* [in] */ SlideRange *SldRange);
        
        /* [helpcontext] */ HRESULT ( __stdcall *ColorSchemeChanged )( 
            EApplication * This,
            /* [in] */ SlideRange *SldRange);
        
        /* [helpcontext] */ HRESULT ( __stdcall *PresentationBeforeSave )( 
            EApplication * This,
            /* [in] */ Presentation	*Pres,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext] */ HRESULT ( __stdcall *SlideShowNextClick )( 
            EApplication * This,
            /* [in] */ SlideShowWindow *Wn,
            /* [in] */ Effect *nEffect);
        
        /* [helpcontext] */ HRESULT ( __stdcall *AfterNewPresentation )( 
            EApplication * This,
            /* [in] */ Presentation	*Pres);
        
        /* [helpcontext] */ HRESULT ( __stdcall *AfterPresentationOpen )( 
            EApplication * This,
            /* [in] */ Presentation	*Pres);
        
        /* [helpcontext] */ HRESULT ( __stdcall *PresentationSync )( 
            EApplication * This,
            /* [in] */ Presentation	*Pres,
            /* [in] */ MsoSyncEventType SyncEventType);
        
        /* [helpcontext] */ HRESULT ( __stdcall *SlideShowOnNext )( 
            EApplication * This,
            /* [in] */ SlideShowWindow *Wn);
        
        /* [helpcontext] */ HRESULT ( __stdcall *SlideShowOnPrevious )( 
            EApplication * This,
            /* [in] */ SlideShowWindow *Wn);
        
        /* [helpcontext] */ HRESULT ( __stdcall *PresentationBeforeClose )( 
            EApplication * This,
            /* [in] */ Presentation	*Pres,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext] */ HRESULT ( __stdcall *ProtectedViewWindowOpen )( 
            EApplication * This,
            /* [in] */ ProtectedViewWindow *ProtViewWindow);
        
        /* [helpcontext] */ HRESULT ( __stdcall *ProtectedViewWindowBeforeEdit )( 
            EApplication * This,
            /* [in] */ ProtectedViewWindow *ProtViewWindow,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext] */ HRESULT ( __stdcall *ProtectedViewWindowBeforeClose )( 
            EApplication * This,
            /* [in] */ ProtectedViewWindow *ProtViewWindow,
            /* [in] */ PpProtectedViewCloseReason ProtectedViewCloseReason,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext] */ HRESULT ( __stdcall *ProtectedViewWindowActivate )( 
            EApplication * This,
            /* [in] */ ProtectedViewWindow *ProtViewWindow);
        
        /* [helpcontext] */ HRESULT ( __stdcall *ProtectedViewWindowDeactivate )( 
            EApplication * This,
            /* [in] */ ProtectedViewWindow *ProtViewWindow);
        
        /* [helpcontext] */ HRESULT ( __stdcall *PresentationCloseFinal )( 
            EApplication * This,
            /* [in] */ Presentation	*Pres);
        
        /* [helpcontext] */ HRESULT ( __stdcall *AfterDragDropOnSlide )( 
            EApplication * This,
            /* [in] */ Slide	*Sld,
            /* [in] */ single X,
            /* [in] */ single Y);
        
        /* [helpcontext] */ HRESULT ( __stdcall *AfterShapeSizeChange )( 
            EApplication * This,
            /* [in] */ Shape *shp);
        
        END_INTERFACE
    } EApplicationVtbl;

    interface EApplication
    {
        CONST_VTBL struct EApplicationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define EApplication_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define EApplication_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define EApplication_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define EApplication_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define EApplication_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define EApplication_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define EApplication_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define EApplication_WindowSelectionChange(This,Sel)	\
    ( (This)->lpVtbl -> WindowSelectionChange(This,Sel) ) 

#define EApplication_WindowBeforeRightClick(This,Sel,Cancel)	\
    ( (This)->lpVtbl -> WindowBeforeRightClick(This,Sel,Cancel) ) 

#define EApplication_WindowBeforeDoubleClick(This,Sel,Cancel)	\
    ( (This)->lpVtbl -> WindowBeforeDoubleClick(This,Sel,Cancel) ) 

#define EApplication_PresentationClose(This,Pres)	\
    ( (This)->lpVtbl -> PresentationClose(This,Pres) ) 

#define EApplication_PresentationSave(This,Pres)	\
    ( (This)->lpVtbl -> PresentationSave(This,Pres) ) 

#define EApplication_PresentationOpen(This,Pres)	\
    ( (This)->lpVtbl -> PresentationOpen(This,Pres) ) 

#define EApplication_NewPresentation(This,Pres)	\
    ( (This)->lpVtbl -> NewPresentation(This,Pres) ) 

#define EApplication_PresentationNewSlide(This,Sld)	\
    ( (This)->lpVtbl -> PresentationNewSlide(This,Sld) ) 

#define EApplication_WindowActivate(This,Pres,Wn)	\
    ( (This)->lpVtbl -> WindowActivate(This,Pres,Wn) ) 

#define EApplication_WindowDeactivate(This,Pres,Wn)	\
    ( (This)->lpVtbl -> WindowDeactivate(This,Pres,Wn) ) 

#define EApplication_SlideShowBegin(This,Wn)	\
    ( (This)->lpVtbl -> SlideShowBegin(This,Wn) ) 

#define EApplication_SlideShowNextBuild(This,Wn)	\
    ( (This)->lpVtbl -> SlideShowNextBuild(This,Wn) ) 

#define EApplication_SlideShowNextSlide(This,Wn)	\
    ( (This)->lpVtbl -> SlideShowNextSlide(This,Wn) ) 

#define EApplication_SlideShowEnd(This,Pres)	\
    ( (This)->lpVtbl -> SlideShowEnd(This,Pres) ) 

#define EApplication_PresentationPrint(This,Pres)	\
    ( (This)->lpVtbl -> PresentationPrint(This,Pres) ) 

#define EApplication_SlideSelectionChanged(This,SldRange)	\
    ( (This)->lpVtbl -> SlideSelectionChanged(This,SldRange) ) 

#define EApplication_ColorSchemeChanged(This,SldRange)	\
    ( (This)->lpVtbl -> ColorSchemeChanged(This,SldRange) ) 

#define EApplication_PresentationBeforeSave(This,Pres,Cancel)	\
    ( (This)->lpVtbl -> PresentationBeforeSave(This,Pres,Cancel) ) 

#define EApplication_SlideShowNextClick(This,Wn,nEffect)	\
    ( (This)->lpVtbl -> SlideShowNextClick(This,Wn,nEffect) ) 

#define EApplication_AfterNewPresentation(This,Pres)	\
    ( (This)->lpVtbl -> AfterNewPresentation(This,Pres) ) 

#define EApplication_AfterPresentationOpen(This,Pres)	\
    ( (This)->lpVtbl -> AfterPresentationOpen(This,Pres) ) 

#define EApplication_PresentationSync(This,Pres,SyncEventType)	\
    ( (This)->lpVtbl -> PresentationSync(This,Pres,SyncEventType) ) 

#define EApplication_SlideShowOnNext(This,Wn)	\
    ( (This)->lpVtbl -> SlideShowOnNext(This,Wn) ) 

#define EApplication_SlideShowOnPrevious(This,Wn)	\
    ( (This)->lpVtbl -> SlideShowOnPrevious(This,Wn) ) 

#define EApplication_PresentationBeforeClose(This,Pres,Cancel)	\
    ( (This)->lpVtbl -> PresentationBeforeClose(This,Pres,Cancel) ) 

#define EApplication_ProtectedViewWindowOpen(This,ProtViewWindow)	\
    ( (This)->lpVtbl -> ProtectedViewWindowOpen(This,ProtViewWindow) ) 

#define EApplication_ProtectedViewWindowBeforeEdit(This,ProtViewWindow,Cancel)	\
    ( (This)->lpVtbl -> ProtectedViewWindowBeforeEdit(This,ProtViewWindow,Cancel) ) 

#define EApplication_ProtectedViewWindowBeforeClose(This,ProtViewWindow,ProtectedViewCloseReason,Cancel)	\
    ( (This)->lpVtbl -> ProtectedViewWindowBeforeClose(This,ProtViewWindow,ProtectedViewCloseReason,Cancel) ) 

#define EApplication_ProtectedViewWindowActivate(This,ProtViewWindow)	\
    ( (This)->lpVtbl -> ProtectedViewWindowActivate(This,ProtViewWindow) ) 

#define EApplication_ProtectedViewWindowDeactivate(This,ProtViewWindow)	\
    ( (This)->lpVtbl -> ProtectedViewWindowDeactivate(This,ProtViewWindow) ) 

#define EApplication_PresentationCloseFinal(This,Pres)	\
    ( (This)->lpVtbl -> PresentationCloseFinal(This,Pres) ) 

#define EApplication_AfterDragDropOnSlide(This,Sld,X,Y)	\
    ( (This)->lpVtbl -> AfterDragDropOnSlide(This,Sld,X,Y) ) 

#define EApplication_AfterShapeSizeChange(This,shp)	\
    ( (This)->lpVtbl -> AfterShapeSizeChange(This,shp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __EApplication_INTERFACE_DEFINED__ */


#ifndef __Table_INTERFACE_DEFINED__
#define __Table_INTERFACE_DEFINED__

/* interface Table */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Table;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934C3-5A91-11CF-8700-00AA0060263B")
    Table : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Columns( 
            /* [retval][out] */ Columns **Columns) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rows( 
            /* [retval][out] */ Rows **Rows) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cell( 
            /* [in] */ int Row,
            /* [in] */ int Column,
            /* [retval][out] */ Cell **Cell) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TableDirection( 
            /* [retval][out] */ PpDirection *TableDirection) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TableDirection( 
            /* [in] */ PpDirection TableDirection) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE MergeBorders( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstRow( 
            /* [retval][out] */ VARIANT_BOOL *FirstRow) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FirstRow( 
            /* [in] */ VARIANT_BOOL FirstRow) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LastRow( 
            /* [retval][out] */ VARIANT_BOOL *LastRow) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LastRow( 
            /* [in] */ VARIANT_BOOL LastRow) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstCol( 
            /* [retval][out] */ VARIANT_BOOL *FirstCol) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FirstCol( 
            /* [in] */ VARIANT_BOOL FirstCol) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LastCol( 
            /* [retval][out] */ VARIANT_BOOL *LastCol) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LastCol( 
            /* [in] */ VARIANT_BOOL LastCol) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizBanding( 
            /* [retval][out] */ VARIANT_BOOL *HorizBanding) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizBanding( 
            /* [in] */ VARIANT_BOOL HorizBanding) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VertBanding( 
            /* [retval][out] */ VARIANT_BOOL *VertBanding) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VertBanding( 
            /* [in] */ VARIANT_BOOL VertBanding) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ TableStyle **Style) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Background( 
            /* [retval][out] */ TableBackground **Background) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScaleProportionally( 
            /* [in] */ single scale) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyStyle( 
            /* [defaultvalue][optional][in] */ BSTR StyleID = (unsigned short*)u"",
            /* [defaultvalue][optional][in] */ VARIANT_BOOL SaveFormatting = 0) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AlternativeText( 
            /* [retval][out] */ BSTR *AlternativeText) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AlternativeText( 
            /* [in] */ BSTR AlternativeText) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Title( 
            /* [retval][out] */ BSTR *Title) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Title( 
            /* [in] */ BSTR Title) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Table * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Table * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Table * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Table * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Table * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Table * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Table * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Table * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Table * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Columns )( 
            Table * This,
            /* [retval][out] */ Columns **Columns);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rows )( 
            Table * This,
            /* [retval][out] */ Rows **Rows);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cell )( 
            Table * This,
            /* [in] */ int Row,
            /* [in] */ int Column,
            /* [retval][out] */ Cell **Cell);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TableDirection )( 
            Table * This,
            /* [retval][out] */ PpDirection *TableDirection);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TableDirection )( 
            Table * This,
            /* [in] */ PpDirection TableDirection);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *MergeBorders )( 
            Table * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstRow )( 
            Table * This,
            /* [retval][out] */ VARIANT_BOOL *FirstRow);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FirstRow )( 
            Table * This,
            /* [in] */ VARIANT_BOOL FirstRow);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastRow )( 
            Table * This,
            /* [retval][out] */ VARIANT_BOOL *LastRow);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LastRow )( 
            Table * This,
            /* [in] */ VARIANT_BOOL LastRow);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstCol )( 
            Table * This,
            /* [retval][out] */ VARIANT_BOOL *FirstCol);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FirstCol )( 
            Table * This,
            /* [in] */ VARIANT_BOOL FirstCol);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastCol )( 
            Table * This,
            /* [retval][out] */ VARIANT_BOOL *LastCol);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LastCol )( 
            Table * This,
            /* [in] */ VARIANT_BOOL LastCol);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizBanding )( 
            Table * This,
            /* [retval][out] */ VARIANT_BOOL *HorizBanding);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizBanding )( 
            Table * This,
            /* [in] */ VARIANT_BOOL HorizBanding);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VertBanding )( 
            Table * This,
            /* [retval][out] */ VARIANT_BOOL *VertBanding);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VertBanding )( 
            Table * This,
            /* [in] */ VARIANT_BOOL VertBanding);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            Table * This,
            /* [retval][out] */ TableStyle **Style);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Background )( 
            Table * This,
            /* [retval][out] */ TableBackground **Background);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleProportionally )( 
            Table * This,
            /* [in] */ single scale);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyStyle )( 
            Table * This,
            /* [defaultvalue][optional][in] */ BSTR StyleID,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL SaveFormatting);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AlternativeText )( 
            Table * This,
            /* [retval][out] */ BSTR *AlternativeText);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AlternativeText )( 
            Table * This,
            /* [in] */ BSTR AlternativeText);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            Table * This,
            /* [retval][out] */ BSTR *Title);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Title )( 
            Table * This,
            /* [in] */ BSTR Title);
        
        END_INTERFACE
    } TableVtbl;

    interface Table
    {
        CONST_VTBL struct TableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Table_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Table_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Table_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Table_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Table_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Table_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Table_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Table_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Table_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Table_get_Columns(This,Columns)	\
    ( (This)->lpVtbl -> get_Columns(This,Columns) ) 

#define Table_get_Rows(This,Rows)	\
    ( (This)->lpVtbl -> get_Rows(This,Rows) ) 

#define Table_Cell(This,Row,Column,Cell)	\
    ( (This)->lpVtbl -> Cell(This,Row,Column,Cell) ) 

#define Table_get_TableDirection(This,TableDirection)	\
    ( (This)->lpVtbl -> get_TableDirection(This,TableDirection) ) 

#define Table_put_TableDirection(This,TableDirection)	\
    ( (This)->lpVtbl -> put_TableDirection(This,TableDirection) ) 

#define Table_MergeBorders(This)	\
    ( (This)->lpVtbl -> MergeBorders(This) ) 

#define Table_get_FirstRow(This,FirstRow)	\
    ( (This)->lpVtbl -> get_FirstRow(This,FirstRow) ) 

#define Table_put_FirstRow(This,FirstRow)	\
    ( (This)->lpVtbl -> put_FirstRow(This,FirstRow) ) 

#define Table_get_LastRow(This,LastRow)	\
    ( (This)->lpVtbl -> get_LastRow(This,LastRow) ) 

#define Table_put_LastRow(This,LastRow)	\
    ( (This)->lpVtbl -> put_LastRow(This,LastRow) ) 

#define Table_get_FirstCol(This,FirstCol)	\
    ( (This)->lpVtbl -> get_FirstCol(This,FirstCol) ) 

#define Table_put_FirstCol(This,FirstCol)	\
    ( (This)->lpVtbl -> put_FirstCol(This,FirstCol) ) 

#define Table_get_LastCol(This,LastCol)	\
    ( (This)->lpVtbl -> get_LastCol(This,LastCol) ) 

#define Table_put_LastCol(This,LastCol)	\
    ( (This)->lpVtbl -> put_LastCol(This,LastCol) ) 

#define Table_get_HorizBanding(This,HorizBanding)	\
    ( (This)->lpVtbl -> get_HorizBanding(This,HorizBanding) ) 

#define Table_put_HorizBanding(This,HorizBanding)	\
    ( (This)->lpVtbl -> put_HorizBanding(This,HorizBanding) ) 

#define Table_get_VertBanding(This,VertBanding)	\
    ( (This)->lpVtbl -> get_VertBanding(This,VertBanding) ) 

#define Table_put_VertBanding(This,VertBanding)	\
    ( (This)->lpVtbl -> put_VertBanding(This,VertBanding) ) 

#define Table_get_Style(This,Style)	\
    ( (This)->lpVtbl -> get_Style(This,Style) ) 

#define Table_get_Background(This,Background)	\
    ( (This)->lpVtbl -> get_Background(This,Background) ) 

#define Table_ScaleProportionally(This,scale)	\
    ( (This)->lpVtbl -> ScaleProportionally(This,scale) ) 

#define Table_ApplyStyle(This,StyleID,SaveFormatting)	\
    ( (This)->lpVtbl -> ApplyStyle(This,StyleID,SaveFormatting) ) 

#define Table_get_AlternativeText(This,AlternativeText)	\
    ( (This)->lpVtbl -> get_AlternativeText(This,AlternativeText) ) 

#define Table_put_AlternativeText(This,AlternativeText)	\
    ( (This)->lpVtbl -> put_AlternativeText(This,AlternativeText) ) 

#define Table_get_Title(This,Title)	\
    ( (This)->lpVtbl -> get_Title(This,Title) ) 

#define Table_put_Title(This,Title)	\
    ( (This)->lpVtbl -> put_Title(This,Title) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Table_INTERFACE_DEFINED__ */


#ifndef __Columns_INTERFACE_DEFINED__
#define __Columns_INTERFACE_DEFINED__

/* interface Columns */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Columns;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934C4-5A91-11CF-8700-00AA0060263B")
    Columns : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ Column **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [defaultvalue][optional][in] */ int BeforeColumn,
            /* [retval][out] */ Column **Add) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ColumnsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Columns * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Columns * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Columns * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Columns * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Columns * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Columns * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Columns * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Columns * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            Columns * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Columns * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Columns * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Columns * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Columns * This,
            /* [in] */ int Index,
            /* [retval][out] */ Column **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Columns * This,
            /* [defaultvalue][optional][in] */ int BeforeColumn,
            /* [retval][out] */ Column **Add);
        
        END_INTERFACE
    } ColumnsVtbl;

    interface Columns
    {
        CONST_VTBL struct ColumnsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Columns_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Columns_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Columns_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Columns_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Columns_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Columns_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Columns_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Columns_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Columns__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define Columns_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define Columns_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Columns_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Columns_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define Columns_Add(This,BeforeColumn,Add)	\
    ( (This)->lpVtbl -> Add(This,BeforeColumn,Add) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Columns_INTERFACE_DEFINED__ */


#ifndef __Column_INTERFACE_DEFINED__
#define __Column_INTERFACE_DEFINED__

/* interface Column */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Column;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934C5-5A91-11CF-8700-00AA0060263B")
    Column : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Cells( 
            /* [retval][out] */ CellRange **Cells) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ single *Width) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ single Width) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ColumnVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Column * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Column * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Column * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Column * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Column * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Column * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Column * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Column * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Column * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Cells )( 
            Column * This,
            /* [retval][out] */ CellRange **Cells);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Column * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Column * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Column * This,
            /* [retval][out] */ single *Width);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            Column * This,
            /* [in] */ single Width);
        
        END_INTERFACE
    } ColumnVtbl;

    interface Column
    {
        CONST_VTBL struct ColumnVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Column_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Column_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Column_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Column_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Column_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Column_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Column_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Column_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Column_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Column_get_Cells(This,Cells)	\
    ( (This)->lpVtbl -> get_Cells(This,Cells) ) 

#define Column_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define Column_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Column_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define Column_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Column_INTERFACE_DEFINED__ */


#ifndef __Rows_INTERFACE_DEFINED__
#define __Rows_INTERFACE_DEFINED__

/* interface Rows */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Rows;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934C6-5A91-11CF-8700-00AA0060263B")
    Rows : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ Row **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [defaultvalue][optional][in] */ int BeforeRow,
            /* [retval][out] */ Row **Add) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RowsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Rows * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Rows * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Rows * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Rows * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Rows * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Rows * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Rows * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Rows * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            Rows * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Rows * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Rows * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Rows * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Rows * This,
            /* [in] */ int Index,
            /* [retval][out] */ Row **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Rows * This,
            /* [defaultvalue][optional][in] */ int BeforeRow,
            /* [retval][out] */ Row **Add);
        
        END_INTERFACE
    } RowsVtbl;

    interface Rows
    {
        CONST_VTBL struct RowsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Rows_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Rows_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Rows_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Rows_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Rows_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Rows_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Rows_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Rows_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Rows__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define Rows_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define Rows_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Rows_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Rows_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define Rows_Add(This,BeforeRow,Add)	\
    ( (This)->lpVtbl -> Add(This,BeforeRow,Add) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Rows_INTERFACE_DEFINED__ */


#ifndef __Row_INTERFACE_DEFINED__
#define __Row_INTERFACE_DEFINED__

/* interface Row */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Row;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934C7-5A91-11CF-8700-00AA0060263B")
    Row : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Cells( 
            /* [retval][out] */ CellRange **Cells) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ single *Height) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ single Height) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Row * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Row * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Row * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Row * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Row * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Row * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Row * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Row * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Row * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Cells )( 
            Row * This,
            /* [retval][out] */ CellRange **Cells);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Row * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Row * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Row * This,
            /* [retval][out] */ single *Height);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            Row * This,
            /* [in] */ single Height);
        
        END_INTERFACE
    } RowVtbl;

    interface Row
    {
        CONST_VTBL struct RowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Row_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Row_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Row_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Row_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Row_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Row_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Row_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Row_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Row_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Row_get_Cells(This,Cells)	\
    ( (This)->lpVtbl -> get_Cells(This,Cells) ) 

#define Row_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define Row_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Row_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define Row_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Row_INTERFACE_DEFINED__ */


#ifndef __CellRange_INTERFACE_DEFINED__
#define __CellRange_INTERFACE_DEFINED__

/* interface CellRange */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_CellRange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934C8-5A91-11CF-8700-00AA0060263B")
    CellRange : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ Cell **Item) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **Borders) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CellRangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CellRange * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CellRange * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CellRange * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CellRange * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CellRange * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CellRange * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CellRange * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            CellRange * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            CellRange * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            CellRange * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CellRange * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CellRange * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            CellRange * This,
            /* [in] */ int Index,
            /* [retval][out] */ Cell **Item);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            CellRange * This,
            /* [retval][out] */ Borders **Borders);
        
        END_INTERFACE
    } CellRangeVtbl;

    interface CellRange
    {
        CONST_VTBL struct CellRangeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CellRange_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CellRange_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CellRange_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CellRange_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CellRange_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CellRange_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CellRange_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CellRange_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define CellRange__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define CellRange_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define CellRange_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define CellRange_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define CellRange_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define CellRange_get_Borders(This,Borders)	\
    ( (This)->lpVtbl -> get_Borders(This,Borders) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CellRange_INTERFACE_DEFINED__ */


#ifndef __Cell_INTERFACE_DEFINED__
#define __Cell_INTERFACE_DEFINED__

/* interface Cell */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Cell;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934C9-5A91-11CF-8700-00AA0060263B")
    Cell : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shape( 
            /* [retval][out] */ Shape **Shape) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **Borders) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Merge( 
            /* [in] */ Cell *MergeTo) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Split( 
            /* [in] */ int NumRows,
            /* [in] */ int NumColumns) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Selected( 
            /* [retval][out] */ VARIANT_BOOL *Selected) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CellVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Cell * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Cell * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Cell * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Cell * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Cell * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Cell * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Cell * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Cell * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Cell * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shape )( 
            Cell * This,
            /* [retval][out] */ Shape **Shape);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            Cell * This,
            /* [retval][out] */ Borders **Borders);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Merge )( 
            Cell * This,
            /* [in] */ Cell *MergeTo);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Split )( 
            Cell * This,
            /* [in] */ int NumRows,
            /* [in] */ int NumColumns);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Cell * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Selected )( 
            Cell * This,
            /* [retval][out] */ VARIANT_BOOL *Selected);
        
        END_INTERFACE
    } CellVtbl;

    interface Cell
    {
        CONST_VTBL struct CellVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Cell_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Cell_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Cell_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Cell_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Cell_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Cell_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Cell_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Cell_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Cell_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Cell_get_Shape(This,Shape)	\
    ( (This)->lpVtbl -> get_Shape(This,Shape) ) 

#define Cell_get_Borders(This,Borders)	\
    ( (This)->lpVtbl -> get_Borders(This,Borders) ) 

#define Cell_Merge(This,MergeTo)	\
    ( (This)->lpVtbl -> Merge(This,MergeTo) ) 

#define Cell_Split(This,NumRows,NumColumns)	\
    ( (This)->lpVtbl -> Split(This,NumRows,NumColumns) ) 

#define Cell_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define Cell_get_Selected(This,Selected)	\
    ( (This)->lpVtbl -> get_Selected(This,Selected) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Cell_INTERFACE_DEFINED__ */


#ifndef __Borders_INTERFACE_DEFINED__
#define __Borders_INTERFACE_DEFINED__

/* interface Borders */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Borders;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934CA-5A91-11CF-8700-00AA0060263B")
    Borders : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ PpBorderType BorderType,
            /* [retval][out] */ LineFormat **Item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BordersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Borders * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Borders * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Borders * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Borders * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Borders * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Borders * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Borders * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Borders * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            Borders * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Borders * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Borders * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Borders * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Borders * This,
            /* [in] */ PpBorderType BorderType,
            /* [retval][out] */ LineFormat **Item);
        
        END_INTERFACE
    } BordersVtbl;

    interface Borders
    {
        CONST_VTBL struct BordersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Borders_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Borders_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Borders_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Borders_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Borders_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Borders_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Borders_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Borders_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Borders__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define Borders_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define Borders_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Borders_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Borders_Item(This,BorderType,Item)	\
    ( (This)->lpVtbl -> Item(This,BorderType,Item) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Borders_INTERFACE_DEFINED__ */


#ifndef __Panes_INTERFACE_DEFINED__
#define __Panes_INTERFACE_DEFINED__

/* interface Panes */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Panes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934CB-5A91-11CF-8700-00AA0060263B")
    Panes : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ Pane **Item) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PanesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Panes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Panes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Panes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Panes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Panes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Panes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Panes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Panes * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            Panes * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Panes * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Panes * This,
            /* [retval][out] */ Application	**Application);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Panes * This,
            /* [in] */ int Index,
            /* [retval][out] */ Pane **Item);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Panes * This,
            /* [retval][out] */ IDispatch **Parent);
        
        END_INTERFACE
    } PanesVtbl;

    interface Panes
    {
        CONST_VTBL struct PanesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Panes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Panes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Panes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Panes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Panes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Panes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Panes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Panes_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Panes__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define Panes_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define Panes_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Panes_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define Panes_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Panes_INTERFACE_DEFINED__ */


#ifndef __Pane_INTERFACE_DEFINED__
#define __Pane_INTERFACE_DEFINED__

/* interface Pane */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Pane;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934CC-5A91-11CF-8700-00AA0060263B")
    Pane : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Active( 
            /* [retval][out] */ MsoTriState *Active) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ViewType( 
            /* [retval][out] */ PpViewType *ViewType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PaneVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Pane * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Pane * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Pane * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Pane * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Pane * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Pane * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Pane * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Pane * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            Pane * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Active )( 
            Pane * This,
            /* [retval][out] */ MsoTriState *Active);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Pane * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ViewType )( 
            Pane * This,
            /* [retval][out] */ PpViewType *ViewType);
        
        END_INTERFACE
    } PaneVtbl;

    interface Pane
    {
        CONST_VTBL struct PaneVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Pane_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Pane_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Pane_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Pane_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Pane_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Pane_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Pane_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Pane_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Pane_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define Pane_get_Active(This,Active)	\
    ( (This)->lpVtbl -> get_Active(This,Active) ) 

#define Pane_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Pane_get_ViewType(This,ViewType)	\
    ( (This)->lpVtbl -> get_ViewType(This,ViewType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Pane_INTERFACE_DEFINED__ */


#ifndef __DefaultWebOptions_INTERFACE_DEFINED__
#define __DefaultWebOptions_INTERFACE_DEFINED__

/* interface DefaultWebOptions */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_DefaultWebOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934CD-5A91-11CF-8700-00AA0060263B")
    DefaultWebOptions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludeNavigation( 
            /* [retval][out] */ MsoTriState *IncludeNavigation) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludeNavigation( 
            /* [in] */ MsoTriState IncludeNavigation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FrameColors( 
            /* [retval][out] */ PpFrameColors *FrameColors) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FrameColors( 
            /* [in] */ PpFrameColors FrameColors) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ResizeGraphics( 
            /* [retval][out] */ MsoTriState *ResizeGraphics) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ResizeGraphics( 
            /* [in] */ MsoTriState ResizeGraphics) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowSlideAnimation( 
            /* [retval][out] */ MsoTriState *ShowSlideAnimation) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowSlideAnimation( 
            /* [in] */ MsoTriState ShowSlideAnimation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OrganizeInFolder( 
            /* [retval][out] */ MsoTriState *OrganizeInFolder) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OrganizeInFolder( 
            /* [in] */ MsoTriState OrganizeInFolder) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseLongFileNames( 
            /* [retval][out] */ MsoTriState *UseLongFileNames) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseLongFileNames( 
            /* [in] */ MsoTriState UseLongFileNames) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelyOnVML( 
            /* [retval][out] */ MsoTriState *RelyOnVML) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RelyOnVML( 
            /* [in] */ MsoTriState RelyOnVML) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowPNG( 
            /* [retval][out] */ MsoTriState *AllowPNG) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowPNG( 
            /* [in] */ MsoTriState AllowPNG) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScreenSize( 
            /* [retval][out] */ MsoScreenSize *ScreenSize) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScreenSize( 
            /* [in] */ MsoScreenSize ScreenSize) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Encoding( 
            /* [retval][out] */ MsoEncoding *Encoding) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Encoding( 
            /* [in] */ MsoEncoding Encoding) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UpdateLinksOnSave( 
            /* [retval][out] */ MsoTriState *UpdateLinksOnSave) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UpdateLinksOnSave( 
            /* [in] */ MsoTriState UpdateLinksOnSave) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CheckIfOfficeIsHTMLEditor( 
            /* [retval][out] */ MsoTriState *CheckIfOfficeIsHTMLEditor) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CheckIfOfficeIsHTMLEditor( 
            /* [in] */ MsoTriState CheckIfOfficeIsHTMLEditor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AlwaysSaveInDefaultEncoding( 
            /* [retval][out] */ MsoTriState *AlwaysSaveInDefaultEncoding) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AlwaysSaveInDefaultEncoding( 
            /* [in] */ MsoTriState AlwaysSaveInDefaultEncoding) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fonts( 
            /* [retval][out] */ /* external definition not present */ WebPageFonts **Fonts) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FolderSuffix( 
            /* [retval][out] */ BSTR *FolderSuffix) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TargetBrowser( 
            /* [retval][out] */ MsoTargetBrowser *TargetBrowser) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TargetBrowser( 
            /* [in] */ MsoTargetBrowser TargetBrowser) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SaveNewWebPagesAsWebArchives( 
            /* [retval][out] */ MsoTriState *SaveNewWebPagesAsWebArchives) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SaveNewWebPagesAsWebArchives( 
            /* [in] */ MsoTriState SaveNewWebPagesAsWebArchives) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HTMLVersion( 
            /* [retval][out] */ PpHTMLVersion *HTMLVersion) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HTMLVersion( 
            /* [in] */ PpHTMLVersion HTMLVersion) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DefaultWebOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DefaultWebOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DefaultWebOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DefaultWebOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DefaultWebOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DefaultWebOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DefaultWebOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DefaultWebOptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeNavigation )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoTriState *IncludeNavigation);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeNavigation )( 
            DefaultWebOptions * This,
            /* [in] */ MsoTriState IncludeNavigation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FrameColors )( 
            DefaultWebOptions * This,
            /* [retval][out] */ PpFrameColors *FrameColors);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FrameColors )( 
            DefaultWebOptions * This,
            /* [in] */ PpFrameColors FrameColors);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResizeGraphics )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoTriState *ResizeGraphics);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ResizeGraphics )( 
            DefaultWebOptions * This,
            /* [in] */ MsoTriState ResizeGraphics);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowSlideAnimation )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoTriState *ShowSlideAnimation);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowSlideAnimation )( 
            DefaultWebOptions * This,
            /* [in] */ MsoTriState ShowSlideAnimation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OrganizeInFolder )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoTriState *OrganizeInFolder);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OrganizeInFolder )( 
            DefaultWebOptions * This,
            /* [in] */ MsoTriState OrganizeInFolder);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseLongFileNames )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoTriState *UseLongFileNames);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseLongFileNames )( 
            DefaultWebOptions * This,
            /* [in] */ MsoTriState UseLongFileNames);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelyOnVML )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoTriState *RelyOnVML);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RelyOnVML )( 
            DefaultWebOptions * This,
            /* [in] */ MsoTriState RelyOnVML);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPNG )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoTriState *AllowPNG);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPNG )( 
            DefaultWebOptions * This,
            /* [in] */ MsoTriState AllowPNG);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScreenSize )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoScreenSize *ScreenSize);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScreenSize )( 
            DefaultWebOptions * This,
            /* [in] */ MsoScreenSize ScreenSize);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Encoding )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoEncoding *Encoding);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Encoding )( 
            DefaultWebOptions * This,
            /* [in] */ MsoEncoding Encoding);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateLinksOnSave )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoTriState *UpdateLinksOnSave);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateLinksOnSave )( 
            DefaultWebOptions * This,
            /* [in] */ MsoTriState UpdateLinksOnSave);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CheckIfOfficeIsHTMLEditor )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoTriState *CheckIfOfficeIsHTMLEditor);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CheckIfOfficeIsHTMLEditor )( 
            DefaultWebOptions * This,
            /* [in] */ MsoTriState CheckIfOfficeIsHTMLEditor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AlwaysSaveInDefaultEncoding )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoTriState *AlwaysSaveInDefaultEncoding);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AlwaysSaveInDefaultEncoding )( 
            DefaultWebOptions * This,
            /* [in] */ MsoTriState AlwaysSaveInDefaultEncoding);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fonts )( 
            DefaultWebOptions * This,
            /* [retval][out] */ /* external definition not present */ WebPageFonts **Fonts);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FolderSuffix )( 
            DefaultWebOptions * This,
            /* [retval][out] */ BSTR *FolderSuffix);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TargetBrowser )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoTargetBrowser *TargetBrowser);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TargetBrowser )( 
            DefaultWebOptions * This,
            /* [in] */ MsoTargetBrowser TargetBrowser);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SaveNewWebPagesAsWebArchives )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoTriState *SaveNewWebPagesAsWebArchives);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SaveNewWebPagesAsWebArchives )( 
            DefaultWebOptions * This,
            /* [in] */ MsoTriState SaveNewWebPagesAsWebArchives);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HTMLVersion )( 
            DefaultWebOptions * This,
            /* [retval][out] */ PpHTMLVersion *HTMLVersion);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HTMLVersion )( 
            DefaultWebOptions * This,
            /* [in] */ PpHTMLVersion HTMLVersion);
        
        END_INTERFACE
    } DefaultWebOptionsVtbl;

    interface DefaultWebOptions
    {
        CONST_VTBL struct DefaultWebOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DefaultWebOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DefaultWebOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DefaultWebOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DefaultWebOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DefaultWebOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DefaultWebOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DefaultWebOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DefaultWebOptions_get_IncludeNavigation(This,IncludeNavigation)	\
    ( (This)->lpVtbl -> get_IncludeNavigation(This,IncludeNavigation) ) 

#define DefaultWebOptions_put_IncludeNavigation(This,IncludeNavigation)	\
    ( (This)->lpVtbl -> put_IncludeNavigation(This,IncludeNavigation) ) 

#define DefaultWebOptions_get_FrameColors(This,FrameColors)	\
    ( (This)->lpVtbl -> get_FrameColors(This,FrameColors) ) 

#define DefaultWebOptions_put_FrameColors(This,FrameColors)	\
    ( (This)->lpVtbl -> put_FrameColors(This,FrameColors) ) 

#define DefaultWebOptions_get_ResizeGraphics(This,ResizeGraphics)	\
    ( (This)->lpVtbl -> get_ResizeGraphics(This,ResizeGraphics) ) 

#define DefaultWebOptions_put_ResizeGraphics(This,ResizeGraphics)	\
    ( (This)->lpVtbl -> put_ResizeGraphics(This,ResizeGraphics) ) 

#define DefaultWebOptions_get_ShowSlideAnimation(This,ShowSlideAnimation)	\
    ( (This)->lpVtbl -> get_ShowSlideAnimation(This,ShowSlideAnimation) ) 

#define DefaultWebOptions_put_ShowSlideAnimation(This,ShowSlideAnimation)	\
    ( (This)->lpVtbl -> put_ShowSlideAnimation(This,ShowSlideAnimation) ) 

#define DefaultWebOptions_get_OrganizeInFolder(This,OrganizeInFolder)	\
    ( (This)->lpVtbl -> get_OrganizeInFolder(This,OrganizeInFolder) ) 

#define DefaultWebOptions_put_OrganizeInFolder(This,OrganizeInFolder)	\
    ( (This)->lpVtbl -> put_OrganizeInFolder(This,OrganizeInFolder) ) 

#define DefaultWebOptions_get_UseLongFileNames(This,UseLongFileNames)	\
    ( (This)->lpVtbl -> get_UseLongFileNames(This,UseLongFileNames) ) 

#define DefaultWebOptions_put_UseLongFileNames(This,UseLongFileNames)	\
    ( (This)->lpVtbl -> put_UseLongFileNames(This,UseLongFileNames) ) 

#define DefaultWebOptions_get_RelyOnVML(This,RelyOnVML)	\
    ( (This)->lpVtbl -> get_RelyOnVML(This,RelyOnVML) ) 

#define DefaultWebOptions_put_RelyOnVML(This,RelyOnVML)	\
    ( (This)->lpVtbl -> put_RelyOnVML(This,RelyOnVML) ) 

#define DefaultWebOptions_get_AllowPNG(This,AllowPNG)	\
    ( (This)->lpVtbl -> get_AllowPNG(This,AllowPNG) ) 

#define DefaultWebOptions_put_AllowPNG(This,AllowPNG)	\
    ( (This)->lpVtbl -> put_AllowPNG(This,AllowPNG) ) 

#define DefaultWebOptions_get_ScreenSize(This,ScreenSize)	\
    ( (This)->lpVtbl -> get_ScreenSize(This,ScreenSize) ) 

#define DefaultWebOptions_put_ScreenSize(This,ScreenSize)	\
    ( (This)->lpVtbl -> put_ScreenSize(This,ScreenSize) ) 

#define DefaultWebOptions_get_Encoding(This,Encoding)	\
    ( (This)->lpVtbl -> get_Encoding(This,Encoding) ) 

#define DefaultWebOptions_put_Encoding(This,Encoding)	\
    ( (This)->lpVtbl -> put_Encoding(This,Encoding) ) 

#define DefaultWebOptions_get_UpdateLinksOnSave(This,UpdateLinksOnSave)	\
    ( (This)->lpVtbl -> get_UpdateLinksOnSave(This,UpdateLinksOnSave) ) 

#define DefaultWebOptions_put_UpdateLinksOnSave(This,UpdateLinksOnSave)	\
    ( (This)->lpVtbl -> put_UpdateLinksOnSave(This,UpdateLinksOnSave) ) 

#define DefaultWebOptions_get_CheckIfOfficeIsHTMLEditor(This,CheckIfOfficeIsHTMLEditor)	\
    ( (This)->lpVtbl -> get_CheckIfOfficeIsHTMLEditor(This,CheckIfOfficeIsHTMLEditor) ) 

#define DefaultWebOptions_put_CheckIfOfficeIsHTMLEditor(This,CheckIfOfficeIsHTMLEditor)	\
    ( (This)->lpVtbl -> put_CheckIfOfficeIsHTMLEditor(This,CheckIfOfficeIsHTMLEditor) ) 

#define DefaultWebOptions_get_AlwaysSaveInDefaultEncoding(This,AlwaysSaveInDefaultEncoding)	\
    ( (This)->lpVtbl -> get_AlwaysSaveInDefaultEncoding(This,AlwaysSaveInDefaultEncoding) ) 

#define DefaultWebOptions_put_AlwaysSaveInDefaultEncoding(This,AlwaysSaveInDefaultEncoding)	\
    ( (This)->lpVtbl -> put_AlwaysSaveInDefaultEncoding(This,AlwaysSaveInDefaultEncoding) ) 

#define DefaultWebOptions_get_Fonts(This,Fonts)	\
    ( (This)->lpVtbl -> get_Fonts(This,Fonts) ) 

#define DefaultWebOptions_get_FolderSuffix(This,FolderSuffix)	\
    ( (This)->lpVtbl -> get_FolderSuffix(This,FolderSuffix) ) 

#define DefaultWebOptions_get_TargetBrowser(This,TargetBrowser)	\
    ( (This)->lpVtbl -> get_TargetBrowser(This,TargetBrowser) ) 

#define DefaultWebOptions_put_TargetBrowser(This,TargetBrowser)	\
    ( (This)->lpVtbl -> put_TargetBrowser(This,TargetBrowser) ) 

#define DefaultWebOptions_get_SaveNewWebPagesAsWebArchives(This,SaveNewWebPagesAsWebArchives)	\
    ( (This)->lpVtbl -> get_SaveNewWebPagesAsWebArchives(This,SaveNewWebPagesAsWebArchives) ) 

#define DefaultWebOptions_put_SaveNewWebPagesAsWebArchives(This,SaveNewWebPagesAsWebArchives)	\
    ( (This)->lpVtbl -> put_SaveNewWebPagesAsWebArchives(This,SaveNewWebPagesAsWebArchives) ) 

#define DefaultWebOptions_get_HTMLVersion(This,HTMLVersion)	\
    ( (This)->lpVtbl -> get_HTMLVersion(This,HTMLVersion) ) 

#define DefaultWebOptions_put_HTMLVersion(This,HTMLVersion)	\
    ( (This)->lpVtbl -> put_HTMLVersion(This,HTMLVersion) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DefaultWebOptions_INTERFACE_DEFINED__ */


#ifndef __WebOptions_INTERFACE_DEFINED__
#define __WebOptions_INTERFACE_DEFINED__

/* interface WebOptions */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_WebOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934CE-5A91-11CF-8700-00AA0060263B")
    WebOptions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludeNavigation( 
            /* [retval][out] */ MsoTriState *IncludeNavigation) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludeNavigation( 
            /* [in] */ MsoTriState IncludeNavigation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FrameColors( 
            /* [retval][out] */ PpFrameColors *FrameColors) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FrameColors( 
            /* [in] */ PpFrameColors FrameColors) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ResizeGraphics( 
            /* [retval][out] */ MsoTriState *ResizeGraphics) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ResizeGraphics( 
            /* [in] */ MsoTriState ResizeGraphics) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowSlideAnimation( 
            /* [retval][out] */ MsoTriState *ShowSlideAnimation) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowSlideAnimation( 
            /* [in] */ MsoTriState ShowSlideAnimation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OrganizeInFolder( 
            /* [retval][out] */ MsoTriState *OrganizeInFolder) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OrganizeInFolder( 
            /* [in] */ MsoTriState OrganizeInFolder) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseLongFileNames( 
            /* [retval][out] */ MsoTriState *UseLongFileNames) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseLongFileNames( 
            /* [in] */ MsoTriState UseLongFileNames) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelyOnVML( 
            /* [retval][out] */ MsoTriState *RelyOnVML) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RelyOnVML( 
            /* [in] */ MsoTriState RelyOnVML) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowPNG( 
            /* [retval][out] */ MsoTriState *AllowPNG) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowPNG( 
            /* [in] */ MsoTriState AllowPNG) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScreenSize( 
            /* [retval][out] */ MsoScreenSize *ScreenSize) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScreenSize( 
            /* [in] */ MsoScreenSize ScreenSize) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Encoding( 
            /* [retval][out] */ MsoEncoding *Encoding) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Encoding( 
            /* [in] */ MsoEncoding Encoding) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FolderSuffix( 
            /* [retval][out] */ BSTR *FolderSuffix) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UseDefaultFolderSuffix( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TargetBrowser( 
            /* [retval][out] */ MsoTargetBrowser *TargetBrowser) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TargetBrowser( 
            /* [in] */ MsoTargetBrowser TargetBrowser) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HTMLVersion( 
            /* [retval][out] */ PpHTMLVersion *HTMLVersion) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HTMLVersion( 
            /* [in] */ PpHTMLVersion HTMLVersion) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WebOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WebOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WebOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WebOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WebOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WebOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WebOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WebOptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeNavigation )( 
            WebOptions * This,
            /* [retval][out] */ MsoTriState *IncludeNavigation);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeNavigation )( 
            WebOptions * This,
            /* [in] */ MsoTriState IncludeNavigation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FrameColors )( 
            WebOptions * This,
            /* [retval][out] */ PpFrameColors *FrameColors);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FrameColors )( 
            WebOptions * This,
            /* [in] */ PpFrameColors FrameColors);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResizeGraphics )( 
            WebOptions * This,
            /* [retval][out] */ MsoTriState *ResizeGraphics);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ResizeGraphics )( 
            WebOptions * This,
            /* [in] */ MsoTriState ResizeGraphics);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowSlideAnimation )( 
            WebOptions * This,
            /* [retval][out] */ MsoTriState *ShowSlideAnimation);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowSlideAnimation )( 
            WebOptions * This,
            /* [in] */ MsoTriState ShowSlideAnimation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OrganizeInFolder )( 
            WebOptions * This,
            /* [retval][out] */ MsoTriState *OrganizeInFolder);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OrganizeInFolder )( 
            WebOptions * This,
            /* [in] */ MsoTriState OrganizeInFolder);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseLongFileNames )( 
            WebOptions * This,
            /* [retval][out] */ MsoTriState *UseLongFileNames);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseLongFileNames )( 
            WebOptions * This,
            /* [in] */ MsoTriState UseLongFileNames);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelyOnVML )( 
            WebOptions * This,
            /* [retval][out] */ MsoTriState *RelyOnVML);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RelyOnVML )( 
            WebOptions * This,
            /* [in] */ MsoTriState RelyOnVML);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPNG )( 
            WebOptions * This,
            /* [retval][out] */ MsoTriState *AllowPNG);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPNG )( 
            WebOptions * This,
            /* [in] */ MsoTriState AllowPNG);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScreenSize )( 
            WebOptions * This,
            /* [retval][out] */ MsoScreenSize *ScreenSize);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScreenSize )( 
            WebOptions * This,
            /* [in] */ MsoScreenSize ScreenSize);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Encoding )( 
            WebOptions * This,
            /* [retval][out] */ MsoEncoding *Encoding);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Encoding )( 
            WebOptions * This,
            /* [in] */ MsoEncoding Encoding);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FolderSuffix )( 
            WebOptions * This,
            /* [retval][out] */ BSTR *FolderSuffix);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UseDefaultFolderSuffix )( 
            WebOptions * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TargetBrowser )( 
            WebOptions * This,
            /* [retval][out] */ MsoTargetBrowser *TargetBrowser);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TargetBrowser )( 
            WebOptions * This,
            /* [in] */ MsoTargetBrowser TargetBrowser);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HTMLVersion )( 
            WebOptions * This,
            /* [retval][out] */ PpHTMLVersion *HTMLVersion);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HTMLVersion )( 
            WebOptions * This,
            /* [in] */ PpHTMLVersion HTMLVersion);
        
        END_INTERFACE
    } WebOptionsVtbl;

    interface WebOptions
    {
        CONST_VTBL struct WebOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WebOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WebOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WebOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WebOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WebOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WebOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WebOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WebOptions_get_IncludeNavigation(This,IncludeNavigation)	\
    ( (This)->lpVtbl -> get_IncludeNavigation(This,IncludeNavigation) ) 

#define WebOptions_put_IncludeNavigation(This,IncludeNavigation)	\
    ( (This)->lpVtbl -> put_IncludeNavigation(This,IncludeNavigation) ) 

#define WebOptions_get_FrameColors(This,FrameColors)	\
    ( (This)->lpVtbl -> get_FrameColors(This,FrameColors) ) 

#define WebOptions_put_FrameColors(This,FrameColors)	\
    ( (This)->lpVtbl -> put_FrameColors(This,FrameColors) ) 

#define WebOptions_get_ResizeGraphics(This,ResizeGraphics)	\
    ( (This)->lpVtbl -> get_ResizeGraphics(This,ResizeGraphics) ) 

#define WebOptions_put_ResizeGraphics(This,ResizeGraphics)	\
    ( (This)->lpVtbl -> put_ResizeGraphics(This,ResizeGraphics) ) 

#define WebOptions_get_ShowSlideAnimation(This,ShowSlideAnimation)	\
    ( (This)->lpVtbl -> get_ShowSlideAnimation(This,ShowSlideAnimation) ) 

#define WebOptions_put_ShowSlideAnimation(This,ShowSlideAnimation)	\
    ( (This)->lpVtbl -> put_ShowSlideAnimation(This,ShowSlideAnimation) ) 

#define WebOptions_get_OrganizeInFolder(This,OrganizeInFolder)	\
    ( (This)->lpVtbl -> get_OrganizeInFolder(This,OrganizeInFolder) ) 

#define WebOptions_put_OrganizeInFolder(This,OrganizeInFolder)	\
    ( (This)->lpVtbl -> put_OrganizeInFolder(This,OrganizeInFolder) ) 

#define WebOptions_get_UseLongFileNames(This,UseLongFileNames)	\
    ( (This)->lpVtbl -> get_UseLongFileNames(This,UseLongFileNames) ) 

#define WebOptions_put_UseLongFileNames(This,UseLongFileNames)	\
    ( (This)->lpVtbl -> put_UseLongFileNames(This,UseLongFileNames) ) 

#define WebOptions_get_RelyOnVML(This,RelyOnVML)	\
    ( (This)->lpVtbl -> get_RelyOnVML(This,RelyOnVML) ) 

#define WebOptions_put_RelyOnVML(This,RelyOnVML)	\
    ( (This)->lpVtbl -> put_RelyOnVML(This,RelyOnVML) ) 

#define WebOptions_get_AllowPNG(This,AllowPNG)	\
    ( (This)->lpVtbl -> get_AllowPNG(This,AllowPNG) ) 

#define WebOptions_put_AllowPNG(This,AllowPNG)	\
    ( (This)->lpVtbl -> put_AllowPNG(This,AllowPNG) ) 

#define WebOptions_get_ScreenSize(This,ScreenSize)	\
    ( (This)->lpVtbl -> get_ScreenSize(This,ScreenSize) ) 

#define WebOptions_put_ScreenSize(This,ScreenSize)	\
    ( (This)->lpVtbl -> put_ScreenSize(This,ScreenSize) ) 

#define WebOptions_get_Encoding(This,Encoding)	\
    ( (This)->lpVtbl -> get_Encoding(This,Encoding) ) 

#define WebOptions_put_Encoding(This,Encoding)	\
    ( (This)->lpVtbl -> put_Encoding(This,Encoding) ) 

#define WebOptions_get_FolderSuffix(This,FolderSuffix)	\
    ( (This)->lpVtbl -> get_FolderSuffix(This,FolderSuffix) ) 

#define WebOptions_UseDefaultFolderSuffix(This)	\
    ( (This)->lpVtbl -> UseDefaultFolderSuffix(This) ) 

#define WebOptions_get_TargetBrowser(This,TargetBrowser)	\
    ( (This)->lpVtbl -> get_TargetBrowser(This,TargetBrowser) ) 

#define WebOptions_put_TargetBrowser(This,TargetBrowser)	\
    ( (This)->lpVtbl -> put_TargetBrowser(This,TargetBrowser) ) 

#define WebOptions_get_HTMLVersion(This,HTMLVersion)	\
    ( (This)->lpVtbl -> get_HTMLVersion(This,HTMLVersion) ) 

#define WebOptions_put_HTMLVersion(This,HTMLVersion)	\
    ( (This)->lpVtbl -> put_HTMLVersion(This,HTMLVersion) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WebOptions_INTERFACE_DEFINED__ */


#ifndef __PublishObjects_INTERFACE_DEFINED__
#define __PublishObjects_INTERFACE_DEFINED__

/* interface PublishObjects */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_PublishObjects;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934CF-5A91-11CF-8700-00AA0060263B")
    PublishObjects : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ PublishObject **Item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PublishObjectsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PublishObjects * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PublishObjects * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PublishObjects * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PublishObjects * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PublishObjects * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PublishObjects * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PublishObjects * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            PublishObjects * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            PublishObjects * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            PublishObjects * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            PublishObjects * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PublishObjects * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            PublishObjects * This,
            /* [in] */ int Index,
            /* [retval][out] */ PublishObject **Item);
        
        END_INTERFACE
    } PublishObjectsVtbl;

    interface PublishObjects
    {
        CONST_VTBL struct PublishObjectsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PublishObjects_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PublishObjects_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PublishObjects_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PublishObjects_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PublishObjects_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PublishObjects_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PublishObjects_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PublishObjects_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define PublishObjects__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define PublishObjects_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define PublishObjects_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define PublishObjects_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define PublishObjects_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PublishObjects_INTERFACE_DEFINED__ */


#ifndef __PublishObject_INTERFACE_DEFINED__
#define __PublishObject_INTERFACE_DEFINED__

/* interface PublishObject */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_PublishObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934D0-5A91-11CF-8700-00AA0060263B")
    PublishObject : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HTMLVersion( 
            /* [retval][out] */ PpHTMLVersion *HTMLVersion) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HTMLVersion( 
            /* [in] */ PpHTMLVersion HTMLVersion) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SourceType( 
            /* [retval][out] */ PpPublishSourceType *SourceType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SourceType( 
            /* [in] */ PpPublishSourceType SourceType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RangeStart( 
            /* [retval][out] */ int *RangeStart) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RangeStart( 
            /* [in] */ int RangeStart) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RangeEnd( 
            /* [retval][out] */ int *RangeEnd) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RangeEnd( 
            /* [in] */ int RangeEnd) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideShowName( 
            /* [retval][out] */ BSTR *SlideShowName) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SlideShowName( 
            /* [in] */ BSTR SlideShowName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpeakerNotes( 
            /* [retval][out] */ MsoTriState *SpeakerNotes) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpeakerNotes( 
            /* [in] */ MsoTriState SpeakerNotes) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *FileName) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FileName( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Publish( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PublishObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PublishObject * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PublishObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PublishObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PublishObject * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PublishObject * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PublishObject * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PublishObject * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            PublishObject * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PublishObject * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HTMLVersion )( 
            PublishObject * This,
            /* [retval][out] */ PpHTMLVersion *HTMLVersion);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HTMLVersion )( 
            PublishObject * This,
            /* [in] */ PpHTMLVersion HTMLVersion);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceType )( 
            PublishObject * This,
            /* [retval][out] */ PpPublishSourceType *SourceType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SourceType )( 
            PublishObject * This,
            /* [in] */ PpPublishSourceType SourceType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RangeStart )( 
            PublishObject * This,
            /* [retval][out] */ int *RangeStart);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RangeStart )( 
            PublishObject * This,
            /* [in] */ int RangeStart);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RangeEnd )( 
            PublishObject * This,
            /* [retval][out] */ int *RangeEnd);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RangeEnd )( 
            PublishObject * This,
            /* [in] */ int RangeEnd);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideShowName )( 
            PublishObject * This,
            /* [retval][out] */ BSTR *SlideShowName);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SlideShowName )( 
            PublishObject * This,
            /* [in] */ BSTR SlideShowName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpeakerNotes )( 
            PublishObject * This,
            /* [retval][out] */ MsoTriState *SpeakerNotes);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpeakerNotes )( 
            PublishObject * This,
            /* [in] */ MsoTriState SpeakerNotes);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            PublishObject * This,
            /* [retval][out] */ BSTR *FileName);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FileName )( 
            PublishObject * This,
            /* [in] */ BSTR FileName);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Publish )( 
            PublishObject * This);
        
        END_INTERFACE
    } PublishObjectVtbl;

    interface PublishObject
    {
        CONST_VTBL struct PublishObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PublishObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PublishObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PublishObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PublishObject_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PublishObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PublishObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PublishObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PublishObject_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define PublishObject_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define PublishObject_get_HTMLVersion(This,HTMLVersion)	\
    ( (This)->lpVtbl -> get_HTMLVersion(This,HTMLVersion) ) 

#define PublishObject_put_HTMLVersion(This,HTMLVersion)	\
    ( (This)->lpVtbl -> put_HTMLVersion(This,HTMLVersion) ) 

#define PublishObject_get_SourceType(This,SourceType)	\
    ( (This)->lpVtbl -> get_SourceType(This,SourceType) ) 

#define PublishObject_put_SourceType(This,SourceType)	\
    ( (This)->lpVtbl -> put_SourceType(This,SourceType) ) 

#define PublishObject_get_RangeStart(This,RangeStart)	\
    ( (This)->lpVtbl -> get_RangeStart(This,RangeStart) ) 

#define PublishObject_put_RangeStart(This,RangeStart)	\
    ( (This)->lpVtbl -> put_RangeStart(This,RangeStart) ) 

#define PublishObject_get_RangeEnd(This,RangeEnd)	\
    ( (This)->lpVtbl -> get_RangeEnd(This,RangeEnd) ) 

#define PublishObject_put_RangeEnd(This,RangeEnd)	\
    ( (This)->lpVtbl -> put_RangeEnd(This,RangeEnd) ) 

#define PublishObject_get_SlideShowName(This,SlideShowName)	\
    ( (This)->lpVtbl -> get_SlideShowName(This,SlideShowName) ) 

#define PublishObject_put_SlideShowName(This,SlideShowName)	\
    ( (This)->lpVtbl -> put_SlideShowName(This,SlideShowName) ) 

#define PublishObject_get_SpeakerNotes(This,SpeakerNotes)	\
    ( (This)->lpVtbl -> get_SpeakerNotes(This,SpeakerNotes) ) 

#define PublishObject_put_SpeakerNotes(This,SpeakerNotes)	\
    ( (This)->lpVtbl -> put_SpeakerNotes(This,SpeakerNotes) ) 

#define PublishObject_get_FileName(This,FileName)	\
    ( (This)->lpVtbl -> get_FileName(This,FileName) ) 

#define PublishObject_put_FileName(This,FileName)	\
    ( (This)->lpVtbl -> put_FileName(This,FileName) ) 

#define PublishObject_Publish(This)	\
    ( (This)->lpVtbl -> Publish(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PublishObject_INTERFACE_DEFINED__ */


#ifndef __MasterEvents_INTERFACE_DEFINED__
#define __MasterEvents_INTERFACE_DEFINED__

/* interface MasterEvents */
/* [object][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_MasterEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934D2-5A91-11CF-8700-00AA0060263B")
    MasterEvents : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct MasterEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MasterEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MasterEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MasterEvents * This);
        
        END_INTERFACE
    } MasterEventsVtbl;

    interface MasterEvents
    {
        CONST_VTBL struct MasterEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MasterEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MasterEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MasterEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MasterEvents_INTERFACE_DEFINED__ */


#ifndef ___PowerRex_INTERFACE_DEFINED__
#define ___PowerRex_INTERFACE_DEFINED__

/* interface _PowerRex */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID__PowerRex;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934D3-5A91-11CF-8700-00AA0060263B")
    _PowerRex : public IDispatch
    {
    public:
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE OnAsfEncoderEvent( 
            /* [in] */ VARIANT erorCode,
            /* [in] */ VARIANT bstrErrorDesc) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _PowerRexVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _PowerRex * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _PowerRex * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _PowerRex * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _PowerRex * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _PowerRex * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _PowerRex * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _PowerRex * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *OnAsfEncoderEvent )( 
            _PowerRex * This,
            /* [in] */ VARIANT erorCode,
            /* [in] */ VARIANT bstrErrorDesc);
        
        END_INTERFACE
    } _PowerRexVtbl;

    interface _PowerRex
    {
        CONST_VTBL struct _PowerRexVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _PowerRex_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _PowerRex_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _PowerRex_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _PowerRex_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _PowerRex_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _PowerRex_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _PowerRex_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _PowerRex_OnAsfEncoderEvent(This,erorCode,bstrErrorDesc)	\
    ( (This)->lpVtbl -> OnAsfEncoderEvent(This,erorCode,bstrErrorDesc) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___PowerRex_INTERFACE_DEFINED__ */


#ifndef __Comments_INTERFACE_DEFINED__
#define __Comments_INTERFACE_DEFINED__

/* interface Comments */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Comments;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934D4-5A91-11CF-8700-00AA0060263B")
    Comments : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ Comment **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ BSTR Author,
            /* [in] */ BSTR AuthorInitials,
            /* [in] */ BSTR Text,
            /* [retval][out] */ Comment **Add) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add2( 
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ BSTR Author,
            /* [in] */ BSTR AuthorInitials,
            /* [in] */ BSTR Text,
            /* [in] */ BSTR ProviderID,
            /* [in] */ BSTR UserID,
            /* [retval][out] */ Comment **Add) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CommentsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Comments * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Comments * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Comments * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Comments * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Comments * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Comments * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Comments * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Comments * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            Comments * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Comments * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Comments * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Comments * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Comments * This,
            /* [in] */ int Index,
            /* [retval][out] */ Comment **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Comments * This,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ BSTR Author,
            /* [in] */ BSTR AuthorInitials,
            /* [in] */ BSTR Text,
            /* [retval][out] */ Comment **Add);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add2 )( 
            Comments * This,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ BSTR Author,
            /* [in] */ BSTR AuthorInitials,
            /* [in] */ BSTR Text,
            /* [in] */ BSTR ProviderID,
            /* [in] */ BSTR UserID,
            /* [retval][out] */ Comment **Add);
        
        END_INTERFACE
    } CommentsVtbl;

    interface Comments
    {
        CONST_VTBL struct CommentsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Comments_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Comments_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Comments_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Comments_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Comments_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Comments_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Comments_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Comments_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Comments__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define Comments_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define Comments_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Comments_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Comments_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define Comments_Add(This,Left,Top,Author,AuthorInitials,Text,Add)	\
    ( (This)->lpVtbl -> Add(This,Left,Top,Author,AuthorInitials,Text,Add) ) 

#define Comments_Add2(This,Left,Top,Author,AuthorInitials,Text,ProviderID,UserID,Add)	\
    ( (This)->lpVtbl -> Add2(This,Left,Top,Author,AuthorInitials,Text,ProviderID,UserID,Add) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Comments_INTERFACE_DEFINED__ */


#ifndef __Comment_INTERFACE_DEFINED__
#define __Comment_INTERFACE_DEFINED__

/* interface Comment */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Comment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934D5-5A91-11CF-8700-00AA0060263B")
    Comment : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Author( 
            /* [retval][out] */ BSTR *Author) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AuthorInitials( 
            /* [retval][out] */ BSTR *AuthorInitials) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *Text) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DateTime( 
            /* [retval][out] */ DATE *DateTime) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AuthorIndex( 
            /* [retval][out] */ int *AuthorIndex) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ single *Left) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ single *Top) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProviderID( 
            /* [retval][out] */ BSTR *ProviderID) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UserID( 
            /* [retval][out] */ BSTR *UserID) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TimeZoneBias( 
            /* [retval][out] */ int *TimeZoneBias) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Replies( 
            /* [retval][out] */ Comments **Comments) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collapsed( 
            /* [retval][out] */ VARIANT_BOOL *Comments) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CommentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Comment * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Comment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Comment * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Comment * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Comment * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Comment * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Comment * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Comment * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Comment * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Author )( 
            Comment * This,
            /* [retval][out] */ BSTR *Author);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AuthorInitials )( 
            Comment * This,
            /* [retval][out] */ BSTR *AuthorInitials);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            Comment * This,
            /* [retval][out] */ BSTR *Text);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DateTime )( 
            Comment * This,
            /* [retval][out] */ DATE *DateTime);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AuthorIndex )( 
            Comment * This,
            /* [retval][out] */ int *AuthorIndex);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            Comment * This,
            /* [retval][out] */ single *Left);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            Comment * This,
            /* [retval][out] */ single *Top);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Comment * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProviderID )( 
            Comment * This,
            /* [retval][out] */ BSTR *ProviderID);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UserID )( 
            Comment * This,
            /* [retval][out] */ BSTR *UserID);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TimeZoneBias )( 
            Comment * This,
            /* [retval][out] */ int *TimeZoneBias);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Replies )( 
            Comment * This,
            /* [retval][out] */ Comments **Comments);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collapsed )( 
            Comment * This,
            /* [retval][out] */ VARIANT_BOOL *Comments);
        
        END_INTERFACE
    } CommentVtbl;

    interface Comment
    {
        CONST_VTBL struct CommentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Comment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Comment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Comment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Comment_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Comment_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Comment_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Comment_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Comment_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Comment_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Comment_get_Author(This,Author)	\
    ( (This)->lpVtbl -> get_Author(This,Author) ) 

#define Comment_get_AuthorInitials(This,AuthorInitials)	\
    ( (This)->lpVtbl -> get_AuthorInitials(This,AuthorInitials) ) 

#define Comment_get_Text(This,Text)	\
    ( (This)->lpVtbl -> get_Text(This,Text) ) 

#define Comment_get_DateTime(This,DateTime)	\
    ( (This)->lpVtbl -> get_DateTime(This,DateTime) ) 

#define Comment_get_AuthorIndex(This,AuthorIndex)	\
    ( (This)->lpVtbl -> get_AuthorIndex(This,AuthorIndex) ) 

#define Comment_get_Left(This,Left)	\
    ( (This)->lpVtbl -> get_Left(This,Left) ) 

#define Comment_get_Top(This,Top)	\
    ( (This)->lpVtbl -> get_Top(This,Top) ) 

#define Comment_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Comment_get_ProviderID(This,ProviderID)	\
    ( (This)->lpVtbl -> get_ProviderID(This,ProviderID) ) 

#define Comment_get_UserID(This,UserID)	\
    ( (This)->lpVtbl -> get_UserID(This,UserID) ) 

#define Comment_get_TimeZoneBias(This,TimeZoneBias)	\
    ( (This)->lpVtbl -> get_TimeZoneBias(This,TimeZoneBias) ) 

#define Comment_get_Replies(This,Comments)	\
    ( (This)->lpVtbl -> get_Replies(This,Comments) ) 

#define Comment_get_Collapsed(This,Comments)	\
    ( (This)->lpVtbl -> get_Collapsed(This,Comments) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Comment_INTERFACE_DEFINED__ */


#ifndef __Designs_INTERFACE_DEFINED__
#define __Designs_INTERFACE_DEFINED__

/* interface Designs */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Designs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934D6-5A91-11CF-8700-00AA0060263B")
    Designs : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Design **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR designName,
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ Design **Add) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Load( 
            /* [in] */ BSTR TemplateName,
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ Design **Load) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clone( 
            /* [in] */ Design *pOriginal,
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ Design **Clone) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DesignsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Designs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Designs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Designs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Designs * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Designs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Designs * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Designs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Designs * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            Designs * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Designs * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Designs * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Designs * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Designs * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Design **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Designs * This,
            /* [in] */ BSTR designName,
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ Design **Add);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Load )( 
            Designs * This,
            /* [in] */ BSTR TemplateName,
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ Design **Load);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clone )( 
            Designs * This,
            /* [in] */ Design *pOriginal,
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ Design **Clone);
        
        END_INTERFACE
    } DesignsVtbl;

    interface Designs
    {
        CONST_VTBL struct DesignsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Designs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Designs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Designs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Designs_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Designs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Designs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Designs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Designs_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Designs__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define Designs_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define Designs_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Designs_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Designs_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define Designs_Add(This,designName,Index,Add)	\
    ( (This)->lpVtbl -> Add(This,designName,Index,Add) ) 

#define Designs_Load(This,TemplateName,Index,Load)	\
    ( (This)->lpVtbl -> Load(This,TemplateName,Index,Load) ) 

#define Designs_Clone(This,pOriginal,Index,Clone)	\
    ( (This)->lpVtbl -> Clone(This,pOriginal,Index,Clone) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Designs_INTERFACE_DEFINED__ */


#ifndef __Design_INTERFACE_DEFINED__
#define __Design_INTERFACE_DEFINED__

/* interface Design */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Design;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934D7-5A91-11CF-8700-00AA0060263B")
    Design : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideMaster( 
            /* [retval][out] */ _Master **SlideMaster) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_TitleMaster( 
            /* [retval][out] */ _Master **TitleMaster) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasTitleMaster( 
            /* [retval][out] */ MsoTriState *HasTitleMaster) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AddTitleMaster( 
            /* [retval][out] */ _Master **TitleMaster) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ int *Index) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Preserved( 
            /* [retval][out] */ MsoTriState *Preserved) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Preserved( 
            /* [in] */ MsoTriState Preserved) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveTo( 
            /* [in] */ int toPos) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DesignVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Design * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Design * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Design * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Design * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Design * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Design * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Design * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Design * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Design * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideMaster )( 
            Design * This,
            /* [retval][out] */ _Master **SlideMaster);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TitleMaster )( 
            Design * This,
            /* [retval][out] */ _Master **TitleMaster);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasTitleMaster )( 
            Design * This,
            /* [retval][out] */ MsoTriState *HasTitleMaster);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AddTitleMaster )( 
            Design * This,
            /* [retval][out] */ _Master **TitleMaster);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            Design * This,
            /* [retval][out] */ int *Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Design * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            Design * This,
            /* [in] */ BSTR Name);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Preserved )( 
            Design * This,
            /* [retval][out] */ MsoTriState *Preserved);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Preserved )( 
            Design * This,
            /* [in] */ MsoTriState Preserved);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveTo )( 
            Design * This,
            /* [in] */ int toPos);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Design * This);
        
        END_INTERFACE
    } DesignVtbl;

    interface Design
    {
        CONST_VTBL struct DesignVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Design_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Design_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Design_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Design_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Design_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Design_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Design_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Design_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Design_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Design_get_SlideMaster(This,SlideMaster)	\
    ( (This)->lpVtbl -> get_SlideMaster(This,SlideMaster) ) 

#define Design_get_TitleMaster(This,TitleMaster)	\
    ( (This)->lpVtbl -> get_TitleMaster(This,TitleMaster) ) 

#define Design_get_HasTitleMaster(This,HasTitleMaster)	\
    ( (This)->lpVtbl -> get_HasTitleMaster(This,HasTitleMaster) ) 

#define Design_AddTitleMaster(This,TitleMaster)	\
    ( (This)->lpVtbl -> AddTitleMaster(This,TitleMaster) ) 

#define Design_get_Index(This,Index)	\
    ( (This)->lpVtbl -> get_Index(This,Index) ) 

#define Design_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define Design_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define Design_get_Preserved(This,Preserved)	\
    ( (This)->lpVtbl -> get_Preserved(This,Preserved) ) 

#define Design_put_Preserved(This,Preserved)	\
    ( (This)->lpVtbl -> put_Preserved(This,Preserved) ) 

#define Design_MoveTo(This,toPos)	\
    ( (This)->lpVtbl -> MoveTo(This,toPos) ) 

#define Design_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Design_INTERFACE_DEFINED__ */


#ifndef __DiagramNode_INTERFACE_DEFINED__
#define __DiagramNode_INTERFACE_DEFINED__

/* interface DiagramNode */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_DiagramNode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934D8-5A91-11CF-8700-00AA0060263B")
    DiagramNode : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNode( 
            /* [defaultvalue][optional][in] */ MsoRelativeNodePosition Pos,
            /* [defaultvalue][optional][in] */ MsoDiagramNodeType NodeType,
            /* [retval][out] */ DiagramNode **NewNode) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveNode( 
            /* [in] */ DiagramNode *TargetNode,
            /* [in] */ MsoRelativeNodePosition Pos) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReplaceNode( 
            /* [in] */ DiagramNode *TargetNode) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SwapNode( 
            /* [in] */ DiagramNode *TargetNode,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL SwapChildren = -1) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CloneNode( 
            /* [in] */ VARIANT_BOOL CopyChildren,
            /* [in] */ DiagramNode *TargetNode,
            /* [defaultvalue][optional][in] */ MsoRelativeNodePosition Pos,
            /* [retval][out] */ DiagramNode **Node) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TransferChildren( 
            /* [in] */ DiagramNode *ReceivingNode) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextNode( 
            /* [retval][out] */ DiagramNode **NextNode) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrevNode( 
            /* [retval][out] */ DiagramNode **PrevNode) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ DiagramNodeChildren **Children) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shape( 
            /* [retval][out] */ Shape **Shape) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Root( 
            /* [retval][out] */ DiagramNode **Root) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Diagram( 
            /* [retval][out] */ Diagram **Diagram) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Layout( 
            /* [retval][out] */ MsoOrgChartLayoutType *Type) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Layout( 
            /* [in] */ MsoOrgChartLayoutType Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextShape( 
            /* [retval][out] */ Shape **Shape) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DiagramNodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DiagramNode * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DiagramNode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DiagramNode * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DiagramNode * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DiagramNode * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DiagramNode * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DiagramNode * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            DiagramNode * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            DiagramNode * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNode )( 
            DiagramNode * This,
            /* [defaultvalue][optional][in] */ MsoRelativeNodePosition Pos,
            /* [defaultvalue][optional][in] */ MsoDiagramNodeType NodeType,
            /* [retval][out] */ DiagramNode **NewNode);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            DiagramNode * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveNode )( 
            DiagramNode * This,
            /* [in] */ DiagramNode *TargetNode,
            /* [in] */ MsoRelativeNodePosition Pos);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReplaceNode )( 
            DiagramNode * This,
            /* [in] */ DiagramNode *TargetNode);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SwapNode )( 
            DiagramNode * This,
            /* [in] */ DiagramNode *TargetNode,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL SwapChildren);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CloneNode )( 
            DiagramNode * This,
            /* [in] */ VARIANT_BOOL CopyChildren,
            /* [in] */ DiagramNode *TargetNode,
            /* [defaultvalue][optional][in] */ MsoRelativeNodePosition Pos,
            /* [retval][out] */ DiagramNode **Node);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TransferChildren )( 
            DiagramNode * This,
            /* [in] */ DiagramNode *ReceivingNode);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextNode )( 
            DiagramNode * This,
            /* [retval][out] */ DiagramNode **NextNode);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrevNode )( 
            DiagramNode * This,
            /* [retval][out] */ DiagramNode **PrevNode);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DiagramNode * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            DiagramNode * This,
            /* [retval][out] */ DiagramNodeChildren **Children);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shape )( 
            DiagramNode * This,
            /* [retval][out] */ Shape **Shape);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Root )( 
            DiagramNode * This,
            /* [retval][out] */ DiagramNode **Root);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Diagram )( 
            DiagramNode * This,
            /* [retval][out] */ Diagram **Diagram);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layout )( 
            DiagramNode * This,
            /* [retval][out] */ MsoOrgChartLayoutType *Type);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layout )( 
            DiagramNode * This,
            /* [in] */ MsoOrgChartLayoutType Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextShape )( 
            DiagramNode * This,
            /* [retval][out] */ Shape **Shape);
        
        END_INTERFACE
    } DiagramNodeVtbl;

    interface DiagramNode
    {
        CONST_VTBL struct DiagramNodeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DiagramNode_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DiagramNode_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DiagramNode_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DiagramNode_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DiagramNode_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DiagramNode_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DiagramNode_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DiagramNode_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define DiagramNode_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define DiagramNode_AddNode(This,Pos,NodeType,NewNode)	\
    ( (This)->lpVtbl -> AddNode(This,Pos,NodeType,NewNode) ) 

#define DiagramNode_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define DiagramNode_MoveNode(This,TargetNode,Pos)	\
    ( (This)->lpVtbl -> MoveNode(This,TargetNode,Pos) ) 

#define DiagramNode_ReplaceNode(This,TargetNode)	\
    ( (This)->lpVtbl -> ReplaceNode(This,TargetNode) ) 

#define DiagramNode_SwapNode(This,TargetNode,SwapChildren)	\
    ( (This)->lpVtbl -> SwapNode(This,TargetNode,SwapChildren) ) 

#define DiagramNode_CloneNode(This,CopyChildren,TargetNode,Pos,Node)	\
    ( (This)->lpVtbl -> CloneNode(This,CopyChildren,TargetNode,Pos,Node) ) 

#define DiagramNode_TransferChildren(This,ReceivingNode)	\
    ( (This)->lpVtbl -> TransferChildren(This,ReceivingNode) ) 

#define DiagramNode_NextNode(This,NextNode)	\
    ( (This)->lpVtbl -> NextNode(This,NextNode) ) 

#define DiagramNode_PrevNode(This,PrevNode)	\
    ( (This)->lpVtbl -> PrevNode(This,PrevNode) ) 

#define DiagramNode_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define DiagramNode_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define DiagramNode_get_Shape(This,Shape)	\
    ( (This)->lpVtbl -> get_Shape(This,Shape) ) 

#define DiagramNode_get_Root(This,Root)	\
    ( (This)->lpVtbl -> get_Root(This,Root) ) 

#define DiagramNode_get_Diagram(This,Diagram)	\
    ( (This)->lpVtbl -> get_Diagram(This,Diagram) ) 

#define DiagramNode_get_Layout(This,Type)	\
    ( (This)->lpVtbl -> get_Layout(This,Type) ) 

#define DiagramNode_put_Layout(This,Type)	\
    ( (This)->lpVtbl -> put_Layout(This,Type) ) 

#define DiagramNode_get_TextShape(This,Shape)	\
    ( (This)->lpVtbl -> get_TextShape(This,Shape) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DiagramNode_INTERFACE_DEFINED__ */


#ifndef __DiagramNodeChildren_INTERFACE_DEFINED__
#define __DiagramNodeChildren_INTERFACE_DEFINED__

/* interface DiagramNodeChildren */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_DiagramNodeChildren;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934D9-5A91-11CF-8700-00AA0060263B")
    DiagramNodeChildren : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **ppunkEnum) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ DiagramNode **Node) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNode( 
            /* [defaultvalue][optional][in] */ VARIANT Index,
            /* [defaultvalue][optional][in] */ MsoDiagramNodeType NodeType,
            /* [retval][out] */ DiagramNode **NewNode) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectAll( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ int *iDiagramNodes) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstChild( 
            /* [retval][out] */ DiagramNode **First) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LastChild( 
            /* [retval][out] */ DiagramNode **Last) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DiagramNodeChildrenVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DiagramNodeChildren * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DiagramNodeChildren * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DiagramNodeChildren * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DiagramNodeChildren * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DiagramNodeChildren * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DiagramNodeChildren * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DiagramNodeChildren * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            DiagramNodeChildren * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            DiagramNodeChildren * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            DiagramNodeChildren * This,
            /* [retval][out] */ IUnknown **ppunkEnum);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            DiagramNodeChildren * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ DiagramNode **Node);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNode )( 
            DiagramNodeChildren * This,
            /* [defaultvalue][optional][in] */ VARIANT Index,
            /* [defaultvalue][optional][in] */ MsoDiagramNodeType NodeType,
            /* [retval][out] */ DiagramNode **NewNode);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectAll )( 
            DiagramNodeChildren * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DiagramNodeChildren * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            DiagramNodeChildren * This,
            /* [retval][out] */ int *iDiagramNodes);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstChild )( 
            DiagramNodeChildren * This,
            /* [retval][out] */ DiagramNode **First);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastChild )( 
            DiagramNodeChildren * This,
            /* [retval][out] */ DiagramNode **Last);
        
        END_INTERFACE
    } DiagramNodeChildrenVtbl;

    interface DiagramNodeChildren
    {
        CONST_VTBL struct DiagramNodeChildrenVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DiagramNodeChildren_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DiagramNodeChildren_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DiagramNodeChildren_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DiagramNodeChildren_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DiagramNodeChildren_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DiagramNodeChildren_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DiagramNodeChildren_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DiagramNodeChildren_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define DiagramNodeChildren_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define DiagramNodeChildren_get__NewEnum(This,ppunkEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,ppunkEnum) ) 

#define DiagramNodeChildren_Item(This,Index,Node)	\
    ( (This)->lpVtbl -> Item(This,Index,Node) ) 

#define DiagramNodeChildren_AddNode(This,Index,NodeType,NewNode)	\
    ( (This)->lpVtbl -> AddNode(This,Index,NodeType,NewNode) ) 

#define DiagramNodeChildren_SelectAll(This)	\
    ( (This)->lpVtbl -> SelectAll(This) ) 

#define DiagramNodeChildren_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define DiagramNodeChildren_get_Count(This,iDiagramNodes)	\
    ( (This)->lpVtbl -> get_Count(This,iDiagramNodes) ) 

#define DiagramNodeChildren_get_FirstChild(This,First)	\
    ( (This)->lpVtbl -> get_FirstChild(This,First) ) 

#define DiagramNodeChildren_get_LastChild(This,Last)	\
    ( (This)->lpVtbl -> get_LastChild(This,Last) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DiagramNodeChildren_INTERFACE_DEFINED__ */


#ifndef __DiagramNodes_INTERFACE_DEFINED__
#define __DiagramNodes_INTERFACE_DEFINED__

/* interface DiagramNodes */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_DiagramNodes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934DA-5A91-11CF-8700-00AA0060263B")
    DiagramNodes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **ppunkEnum) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ DiagramNode **ppdn) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectAll( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ int *iDiagramNodes) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DiagramNodesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DiagramNodes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DiagramNodes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DiagramNodes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DiagramNodes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DiagramNodes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DiagramNodes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DiagramNodes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            DiagramNodes * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            DiagramNodes * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            DiagramNodes * This,
            /* [retval][out] */ IUnknown **ppunkEnum);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            DiagramNodes * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ DiagramNode **ppdn);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectAll )( 
            DiagramNodes * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DiagramNodes * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            DiagramNodes * This,
            /* [retval][out] */ int *iDiagramNodes);
        
        END_INTERFACE
    } DiagramNodesVtbl;

    interface DiagramNodes
    {
        CONST_VTBL struct DiagramNodesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DiagramNodes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DiagramNodes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DiagramNodes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DiagramNodes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DiagramNodes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DiagramNodes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DiagramNodes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DiagramNodes_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define DiagramNodes_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define DiagramNodes_get__NewEnum(This,ppunkEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,ppunkEnum) ) 

#define DiagramNodes_Item(This,Index,ppdn)	\
    ( (This)->lpVtbl -> Item(This,Index,ppdn) ) 

#define DiagramNodes_SelectAll(This)	\
    ( (This)->lpVtbl -> SelectAll(This) ) 

#define DiagramNodes_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define DiagramNodes_get_Count(This,iDiagramNodes)	\
    ( (This)->lpVtbl -> get_Count(This,iDiagramNodes) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DiagramNodes_INTERFACE_DEFINED__ */


#ifndef __Diagram_INTERFACE_DEFINED__
#define __Diagram_INTERFACE_DEFINED__

/* interface Diagram */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_Diagram;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934DB-5A91-11CF-8700-00AA0060263B")
    Diagram : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Nodes( 
            /* [retval][out] */ DiagramNodes **Nodes) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoDiagramType *Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoLayout( 
            /* [retval][out] */ MsoTriState *AutoLayout) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoLayout( 
            /* [in] */ MsoTriState AutoLayout) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Reverse( 
            /* [retval][out] */ MsoTriState *Reverse) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Reverse( 
            /* [in] */ MsoTriState Reverse) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormat( 
            /* [retval][out] */ MsoTriState *AutoFormat) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormat( 
            /* [in] */ MsoTriState AutoFormat) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Convert( 
            /* [in] */ MsoDiagramType Type) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE FitText( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DiagramVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Diagram * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Diagram * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Diagram * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Diagram * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Diagram * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Diagram * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Diagram * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Diagram * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Diagram * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Diagram * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Nodes )( 
            Diagram * This,
            /* [retval][out] */ DiagramNodes **Nodes);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Diagram * This,
            /* [retval][out] */ MsoDiagramType *Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoLayout )( 
            Diagram * This,
            /* [retval][out] */ MsoTriState *AutoLayout);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoLayout )( 
            Diagram * This,
            /* [in] */ MsoTriState AutoLayout);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Reverse )( 
            Diagram * This,
            /* [retval][out] */ MsoTriState *Reverse);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Reverse )( 
            Diagram * This,
            /* [in] */ MsoTriState Reverse);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormat )( 
            Diagram * This,
            /* [retval][out] */ MsoTriState *AutoFormat);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormat )( 
            Diagram * This,
            /* [in] */ MsoTriState AutoFormat);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Convert )( 
            Diagram * This,
            /* [in] */ MsoDiagramType Type);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FitText )( 
            Diagram * This);
        
        END_INTERFACE
    } DiagramVtbl;

    interface Diagram
    {
        CONST_VTBL struct DiagramVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Diagram_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Diagram_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Diagram_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Diagram_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Diagram_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Diagram_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Diagram_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Diagram_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define Diagram_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define Diagram_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Diagram_get_Nodes(This,Nodes)	\
    ( (This)->lpVtbl -> get_Nodes(This,Nodes) ) 

#define Diagram_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define Diagram_get_AutoLayout(This,AutoLayout)	\
    ( (This)->lpVtbl -> get_AutoLayout(This,AutoLayout) ) 

#define Diagram_put_AutoLayout(This,AutoLayout)	\
    ( (This)->lpVtbl -> put_AutoLayout(This,AutoLayout) ) 

#define Diagram_get_Reverse(This,Reverse)	\
    ( (This)->lpVtbl -> get_Reverse(This,Reverse) ) 

#define Diagram_put_Reverse(This,Reverse)	\
    ( (This)->lpVtbl -> put_Reverse(This,Reverse) ) 

#define Diagram_get_AutoFormat(This,AutoFormat)	\
    ( (This)->lpVtbl -> get_AutoFormat(This,AutoFormat) ) 

#define Diagram_put_AutoFormat(This,AutoFormat)	\
    ( (This)->lpVtbl -> put_AutoFormat(This,AutoFormat) ) 

#define Diagram_Convert(This,Type)	\
    ( (This)->lpVtbl -> Convert(This,Type) ) 

#define Diagram_FitText(This)	\
    ( (This)->lpVtbl -> FitText(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Diagram_INTERFACE_DEFINED__ */


#ifndef __TimeLine_INTERFACE_DEFINED__
#define __TimeLine_INTERFACE_DEFINED__

/* interface TimeLine */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_TimeLine;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934DC-5A91-11CF-8700-00AA0060263B")
    TimeLine : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MainSequence( 
            /* [retval][out] */ Sequence **MainSequence) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InteractiveSequences( 
            /* [retval][out] */ Sequences **InteractiveSequences) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TimeLineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TimeLine * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TimeLine * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TimeLine * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TimeLine * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TimeLine * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TimeLine * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TimeLine * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TimeLine * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TimeLine * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MainSequence )( 
            TimeLine * This,
            /* [retval][out] */ Sequence **MainSequence);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InteractiveSequences )( 
            TimeLine * This,
            /* [retval][out] */ Sequences **InteractiveSequences);
        
        END_INTERFACE
    } TimeLineVtbl;

    interface TimeLine
    {
        CONST_VTBL struct TimeLineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TimeLine_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TimeLine_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TimeLine_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TimeLine_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TimeLine_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TimeLine_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TimeLine_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TimeLine_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define TimeLine_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define TimeLine_get_MainSequence(This,MainSequence)	\
    ( (This)->lpVtbl -> get_MainSequence(This,MainSequence) ) 

#define TimeLine_get_InteractiveSequences(This,InteractiveSequences)	\
    ( (This)->lpVtbl -> get_InteractiveSequences(This,InteractiveSequences) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TimeLine_INTERFACE_DEFINED__ */


#ifndef __Sequences_INTERFACE_DEFINED__
#define __Sequences_INTERFACE_DEFINED__

/* interface Sequences */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Sequences;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934DD-5A91-11CF-8700-00AA0060263B")
    Sequences : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ Sequence **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ Sequence **Add) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SequencesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Sequences * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Sequences * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Sequences * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Sequences * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Sequences * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Sequences * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Sequences * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Sequences * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            Sequences * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Sequences * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Sequences * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Sequences * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Sequences * This,
            /* [in] */ int Index,
            /* [retval][out] */ Sequence **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Sequences * This,
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ Sequence **Add);
        
        END_INTERFACE
    } SequencesVtbl;

    interface Sequences
    {
        CONST_VTBL struct SequencesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Sequences_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Sequences_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Sequences_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Sequences_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Sequences_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Sequences_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Sequences_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Sequences_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Sequences__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define Sequences_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define Sequences_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Sequences_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Sequences_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define Sequences_Add(This,Index,Add)	\
    ( (This)->lpVtbl -> Add(This,Index,Add) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Sequences_INTERFACE_DEFINED__ */


#ifndef __Sequence_INTERFACE_DEFINED__
#define __Sequence_INTERFACE_DEFINED__

/* interface Sequence */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Sequence;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934DE-5A91-11CF-8700-00AA0060263B")
    Sequence : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ Effect **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddEffect( 
            /* [in] */ Shape *Shape,
            /* [in] */ MsoAnimEffect effectId,
            /* [defaultvalue][optional][in] */ MsoAnimateByLevel Level,
            /* [defaultvalue][optional][in] */ MsoAnimTriggerType trigger,
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ Effect **Effect) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clone( 
            /* [in] */ Effect *effect,
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ Effect **Clone) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindFirstAnimationFor( 
            /* [in] */ Shape *Shape,
            /* [retval][out] */ Effect **FindFirstAnimationFor) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindFirstAnimationForClick( 
            /* [in] */ int click,
            /* [retval][out] */ Effect **FindFirstAnimationForClick) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToBuildLevel( 
            /* [in] */ Effect *effect,
            /* [in] */ MsoAnimateByLevel Level,
            /* [retval][out] */ Effect **ConvertToBuildLevel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToAfterEffect( 
            /* [in] */ Effect *effect,
            /* [in] */ MsoAnimAfterEffect After,
            /* [defaultvalue][optional][in] */ MsoRGBType DimColor,
            /* [defaultvalue][optional][in] */ PpColorSchemeIndex DimSchemeColor,
            /* [retval][out] */ Effect **ConvertToAfterEffect) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToAnimateBackground( 
            /* [in] */ Effect *effect,
            /* [in] */ MsoTriState AnimateBackground,
            /* [retval][out] */ Effect **ConvertToAnimateBackground) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToAnimateInReverse( 
            /* [in] */ Effect *effect,
            /* [in] */ MsoTriState animateInReverse,
            /* [retval][out] */ Effect **ConvertToAnimateInReverse) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToTextUnitEffect( 
            /* [in] */ Effect *effect,
            /* [in] */ MsoAnimTextUnitEffect unitEffect,
            /* [retval][out] */ Effect **ConvertToTextUnitEffect) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddTriggerEffect( 
            /* [in] */ Shape *pShape,
            /* [in] */ MsoAnimEffect effectId,
            /* [in] */ MsoAnimTriggerType trigger,
            /* [in] */ Shape *pTriggerShape,
            /* [defaultvalue][optional][in] */ BSTR bookmark,
            /* [defaultvalue][optional][in] */ MsoAnimateByLevel Level,
            /* [retval][out] */ Effect **TriggerEffect) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SequenceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Sequence * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Sequence * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Sequence * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Sequence * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Sequence * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Sequence * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Sequence * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Sequence * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            Sequence * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Sequence * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Sequence * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Sequence * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Sequence * This,
            /* [in] */ int Index,
            /* [retval][out] */ Effect **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddEffect )( 
            Sequence * This,
            /* [in] */ Shape *Shape,
            /* [in] */ MsoAnimEffect effectId,
            /* [defaultvalue][optional][in] */ MsoAnimateByLevel Level,
            /* [defaultvalue][optional][in] */ MsoAnimTriggerType trigger,
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ Effect **Effect);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clone )( 
            Sequence * This,
            /* [in] */ Effect *effect,
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ Effect **Clone);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindFirstAnimationFor )( 
            Sequence * This,
            /* [in] */ Shape *Shape,
            /* [retval][out] */ Effect **FindFirstAnimationFor);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindFirstAnimationForClick )( 
            Sequence * This,
            /* [in] */ int click,
            /* [retval][out] */ Effect **FindFirstAnimationForClick);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToBuildLevel )( 
            Sequence * This,
            /* [in] */ Effect *effect,
            /* [in] */ MsoAnimateByLevel Level,
            /* [retval][out] */ Effect **ConvertToBuildLevel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToAfterEffect )( 
            Sequence * This,
            /* [in] */ Effect *effect,
            /* [in] */ MsoAnimAfterEffect After,
            /* [defaultvalue][optional][in] */ MsoRGBType DimColor,
            /* [defaultvalue][optional][in] */ PpColorSchemeIndex DimSchemeColor,
            /* [retval][out] */ Effect **ConvertToAfterEffect);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToAnimateBackground )( 
            Sequence * This,
            /* [in] */ Effect *effect,
            /* [in] */ MsoTriState AnimateBackground,
            /* [retval][out] */ Effect **ConvertToAnimateBackground);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToAnimateInReverse )( 
            Sequence * This,
            /* [in] */ Effect *effect,
            /* [in] */ MsoTriState animateInReverse,
            /* [retval][out] */ Effect **ConvertToAnimateInReverse);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToTextUnitEffect )( 
            Sequence * This,
            /* [in] */ Effect *effect,
            /* [in] */ MsoAnimTextUnitEffect unitEffect,
            /* [retval][out] */ Effect **ConvertToTextUnitEffect);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddTriggerEffect )( 
            Sequence * This,
            /* [in] */ Shape *pShape,
            /* [in] */ MsoAnimEffect effectId,
            /* [in] */ MsoAnimTriggerType trigger,
            /* [in] */ Shape *pTriggerShape,
            /* [defaultvalue][optional][in] */ BSTR bookmark,
            /* [defaultvalue][optional][in] */ MsoAnimateByLevel Level,
            /* [retval][out] */ Effect **TriggerEffect);
        
        END_INTERFACE
    } SequenceVtbl;

    interface Sequence
    {
        CONST_VTBL struct SequenceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Sequence_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Sequence_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Sequence_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Sequence_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Sequence_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Sequence_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Sequence_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Sequence_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Sequence__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define Sequence_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define Sequence_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Sequence_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Sequence_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define Sequence_AddEffect(This,Shape,effectId,Level,trigger,Index,Effect)	\
    ( (This)->lpVtbl -> AddEffect(This,Shape,effectId,Level,trigger,Index,Effect) ) 

#define Sequence_Clone(This,effect,Index,Clone)	\
    ( (This)->lpVtbl -> Clone(This,effect,Index,Clone) ) 

#define Sequence_FindFirstAnimationFor(This,Shape,FindFirstAnimationFor)	\
    ( (This)->lpVtbl -> FindFirstAnimationFor(This,Shape,FindFirstAnimationFor) ) 

#define Sequence_FindFirstAnimationForClick(This,click,FindFirstAnimationForClick)	\
    ( (This)->lpVtbl -> FindFirstAnimationForClick(This,click,FindFirstAnimationForClick) ) 

#define Sequence_ConvertToBuildLevel(This,effect,Level,ConvertToBuildLevel)	\
    ( (This)->lpVtbl -> ConvertToBuildLevel(This,effect,Level,ConvertToBuildLevel) ) 

#define Sequence_ConvertToAfterEffect(This,effect,After,DimColor,DimSchemeColor,ConvertToAfterEffect)	\
    ( (This)->lpVtbl -> ConvertToAfterEffect(This,effect,After,DimColor,DimSchemeColor,ConvertToAfterEffect) ) 

#define Sequence_ConvertToAnimateBackground(This,effect,AnimateBackground,ConvertToAnimateBackground)	\
    ( (This)->lpVtbl -> ConvertToAnimateBackground(This,effect,AnimateBackground,ConvertToAnimateBackground) ) 

#define Sequence_ConvertToAnimateInReverse(This,effect,animateInReverse,ConvertToAnimateInReverse)	\
    ( (This)->lpVtbl -> ConvertToAnimateInReverse(This,effect,animateInReverse,ConvertToAnimateInReverse) ) 

#define Sequence_ConvertToTextUnitEffect(This,effect,unitEffect,ConvertToTextUnitEffect)	\
    ( (This)->lpVtbl -> ConvertToTextUnitEffect(This,effect,unitEffect,ConvertToTextUnitEffect) ) 

#define Sequence_AddTriggerEffect(This,pShape,effectId,trigger,pTriggerShape,bookmark,Level,TriggerEffect)	\
    ( (This)->lpVtbl -> AddTriggerEffect(This,pShape,effectId,trigger,pTriggerShape,bookmark,Level,TriggerEffect) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Sequence_INTERFACE_DEFINED__ */


#ifndef __Effect_INTERFACE_DEFINED__
#define __Effect_INTERFACE_DEFINED__

/* interface Effect */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Effect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934DF-5A91-11CF-8700-00AA0060263B")
    Effect : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shape( 
            /* [retval][out] */ Shape **Shape) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Shape( 
            /* [in] */ Shape *Shape) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveTo( 
            /* [in] */ int toPos) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveBefore( 
            /* [in] */ Effect *Effect) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveAfter( 
            /* [in] */ Effect *Effect) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ int *Index) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Timing( 
            /* [retval][out] */ Timing **Timing) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EffectType( 
            /* [retval][out] */ MsoAnimEffect *EffectType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EffectType( 
            /* [in] */ MsoAnimEffect EffectType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EffectParameters( 
            /* [retval][out] */ EffectParameters **EffectParameters) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextRangeStart( 
            /* [retval][out] */ int *TextRangeStart) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextRangeLength( 
            /* [retval][out] */ int *TextRangeLength) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Paragraph( 
            /* [retval][out] */ int *Paragraph) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Paragraph( 
            /* [in] */ int Paragraph) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayName( 
            /* [retval][out] */ BSTR *DisplayName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Exit( 
            /* [retval][out] */ MsoTriState *Exit) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Exit( 
            /* [in] */ MsoTriState Exit) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Behaviors( 
            /* [retval][out] */ AnimationBehaviors **Behaviors) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EffectInformation( 
            /* [retval][out] */ EffectInformation **EffectInformation) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Effect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Effect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Effect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Effect * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Effect * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Effect * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Effect * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Effect * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Effect * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shape )( 
            Effect * This,
            /* [retval][out] */ Shape **Shape);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shape )( 
            Effect * This,
            /* [in] */ Shape *Shape);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveTo )( 
            Effect * This,
            /* [in] */ int toPos);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveBefore )( 
            Effect * This,
            /* [in] */ Effect *Effect);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveAfter )( 
            Effect * This,
            /* [in] */ Effect *Effect);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Effect * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            Effect * This,
            /* [retval][out] */ int *Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Timing )( 
            Effect * This,
            /* [retval][out] */ Timing **Timing);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EffectType )( 
            Effect * This,
            /* [retval][out] */ MsoAnimEffect *EffectType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EffectType )( 
            Effect * This,
            /* [in] */ MsoAnimEffect EffectType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EffectParameters )( 
            Effect * This,
            /* [retval][out] */ EffectParameters **EffectParameters);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRangeStart )( 
            Effect * This,
            /* [retval][out] */ int *TextRangeStart);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRangeLength )( 
            Effect * This,
            /* [retval][out] */ int *TextRangeLength);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Paragraph )( 
            Effect * This,
            /* [retval][out] */ int *Paragraph);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Paragraph )( 
            Effect * This,
            /* [in] */ int Paragraph);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            Effect * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Exit )( 
            Effect * This,
            /* [retval][out] */ MsoTriState *Exit);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Exit )( 
            Effect * This,
            /* [in] */ MsoTriState Exit);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Behaviors )( 
            Effect * This,
            /* [retval][out] */ AnimationBehaviors **Behaviors);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EffectInformation )( 
            Effect * This,
            /* [retval][out] */ EffectInformation **EffectInformation);
        
        END_INTERFACE
    } EffectVtbl;

    interface Effect
    {
        CONST_VTBL struct EffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Effect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Effect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Effect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Effect_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Effect_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Effect_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Effect_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Effect_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Effect_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Effect_get_Shape(This,Shape)	\
    ( (This)->lpVtbl -> get_Shape(This,Shape) ) 

#define Effect_put_Shape(This,Shape)	\
    ( (This)->lpVtbl -> put_Shape(This,Shape) ) 

#define Effect_MoveTo(This,toPos)	\
    ( (This)->lpVtbl -> MoveTo(This,toPos) ) 

#define Effect_MoveBefore(This,Effect)	\
    ( (This)->lpVtbl -> MoveBefore(This,Effect) ) 

#define Effect_MoveAfter(This,Effect)	\
    ( (This)->lpVtbl -> MoveAfter(This,Effect) ) 

#define Effect_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Effect_get_Index(This,Index)	\
    ( (This)->lpVtbl -> get_Index(This,Index) ) 

#define Effect_get_Timing(This,Timing)	\
    ( (This)->lpVtbl -> get_Timing(This,Timing) ) 

#define Effect_get_EffectType(This,EffectType)	\
    ( (This)->lpVtbl -> get_EffectType(This,EffectType) ) 

#define Effect_put_EffectType(This,EffectType)	\
    ( (This)->lpVtbl -> put_EffectType(This,EffectType) ) 

#define Effect_get_EffectParameters(This,EffectParameters)	\
    ( (This)->lpVtbl -> get_EffectParameters(This,EffectParameters) ) 

#define Effect_get_TextRangeStart(This,TextRangeStart)	\
    ( (This)->lpVtbl -> get_TextRangeStart(This,TextRangeStart) ) 

#define Effect_get_TextRangeLength(This,TextRangeLength)	\
    ( (This)->lpVtbl -> get_TextRangeLength(This,TextRangeLength) ) 

#define Effect_get_Paragraph(This,Paragraph)	\
    ( (This)->lpVtbl -> get_Paragraph(This,Paragraph) ) 

#define Effect_put_Paragraph(This,Paragraph)	\
    ( (This)->lpVtbl -> put_Paragraph(This,Paragraph) ) 

#define Effect_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define Effect_get_Exit(This,Exit)	\
    ( (This)->lpVtbl -> get_Exit(This,Exit) ) 

#define Effect_put_Exit(This,Exit)	\
    ( (This)->lpVtbl -> put_Exit(This,Exit) ) 

#define Effect_get_Behaviors(This,Behaviors)	\
    ( (This)->lpVtbl -> get_Behaviors(This,Behaviors) ) 

#define Effect_get_EffectInformation(This,EffectInformation)	\
    ( (This)->lpVtbl -> get_EffectInformation(This,EffectInformation) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Effect_INTERFACE_DEFINED__ */


#ifndef __Timing_INTERFACE_DEFINED__
#define __Timing_INTERFACE_DEFINED__

/* interface Timing */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Timing;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934E0-5A91-11CF-8700-00AA0060263B")
    Timing : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Duration( 
            /* [retval][out] */ single *Duration) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Duration( 
            /* [in] */ single Duration) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TriggerType( 
            /* [retval][out] */ MsoAnimTriggerType *TriggerType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TriggerType( 
            /* [in] */ MsoAnimTriggerType TriggerType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TriggerDelayTime( 
            /* [retval][out] */ single *TriggerDelayTime) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TriggerDelayTime( 
            /* [in] */ single TriggerDelayTime) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TriggerShape( 
            /* [retval][out] */ Shape **TriggerShape) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TriggerShape( 
            /* [in] */ Shape *TriggerShape) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RepeatCount( 
            /* [retval][out] */ int *RepeatCount) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RepeatCount( 
            /* [in] */ int RepeatCount) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RepeatDuration( 
            /* [retval][out] */ single *RepeatDuration) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RepeatDuration( 
            /* [in] */ single RepeatDuration) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Speed( 
            /* [retval][out] */ single *Speed) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Speed( 
            /* [in] */ single Speed) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Accelerate( 
            /* [retval][out] */ single *Accelerate) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Accelerate( 
            /* [in] */ single Accelerate) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Decelerate( 
            /* [retval][out] */ single *Decelerate) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Decelerate( 
            /* [in] */ single Decelerate) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoReverse( 
            /* [retval][out] */ MsoTriState *AutoReverse) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoReverse( 
            /* [in] */ MsoTriState AutoReverse) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmoothStart( 
            /* [retval][out] */ MsoTriState *SmoothStart) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SmoothStart( 
            /* [in] */ MsoTriState SmoothStart) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmoothEnd( 
            /* [retval][out] */ MsoTriState *SmoothEnd) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SmoothEnd( 
            /* [in] */ MsoTriState SmoothEnd) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RewindAtEnd( 
            /* [retval][out] */ MsoTriState *RewindAtEnd) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RewindAtEnd( 
            /* [in] */ MsoTriState RewindAtEnd) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Restart( 
            /* [retval][out] */ MsoAnimEffectRestart *Restart) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Restart( 
            /* [in] */ MsoAnimEffectRestart Restart) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BounceEnd( 
            /* [retval][out] */ MsoTriState *BounceEnd) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BounceEnd( 
            /* [in] */ MsoTriState BounceEnd) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BounceEndIntensity( 
            /* [retval][out] */ single *BounceEndIntensity) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BounceEndIntensity( 
            /* [in] */ single BounceEndIntensity) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TriggerBookmark( 
            /* [retval][out] */ BSTR *TriggerBookmark) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TriggerBookmark( 
            /* [in] */ BSTR TriggerBookmark) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TimingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Timing * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Timing * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Timing * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Timing * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Timing * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Timing * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Timing * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Timing * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Timing * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            Timing * This,
            /* [retval][out] */ single *Duration);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Duration )( 
            Timing * This,
            /* [in] */ single Duration);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TriggerType )( 
            Timing * This,
            /* [retval][out] */ MsoAnimTriggerType *TriggerType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TriggerType )( 
            Timing * This,
            /* [in] */ MsoAnimTriggerType TriggerType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TriggerDelayTime )( 
            Timing * This,
            /* [retval][out] */ single *TriggerDelayTime);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TriggerDelayTime )( 
            Timing * This,
            /* [in] */ single TriggerDelayTime);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TriggerShape )( 
            Timing * This,
            /* [retval][out] */ Shape **TriggerShape);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TriggerShape )( 
            Timing * This,
            /* [in] */ Shape *TriggerShape);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RepeatCount )( 
            Timing * This,
            /* [retval][out] */ int *RepeatCount);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RepeatCount )( 
            Timing * This,
            /* [in] */ int RepeatCount);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RepeatDuration )( 
            Timing * This,
            /* [retval][out] */ single *RepeatDuration);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RepeatDuration )( 
            Timing * This,
            /* [in] */ single RepeatDuration);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Speed )( 
            Timing * This,
            /* [retval][out] */ single *Speed);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Speed )( 
            Timing * This,
            /* [in] */ single Speed);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Accelerate )( 
            Timing * This,
            /* [retval][out] */ single *Accelerate);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Accelerate )( 
            Timing * This,
            /* [in] */ single Accelerate);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Decelerate )( 
            Timing * This,
            /* [retval][out] */ single *Decelerate);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Decelerate )( 
            Timing * This,
            /* [in] */ single Decelerate);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoReverse )( 
            Timing * This,
            /* [retval][out] */ MsoTriState *AutoReverse);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoReverse )( 
            Timing * This,
            /* [in] */ MsoTriState AutoReverse);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmoothStart )( 
            Timing * This,
            /* [retval][out] */ MsoTriState *SmoothStart);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SmoothStart )( 
            Timing * This,
            /* [in] */ MsoTriState SmoothStart);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmoothEnd )( 
            Timing * This,
            /* [retval][out] */ MsoTriState *SmoothEnd);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SmoothEnd )( 
            Timing * This,
            /* [in] */ MsoTriState SmoothEnd);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RewindAtEnd )( 
            Timing * This,
            /* [retval][out] */ MsoTriState *RewindAtEnd);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RewindAtEnd )( 
            Timing * This,
            /* [in] */ MsoTriState RewindAtEnd);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Restart )( 
            Timing * This,
            /* [retval][out] */ MsoAnimEffectRestart *Restart);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Restart )( 
            Timing * This,
            /* [in] */ MsoAnimEffectRestart Restart);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BounceEnd )( 
            Timing * This,
            /* [retval][out] */ MsoTriState *BounceEnd);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BounceEnd )( 
            Timing * This,
            /* [in] */ MsoTriState BounceEnd);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BounceEndIntensity )( 
            Timing * This,
            /* [retval][out] */ single *BounceEndIntensity);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BounceEndIntensity )( 
            Timing * This,
            /* [in] */ single BounceEndIntensity);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TriggerBookmark )( 
            Timing * This,
            /* [retval][out] */ BSTR *TriggerBookmark);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TriggerBookmark )( 
            Timing * This,
            /* [in] */ BSTR TriggerBookmark);
        
        END_INTERFACE
    } TimingVtbl;

    interface Timing
    {
        CONST_VTBL struct TimingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Timing_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Timing_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Timing_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Timing_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Timing_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Timing_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Timing_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Timing_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Timing_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Timing_get_Duration(This,Duration)	\
    ( (This)->lpVtbl -> get_Duration(This,Duration) ) 

#define Timing_put_Duration(This,Duration)	\
    ( (This)->lpVtbl -> put_Duration(This,Duration) ) 

#define Timing_get_TriggerType(This,TriggerType)	\
    ( (This)->lpVtbl -> get_TriggerType(This,TriggerType) ) 

#define Timing_put_TriggerType(This,TriggerType)	\
    ( (This)->lpVtbl -> put_TriggerType(This,TriggerType) ) 

#define Timing_get_TriggerDelayTime(This,TriggerDelayTime)	\
    ( (This)->lpVtbl -> get_TriggerDelayTime(This,TriggerDelayTime) ) 

#define Timing_put_TriggerDelayTime(This,TriggerDelayTime)	\
    ( (This)->lpVtbl -> put_TriggerDelayTime(This,TriggerDelayTime) ) 

#define Timing_get_TriggerShape(This,TriggerShape)	\
    ( (This)->lpVtbl -> get_TriggerShape(This,TriggerShape) ) 

#define Timing_put_TriggerShape(This,TriggerShape)	\
    ( (This)->lpVtbl -> put_TriggerShape(This,TriggerShape) ) 

#define Timing_get_RepeatCount(This,RepeatCount)	\
    ( (This)->lpVtbl -> get_RepeatCount(This,RepeatCount) ) 

#define Timing_put_RepeatCount(This,RepeatCount)	\
    ( (This)->lpVtbl -> put_RepeatCount(This,RepeatCount) ) 

#define Timing_get_RepeatDuration(This,RepeatDuration)	\
    ( (This)->lpVtbl -> get_RepeatDuration(This,RepeatDuration) ) 

#define Timing_put_RepeatDuration(This,RepeatDuration)	\
    ( (This)->lpVtbl -> put_RepeatDuration(This,RepeatDuration) ) 

#define Timing_get_Speed(This,Speed)	\
    ( (This)->lpVtbl -> get_Speed(This,Speed) ) 

#define Timing_put_Speed(This,Speed)	\
    ( (This)->lpVtbl -> put_Speed(This,Speed) ) 

#define Timing_get_Accelerate(This,Accelerate)	\
    ( (This)->lpVtbl -> get_Accelerate(This,Accelerate) ) 

#define Timing_put_Accelerate(This,Accelerate)	\
    ( (This)->lpVtbl -> put_Accelerate(This,Accelerate) ) 

#define Timing_get_Decelerate(This,Decelerate)	\
    ( (This)->lpVtbl -> get_Decelerate(This,Decelerate) ) 

#define Timing_put_Decelerate(This,Decelerate)	\
    ( (This)->lpVtbl -> put_Decelerate(This,Decelerate) ) 

#define Timing_get_AutoReverse(This,AutoReverse)	\
    ( (This)->lpVtbl -> get_AutoReverse(This,AutoReverse) ) 

#define Timing_put_AutoReverse(This,AutoReverse)	\
    ( (This)->lpVtbl -> put_AutoReverse(This,AutoReverse) ) 

#define Timing_get_SmoothStart(This,SmoothStart)	\
    ( (This)->lpVtbl -> get_SmoothStart(This,SmoothStart) ) 

#define Timing_put_SmoothStart(This,SmoothStart)	\
    ( (This)->lpVtbl -> put_SmoothStart(This,SmoothStart) ) 

#define Timing_get_SmoothEnd(This,SmoothEnd)	\
    ( (This)->lpVtbl -> get_SmoothEnd(This,SmoothEnd) ) 

#define Timing_put_SmoothEnd(This,SmoothEnd)	\
    ( (This)->lpVtbl -> put_SmoothEnd(This,SmoothEnd) ) 

#define Timing_get_RewindAtEnd(This,RewindAtEnd)	\
    ( (This)->lpVtbl -> get_RewindAtEnd(This,RewindAtEnd) ) 

#define Timing_put_RewindAtEnd(This,RewindAtEnd)	\
    ( (This)->lpVtbl -> put_RewindAtEnd(This,RewindAtEnd) ) 

#define Timing_get_Restart(This,Restart)	\
    ( (This)->lpVtbl -> get_Restart(This,Restart) ) 

#define Timing_put_Restart(This,Restart)	\
    ( (This)->lpVtbl -> put_Restart(This,Restart) ) 

#define Timing_get_BounceEnd(This,BounceEnd)	\
    ( (This)->lpVtbl -> get_BounceEnd(This,BounceEnd) ) 

#define Timing_put_BounceEnd(This,BounceEnd)	\
    ( (This)->lpVtbl -> put_BounceEnd(This,BounceEnd) ) 

#define Timing_get_BounceEndIntensity(This,BounceEndIntensity)	\
    ( (This)->lpVtbl -> get_BounceEndIntensity(This,BounceEndIntensity) ) 

#define Timing_put_BounceEndIntensity(This,BounceEndIntensity)	\
    ( (This)->lpVtbl -> put_BounceEndIntensity(This,BounceEndIntensity) ) 

#define Timing_get_TriggerBookmark(This,TriggerBookmark)	\
    ( (This)->lpVtbl -> get_TriggerBookmark(This,TriggerBookmark) ) 

#define Timing_put_TriggerBookmark(This,TriggerBookmark)	\
    ( (This)->lpVtbl -> put_TriggerBookmark(This,TriggerBookmark) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Timing_INTERFACE_DEFINED__ */


#ifndef __EffectParameters_INTERFACE_DEFINED__
#define __EffectParameters_INTERFACE_DEFINED__

/* interface EffectParameters */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_EffectParameters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934E1-5A91-11CF-8700-00AA0060263B")
    EffectParameters : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Direction( 
            /* [retval][out] */ MsoAnimDirection *Direction) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Direction( 
            /* [in] */ MsoAnimDirection Direction) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Amount( 
            /* [retval][out] */ single *Amount) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Amount( 
            /* [in] */ single Amount) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ single *Size) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Size( 
            /* [in] */ single Size) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Color2( 
            /* [retval][out] */ ColorFormat **Color2) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Relative( 
            /* [retval][out] */ MsoTriState *Relative) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Relative( 
            /* [in] */ MsoTriState Relative) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontName( 
            /* [retval][out] */ BSTR *FontName) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontName( 
            /* [in] */ BSTR FontName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EffectParametersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            EffectParameters * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            EffectParameters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            EffectParameters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            EffectParameters * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            EffectParameters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            EffectParameters * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            EffectParameters * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            EffectParameters * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            EffectParameters * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Direction )( 
            EffectParameters * This,
            /* [retval][out] */ MsoAnimDirection *Direction);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Direction )( 
            EffectParameters * This,
            /* [in] */ MsoAnimDirection Direction);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Amount )( 
            EffectParameters * This,
            /* [retval][out] */ single *Amount);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Amount )( 
            EffectParameters * This,
            /* [in] */ single Amount);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            EffectParameters * This,
            /* [retval][out] */ single *Size);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Size )( 
            EffectParameters * This,
            /* [in] */ single Size);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Color2 )( 
            EffectParameters * This,
            /* [retval][out] */ ColorFormat **Color2);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Relative )( 
            EffectParameters * This,
            /* [retval][out] */ MsoTriState *Relative);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Relative )( 
            EffectParameters * This,
            /* [in] */ MsoTriState Relative);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontName )( 
            EffectParameters * This,
            /* [retval][out] */ BSTR *FontName);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontName )( 
            EffectParameters * This,
            /* [in] */ BSTR FontName);
        
        END_INTERFACE
    } EffectParametersVtbl;

    interface EffectParameters
    {
        CONST_VTBL struct EffectParametersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define EffectParameters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define EffectParameters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define EffectParameters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define EffectParameters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define EffectParameters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define EffectParameters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define EffectParameters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define EffectParameters_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define EffectParameters_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define EffectParameters_get_Direction(This,Direction)	\
    ( (This)->lpVtbl -> get_Direction(This,Direction) ) 

#define EffectParameters_put_Direction(This,Direction)	\
    ( (This)->lpVtbl -> put_Direction(This,Direction) ) 

#define EffectParameters_get_Amount(This,Amount)	\
    ( (This)->lpVtbl -> get_Amount(This,Amount) ) 

#define EffectParameters_put_Amount(This,Amount)	\
    ( (This)->lpVtbl -> put_Amount(This,Amount) ) 

#define EffectParameters_get_Size(This,Size)	\
    ( (This)->lpVtbl -> get_Size(This,Size) ) 

#define EffectParameters_put_Size(This,Size)	\
    ( (This)->lpVtbl -> put_Size(This,Size) ) 

#define EffectParameters_get_Color2(This,Color2)	\
    ( (This)->lpVtbl -> get_Color2(This,Color2) ) 

#define EffectParameters_get_Relative(This,Relative)	\
    ( (This)->lpVtbl -> get_Relative(This,Relative) ) 

#define EffectParameters_put_Relative(This,Relative)	\
    ( (This)->lpVtbl -> put_Relative(This,Relative) ) 

#define EffectParameters_get_FontName(This,FontName)	\
    ( (This)->lpVtbl -> get_FontName(This,FontName) ) 

#define EffectParameters_put_FontName(This,FontName)	\
    ( (This)->lpVtbl -> put_FontName(This,FontName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __EffectParameters_INTERFACE_DEFINED__ */


#ifndef __EffectInformation_INTERFACE_DEFINED__
#define __EffectInformation_INTERFACE_DEFINED__

/* interface EffectInformation */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_EffectInformation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934E2-5A91-11CF-8700-00AA0060263B")
    EffectInformation : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AfterEffect( 
            /* [retval][out] */ MsoAnimAfterEffect *AfterEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnimateBackground( 
            /* [retval][out] */ MsoTriState *AnimateBackground) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnimateTextInReverse( 
            /* [retval][out] */ MsoTriState *AnimateTextInReverse) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BuildByLevelEffect( 
            /* [retval][out] */ MsoAnimateByLevel *BuildByLevelEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Dim( 
            /* [retval][out] */ ColorFormat **Dim) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlaySettings( 
            /* [retval][out] */ PlaySettings **PlaySettings) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SoundEffect( 
            /* [retval][out] */ SoundEffect **SoundEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextUnitEffect( 
            /* [retval][out] */ MsoAnimTextUnitEffect *TextUnitEffect) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EffectInformationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            EffectInformation * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            EffectInformation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            EffectInformation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            EffectInformation * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            EffectInformation * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            EffectInformation * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            EffectInformation * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            EffectInformation * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            EffectInformation * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AfterEffect )( 
            EffectInformation * This,
            /* [retval][out] */ MsoAnimAfterEffect *AfterEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnimateBackground )( 
            EffectInformation * This,
            /* [retval][out] */ MsoTriState *AnimateBackground);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnimateTextInReverse )( 
            EffectInformation * This,
            /* [retval][out] */ MsoTriState *AnimateTextInReverse);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BuildByLevelEffect )( 
            EffectInformation * This,
            /* [retval][out] */ MsoAnimateByLevel *BuildByLevelEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Dim )( 
            EffectInformation * This,
            /* [retval][out] */ ColorFormat **Dim);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlaySettings )( 
            EffectInformation * This,
            /* [retval][out] */ PlaySettings **PlaySettings);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SoundEffect )( 
            EffectInformation * This,
            /* [retval][out] */ SoundEffect **SoundEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextUnitEffect )( 
            EffectInformation * This,
            /* [retval][out] */ MsoAnimTextUnitEffect *TextUnitEffect);
        
        END_INTERFACE
    } EffectInformationVtbl;

    interface EffectInformation
    {
        CONST_VTBL struct EffectInformationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define EffectInformation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define EffectInformation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define EffectInformation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define EffectInformation_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define EffectInformation_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define EffectInformation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define EffectInformation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define EffectInformation_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define EffectInformation_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define EffectInformation_get_AfterEffect(This,AfterEffect)	\
    ( (This)->lpVtbl -> get_AfterEffect(This,AfterEffect) ) 

#define EffectInformation_get_AnimateBackground(This,AnimateBackground)	\
    ( (This)->lpVtbl -> get_AnimateBackground(This,AnimateBackground) ) 

#define EffectInformation_get_AnimateTextInReverse(This,AnimateTextInReverse)	\
    ( (This)->lpVtbl -> get_AnimateTextInReverse(This,AnimateTextInReverse) ) 

#define EffectInformation_get_BuildByLevelEffect(This,BuildByLevelEffect)	\
    ( (This)->lpVtbl -> get_BuildByLevelEffect(This,BuildByLevelEffect) ) 

#define EffectInformation_get_Dim(This,Dim)	\
    ( (This)->lpVtbl -> get_Dim(This,Dim) ) 

#define EffectInformation_get_PlaySettings(This,PlaySettings)	\
    ( (This)->lpVtbl -> get_PlaySettings(This,PlaySettings) ) 

#define EffectInformation_get_SoundEffect(This,SoundEffect)	\
    ( (This)->lpVtbl -> get_SoundEffect(This,SoundEffect) ) 

#define EffectInformation_get_TextUnitEffect(This,TextUnitEffect)	\
    ( (This)->lpVtbl -> get_TextUnitEffect(This,TextUnitEffect) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __EffectInformation_INTERFACE_DEFINED__ */


#ifndef __AnimationBehaviors_INTERFACE_DEFINED__
#define __AnimationBehaviors_INTERFACE_DEFINED__

/* interface AnimationBehaviors */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_AnimationBehaviors;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934E3-5A91-11CF-8700-00AA0060263B")
    AnimationBehaviors : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ AnimationBehavior **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ MsoAnimType Type,
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ AnimationBehavior **Add) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AnimationBehaviorsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AnimationBehaviors * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AnimationBehaviors * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AnimationBehaviors * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AnimationBehaviors * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AnimationBehaviors * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AnimationBehaviors * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AnimationBehaviors * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            AnimationBehaviors * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            AnimationBehaviors * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            AnimationBehaviors * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            AnimationBehaviors * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AnimationBehaviors * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            AnimationBehaviors * This,
            /* [in] */ int Index,
            /* [retval][out] */ AnimationBehavior **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            AnimationBehaviors * This,
            /* [in] */ MsoAnimType Type,
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ AnimationBehavior **Add);
        
        END_INTERFACE
    } AnimationBehaviorsVtbl;

    interface AnimationBehaviors
    {
        CONST_VTBL struct AnimationBehaviorsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AnimationBehaviors_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AnimationBehaviors_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AnimationBehaviors_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AnimationBehaviors_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AnimationBehaviors_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AnimationBehaviors_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AnimationBehaviors_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AnimationBehaviors_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define AnimationBehaviors__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define AnimationBehaviors_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define AnimationBehaviors_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define AnimationBehaviors_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define AnimationBehaviors_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define AnimationBehaviors_Add(This,Type,Index,Add)	\
    ( (This)->lpVtbl -> Add(This,Type,Index,Add) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AnimationBehaviors_INTERFACE_DEFINED__ */


#ifndef __AnimationBehavior_INTERFACE_DEFINED__
#define __AnimationBehavior_INTERFACE_DEFINED__

/* interface AnimationBehavior */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_AnimationBehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934E4-5A91-11CF-8700-00AA0060263B")
    AnimationBehavior : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Additive( 
            /* [retval][out] */ MsoAnimAdditive *Additive) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Additive( 
            /* [in] */ MsoAnimAdditive Additive) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Accumulate( 
            /* [retval][out] */ MsoAnimAccumulate *Accumulate) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Accumulate( 
            /* [in] */ MsoAnimAccumulate Accumulate) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoAnimType *Type) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ MsoAnimType Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MotionEffect( 
            /* [retval][out] */ MotionEffect **MotionEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColorEffect( 
            /* [retval][out] */ ColorEffect **ColorEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleEffect( 
            /* [retval][out] */ ScaleEffect **ScaleEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RotationEffect( 
            /* [retval][out] */ RotationEffect **RotationEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PropertyEffect( 
            /* [retval][out] */ PropertyEffect **PropertyEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Timing( 
            /* [retval][out] */ Timing **Timing) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandEffect( 
            /* [retval][out] */ CommandEffect **CommandEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FilterEffect( 
            /* [retval][out] */ FilterEffect **FilterEffect) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SetEffect( 
            /* [retval][out] */ SetEffect **SetEffect) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AnimationBehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AnimationBehavior * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AnimationBehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AnimationBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AnimationBehavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AnimationBehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AnimationBehavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AnimationBehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            AnimationBehavior * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AnimationBehavior * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Additive )( 
            AnimationBehavior * This,
            /* [retval][out] */ MsoAnimAdditive *Additive);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Additive )( 
            AnimationBehavior * This,
            /* [in] */ MsoAnimAdditive Additive);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Accumulate )( 
            AnimationBehavior * This,
            /* [retval][out] */ MsoAnimAccumulate *Accumulate);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Accumulate )( 
            AnimationBehavior * This,
            /* [in] */ MsoAnimAccumulate Accumulate);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            AnimationBehavior * This,
            /* [retval][out] */ MsoAnimType *Type);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            AnimationBehavior * This,
            /* [in] */ MsoAnimType Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MotionEffect )( 
            AnimationBehavior * This,
            /* [retval][out] */ MotionEffect **MotionEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColorEffect )( 
            AnimationBehavior * This,
            /* [retval][out] */ ColorEffect **ColorEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleEffect )( 
            AnimationBehavior * This,
            /* [retval][out] */ ScaleEffect **ScaleEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RotationEffect )( 
            AnimationBehavior * This,
            /* [retval][out] */ RotationEffect **RotationEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PropertyEffect )( 
            AnimationBehavior * This,
            /* [retval][out] */ PropertyEffect **PropertyEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Timing )( 
            AnimationBehavior * This,
            /* [retval][out] */ Timing **Timing);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            AnimationBehavior * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandEffect )( 
            AnimationBehavior * This,
            /* [retval][out] */ CommandEffect **CommandEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FilterEffect )( 
            AnimationBehavior * This,
            /* [retval][out] */ FilterEffect **FilterEffect);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SetEffect )( 
            AnimationBehavior * This,
            /* [retval][out] */ SetEffect **SetEffect);
        
        END_INTERFACE
    } AnimationBehaviorVtbl;

    interface AnimationBehavior
    {
        CONST_VTBL struct AnimationBehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AnimationBehavior_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AnimationBehavior_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AnimationBehavior_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AnimationBehavior_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AnimationBehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AnimationBehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AnimationBehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AnimationBehavior_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define AnimationBehavior_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define AnimationBehavior_get_Additive(This,Additive)	\
    ( (This)->lpVtbl -> get_Additive(This,Additive) ) 

#define AnimationBehavior_put_Additive(This,Additive)	\
    ( (This)->lpVtbl -> put_Additive(This,Additive) ) 

#define AnimationBehavior_get_Accumulate(This,Accumulate)	\
    ( (This)->lpVtbl -> get_Accumulate(This,Accumulate) ) 

#define AnimationBehavior_put_Accumulate(This,Accumulate)	\
    ( (This)->lpVtbl -> put_Accumulate(This,Accumulate) ) 

#define AnimationBehavior_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define AnimationBehavior_put_Type(This,Type)	\
    ( (This)->lpVtbl -> put_Type(This,Type) ) 

#define AnimationBehavior_get_MotionEffect(This,MotionEffect)	\
    ( (This)->lpVtbl -> get_MotionEffect(This,MotionEffect) ) 

#define AnimationBehavior_get_ColorEffect(This,ColorEffect)	\
    ( (This)->lpVtbl -> get_ColorEffect(This,ColorEffect) ) 

#define AnimationBehavior_get_ScaleEffect(This,ScaleEffect)	\
    ( (This)->lpVtbl -> get_ScaleEffect(This,ScaleEffect) ) 

#define AnimationBehavior_get_RotationEffect(This,RotationEffect)	\
    ( (This)->lpVtbl -> get_RotationEffect(This,RotationEffect) ) 

#define AnimationBehavior_get_PropertyEffect(This,PropertyEffect)	\
    ( (This)->lpVtbl -> get_PropertyEffect(This,PropertyEffect) ) 

#define AnimationBehavior_get_Timing(This,Timing)	\
    ( (This)->lpVtbl -> get_Timing(This,Timing) ) 

#define AnimationBehavior_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define AnimationBehavior_get_CommandEffect(This,CommandEffect)	\
    ( (This)->lpVtbl -> get_CommandEffect(This,CommandEffect) ) 

#define AnimationBehavior_get_FilterEffect(This,FilterEffect)	\
    ( (This)->lpVtbl -> get_FilterEffect(This,FilterEffect) ) 

#define AnimationBehavior_get_SetEffect(This,SetEffect)	\
    ( (This)->lpVtbl -> get_SetEffect(This,SetEffect) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AnimationBehavior_INTERFACE_DEFINED__ */


#ifndef __MotionEffect_INTERFACE_DEFINED__
#define __MotionEffect_INTERFACE_DEFINED__

/* interface MotionEffect */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_MotionEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934E5-5A91-11CF-8700-00AA0060263B")
    MotionEffect : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ByX( 
            /* [retval][out] */ single *ByX) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ByX( 
            /* [in] */ single ByX) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ByY( 
            /* [retval][out] */ single *ByY) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ByY( 
            /* [in] */ single ByY) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FromX( 
            /* [retval][out] */ single *FromX) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FromX( 
            /* [in] */ single FromX) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FromY( 
            /* [retval][out] */ single *FromY) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FromY( 
            /* [in] */ single FromY) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToX( 
            /* [retval][out] */ single *ToX) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToX( 
            /* [in] */ single ToX) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToY( 
            /* [retval][out] */ single *ToY) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToY( 
            /* [in] */ single ToY) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *Path) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Path( 
            /* [in] */ BSTR Path) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MotionEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MotionEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MotionEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MotionEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MotionEffect * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MotionEffect * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MotionEffect * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MotionEffect * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            MotionEffect * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MotionEffect * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ByX )( 
            MotionEffect * This,
            /* [retval][out] */ single *ByX);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ByX )( 
            MotionEffect * This,
            /* [in] */ single ByX);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ByY )( 
            MotionEffect * This,
            /* [retval][out] */ single *ByY);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ByY )( 
            MotionEffect * This,
            /* [in] */ single ByY);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FromX )( 
            MotionEffect * This,
            /* [retval][out] */ single *FromX);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FromX )( 
            MotionEffect * This,
            /* [in] */ single FromX);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FromY )( 
            MotionEffect * This,
            /* [retval][out] */ single *FromY);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FromY )( 
            MotionEffect * This,
            /* [in] */ single FromY);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToX )( 
            MotionEffect * This,
            /* [retval][out] */ single *ToX);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToX )( 
            MotionEffect * This,
            /* [in] */ single ToX);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToY )( 
            MotionEffect * This,
            /* [retval][out] */ single *ToY);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToY )( 
            MotionEffect * This,
            /* [in] */ single ToY);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            MotionEffect * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            MotionEffect * This,
            /* [in] */ BSTR Path);
        
        END_INTERFACE
    } MotionEffectVtbl;

    interface MotionEffect
    {
        CONST_VTBL struct MotionEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MotionEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MotionEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MotionEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MotionEffect_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MotionEffect_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MotionEffect_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MotionEffect_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MotionEffect_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define MotionEffect_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define MotionEffect_get_ByX(This,ByX)	\
    ( (This)->lpVtbl -> get_ByX(This,ByX) ) 

#define MotionEffect_put_ByX(This,ByX)	\
    ( (This)->lpVtbl -> put_ByX(This,ByX) ) 

#define MotionEffect_get_ByY(This,ByY)	\
    ( (This)->lpVtbl -> get_ByY(This,ByY) ) 

#define MotionEffect_put_ByY(This,ByY)	\
    ( (This)->lpVtbl -> put_ByY(This,ByY) ) 

#define MotionEffect_get_FromX(This,FromX)	\
    ( (This)->lpVtbl -> get_FromX(This,FromX) ) 

#define MotionEffect_put_FromX(This,FromX)	\
    ( (This)->lpVtbl -> put_FromX(This,FromX) ) 

#define MotionEffect_get_FromY(This,FromY)	\
    ( (This)->lpVtbl -> get_FromY(This,FromY) ) 

#define MotionEffect_put_FromY(This,FromY)	\
    ( (This)->lpVtbl -> put_FromY(This,FromY) ) 

#define MotionEffect_get_ToX(This,ToX)	\
    ( (This)->lpVtbl -> get_ToX(This,ToX) ) 

#define MotionEffect_put_ToX(This,ToX)	\
    ( (This)->lpVtbl -> put_ToX(This,ToX) ) 

#define MotionEffect_get_ToY(This,ToY)	\
    ( (This)->lpVtbl -> get_ToY(This,ToY) ) 

#define MotionEffect_put_ToY(This,ToY)	\
    ( (This)->lpVtbl -> put_ToY(This,ToY) ) 

#define MotionEffect_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define MotionEffect_put_Path(This,Path)	\
    ( (This)->lpVtbl -> put_Path(This,Path) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MotionEffect_INTERFACE_DEFINED__ */


#ifndef __ColorEffect_INTERFACE_DEFINED__
#define __ColorEffect_INTERFACE_DEFINED__

/* interface ColorEffect */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ColorEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934E6-5A91-11CF-8700-00AA0060263B")
    ColorEffect : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_By( 
            /* [retval][out] */ ColorFormat **By) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_From( 
            /* [retval][out] */ ColorFormat **From) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_To( 
            /* [retval][out] */ ColorFormat **To) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ColorEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ColorEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ColorEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ColorEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ColorEffect * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ColorEffect * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ColorEffect * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ColorEffect * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ColorEffect * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ColorEffect * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_By )( 
            ColorEffect * This,
            /* [retval][out] */ ColorFormat **By);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_From )( 
            ColorEffect * This,
            /* [retval][out] */ ColorFormat **From);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_To )( 
            ColorEffect * This,
            /* [retval][out] */ ColorFormat **To);
        
        END_INTERFACE
    } ColorEffectVtbl;

    interface ColorEffect
    {
        CONST_VTBL struct ColorEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ColorEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ColorEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ColorEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ColorEffect_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ColorEffect_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ColorEffect_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ColorEffect_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ColorEffect_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ColorEffect_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ColorEffect_get_By(This,By)	\
    ( (This)->lpVtbl -> get_By(This,By) ) 

#define ColorEffect_get_From(This,From)	\
    ( (This)->lpVtbl -> get_From(This,From) ) 

#define ColorEffect_get_To(This,To)	\
    ( (This)->lpVtbl -> get_To(This,To) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ColorEffect_INTERFACE_DEFINED__ */


#ifndef __ScaleEffect_INTERFACE_DEFINED__
#define __ScaleEffect_INTERFACE_DEFINED__

/* interface ScaleEffect */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ScaleEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934E7-5A91-11CF-8700-00AA0060263B")
    ScaleEffect : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ByX( 
            /* [retval][out] */ single *ByX) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ByX( 
            /* [in] */ single ByX) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ByY( 
            /* [retval][out] */ single *ByY) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ByY( 
            /* [in] */ single ByY) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FromX( 
            /* [retval][out] */ single *FromX) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FromX( 
            /* [in] */ single FromX) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FromY( 
            /* [retval][out] */ single *FromY) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FromY( 
            /* [in] */ single FromY) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToX( 
            /* [retval][out] */ single *ToX) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToX( 
            /* [in] */ single ToX) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToY( 
            /* [retval][out] */ single *ToY) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ToY( 
            /* [in] */ single ToY) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ScaleEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ScaleEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ScaleEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ScaleEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ScaleEffect * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ScaleEffect * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ScaleEffect * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ScaleEffect * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ScaleEffect * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ScaleEffect * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ByX )( 
            ScaleEffect * This,
            /* [retval][out] */ single *ByX);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ByX )( 
            ScaleEffect * This,
            /* [in] */ single ByX);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ByY )( 
            ScaleEffect * This,
            /* [retval][out] */ single *ByY);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ByY )( 
            ScaleEffect * This,
            /* [in] */ single ByY);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FromX )( 
            ScaleEffect * This,
            /* [retval][out] */ single *FromX);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FromX )( 
            ScaleEffect * This,
            /* [in] */ single FromX);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FromY )( 
            ScaleEffect * This,
            /* [retval][out] */ single *FromY);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FromY )( 
            ScaleEffect * This,
            /* [in] */ single FromY);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToX )( 
            ScaleEffect * This,
            /* [retval][out] */ single *ToX);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToX )( 
            ScaleEffect * This,
            /* [in] */ single ToX);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToY )( 
            ScaleEffect * This,
            /* [retval][out] */ single *ToY);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ToY )( 
            ScaleEffect * This,
            /* [in] */ single ToY);
        
        END_INTERFACE
    } ScaleEffectVtbl;

    interface ScaleEffect
    {
        CONST_VTBL struct ScaleEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ScaleEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ScaleEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ScaleEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ScaleEffect_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ScaleEffect_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ScaleEffect_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ScaleEffect_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ScaleEffect_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ScaleEffect_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ScaleEffect_get_ByX(This,ByX)	\
    ( (This)->lpVtbl -> get_ByX(This,ByX) ) 

#define ScaleEffect_put_ByX(This,ByX)	\
    ( (This)->lpVtbl -> put_ByX(This,ByX) ) 

#define ScaleEffect_get_ByY(This,ByY)	\
    ( (This)->lpVtbl -> get_ByY(This,ByY) ) 

#define ScaleEffect_put_ByY(This,ByY)	\
    ( (This)->lpVtbl -> put_ByY(This,ByY) ) 

#define ScaleEffect_get_FromX(This,FromX)	\
    ( (This)->lpVtbl -> get_FromX(This,FromX) ) 

#define ScaleEffect_put_FromX(This,FromX)	\
    ( (This)->lpVtbl -> put_FromX(This,FromX) ) 

#define ScaleEffect_get_FromY(This,FromY)	\
    ( (This)->lpVtbl -> get_FromY(This,FromY) ) 

#define ScaleEffect_put_FromY(This,FromY)	\
    ( (This)->lpVtbl -> put_FromY(This,FromY) ) 

#define ScaleEffect_get_ToX(This,ToX)	\
    ( (This)->lpVtbl -> get_ToX(This,ToX) ) 

#define ScaleEffect_put_ToX(This,ToX)	\
    ( (This)->lpVtbl -> put_ToX(This,ToX) ) 

#define ScaleEffect_get_ToY(This,ToY)	\
    ( (This)->lpVtbl -> get_ToY(This,ToY) ) 

#define ScaleEffect_put_ToY(This,ToY)	\
    ( (This)->lpVtbl -> put_ToY(This,ToY) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ScaleEffect_INTERFACE_DEFINED__ */


#ifndef __RotationEffect_INTERFACE_DEFINED__
#define __RotationEffect_INTERFACE_DEFINED__

/* interface RotationEffect */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_RotationEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934E8-5A91-11CF-8700-00AA0060263B")
    RotationEffect : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_By( 
            /* [retval][out] */ single *By) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_By( 
            /* [in] */ single By) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_From( 
            /* [retval][out] */ single *From) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_From( 
            /* [in] */ single From) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_To( 
            /* [retval][out] */ single *To) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_To( 
            /* [in] */ single To) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RotationEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            RotationEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            RotationEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            RotationEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            RotationEffect * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            RotationEffect * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            RotationEffect * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            RotationEffect * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            RotationEffect * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            RotationEffect * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_By )( 
            RotationEffect * This,
            /* [retval][out] */ single *By);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_By )( 
            RotationEffect * This,
            /* [in] */ single By);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_From )( 
            RotationEffect * This,
            /* [retval][out] */ single *From);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_From )( 
            RotationEffect * This,
            /* [in] */ single From);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_To )( 
            RotationEffect * This,
            /* [retval][out] */ single *To);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_To )( 
            RotationEffect * This,
            /* [in] */ single To);
        
        END_INTERFACE
    } RotationEffectVtbl;

    interface RotationEffect
    {
        CONST_VTBL struct RotationEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define RotationEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define RotationEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define RotationEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define RotationEffect_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define RotationEffect_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define RotationEffect_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define RotationEffect_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define RotationEffect_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define RotationEffect_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define RotationEffect_get_By(This,By)	\
    ( (This)->lpVtbl -> get_By(This,By) ) 

#define RotationEffect_put_By(This,By)	\
    ( (This)->lpVtbl -> put_By(This,By) ) 

#define RotationEffect_get_From(This,From)	\
    ( (This)->lpVtbl -> get_From(This,From) ) 

#define RotationEffect_put_From(This,From)	\
    ( (This)->lpVtbl -> put_From(This,From) ) 

#define RotationEffect_get_To(This,To)	\
    ( (This)->lpVtbl -> get_To(This,To) ) 

#define RotationEffect_put_To(This,To)	\
    ( (This)->lpVtbl -> put_To(This,To) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __RotationEffect_INTERFACE_DEFINED__ */


#ifndef __PropertyEffect_INTERFACE_DEFINED__
#define __PropertyEffect_INTERFACE_DEFINED__

/* interface PropertyEffect */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_PropertyEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934E9-5A91-11CF-8700-00AA0060263B")
    PropertyEffect : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Property( 
            /* [retval][out] */ MsoAnimProperty *Property) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Property( 
            /* [in] */ MsoAnimProperty Property) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Points( 
            /* [retval][out] */ AnimationPoints **Points) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_From( 
            /* [retval][out] */ VARIANT *From) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_From( 
            /* [in] */ VARIANT From) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_To( 
            /* [retval][out] */ VARIANT *To) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_To( 
            /* [in] */ VARIANT To) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PropertyEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PropertyEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PropertyEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PropertyEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PropertyEffect * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PropertyEffect * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PropertyEffect * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PropertyEffect * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            PropertyEffect * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PropertyEffect * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Property )( 
            PropertyEffect * This,
            /* [retval][out] */ MsoAnimProperty *Property);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Property )( 
            PropertyEffect * This,
            /* [in] */ MsoAnimProperty Property);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Points )( 
            PropertyEffect * This,
            /* [retval][out] */ AnimationPoints **Points);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_From )( 
            PropertyEffect * This,
            /* [retval][out] */ VARIANT *From);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_From )( 
            PropertyEffect * This,
            /* [in] */ VARIANT From);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_To )( 
            PropertyEffect * This,
            /* [retval][out] */ VARIANT *To);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_To )( 
            PropertyEffect * This,
            /* [in] */ VARIANT To);
        
        END_INTERFACE
    } PropertyEffectVtbl;

    interface PropertyEffect
    {
        CONST_VTBL struct PropertyEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PropertyEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PropertyEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PropertyEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PropertyEffect_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PropertyEffect_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PropertyEffect_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PropertyEffect_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PropertyEffect_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define PropertyEffect_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define PropertyEffect_get_Property(This,Property)	\
    ( (This)->lpVtbl -> get_Property(This,Property) ) 

#define PropertyEffect_put_Property(This,Property)	\
    ( (This)->lpVtbl -> put_Property(This,Property) ) 

#define PropertyEffect_get_Points(This,Points)	\
    ( (This)->lpVtbl -> get_Points(This,Points) ) 

#define PropertyEffect_get_From(This,From)	\
    ( (This)->lpVtbl -> get_From(This,From) ) 

#define PropertyEffect_put_From(This,From)	\
    ( (This)->lpVtbl -> put_From(This,From) ) 

#define PropertyEffect_get_To(This,To)	\
    ( (This)->lpVtbl -> get_To(This,To) ) 

#define PropertyEffect_put_To(This,To)	\
    ( (This)->lpVtbl -> put_To(This,To) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PropertyEffect_INTERFACE_DEFINED__ */


#ifndef __AnimationPoints_INTERFACE_DEFINED__
#define __AnimationPoints_INTERFACE_DEFINED__

/* interface AnimationPoints */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_AnimationPoints;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934EA-5A91-11CF-8700-00AA0060263B")
    AnimationPoints : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ AnimationPoint **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ AnimationPoint **Add) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Smooth( 
            /* [retval][out] */ MsoTriState *Smooth) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Smooth( 
            /* [in] */ MsoTriState Smooth) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AnimationPointsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AnimationPoints * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AnimationPoints * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AnimationPoints * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AnimationPoints * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AnimationPoints * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AnimationPoints * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AnimationPoints * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            AnimationPoints * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            AnimationPoints * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            AnimationPoints * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            AnimationPoints * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AnimationPoints * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            AnimationPoints * This,
            /* [in] */ int Index,
            /* [retval][out] */ AnimationPoint **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            AnimationPoints * This,
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ AnimationPoint **Add);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Smooth )( 
            AnimationPoints * This,
            /* [retval][out] */ MsoTriState *Smooth);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Smooth )( 
            AnimationPoints * This,
            /* [in] */ MsoTriState Smooth);
        
        END_INTERFACE
    } AnimationPointsVtbl;

    interface AnimationPoints
    {
        CONST_VTBL struct AnimationPointsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AnimationPoints_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AnimationPoints_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AnimationPoints_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AnimationPoints_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AnimationPoints_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AnimationPoints_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AnimationPoints_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AnimationPoints_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define AnimationPoints__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define AnimationPoints_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define AnimationPoints_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define AnimationPoints_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define AnimationPoints_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define AnimationPoints_Add(This,Index,Add)	\
    ( (This)->lpVtbl -> Add(This,Index,Add) ) 

#define AnimationPoints_get_Smooth(This,Smooth)	\
    ( (This)->lpVtbl -> get_Smooth(This,Smooth) ) 

#define AnimationPoints_put_Smooth(This,Smooth)	\
    ( (This)->lpVtbl -> put_Smooth(This,Smooth) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AnimationPoints_INTERFACE_DEFINED__ */


#ifndef __AnimationPoint_INTERFACE_DEFINED__
#define __AnimationPoint_INTERFACE_DEFINED__

/* interface AnimationPoint */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_AnimationPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934EB-5A91-11CF-8700-00AA0060263B")
    AnimationPoint : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Time( 
            /* [retval][out] */ single *Time) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Time( 
            /* [in] */ single Time) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ VARIANT *Value) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ VARIANT Value) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Formula( 
            /* [retval][out] */ BSTR *Formula) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Formula( 
            /* [in] */ BSTR Formula) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AnimationPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AnimationPoint * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AnimationPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AnimationPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AnimationPoint * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AnimationPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AnimationPoint * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AnimationPoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            AnimationPoint * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AnimationPoint * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            AnimationPoint * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Time )( 
            AnimationPoint * This,
            /* [retval][out] */ single *Time);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Time )( 
            AnimationPoint * This,
            /* [in] */ single Time);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            AnimationPoint * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            AnimationPoint * This,
            /* [in] */ VARIANT Value);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Formula )( 
            AnimationPoint * This,
            /* [retval][out] */ BSTR *Formula);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Formula )( 
            AnimationPoint * This,
            /* [in] */ BSTR Formula);
        
        END_INTERFACE
    } AnimationPointVtbl;

    interface AnimationPoint
    {
        CONST_VTBL struct AnimationPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AnimationPoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AnimationPoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AnimationPoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AnimationPoint_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AnimationPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AnimationPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AnimationPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AnimationPoint_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define AnimationPoint_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define AnimationPoint_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define AnimationPoint_get_Time(This,Time)	\
    ( (This)->lpVtbl -> get_Time(This,Time) ) 

#define AnimationPoint_put_Time(This,Time)	\
    ( (This)->lpVtbl -> put_Time(This,Time) ) 

#define AnimationPoint_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define AnimationPoint_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define AnimationPoint_get_Formula(This,Formula)	\
    ( (This)->lpVtbl -> get_Formula(This,Formula) ) 

#define AnimationPoint_put_Formula(This,Formula)	\
    ( (This)->lpVtbl -> put_Formula(This,Formula) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AnimationPoint_INTERFACE_DEFINED__ */


#ifndef __CanvasShapes_INTERFACE_DEFINED__
#define __CanvasShapes_INTERFACE_DEFINED__

/* interface CanvasShapes */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_CanvasShapes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934EC-5A91-11CF-8700-00AA0060263B")
    CanvasShapes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ int *Count) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Shape **Item) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **_NewEnum) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddCallout( 
            /* [in] */ MsoCalloutType Type,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Callout) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddConnector( 
            /* [in] */ MsoConnectorType Type,
            /* [in] */ single BeginX,
            /* [in] */ single BeginY,
            /* [in] */ single EndX,
            /* [in] */ single EndY,
            /* [retval][out] */ Shape **Connector) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddCurve( 
            /* [in] */ VARIANT SafeArrayOfPoints,
            /* [retval][out] */ Shape **Curve) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddLabel( 
            /* [in] */ MsoTextOrientation Orientation,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Label) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddLine( 
            /* [in] */ single BeginX,
            /* [in] */ single BeginY,
            /* [in] */ single EndX,
            /* [in] */ single EndY,
            /* [retval][out] */ Shape **Line) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPicture( 
            /* [in] */ BSTR FileName,
            /* [in] */ MsoTriState LinkToFile,
            /* [in] */ MsoTriState SaveWithDocument,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **Picture) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPolyline( 
            /* [in] */ VARIANT SafeArrayOfPoints,
            /* [retval][out] */ Shape **Polyline) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddShape( 
            /* [in] */ MsoAutoShapeType Type,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Shape) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddTextEffect( 
            /* [in] */ MsoPresetTextEffect PresetTextEffect,
            /* [in] */ BSTR Text,
            /* [in] */ BSTR FontName,
            /* [in] */ single FontSize,
            /* [in] */ MsoTriState FontBold,
            /* [in] */ MsoTriState FontItalic,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [retval][out] */ Shape **TextEffect) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddTextbox( 
            /* [in] */ MsoTextOrientation Orientation,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Textbox) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE BuildFreeform( 
            /* [in] */ MsoEditingType EditingType,
            /* [in] */ single X1,
            /* [in] */ single Y1,
            /* [retval][out] */ FreeformBuilder **FreeformBuilder) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ ShapeRange **Range) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectAll( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Background( 
            /* [retval][out] */ Shape **Background) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CanvasShapesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CanvasShapes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CanvasShapes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CanvasShapes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CanvasShapes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CanvasShapes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CanvasShapes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CanvasShapes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CanvasShapes * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            CanvasShapes * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CanvasShapes * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            CanvasShapes * This,
            /* [retval][out] */ int *Count);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            CanvasShapes * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Shape **Item);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            CanvasShapes * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddCallout )( 
            CanvasShapes * This,
            /* [in] */ MsoCalloutType Type,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Callout);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddConnector )( 
            CanvasShapes * This,
            /* [in] */ MsoConnectorType Type,
            /* [in] */ single BeginX,
            /* [in] */ single BeginY,
            /* [in] */ single EndX,
            /* [in] */ single EndY,
            /* [retval][out] */ Shape **Connector);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddCurve )( 
            CanvasShapes * This,
            /* [in] */ VARIANT SafeArrayOfPoints,
            /* [retval][out] */ Shape **Curve);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddLabel )( 
            CanvasShapes * This,
            /* [in] */ MsoTextOrientation Orientation,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Label);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddLine )( 
            CanvasShapes * This,
            /* [in] */ single BeginX,
            /* [in] */ single BeginY,
            /* [in] */ single EndX,
            /* [in] */ single EndY,
            /* [retval][out] */ Shape **Line);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPicture )( 
            CanvasShapes * This,
            /* [in] */ BSTR FileName,
            /* [in] */ MsoTriState LinkToFile,
            /* [in] */ MsoTriState SaveWithDocument,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [defaultvalue][optional][in] */ single Width,
            /* [defaultvalue][optional][in] */ single Height,
            /* [retval][out] */ Shape **Picture);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPolyline )( 
            CanvasShapes * This,
            /* [in] */ VARIANT SafeArrayOfPoints,
            /* [retval][out] */ Shape **Polyline);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddShape )( 
            CanvasShapes * This,
            /* [in] */ MsoAutoShapeType Type,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Shape);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddTextEffect )( 
            CanvasShapes * This,
            /* [in] */ MsoPresetTextEffect PresetTextEffect,
            /* [in] */ BSTR Text,
            /* [in] */ BSTR FontName,
            /* [in] */ single FontSize,
            /* [in] */ MsoTriState FontBold,
            /* [in] */ MsoTriState FontItalic,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [retval][out] */ Shape **TextEffect);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddTextbox )( 
            CanvasShapes * This,
            /* [in] */ MsoTextOrientation Orientation,
            /* [in] */ single Left,
            /* [in] */ single Top,
            /* [in] */ single Width,
            /* [in] */ single Height,
            /* [retval][out] */ Shape **Textbox);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BuildFreeform )( 
            CanvasShapes * This,
            /* [in] */ MsoEditingType EditingType,
            /* [in] */ single X1,
            /* [in] */ single Y1,
            /* [retval][out] */ FreeformBuilder **FreeformBuilder);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Range )( 
            CanvasShapes * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ ShapeRange **Range);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectAll )( 
            CanvasShapes * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Background )( 
            CanvasShapes * This,
            /* [retval][out] */ Shape **Background);
        
        END_INTERFACE
    } CanvasShapesVtbl;

    interface CanvasShapes
    {
        CONST_VTBL struct CanvasShapesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CanvasShapes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CanvasShapes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CanvasShapes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CanvasShapes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CanvasShapes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CanvasShapes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CanvasShapes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CanvasShapes_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define CanvasShapes_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define CanvasShapes_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define CanvasShapes_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 

#define CanvasShapes_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define CanvasShapes_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define CanvasShapes_AddCallout(This,Type,Left,Top,Width,Height,Callout)	\
    ( (This)->lpVtbl -> AddCallout(This,Type,Left,Top,Width,Height,Callout) ) 

#define CanvasShapes_AddConnector(This,Type,BeginX,BeginY,EndX,EndY,Connector)	\
    ( (This)->lpVtbl -> AddConnector(This,Type,BeginX,BeginY,EndX,EndY,Connector) ) 

#define CanvasShapes_AddCurve(This,SafeArrayOfPoints,Curve)	\
    ( (This)->lpVtbl -> AddCurve(This,SafeArrayOfPoints,Curve) ) 

#define CanvasShapes_AddLabel(This,Orientation,Left,Top,Width,Height,Label)	\
    ( (This)->lpVtbl -> AddLabel(This,Orientation,Left,Top,Width,Height,Label) ) 

#define CanvasShapes_AddLine(This,BeginX,BeginY,EndX,EndY,Line)	\
    ( (This)->lpVtbl -> AddLine(This,BeginX,BeginY,EndX,EndY,Line) ) 

#define CanvasShapes_AddPicture(This,FileName,LinkToFile,SaveWithDocument,Left,Top,Width,Height,Picture)	\
    ( (This)->lpVtbl -> AddPicture(This,FileName,LinkToFile,SaveWithDocument,Left,Top,Width,Height,Picture) ) 

#define CanvasShapes_AddPolyline(This,SafeArrayOfPoints,Polyline)	\
    ( (This)->lpVtbl -> AddPolyline(This,SafeArrayOfPoints,Polyline) ) 

#define CanvasShapes_AddShape(This,Type,Left,Top,Width,Height,Shape)	\
    ( (This)->lpVtbl -> AddShape(This,Type,Left,Top,Width,Height,Shape) ) 

#define CanvasShapes_AddTextEffect(This,PresetTextEffect,Text,FontName,FontSize,FontBold,FontItalic,Left,Top,TextEffect)	\
    ( (This)->lpVtbl -> AddTextEffect(This,PresetTextEffect,Text,FontName,FontSize,FontBold,FontItalic,Left,Top,TextEffect) ) 

#define CanvasShapes_AddTextbox(This,Orientation,Left,Top,Width,Height,Textbox)	\
    ( (This)->lpVtbl -> AddTextbox(This,Orientation,Left,Top,Width,Height,Textbox) ) 

#define CanvasShapes_BuildFreeform(This,EditingType,X1,Y1,FreeformBuilder)	\
    ( (This)->lpVtbl -> BuildFreeform(This,EditingType,X1,Y1,FreeformBuilder) ) 

#define CanvasShapes_Range(This,Index,Range)	\
    ( (This)->lpVtbl -> Range(This,Index,Range) ) 

#define CanvasShapes_SelectAll(This)	\
    ( (This)->lpVtbl -> SelectAll(This) ) 

#define CanvasShapes_get_Background(This,Background)	\
    ( (This)->lpVtbl -> get_Background(This,Background) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CanvasShapes_INTERFACE_DEFINED__ */


#ifndef __AutoCorrect_INTERFACE_DEFINED__
#define __AutoCorrect_INTERFACE_DEFINED__

/* interface AutoCorrect */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_AutoCorrect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934ED-5A91-11CF-8700-00AA0060263B")
    AutoCorrect : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayAutoCorrectOptions( 
            /* [retval][out] */ VARIANT_BOOL *DisplayAutoCorrectOptions) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayAutoCorrectOptions( 
            /* [in] */ VARIANT_BOOL DisplayAutoCorrectOptions) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayAutoLayoutOptions( 
            /* [retval][out] */ VARIANT_BOOL *DisplayAutoLayoutOptions) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayAutoLayoutOptions( 
            /* [in] */ VARIANT_BOOL DisplayAutoLayoutOptions) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AutoCorrectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AutoCorrect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AutoCorrect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AutoCorrect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AutoCorrect * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AutoCorrect * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AutoCorrect * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AutoCorrect * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayAutoCorrectOptions )( 
            AutoCorrect * This,
            /* [retval][out] */ VARIANT_BOOL *DisplayAutoCorrectOptions);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayAutoCorrectOptions )( 
            AutoCorrect * This,
            /* [in] */ VARIANT_BOOL DisplayAutoCorrectOptions);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayAutoLayoutOptions )( 
            AutoCorrect * This,
            /* [retval][out] */ VARIANT_BOOL *DisplayAutoLayoutOptions);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayAutoLayoutOptions )( 
            AutoCorrect * This,
            /* [in] */ VARIANT_BOOL DisplayAutoLayoutOptions);
        
        END_INTERFACE
    } AutoCorrectVtbl;

    interface AutoCorrect
    {
        CONST_VTBL struct AutoCorrectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AutoCorrect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AutoCorrect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AutoCorrect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AutoCorrect_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AutoCorrect_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AutoCorrect_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AutoCorrect_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AutoCorrect_get_DisplayAutoCorrectOptions(This,DisplayAutoCorrectOptions)	\
    ( (This)->lpVtbl -> get_DisplayAutoCorrectOptions(This,DisplayAutoCorrectOptions) ) 

#define AutoCorrect_put_DisplayAutoCorrectOptions(This,DisplayAutoCorrectOptions)	\
    ( (This)->lpVtbl -> put_DisplayAutoCorrectOptions(This,DisplayAutoCorrectOptions) ) 

#define AutoCorrect_get_DisplayAutoLayoutOptions(This,DisplayAutoLayoutOptions)	\
    ( (This)->lpVtbl -> get_DisplayAutoLayoutOptions(This,DisplayAutoLayoutOptions) ) 

#define AutoCorrect_put_DisplayAutoLayoutOptions(This,DisplayAutoLayoutOptions)	\
    ( (This)->lpVtbl -> put_DisplayAutoLayoutOptions(This,DisplayAutoLayoutOptions) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AutoCorrect_INTERFACE_DEFINED__ */


#ifndef __Options_INTERFACE_DEFINED__
#define __Options_INTERFACE_DEFINED__

/* interface Options */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Options;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934EE-5A91-11CF-8700-00AA0060263B")
    Options : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayPasteOptions( 
            /* [retval][out] */ MsoTriState *DisplayPasteOptions) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayPasteOptions( 
            /* [in] */ MsoTriState DisplayPasteOptions) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_DoNotPromptForConvert( 
            /* [retval][out] */ MsoTriState *DoNotPromptForConvert) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_DoNotPromptForConvert( 
            /* [in] */ MsoTriState DoNotPromptForConvert) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowCoauthoringMergeChanges( 
            /* [retval][out] */ VARIANT_BOOL *ShowCoauthoringMergeChanges) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowCoauthoringMergeChanges( 
            /* [in] */ VARIANT_BOOL ShowCoauthoringMergeChanges) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Options * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Options * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Options * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Options * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Options * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Options * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Options * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayPasteOptions )( 
            Options * This,
            /* [retval][out] */ MsoTriState *DisplayPasteOptions);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayPasteOptions )( 
            Options * This,
            /* [in] */ MsoTriState DisplayPasteOptions);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DoNotPromptForConvert )( 
            Options * This,
            /* [retval][out] */ MsoTriState *DoNotPromptForConvert);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DoNotPromptForConvert )( 
            Options * This,
            /* [in] */ MsoTriState DoNotPromptForConvert);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowCoauthoringMergeChanges )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *ShowCoauthoringMergeChanges);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowCoauthoringMergeChanges )( 
            Options * This,
            /* [in] */ VARIANT_BOOL ShowCoauthoringMergeChanges);
        
        END_INTERFACE
    } OptionsVtbl;

    interface Options
    {
        CONST_VTBL struct OptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Options_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Options_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Options_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Options_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Options_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Options_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Options_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Options_get_DisplayPasteOptions(This,DisplayPasteOptions)	\
    ( (This)->lpVtbl -> get_DisplayPasteOptions(This,DisplayPasteOptions) ) 

#define Options_put_DisplayPasteOptions(This,DisplayPasteOptions)	\
    ( (This)->lpVtbl -> put_DisplayPasteOptions(This,DisplayPasteOptions) ) 

#define Options_get_DoNotPromptForConvert(This,DoNotPromptForConvert)	\
    ( (This)->lpVtbl -> get_DoNotPromptForConvert(This,DoNotPromptForConvert) ) 

#define Options_put_DoNotPromptForConvert(This,DoNotPromptForConvert)	\
    ( (This)->lpVtbl -> put_DoNotPromptForConvert(This,DoNotPromptForConvert) ) 

#define Options_get_ShowCoauthoringMergeChanges(This,ShowCoauthoringMergeChanges)	\
    ( (This)->lpVtbl -> get_ShowCoauthoringMergeChanges(This,ShowCoauthoringMergeChanges) ) 

#define Options_put_ShowCoauthoringMergeChanges(This,ShowCoauthoringMergeChanges)	\
    ( (This)->lpVtbl -> put_ShowCoauthoringMergeChanges(This,ShowCoauthoringMergeChanges) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Options_INTERFACE_DEFINED__ */


#ifndef __CommandEffect_INTERFACE_DEFINED__
#define __CommandEffect_INTERFACE_DEFINED__

/* interface CommandEffect */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_CommandEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934EF-5A91-11CF-8700-00AA0060263B")
    CommandEffect : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoAnimCommandType *Type) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ MsoAnimCommandType Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Command( 
            /* [retval][out] */ BSTR *Command) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Command( 
            /* [in] */ BSTR Command) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_bookmark( 
            /* [retval][out] */ BSTR *bookmark) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_bookmark( 
            /* [in] */ BSTR bookmark) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CommandEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CommandEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CommandEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CommandEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CommandEffect * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CommandEffect * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CommandEffect * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CommandEffect * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CommandEffect * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CommandEffect * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            CommandEffect * This,
            /* [retval][out] */ MsoAnimCommandType *Type);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            CommandEffect * This,
            /* [in] */ MsoAnimCommandType Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Command )( 
            CommandEffect * This,
            /* [retval][out] */ BSTR *Command);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Command )( 
            CommandEffect * This,
            /* [in] */ BSTR Command);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_bookmark )( 
            CommandEffect * This,
            /* [retval][out] */ BSTR *bookmark);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_bookmark )( 
            CommandEffect * This,
            /* [in] */ BSTR bookmark);
        
        END_INTERFACE
    } CommandEffectVtbl;

    interface CommandEffect
    {
        CONST_VTBL struct CommandEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CommandEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CommandEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CommandEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CommandEffect_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CommandEffect_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CommandEffect_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CommandEffect_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CommandEffect_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define CommandEffect_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define CommandEffect_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define CommandEffect_put_Type(This,Type)	\
    ( (This)->lpVtbl -> put_Type(This,Type) ) 

#define CommandEffect_get_Command(This,Command)	\
    ( (This)->lpVtbl -> get_Command(This,Command) ) 

#define CommandEffect_put_Command(This,Command)	\
    ( (This)->lpVtbl -> put_Command(This,Command) ) 

#define CommandEffect_get_bookmark(This,bookmark)	\
    ( (This)->lpVtbl -> get_bookmark(This,bookmark) ) 

#define CommandEffect_put_bookmark(This,bookmark)	\
    ( (This)->lpVtbl -> put_bookmark(This,bookmark) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CommandEffect_INTERFACE_DEFINED__ */


#ifndef __FilterEffect_INTERFACE_DEFINED__
#define __FilterEffect_INTERFACE_DEFINED__

/* interface FilterEffect */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_FilterEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934F0-5A91-11CF-8700-00AA0060263B")
    FilterEffect : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoAnimFilterEffectType *Type) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ MsoAnimFilterEffectType Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Subtype( 
            /* [retval][out] */ MsoAnimFilterEffectSubtype *Subtype) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Subtype( 
            /* [in] */ MsoAnimFilterEffectSubtype Subtype) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Reveal( 
            /* [retval][out] */ MsoTriState *Reveal) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Reveal( 
            /* [in] */ MsoTriState Reveal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FilterEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FilterEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FilterEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FilterEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FilterEffect * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FilterEffect * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FilterEffect * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FilterEffect * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            FilterEffect * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FilterEffect * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            FilterEffect * This,
            /* [retval][out] */ MsoAnimFilterEffectType *Type);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            FilterEffect * This,
            /* [in] */ MsoAnimFilterEffectType Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Subtype )( 
            FilterEffect * This,
            /* [retval][out] */ MsoAnimFilterEffectSubtype *Subtype);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Subtype )( 
            FilterEffect * This,
            /* [in] */ MsoAnimFilterEffectSubtype Subtype);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Reveal )( 
            FilterEffect * This,
            /* [retval][out] */ MsoTriState *Reveal);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Reveal )( 
            FilterEffect * This,
            /* [in] */ MsoTriState Reveal);
        
        END_INTERFACE
    } FilterEffectVtbl;

    interface FilterEffect
    {
        CONST_VTBL struct FilterEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FilterEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FilterEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FilterEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FilterEffect_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FilterEffect_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FilterEffect_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FilterEffect_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FilterEffect_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define FilterEffect_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define FilterEffect_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define FilterEffect_put_Type(This,Type)	\
    ( (This)->lpVtbl -> put_Type(This,Type) ) 

#define FilterEffect_get_Subtype(This,Subtype)	\
    ( (This)->lpVtbl -> get_Subtype(This,Subtype) ) 

#define FilterEffect_put_Subtype(This,Subtype)	\
    ( (This)->lpVtbl -> put_Subtype(This,Subtype) ) 

#define FilterEffect_get_Reveal(This,Reveal)	\
    ( (This)->lpVtbl -> get_Reveal(This,Reveal) ) 

#define FilterEffect_put_Reveal(This,Reveal)	\
    ( (This)->lpVtbl -> put_Reveal(This,Reveal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FilterEffect_INTERFACE_DEFINED__ */


#ifndef __SetEffect_INTERFACE_DEFINED__
#define __SetEffect_INTERFACE_DEFINED__

/* interface SetEffect */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_SetEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934F1-5A91-11CF-8700-00AA0060263B")
    SetEffect : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Property( 
            /* [retval][out] */ MsoAnimProperty *Property) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Property( 
            /* [in] */ MsoAnimProperty Property) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_To( 
            /* [retval][out] */ VARIANT *To) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_To( 
            /* [in] */ VARIANT To) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SetEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SetEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SetEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SetEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SetEffect * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SetEffect * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SetEffect * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SetEffect * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SetEffect * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SetEffect * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Property )( 
            SetEffect * This,
            /* [retval][out] */ MsoAnimProperty *Property);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Property )( 
            SetEffect * This,
            /* [in] */ MsoAnimProperty Property);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_To )( 
            SetEffect * This,
            /* [retval][out] */ VARIANT *To);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_To )( 
            SetEffect * This,
            /* [in] */ VARIANT To);
        
        END_INTERFACE
    } SetEffectVtbl;

    interface SetEffect
    {
        CONST_VTBL struct SetEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SetEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SetEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SetEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SetEffect_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SetEffect_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SetEffect_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SetEffect_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SetEffect_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define SetEffect_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define SetEffect_get_Property(This,Property)	\
    ( (This)->lpVtbl -> get_Property(This,Property) ) 

#define SetEffect_put_Property(This,Property)	\
    ( (This)->lpVtbl -> put_Property(This,Property) ) 

#define SetEffect_get_To(This,To)	\
    ( (This)->lpVtbl -> get_To(This,To) ) 

#define SetEffect_put_To(This,To)	\
    ( (This)->lpVtbl -> put_To(This,To) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SetEffect_INTERFACE_DEFINED__ */


#ifndef __CustomLayouts_INTERFACE_DEFINED__
#define __CustomLayouts_INTERFACE_DEFINED__

/* interface CustomLayouts */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_CustomLayouts;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934F2-5A91-11CF-8700-00AA0060263B")
    CustomLayouts : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ CustomLayout **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ int Index,
            /* [retval][out] */ CustomLayout **Add) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paste( 
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ CustomLayout **Paste) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CustomLayoutsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CustomLayouts * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CustomLayouts * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CustomLayouts * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CustomLayouts * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CustomLayouts * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CustomLayouts * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CustomLayouts * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            CustomLayouts * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            CustomLayouts * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            CustomLayouts * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CustomLayouts * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CustomLayouts * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            CustomLayouts * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ CustomLayout **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            CustomLayouts * This,
            /* [in] */ int Index,
            /* [retval][out] */ CustomLayout **Add);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paste )( 
            CustomLayouts * This,
            /* [defaultvalue][optional][in] */ int Index,
            /* [retval][out] */ CustomLayout **Paste);
        
        END_INTERFACE
    } CustomLayoutsVtbl;

    interface CustomLayouts
    {
        CONST_VTBL struct CustomLayoutsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CustomLayouts_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CustomLayouts_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CustomLayouts_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CustomLayouts_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CustomLayouts_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CustomLayouts_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CustomLayouts_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CustomLayouts_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define CustomLayouts__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define CustomLayouts_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define CustomLayouts_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define CustomLayouts_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define CustomLayouts_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define CustomLayouts_Add(This,Index,Add)	\
    ( (This)->lpVtbl -> Add(This,Index,Add) ) 

#define CustomLayouts_Paste(This,Index,Paste)	\
    ( (This)->lpVtbl -> Paste(This,Index,Paste) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CustomLayouts_INTERFACE_DEFINED__ */


#ifndef __CustomLayout_INTERFACE_DEFINED__
#define __CustomLayout_INTERFACE_DEFINED__

/* interface CustomLayout */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_CustomLayout;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934F3-5A91-11CF-8700-00AA0060263B")
    CustomLayout : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shapes( 
            /* [retval][out] */ Shapes **Shapes) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeadersFooters( 
            /* [retval][out] */ HeadersFooters **HeadersFooters) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Background( 
            /* [retval][out] */ ShapeRange **Background) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ single *Height) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ single *Width) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hyperlinks( 
            /* [retval][out] */ Hyperlinks **Hyperlinks) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Design( 
            /* [retval][out] */ Design **Design) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TimeLine( 
            /* [retval][out] */ TimeLine **TimeLine) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SlideShowTransition( 
            /* [retval][out] */ SlideShowTransition **SlideShowTransition) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchingName( 
            /* [retval][out] */ BSTR *MatchingName) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchingName( 
            /* [in] */ BSTR MatchingName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Preserved( 
            /* [retval][out] */ MsoTriState *Preserved) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Preserved( 
            /* [in] */ MsoTriState Preserved) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ int *Index) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Duplicate( 
            /* [retval][out] */ CustomLayout **Duplicate) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveTo( 
            /* [in] */ int toPos) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayMasterShapes( 
            /* [retval][out] */ MsoTriState *DisplayMasterShapes) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayMasterShapes( 
            /* [in] */ MsoTriState DisplayMasterShapes) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FollowMasterBackground( 
            /* [retval][out] */ MsoTriState *FollowMasterBackground) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FollowMasterBackground( 
            /* [in] */ MsoTriState FollowMasterBackground) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ThemeColorScheme( 
            /* [retval][out] */ /* external definition not present */ ThemeColorScheme **ThemeColorScheme) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomerData( 
            /* [retval][out] */ CustomerData **CustomerData) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Guides( 
            /* [retval][out] */ Guides **Guides) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CustomLayoutVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CustomLayout * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CustomLayout * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CustomLayout * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CustomLayout * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CustomLayout * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CustomLayout * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CustomLayout * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CustomLayout * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CustomLayout * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shapes )( 
            CustomLayout * This,
            /* [retval][out] */ Shapes **Shapes);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeadersFooters )( 
            CustomLayout * This,
            /* [retval][out] */ HeadersFooters **HeadersFooters);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Background )( 
            CustomLayout * This,
            /* [retval][out] */ ShapeRange **Background);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CustomLayout * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CustomLayout * This,
            /* [in] */ BSTR Name);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            CustomLayout * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            CustomLayout * This,
            /* [retval][out] */ single *Height);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            CustomLayout * This,
            /* [retval][out] */ single *Width);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            CustomLayout * This,
            /* [retval][out] */ Hyperlinks **Hyperlinks);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Design )( 
            CustomLayout * This,
            /* [retval][out] */ Design **Design);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TimeLine )( 
            CustomLayout * This,
            /* [retval][out] */ TimeLine **TimeLine);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SlideShowTransition )( 
            CustomLayout * This,
            /* [retval][out] */ SlideShowTransition **SlideShowTransition);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchingName )( 
            CustomLayout * This,
            /* [retval][out] */ BSTR *MatchingName);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchingName )( 
            CustomLayout * This,
            /* [in] */ BSTR MatchingName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Preserved )( 
            CustomLayout * This,
            /* [retval][out] */ MsoTriState *Preserved);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Preserved )( 
            CustomLayout * This,
            /* [in] */ MsoTriState Preserved);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            CustomLayout * This,
            /* [retval][out] */ int *Index);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            CustomLayout * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            CustomLayout * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            CustomLayout * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Duplicate )( 
            CustomLayout * This,
            /* [retval][out] */ CustomLayout **Duplicate);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveTo )( 
            CustomLayout * This,
            /* [in] */ int toPos);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayMasterShapes )( 
            CustomLayout * This,
            /* [retval][out] */ MsoTriState *DisplayMasterShapes);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayMasterShapes )( 
            CustomLayout * This,
            /* [in] */ MsoTriState DisplayMasterShapes);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FollowMasterBackground )( 
            CustomLayout * This,
            /* [retval][out] */ MsoTriState *FollowMasterBackground);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FollowMasterBackground )( 
            CustomLayout * This,
            /* [in] */ MsoTriState FollowMasterBackground);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ThemeColorScheme )( 
            CustomLayout * This,
            /* [retval][out] */ /* external definition not present */ ThemeColorScheme **ThemeColorScheme);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomerData )( 
            CustomLayout * This,
            /* [retval][out] */ CustomerData **CustomerData);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Guides )( 
            CustomLayout * This,
            /* [retval][out] */ Guides **Guides);
        
        END_INTERFACE
    } CustomLayoutVtbl;

    interface CustomLayout
    {
        CONST_VTBL struct CustomLayoutVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CustomLayout_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CustomLayout_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CustomLayout_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CustomLayout_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CustomLayout_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CustomLayout_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CustomLayout_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CustomLayout_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define CustomLayout_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define CustomLayout_get_Shapes(This,Shapes)	\
    ( (This)->lpVtbl -> get_Shapes(This,Shapes) ) 

#define CustomLayout_get_HeadersFooters(This,HeadersFooters)	\
    ( (This)->lpVtbl -> get_HeadersFooters(This,HeadersFooters) ) 

#define CustomLayout_get_Background(This,Background)	\
    ( (This)->lpVtbl -> get_Background(This,Background) ) 

#define CustomLayout_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define CustomLayout_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define CustomLayout_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define CustomLayout_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define CustomLayout_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define CustomLayout_get_Hyperlinks(This,Hyperlinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,Hyperlinks) ) 

#define CustomLayout_get_Design(This,Design)	\
    ( (This)->lpVtbl -> get_Design(This,Design) ) 

#define CustomLayout_get_TimeLine(This,TimeLine)	\
    ( (This)->lpVtbl -> get_TimeLine(This,TimeLine) ) 

#define CustomLayout_get_SlideShowTransition(This,SlideShowTransition)	\
    ( (This)->lpVtbl -> get_SlideShowTransition(This,SlideShowTransition) ) 

#define CustomLayout_get_MatchingName(This,MatchingName)	\
    ( (This)->lpVtbl -> get_MatchingName(This,MatchingName) ) 

#define CustomLayout_put_MatchingName(This,MatchingName)	\
    ( (This)->lpVtbl -> put_MatchingName(This,MatchingName) ) 

#define CustomLayout_get_Preserved(This,Preserved)	\
    ( (This)->lpVtbl -> get_Preserved(This,Preserved) ) 

#define CustomLayout_put_Preserved(This,Preserved)	\
    ( (This)->lpVtbl -> put_Preserved(This,Preserved) ) 

#define CustomLayout_get_Index(This,Index)	\
    ( (This)->lpVtbl -> get_Index(This,Index) ) 

#define CustomLayout_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define CustomLayout_Cut(This)	\
    ( (This)->lpVtbl -> Cut(This) ) 

#define CustomLayout_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define CustomLayout_Duplicate(This,Duplicate)	\
    ( (This)->lpVtbl -> Duplicate(This,Duplicate) ) 

#define CustomLayout_MoveTo(This,toPos)	\
    ( (This)->lpVtbl -> MoveTo(This,toPos) ) 

#define CustomLayout_get_DisplayMasterShapes(This,DisplayMasterShapes)	\
    ( (This)->lpVtbl -> get_DisplayMasterShapes(This,DisplayMasterShapes) ) 

#define CustomLayout_put_DisplayMasterShapes(This,DisplayMasterShapes)	\
    ( (This)->lpVtbl -> put_DisplayMasterShapes(This,DisplayMasterShapes) ) 

#define CustomLayout_get_FollowMasterBackground(This,FollowMasterBackground)	\
    ( (This)->lpVtbl -> get_FollowMasterBackground(This,FollowMasterBackground) ) 

#define CustomLayout_put_FollowMasterBackground(This,FollowMasterBackground)	\
    ( (This)->lpVtbl -> put_FollowMasterBackground(This,FollowMasterBackground) ) 

#define CustomLayout_get_ThemeColorScheme(This,ThemeColorScheme)	\
    ( (This)->lpVtbl -> get_ThemeColorScheme(This,ThemeColorScheme) ) 

#define CustomLayout_get_CustomerData(This,CustomerData)	\
    ( (This)->lpVtbl -> get_CustomerData(This,CustomerData) ) 

#define CustomLayout_get_Guides(This,Guides)	\
    ( (This)->lpVtbl -> get_Guides(This,Guides) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CustomLayout_INTERFACE_DEFINED__ */


#ifndef __TableStyle_INTERFACE_DEFINED__
#define __TableStyle_INTERFACE_DEFINED__

/* interface TableStyle */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_TableStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934F5-5A91-11CF-8700-00AA0060263B")
    TableStyle : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ BSTR *Id) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TableStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TableStyle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TableStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TableStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TableStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TableStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TableStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TableStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            TableStyle * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            TableStyle * This,
            /* [retval][out] */ BSTR *Id);
        
        END_INTERFACE
    } TableStyleVtbl;

    interface TableStyle
    {
        CONST_VTBL struct TableStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TableStyle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TableStyle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TableStyle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TableStyle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TableStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TableStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TableStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TableStyle_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define TableStyle_get_Id(This,Id)	\
    ( (This)->lpVtbl -> get_Id(This,Id) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TableStyle_INTERFACE_DEFINED__ */


#ifndef __CustomerData_INTERFACE_DEFINED__
#define __CustomerData_INTERFACE_DEFINED__

/* interface CustomerData */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_CustomerData;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934F6-5A91-11CF-8700-00AA0060263B")
    CustomerData : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ BSTR Id,
            /* [retval][out] */ /* external definition not present */ CustomXMLPart **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [retval][out] */ /* external definition not present */ CustomXMLPart **Add) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ BSTR Id) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CustomerDataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CustomerData * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CustomerData * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CustomerData * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CustomerData * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CustomerData * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CustomerData * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CustomerData * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            CustomerData * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            CustomerData * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            CustomerData * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CustomerData * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CustomerData * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            CustomerData * This,
            /* [in] */ BSTR Id,
            /* [retval][out] */ /* external definition not present */ CustomXMLPart **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            CustomerData * This,
            /* [retval][out] */ /* external definition not present */ CustomXMLPart **Add);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            CustomerData * This,
            /* [in] */ BSTR Id);
        
        END_INTERFACE
    } CustomerDataVtbl;

    interface CustomerData
    {
        CONST_VTBL struct CustomerDataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CustomerData_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CustomerData_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CustomerData_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CustomerData_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CustomerData_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CustomerData_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CustomerData_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CustomerData_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define CustomerData__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define CustomerData_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define CustomerData_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define CustomerData_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define CustomerData_Item(This,Id,Item)	\
    ( (This)->lpVtbl -> Item(This,Id,Item) ) 

#define CustomerData_Add(This,Add)	\
    ( (This)->lpVtbl -> Add(This,Add) ) 

#define CustomerData_Delete(This,Id)	\
    ( (This)->lpVtbl -> Delete(This,Id) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CustomerData_INTERFACE_DEFINED__ */


#ifndef __Research_INTERFACE_DEFINED__
#define __Research_INTERFACE_DEFINED__

/* interface Research */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Research;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934F7-5A91-11CF-8700-00AA0060263B")
    Research : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Query( 
            /* [in] */ BSTR ServiceID,
            /* [optional][in] */ VARIANT *QueryString,
            /* [optional][in] */ VARIANT *QueryLanguage,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseSelection = 0,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL LaunchQuery = -1) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetLanguagePair( 
            /* [in] */ VARIANT *Language1,
            /* [in] */ VARIANT *Language2) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsResearchService( 
            /* [in] */ BSTR ServiceID,
            /* [retval][out] */ VARIANT_BOOL *IsResearchService) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ResearchVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Research * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Research * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Research * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Research * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Research * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Research * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Research * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Research * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Research * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Query )( 
            Research * This,
            /* [in] */ BSTR ServiceID,
            /* [optional][in] */ VARIANT *QueryString,
            /* [optional][in] */ VARIANT *QueryLanguage,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseSelection,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL LaunchQuery);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetLanguagePair )( 
            Research * This,
            /* [in] */ VARIANT *Language1,
            /* [in] */ VARIANT *Language2);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsResearchService )( 
            Research * This,
            /* [in] */ BSTR ServiceID,
            /* [retval][out] */ VARIANT_BOOL *IsResearchService);
        
        END_INTERFACE
    } ResearchVtbl;

    interface Research
    {
        CONST_VTBL struct ResearchVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Research_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Research_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Research_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Research_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Research_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Research_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Research_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Research_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Research_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Research_Query(This,ServiceID,QueryString,QueryLanguage,UseSelection,LaunchQuery)	\
    ( (This)->lpVtbl -> Query(This,ServiceID,QueryString,QueryLanguage,UseSelection,LaunchQuery) ) 

#define Research_SetLanguagePair(This,Language1,Language2)	\
    ( (This)->lpVtbl -> SetLanguagePair(This,Language1,Language2) ) 

#define Research_IsResearchService(This,ServiceID,IsResearchService)	\
    ( (This)->lpVtbl -> IsResearchService(This,ServiceID,IsResearchService) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Research_INTERFACE_DEFINED__ */


#ifndef __TableBackground_INTERFACE_DEFINED__
#define __TableBackground_INTERFACE_DEFINED__

/* interface TableBackground */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_TableBackground;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934F8-5A91-11CF-8700-00AA0060263B")
    TableBackground : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ FillFormat **Fill) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Picture( 
            /* [retval][out] */ PictureFormat **Picture) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Reflection( 
            /* [retval][out] */ /* external definition not present */ ReflectionFormat **Reflection) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ ShadowFormat **Shadow) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TableBackgroundVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TableBackground * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TableBackground * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TableBackground * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TableBackground * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TableBackground * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TableBackground * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TableBackground * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            TableBackground * This,
            /* [retval][out] */ FillFormat **Fill);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Picture )( 
            TableBackground * This,
            /* [retval][out] */ PictureFormat **Picture);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Reflection )( 
            TableBackground * This,
            /* [retval][out] */ /* external definition not present */ ReflectionFormat **Reflection);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            TableBackground * This,
            /* [retval][out] */ ShadowFormat **Shadow);
        
        END_INTERFACE
    } TableBackgroundVtbl;

    interface TableBackground
    {
        CONST_VTBL struct TableBackgroundVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TableBackground_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TableBackground_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TableBackground_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TableBackground_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TableBackground_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TableBackground_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TableBackground_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TableBackground_get_Fill(This,Fill)	\
    ( (This)->lpVtbl -> get_Fill(This,Fill) ) 

#define TableBackground_get_Picture(This,Picture)	\
    ( (This)->lpVtbl -> get_Picture(This,Picture) ) 

#define TableBackground_get_Reflection(This,Reflection)	\
    ( (This)->lpVtbl -> get_Reflection(This,Reflection) ) 

#define TableBackground_get_Shadow(This,Shadow)	\
    ( (This)->lpVtbl -> get_Shadow(This,Shadow) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TableBackground_INTERFACE_DEFINED__ */


#ifndef __TextFrame2_INTERFACE_DEFINED__
#define __TextFrame2_INTERFACE_DEFINED__

/* interface TextFrame2 */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_TextFrame2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("914934F9-5A91-11CF-8700-00AA0060263B")
    TextFrame2 : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **ppidisp) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *plCreator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarginBottom( 
            /* [retval][out] */ single *MarginBottom) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarginBottom( 
            /* [in] */ single MarginBottom) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarginLeft( 
            /* [retval][out] */ single *MarginLeft) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarginLeft( 
            /* [in] */ single MarginLeft) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarginRight( 
            /* [retval][out] */ single *MarginRight) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarginRight( 
            /* [in] */ single MarginRight) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarginTop( 
            /* [retval][out] */ single *MarginTop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarginTop( 
            /* [in] */ single MarginTop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ MsoTextOrientation *Orientation) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Orientation( 
            /* [in] */ MsoTextOrientation Orientation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalAnchor( 
            /* [retval][out] */ MsoHorizontalAnchor *HorizontalAnchor) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalAnchor( 
            /* [in] */ MsoHorizontalAnchor HorizontalAnchor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalAnchor( 
            /* [retval][out] */ MsoVerticalAnchor *VerticalAnchor) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalAnchor( 
            /* [in] */ MsoVerticalAnchor VerticalAnchor) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PathFormat( 
            /* [retval][out] */ MsoPathFormat *PathFormat) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PathFormat( 
            /* [in] */ MsoPathFormat PathFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WarpFormat( 
            /* [retval][out] */ MsoWarpFormat *WarpFormat) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WarpFormat( 
            /* [in] */ MsoWarpFormat WarpFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WordArtFormat( 
            /* [retval][out] */ MsoPresetTextEffect *WordArtFormat) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WordArtFormat( 
            /* [in] */ MsoPresetTextEffect WordArtFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WordWrap( 
            /* [retval][out] */ MsoTriState *WordWrap) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WordWrap( 
            /* [in] */ MsoTriState WordWrap) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoSize( 
            /* [retval][out] */ MsoAutoSize *AutoSize) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoSize( 
            /* [in] */ MsoAutoSize AutoSize) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ThreeD( 
            /* [retval][out] */ ThreeDFormat **ThreeD) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasText( 
            /* [retval][out] */ MsoTriState *pHasText) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextRange( 
            /* [retval][out] */ /* external definition not present */ TextRange2 **Range) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Column( 
            /* [retval][out] */ /* external definition not present */ TextColumn2 **Column) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Ruler( 
            /* [retval][out] */ /* external definition not present */ Ruler2 **Ruler) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteText( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoTextRotation( 
            /* [retval][out] */ MsoTriState *NoTextRotation) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoTextRotation( 
            /* [in] */ MsoTriState NoTextRotation) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextFrame2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextFrame2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextFrame2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextFrame2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextFrame2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextFrame2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextFrame2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextFrame2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TextFrame2 * This,
            /* [retval][out] */ IDispatch **ppidisp);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TextFrame2 * This,
            /* [retval][out] */ long *plCreator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextFrame2 * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarginBottom )( 
            TextFrame2 * This,
            /* [retval][out] */ single *MarginBottom);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarginBottom )( 
            TextFrame2 * This,
            /* [in] */ single MarginBottom);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarginLeft )( 
            TextFrame2 * This,
            /* [retval][out] */ single *MarginLeft);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarginLeft )( 
            TextFrame2 * This,
            /* [in] */ single MarginLeft);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarginRight )( 
            TextFrame2 * This,
            /* [retval][out] */ single *MarginRight);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarginRight )( 
            TextFrame2 * This,
            /* [in] */ single MarginRight);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarginTop )( 
            TextFrame2 * This,
            /* [retval][out] */ single *MarginTop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarginTop )( 
            TextFrame2 * This,
            /* [in] */ single MarginTop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Orientation )( 
            TextFrame2 * This,
            /* [retval][out] */ MsoTextOrientation *Orientation);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Orientation )( 
            TextFrame2 * This,
            /* [in] */ MsoTextOrientation Orientation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalAnchor )( 
            TextFrame2 * This,
            /* [retval][out] */ MsoHorizontalAnchor *HorizontalAnchor);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalAnchor )( 
            TextFrame2 * This,
            /* [in] */ MsoHorizontalAnchor HorizontalAnchor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAnchor )( 
            TextFrame2 * This,
            /* [retval][out] */ MsoVerticalAnchor *VerticalAnchor);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAnchor )( 
            TextFrame2 * This,
            /* [in] */ MsoVerticalAnchor VerticalAnchor);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PathFormat )( 
            TextFrame2 * This,
            /* [retval][out] */ MsoPathFormat *PathFormat);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PathFormat )( 
            TextFrame2 * This,
            /* [in] */ MsoPathFormat PathFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WarpFormat )( 
            TextFrame2 * This,
            /* [retval][out] */ MsoWarpFormat *WarpFormat);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WarpFormat )( 
            TextFrame2 * This,
            /* [in] */ MsoWarpFormat WarpFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WordArtFormat )( 
            TextFrame2 * This,
            /* [retval][out] */ MsoPresetTextEffect *WordArtFormat);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WordArtFormat )( 
            TextFrame2 * This,
            /* [in] */ MsoPresetTextEffect WordArtFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WordWrap )( 
            TextFrame2 * This,
            /* [retval][out] */ MsoTriState *WordWrap);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WordWrap )( 
            TextFrame2 * This,
            /* [in] */ MsoTriState WordWrap);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSize )( 
            TextFrame2 * This,
            /* [retval][out] */ MsoAutoSize *AutoSize);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoSize )( 
            TextFrame2 * This,
            /* [in] */ MsoAutoSize AutoSize);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ThreeD )( 
            TextFrame2 * This,
            /* [retval][out] */ ThreeDFormat **ThreeD);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasText )( 
            TextFrame2 * This,
            /* [retval][out] */ MsoTriState *pHasText);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRange )( 
            TextFrame2 * This,
            /* [retval][out] */ /* external definition not present */ TextRange2 **Range);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Column )( 
            TextFrame2 * This,
            /* [retval][out] */ /* external definition not present */ TextColumn2 **Column);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Ruler )( 
            TextFrame2 * This,
            /* [retval][out] */ /* external definition not present */ Ruler2 **Ruler);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteText )( 
            TextFrame2 * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoTextRotation )( 
            TextFrame2 * This,
            /* [retval][out] */ MsoTriState *NoTextRotation);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoTextRotation )( 
            TextFrame2 * This,
            /* [in] */ MsoTriState NoTextRotation);
        
        END_INTERFACE
    } TextFrame2Vtbl;

    interface TextFrame2
    {
        CONST_VTBL struct TextFrame2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextFrame2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TextFrame2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TextFrame2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TextFrame2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TextFrame2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TextFrame2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TextFrame2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TextFrame2_get_Application(This,ppidisp)	\
    ( (This)->lpVtbl -> get_Application(This,ppidisp) ) 

#define TextFrame2_get_Creator(This,plCreator)	\
    ( (This)->lpVtbl -> get_Creator(This,plCreator) ) 

#define TextFrame2_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define TextFrame2_get_MarginBottom(This,MarginBottom)	\
    ( (This)->lpVtbl -> get_MarginBottom(This,MarginBottom) ) 

#define TextFrame2_put_MarginBottom(This,MarginBottom)	\
    ( (This)->lpVtbl -> put_MarginBottom(This,MarginBottom) ) 

#define TextFrame2_get_MarginLeft(This,MarginLeft)	\
    ( (This)->lpVtbl -> get_MarginLeft(This,MarginLeft) ) 

#define TextFrame2_put_MarginLeft(This,MarginLeft)	\
    ( (This)->lpVtbl -> put_MarginLeft(This,MarginLeft) ) 

#define TextFrame2_get_MarginRight(This,MarginRight)	\
    ( (This)->lpVtbl -> get_MarginRight(This,MarginRight) ) 

#define TextFrame2_put_MarginRight(This,MarginRight)	\
    ( (This)->lpVtbl -> put_MarginRight(This,MarginRight) ) 

#define TextFrame2_get_MarginTop(This,MarginTop)	\
    ( (This)->lpVtbl -> get_MarginTop(This,MarginTop) ) 

#define TextFrame2_put_MarginTop(This,MarginTop)	\
    ( (This)->lpVtbl -> put_MarginTop(This,MarginTop) ) 

#define TextFrame2_get_Orientation(This,Orientation)	\
    ( (This)->lpVtbl -> get_Orientation(This,Orientation) ) 

#define TextFrame2_put_Orientation(This,Orientation)	\
    ( (This)->lpVtbl -> put_Orientation(This,Orientation) ) 

#define TextFrame2_get_HorizontalAnchor(This,HorizontalAnchor)	\
    ( (This)->lpVtbl -> get_HorizontalAnchor(This,HorizontalAnchor) ) 

#define TextFrame2_put_HorizontalAnchor(This,HorizontalAnchor)	\
    ( (This)->lpVtbl -> put_HorizontalAnchor(This,HorizontalAnchor) ) 

#define TextFrame2_get_VerticalAnchor(This,VerticalAnchor)	\
    ( (This)->lpVtbl -> get_VerticalAnchor(This,VerticalAnchor) ) 

#define TextFrame2_put_VerticalAnchor(This,VerticalAnchor)	\
    ( (This)->lpVtbl -> put_VerticalAnchor(This,VerticalAnchor) ) 

#define TextFrame2_get_PathFormat(This,PathFormat)	\
    ( (This)->lpVtbl -> get_PathFormat(This,PathFormat) ) 

#define TextFrame2_put_PathFormat(This,PathFormat)	\
    ( (This)->lpVtbl -> put_PathFormat(This,PathFormat) ) 

#define TextFrame2_get_WarpFormat(This,WarpFormat)	\
    ( (This)->lpVtbl -> get_WarpFormat(This,WarpFormat) ) 

#define TextFrame2_put_WarpFormat(This,WarpFormat)	\
    ( (This)->lpVtbl -> put_WarpFormat(This,WarpFormat) ) 

#define TextFrame2_get_WordArtFormat(This,WordArtFormat)	\
    ( (This)->lpVtbl -> get_WordArtFormat(This,WordArtFormat) ) 

#define TextFrame2_put_WordArtFormat(This,WordArtFormat)	\
    ( (This)->lpVtbl -> put_WordArtFormat(This,WordArtFormat) ) 

#define TextFrame2_get_WordWrap(This,WordWrap)	\
    ( (This)->lpVtbl -> get_WordWrap(This,WordWrap) ) 

#define TextFrame2_put_WordWrap(This,WordWrap)	\
    ( (This)->lpVtbl -> put_WordWrap(This,WordWrap) ) 

#define TextFrame2_get_AutoSize(This,AutoSize)	\
    ( (This)->lpVtbl -> get_AutoSize(This,AutoSize) ) 

#define TextFrame2_put_AutoSize(This,AutoSize)	\
    ( (This)->lpVtbl -> put_AutoSize(This,AutoSize) ) 

#define TextFrame2_get_ThreeD(This,ThreeD)	\
    ( (This)->lpVtbl -> get_ThreeD(This,ThreeD) ) 

#define TextFrame2_get_HasText(This,pHasText)	\
    ( (This)->lpVtbl -> get_HasText(This,pHasText) ) 

#define TextFrame2_get_TextRange(This,Range)	\
    ( (This)->lpVtbl -> get_TextRange(This,Range) ) 

#define TextFrame2_get_Column(This,Column)	\
    ( (This)->lpVtbl -> get_Column(This,Column) ) 

#define TextFrame2_get_Ruler(This,Ruler)	\
    ( (This)->lpVtbl -> get_Ruler(This,Ruler) ) 

#define TextFrame2_DeleteText(This)	\
    ( (This)->lpVtbl -> DeleteText(This) ) 

#define TextFrame2_get_NoTextRotation(This,NoTextRotation)	\
    ( (This)->lpVtbl -> get_NoTextRotation(This,NoTextRotation) ) 

#define TextFrame2_put_NoTextRotation(This,NoTextRotation)	\
    ( (This)->lpVtbl -> put_NoTextRotation(This,NoTextRotation) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TextFrame2_INTERFACE_DEFINED__ */


#ifndef __FileConverters_INTERFACE_DEFINED__
#define __FileConverters_INTERFACE_DEFINED__

/* interface FileConverters */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_FileConverters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A50-F07E-4CA4-AF6F-BEF486AA4E6F")
    FileConverters : public Collection
    {
    public:
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ FileConverter **Item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FileConvertersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FileConverters * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FileConverters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FileConverters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FileConverters * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FileConverters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FileConverters * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FileConverters * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            FileConverters * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            FileConverters * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            FileConverters * This,
            /* [retval][out] */ long *Count);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            FileConverters * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ FileConverter **Item);
        
        END_INTERFACE
    } FileConvertersVtbl;

    interface FileConverters
    {
        CONST_VTBL struct FileConvertersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FileConverters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FileConverters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FileConverters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FileConverters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FileConverters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FileConverters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FileConverters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FileConverters_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define FileConverters__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define FileConverters_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define FileConverters_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FileConverters_INTERFACE_DEFINED__ */


#ifndef __FileConverter_INTERFACE_DEFINED__
#define __FileConverter_INTERFACE_DEFINED__

/* interface FileConverter */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_FileConverter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A51-F07E-4CA4-AF6F-BEF486AA4E6F")
    FileConverter : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanOpen( 
            /* [retval][out] */ VARIANT_BOOL *CanOpen) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanSave( 
            /* [retval][out] */ VARIANT_BOOL *CanSave) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ClassName( 
            /* [retval][out] */ BSTR *ClassName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ FileConverters **Creator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extensions( 
            /* [retval][out] */ BSTR *Extensions) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormatName( 
            /* [retval][out] */ BSTR *FormatName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ FileConverters **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *Path) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OpenFormat( 
            /* [retval][out] */ long *OpenFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SaveFormat( 
            /* [retval][out] */ long *SaveFormat) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FileConverterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FileConverter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FileConverter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FileConverter * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FileConverter * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FileConverter * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FileConverter * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FileConverter * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            FileConverter * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanOpen )( 
            FileConverter * This,
            /* [retval][out] */ VARIANT_BOOL *CanOpen);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanSave )( 
            FileConverter * This,
            /* [retval][out] */ VARIANT_BOOL *CanSave);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ClassName )( 
            FileConverter * This,
            /* [retval][out] */ BSTR *ClassName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            FileConverter * This,
            /* [retval][out] */ FileConverters **Creator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extensions )( 
            FileConverter * This,
            /* [retval][out] */ BSTR *Extensions);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormatName )( 
            FileConverter * This,
            /* [retval][out] */ BSTR *FormatName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            FileConverter * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FileConverter * This,
            /* [retval][out] */ FileConverters **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            FileConverter * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OpenFormat )( 
            FileConverter * This,
            /* [retval][out] */ long *OpenFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SaveFormat )( 
            FileConverter * This,
            /* [retval][out] */ long *SaveFormat);
        
        END_INTERFACE
    } FileConverterVtbl;

    interface FileConverter
    {
        CONST_VTBL struct FileConverterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FileConverter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FileConverter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FileConverter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FileConverter_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FileConverter_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FileConverter_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FileConverter_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FileConverter_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define FileConverter_get_CanOpen(This,CanOpen)	\
    ( (This)->lpVtbl -> get_CanOpen(This,CanOpen) ) 

#define FileConverter_get_CanSave(This,CanSave)	\
    ( (This)->lpVtbl -> get_CanSave(This,CanSave) ) 

#define FileConverter_get_ClassName(This,ClassName)	\
    ( (This)->lpVtbl -> get_ClassName(This,ClassName) ) 

#define FileConverter_get_Creator(This,Creator)	\
    ( (This)->lpVtbl -> get_Creator(This,Creator) ) 

#define FileConverter_get_Extensions(This,Extensions)	\
    ( (This)->lpVtbl -> get_Extensions(This,Extensions) ) 

#define FileConverter_get_FormatName(This,FormatName)	\
    ( (This)->lpVtbl -> get_FormatName(This,FormatName) ) 

#define FileConverter_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define FileConverter_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define FileConverter_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define FileConverter_get_OpenFormat(This,OpenFormat)	\
    ( (This)->lpVtbl -> get_OpenFormat(This,OpenFormat) ) 

#define FileConverter_get_SaveFormat(This,SaveFormat)	\
    ( (This)->lpVtbl -> get_SaveFormat(This,SaveFormat) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FileConverter_INTERFACE_DEFINED__ */


#ifndef __Axes_INTERFACE_DEFINED__
#define __Axes_INTERFACE_DEFINED__

/* interface Axes */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Axes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A52-F07E-4CA4-AF6F-BEF486AA4E6F")
    Axes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ XlAxisType Type,
            /* [defaultvalue][optional][in] */ XlAxisGroup AxisGroup,
            /* [retval][out] */ Axis **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Default( 
            /* [in] */ XlAxisType Type,
            /* [defaultvalue][optional][in] */ XlAxisGroup AxisGroup,
            /* [retval][out] */ Axis **RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AxesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Axes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Axes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Axes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Axes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Axes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Axes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Axes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Axes * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Axes * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Axes * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Axes * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Axes * This,
            /* [in] */ XlAxisType Type,
            /* [defaultvalue][optional][in] */ XlAxisGroup AxisGroup,
            /* [retval][out] */ Axis **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Axes * This,
            /* [retval][out] */ IUnknown **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *_Default )( 
            Axes * This,
            /* [in] */ XlAxisType Type,
            /* [defaultvalue][optional][in] */ XlAxisGroup AxisGroup,
            /* [retval][out] */ Axis **RHS);
        
        END_INTERFACE
    } AxesVtbl;

    interface Axes
    {
        CONST_VTBL struct AxesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Axes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Axes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Axes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Axes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Axes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Axes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Axes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Axes_get_Count(This,RHS)	\
    ( (This)->lpVtbl -> get_Count(This,RHS) ) 

#define Axes_get_Creator(This,RHS)	\
    ( (This)->lpVtbl -> get_Creator(This,RHS) ) 

#define Axes_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define Axes_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Axes_Item(This,Type,AxisGroup,RHS)	\
    ( (This)->lpVtbl -> Item(This,Type,AxisGroup,RHS) ) 

#define Axes__NewEnum(This,RHS)	\
    ( (This)->lpVtbl -> _NewEnum(This,RHS) ) 

#define Axes__Default(This,Type,AxisGroup,RHS)	\
    ( (This)->lpVtbl -> _Default(This,Type,AxisGroup,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Axes_INTERFACE_DEFINED__ */


#ifndef __Axis_INTERFACE_DEFINED__
#define __Axis_INTERFACE_DEFINED__

/* interface Axis */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Axis;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A53-F07E-4CA4-AF6F-BEF486AA4E6F")
    Axis : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AxisBetweenCategories( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AxisBetweenCategories( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AxisGroup( 
            /* [retval][out] */ XlAxisGroup *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AxisTitle( 
            /* [retval][out] */ AxisTitle **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CategoryNames( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CategoryNames( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Crosses( 
            /* [retval][out] */ XlAxisCrosses *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Crosses( 
            /* [in] */ XlAxisCrosses RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CrossesAt( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CrossesAt( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasMajorGridlines( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasMajorGridlines( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasMinorGridlines( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasMinorGridlines( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasTitle( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasTitle( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MajorGridlines( 
            /* [retval][out] */ Gridlines **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MajorTickMark( 
            /* [retval][out] */ XlTickMark *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MajorTickMark( 
            /* [in] */ XlTickMark RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MajorUnit( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MajorUnit( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LogBase( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LogBase( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TickLabelSpacingIsAuto( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TickLabelSpacingIsAuto( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MajorUnitIsAuto( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MajorUnitIsAuto( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MaximumScale( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MaximumScale( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MaximumScaleIsAuto( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MaximumScaleIsAuto( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MinimumScale( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MinimumScale( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MinimumScaleIsAuto( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MinimumScaleIsAuto( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MinorGridlines( 
            /* [retval][out] */ Gridlines **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MinorTickMark( 
            /* [retval][out] */ XlTickMark *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MinorTickMark( 
            /* [in] */ XlTickMark RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MinorUnit( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MinorUnit( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MinorUnitIsAuto( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MinorUnitIsAuto( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReversePlotOrder( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReversePlotOrder( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleType( 
            /* [retval][out] */ XlScaleType *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleType( 
            /* [in] */ XlScaleType RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TickLabelPosition( 
            /* [retval][out] */ XlTickLabelPosition *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TickLabelPosition( 
            /* [in] */ XlTickLabelPosition RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TickLabels( 
            /* [retval][out] */ TickLabels **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TickLabelSpacing( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TickLabelSpacing( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TickMarkSpacing( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TickMarkSpacing( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ XlAxisType *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ XlAxisType RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BaseUnit( 
            /* [retval][out] */ XlTimeUnit *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BaseUnit( 
            /* [in] */ XlTimeUnit RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BaseUnitIsAuto( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BaseUnitIsAuto( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MajorUnitScale( 
            /* [retval][out] */ XlTimeUnit *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MajorUnitScale( 
            /* [in] */ XlTimeUnit RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MinorUnitScale( 
            /* [retval][out] */ XlTimeUnit *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MinorUnitScale( 
            /* [in] */ XlTimeUnit RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CategoryType( 
            /* [retval][out] */ XlCategoryType *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CategoryType( 
            /* [in] */ XlCategoryType RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayUnit( 
            /* [retval][out] */ XlDisplayUnit *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayUnit( 
            /* [in] */ XlDisplayUnit RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayUnitCustom( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayUnitCustom( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasDisplayUnitLabel( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasDisplayUnitLabel( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayUnitLabel( 
            /* [retval][out] */ DisplayUnitLabel **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **ppborder) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AxisVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Axis * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Axis * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Axis * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Axis * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Axis * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Axis * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Axis * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AxisBetweenCategories )( 
            Axis * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AxisBetweenCategories )( 
            Axis * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AxisGroup )( 
            Axis * This,
            /* [retval][out] */ XlAxisGroup *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AxisTitle )( 
            Axis * This,
            /* [retval][out] */ AxisTitle **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CategoryNames )( 
            Axis * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CategoryNames )( 
            Axis * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Crosses )( 
            Axis * This,
            /* [retval][out] */ XlAxisCrosses *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Crosses )( 
            Axis * This,
            /* [in] */ XlAxisCrosses RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CrossesAt )( 
            Axis * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CrossesAt )( 
            Axis * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Axis * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasMajorGridlines )( 
            Axis * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasMajorGridlines )( 
            Axis * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasMinorGridlines )( 
            Axis * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasMinorGridlines )( 
            Axis * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasTitle )( 
            Axis * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasTitle )( 
            Axis * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MajorGridlines )( 
            Axis * This,
            /* [retval][out] */ Gridlines **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MajorTickMark )( 
            Axis * This,
            /* [retval][out] */ XlTickMark *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MajorTickMark )( 
            Axis * This,
            /* [in] */ XlTickMark RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MajorUnit )( 
            Axis * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MajorUnit )( 
            Axis * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LogBase )( 
            Axis * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LogBase )( 
            Axis * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TickLabelSpacingIsAuto )( 
            Axis * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TickLabelSpacingIsAuto )( 
            Axis * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MajorUnitIsAuto )( 
            Axis * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MajorUnitIsAuto )( 
            Axis * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaximumScale )( 
            Axis * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MaximumScale )( 
            Axis * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaximumScaleIsAuto )( 
            Axis * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MaximumScaleIsAuto )( 
            Axis * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumScale )( 
            Axis * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MinimumScale )( 
            Axis * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumScaleIsAuto )( 
            Axis * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MinimumScaleIsAuto )( 
            Axis * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinorGridlines )( 
            Axis * This,
            /* [retval][out] */ Gridlines **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinorTickMark )( 
            Axis * This,
            /* [retval][out] */ XlTickMark *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MinorTickMark )( 
            Axis * This,
            /* [in] */ XlTickMark RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinorUnit )( 
            Axis * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MinorUnit )( 
            Axis * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinorUnitIsAuto )( 
            Axis * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MinorUnitIsAuto )( 
            Axis * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReversePlotOrder )( 
            Axis * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReversePlotOrder )( 
            Axis * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleType )( 
            Axis * This,
            /* [retval][out] */ XlScaleType *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleType )( 
            Axis * This,
            /* [in] */ XlScaleType RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Axis * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TickLabelPosition )( 
            Axis * This,
            /* [retval][out] */ XlTickLabelPosition *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TickLabelPosition )( 
            Axis * This,
            /* [in] */ XlTickLabelPosition RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TickLabels )( 
            Axis * This,
            /* [retval][out] */ TickLabels **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TickLabelSpacing )( 
            Axis * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TickLabelSpacing )( 
            Axis * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TickMarkSpacing )( 
            Axis * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TickMarkSpacing )( 
            Axis * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Axis * This,
            /* [retval][out] */ XlAxisType *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            Axis * This,
            /* [in] */ XlAxisType RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BaseUnit )( 
            Axis * This,
            /* [retval][out] */ XlTimeUnit *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BaseUnit )( 
            Axis * This,
            /* [in] */ XlTimeUnit RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BaseUnitIsAuto )( 
            Axis * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BaseUnitIsAuto )( 
            Axis * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MajorUnitScale )( 
            Axis * This,
            /* [retval][out] */ XlTimeUnit *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MajorUnitScale )( 
            Axis * This,
            /* [in] */ XlTimeUnit RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinorUnitScale )( 
            Axis * This,
            /* [retval][out] */ XlTimeUnit *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MinorUnitScale )( 
            Axis * This,
            /* [in] */ XlTimeUnit RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CategoryType )( 
            Axis * This,
            /* [retval][out] */ XlCategoryType *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CategoryType )( 
            Axis * This,
            /* [in] */ XlCategoryType RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            Axis * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            Axis * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Axis * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Axis * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayUnit )( 
            Axis * This,
            /* [retval][out] */ XlDisplayUnit *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayUnit )( 
            Axis * This,
            /* [in] */ XlDisplayUnit RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayUnitCustom )( 
            Axis * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayUnitCustom )( 
            Axis * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasDisplayUnitLabel )( 
            Axis * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasDisplayUnitLabel )( 
            Axis * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayUnitLabel )( 
            Axis * This,
            /* [retval][out] */ DisplayUnitLabel **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            Axis * This,
            /* [retval][out] */ ChartBorder **ppborder);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            Axis * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Axis * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Axis * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Axis * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } AxisVtbl;

    interface Axis
    {
        CONST_VTBL struct AxisVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Axis_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Axis_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Axis_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Axis_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Axis_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Axis_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Axis_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Axis_get_AxisBetweenCategories(This,RHS)	\
    ( (This)->lpVtbl -> get_AxisBetweenCategories(This,RHS) ) 

#define Axis_put_AxisBetweenCategories(This,RHS)	\
    ( (This)->lpVtbl -> put_AxisBetweenCategories(This,RHS) ) 

#define Axis_get_AxisGroup(This,RHS)	\
    ( (This)->lpVtbl -> get_AxisGroup(This,RHS) ) 

#define Axis_get_AxisTitle(This,RHS)	\
    ( (This)->lpVtbl -> get_AxisTitle(This,RHS) ) 

#define Axis_get_CategoryNames(This,RHS)	\
    ( (This)->lpVtbl -> get_CategoryNames(This,RHS) ) 

#define Axis_put_CategoryNames(This,RHS)	\
    ( (This)->lpVtbl -> put_CategoryNames(This,RHS) ) 

#define Axis_get_Crosses(This,RHS)	\
    ( (This)->lpVtbl -> get_Crosses(This,RHS) ) 

#define Axis_put_Crosses(This,RHS)	\
    ( (This)->lpVtbl -> put_Crosses(This,RHS) ) 

#define Axis_get_CrossesAt(This,RHS)	\
    ( (This)->lpVtbl -> get_CrossesAt(This,RHS) ) 

#define Axis_put_CrossesAt(This,RHS)	\
    ( (This)->lpVtbl -> put_CrossesAt(This,RHS) ) 

#define Axis_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define Axis_get_HasMajorGridlines(This,RHS)	\
    ( (This)->lpVtbl -> get_HasMajorGridlines(This,RHS) ) 

#define Axis_put_HasMajorGridlines(This,RHS)	\
    ( (This)->lpVtbl -> put_HasMajorGridlines(This,RHS) ) 

#define Axis_get_HasMinorGridlines(This,RHS)	\
    ( (This)->lpVtbl -> get_HasMinorGridlines(This,RHS) ) 

#define Axis_put_HasMinorGridlines(This,RHS)	\
    ( (This)->lpVtbl -> put_HasMinorGridlines(This,RHS) ) 

#define Axis_get_HasTitle(This,RHS)	\
    ( (This)->lpVtbl -> get_HasTitle(This,RHS) ) 

#define Axis_put_HasTitle(This,RHS)	\
    ( (This)->lpVtbl -> put_HasTitle(This,RHS) ) 

#define Axis_get_MajorGridlines(This,RHS)	\
    ( (This)->lpVtbl -> get_MajorGridlines(This,RHS) ) 

#define Axis_get_MajorTickMark(This,RHS)	\
    ( (This)->lpVtbl -> get_MajorTickMark(This,RHS) ) 

#define Axis_put_MajorTickMark(This,RHS)	\
    ( (This)->lpVtbl -> put_MajorTickMark(This,RHS) ) 

#define Axis_get_MajorUnit(This,RHS)	\
    ( (This)->lpVtbl -> get_MajorUnit(This,RHS) ) 

#define Axis_put_MajorUnit(This,RHS)	\
    ( (This)->lpVtbl -> put_MajorUnit(This,RHS) ) 

#define Axis_get_LogBase(This,RHS)	\
    ( (This)->lpVtbl -> get_LogBase(This,RHS) ) 

#define Axis_put_LogBase(This,RHS)	\
    ( (This)->lpVtbl -> put_LogBase(This,RHS) ) 

#define Axis_get_TickLabelSpacingIsAuto(This,RHS)	\
    ( (This)->lpVtbl -> get_TickLabelSpacingIsAuto(This,RHS) ) 

#define Axis_put_TickLabelSpacingIsAuto(This,RHS)	\
    ( (This)->lpVtbl -> put_TickLabelSpacingIsAuto(This,RHS) ) 

#define Axis_get_MajorUnitIsAuto(This,RHS)	\
    ( (This)->lpVtbl -> get_MajorUnitIsAuto(This,RHS) ) 

#define Axis_put_MajorUnitIsAuto(This,RHS)	\
    ( (This)->lpVtbl -> put_MajorUnitIsAuto(This,RHS) ) 

#define Axis_get_MaximumScale(This,RHS)	\
    ( (This)->lpVtbl -> get_MaximumScale(This,RHS) ) 

#define Axis_put_MaximumScale(This,RHS)	\
    ( (This)->lpVtbl -> put_MaximumScale(This,RHS) ) 

#define Axis_get_MaximumScaleIsAuto(This,RHS)	\
    ( (This)->lpVtbl -> get_MaximumScaleIsAuto(This,RHS) ) 

#define Axis_put_MaximumScaleIsAuto(This,RHS)	\
    ( (This)->lpVtbl -> put_MaximumScaleIsAuto(This,RHS) ) 

#define Axis_get_MinimumScale(This,RHS)	\
    ( (This)->lpVtbl -> get_MinimumScale(This,RHS) ) 

#define Axis_put_MinimumScale(This,RHS)	\
    ( (This)->lpVtbl -> put_MinimumScale(This,RHS) ) 

#define Axis_get_MinimumScaleIsAuto(This,RHS)	\
    ( (This)->lpVtbl -> get_MinimumScaleIsAuto(This,RHS) ) 

#define Axis_put_MinimumScaleIsAuto(This,RHS)	\
    ( (This)->lpVtbl -> put_MinimumScaleIsAuto(This,RHS) ) 

#define Axis_get_MinorGridlines(This,RHS)	\
    ( (This)->lpVtbl -> get_MinorGridlines(This,RHS) ) 

#define Axis_get_MinorTickMark(This,RHS)	\
    ( (This)->lpVtbl -> get_MinorTickMark(This,RHS) ) 

#define Axis_put_MinorTickMark(This,RHS)	\
    ( (This)->lpVtbl -> put_MinorTickMark(This,RHS) ) 

#define Axis_get_MinorUnit(This,RHS)	\
    ( (This)->lpVtbl -> get_MinorUnit(This,RHS) ) 

#define Axis_put_MinorUnit(This,RHS)	\
    ( (This)->lpVtbl -> put_MinorUnit(This,RHS) ) 

#define Axis_get_MinorUnitIsAuto(This,RHS)	\
    ( (This)->lpVtbl -> get_MinorUnitIsAuto(This,RHS) ) 

#define Axis_put_MinorUnitIsAuto(This,RHS)	\
    ( (This)->lpVtbl -> put_MinorUnitIsAuto(This,RHS) ) 

#define Axis_get_ReversePlotOrder(This,RHS)	\
    ( (This)->lpVtbl -> get_ReversePlotOrder(This,RHS) ) 

#define Axis_put_ReversePlotOrder(This,RHS)	\
    ( (This)->lpVtbl -> put_ReversePlotOrder(This,RHS) ) 

#define Axis_get_ScaleType(This,RHS)	\
    ( (This)->lpVtbl -> get_ScaleType(This,RHS) ) 

#define Axis_put_ScaleType(This,RHS)	\
    ( (This)->lpVtbl -> put_ScaleType(This,RHS) ) 

#define Axis_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#define Axis_get_TickLabelPosition(This,RHS)	\
    ( (This)->lpVtbl -> get_TickLabelPosition(This,RHS) ) 

#define Axis_put_TickLabelPosition(This,RHS)	\
    ( (This)->lpVtbl -> put_TickLabelPosition(This,RHS) ) 

#define Axis_get_TickLabels(This,RHS)	\
    ( (This)->lpVtbl -> get_TickLabels(This,RHS) ) 

#define Axis_get_TickLabelSpacing(This,RHS)	\
    ( (This)->lpVtbl -> get_TickLabelSpacing(This,RHS) ) 

#define Axis_put_TickLabelSpacing(This,RHS)	\
    ( (This)->lpVtbl -> put_TickLabelSpacing(This,RHS) ) 

#define Axis_get_TickMarkSpacing(This,RHS)	\
    ( (This)->lpVtbl -> get_TickMarkSpacing(This,RHS) ) 

#define Axis_put_TickMarkSpacing(This,RHS)	\
    ( (This)->lpVtbl -> put_TickMarkSpacing(This,RHS) ) 

#define Axis_get_Type(This,RHS)	\
    ( (This)->lpVtbl -> get_Type(This,RHS) ) 

#define Axis_put_Type(This,RHS)	\
    ( (This)->lpVtbl -> put_Type(This,RHS) ) 

#define Axis_get_BaseUnit(This,RHS)	\
    ( (This)->lpVtbl -> get_BaseUnit(This,RHS) ) 

#define Axis_put_BaseUnit(This,RHS)	\
    ( (This)->lpVtbl -> put_BaseUnit(This,RHS) ) 

#define Axis_get_BaseUnitIsAuto(This,RHS)	\
    ( (This)->lpVtbl -> get_BaseUnitIsAuto(This,RHS) ) 

#define Axis_put_BaseUnitIsAuto(This,RHS)	\
    ( (This)->lpVtbl -> put_BaseUnitIsAuto(This,RHS) ) 

#define Axis_get_MajorUnitScale(This,RHS)	\
    ( (This)->lpVtbl -> get_MajorUnitScale(This,RHS) ) 

#define Axis_put_MajorUnitScale(This,RHS)	\
    ( (This)->lpVtbl -> put_MajorUnitScale(This,RHS) ) 

#define Axis_get_MinorUnitScale(This,RHS)	\
    ( (This)->lpVtbl -> get_MinorUnitScale(This,RHS) ) 

#define Axis_put_MinorUnitScale(This,RHS)	\
    ( (This)->lpVtbl -> put_MinorUnitScale(This,RHS) ) 

#define Axis_get_CategoryType(This,RHS)	\
    ( (This)->lpVtbl -> get_CategoryType(This,RHS) ) 

#define Axis_put_CategoryType(This,RHS)	\
    ( (This)->lpVtbl -> put_CategoryType(This,RHS) ) 

#define Axis_get_Left(This,RHS)	\
    ( (This)->lpVtbl -> get_Left(This,RHS) ) 

#define Axis_get_Top(This,RHS)	\
    ( (This)->lpVtbl -> get_Top(This,RHS) ) 

#define Axis_get_Width(This,RHS)	\
    ( (This)->lpVtbl -> get_Width(This,RHS) ) 

#define Axis_get_Height(This,RHS)	\
    ( (This)->lpVtbl -> get_Height(This,RHS) ) 

#define Axis_get_DisplayUnit(This,RHS)	\
    ( (This)->lpVtbl -> get_DisplayUnit(This,RHS) ) 

#define Axis_put_DisplayUnit(This,RHS)	\
    ( (This)->lpVtbl -> put_DisplayUnit(This,RHS) ) 

#define Axis_get_DisplayUnitCustom(This,RHS)	\
    ( (This)->lpVtbl -> get_DisplayUnitCustom(This,RHS) ) 

#define Axis_put_DisplayUnitCustom(This,RHS)	\
    ( (This)->lpVtbl -> put_DisplayUnitCustom(This,RHS) ) 

#define Axis_get_HasDisplayUnitLabel(This,RHS)	\
    ( (This)->lpVtbl -> get_HasDisplayUnitLabel(This,RHS) ) 

#define Axis_put_HasDisplayUnitLabel(This,RHS)	\
    ( (This)->lpVtbl -> put_HasDisplayUnitLabel(This,RHS) ) 

#define Axis_get_DisplayUnitLabel(This,RHS)	\
    ( (This)->lpVtbl -> get_DisplayUnitLabel(This,RHS) ) 

#define Axis_get_Border(This,ppborder)	\
    ( (This)->lpVtbl -> get_Border(This,ppborder) ) 

#define Axis_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define Axis_get_Creator(This,RHS)	\
    ( (This)->lpVtbl -> get_Creator(This,RHS) ) 

#define Axis_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define Axis_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Axis_INTERFACE_DEFINED__ */


#ifndef __AxisTitle_INTERFACE_DEFINED__
#define __AxisTitle_INTERFACE_DEFINED__

/* interface AxisTitle */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_AxisTitle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A54-F07E-4CA4-AF6F-BEF486AA4E6F")
    AxisTitle : public IDispatch
    {
    public:
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Caption( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Caption( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Characters( 
            /* [optional][in] */ VARIANT Start,
            /* [optional][in] */ VARIANT Length,
            /* [retval][out] */ ChartCharacters **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ ChartFont **ppfont) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalAlignment( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalAlignment( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Orientation( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Shadow( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalAlignment( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalAlignment( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoScaleFont( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoScaleFont( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Interior( 
            /* [retval][out] */ Interior **ppinterior) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ ChartFillFormat **ppinterior) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **ppborder) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludeInLayout( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludeInLayout( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ XlChartElementPosition *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ XlChartElementPosition RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadingOrder( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadingOrder( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *Width) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Formula( 
            /* [in] */ BSTR pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Formula( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormulaR1C1( 
            /* [in] */ BSTR pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormulaR1C1( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormulaLocal( 
            /* [in] */ BSTR pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormulaLocal( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormulaR1C1Local( 
            /* [in] */ BSTR pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormulaR1C1Local( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AxisTitleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AxisTitle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AxisTitle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AxisTitle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AxisTitle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AxisTitle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AxisTitle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AxisTitle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Caption )( 
            AxisTitle * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Caption )( 
            AxisTitle * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Characters )( 
            AxisTitle * This,
            /* [optional][in] */ VARIANT Start,
            /* [optional][in] */ VARIANT Length,
            /* [retval][out] */ ChartCharacters **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            AxisTitle * This,
            /* [retval][out] */ ChartFont **ppfont);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )( 
            AxisTitle * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )( 
            AxisTitle * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            AxisTitle * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            AxisTitle * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Orientation )( 
            AxisTitle * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Orientation )( 
            AxisTitle * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            AxisTitle * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadow )( 
            AxisTitle * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            AxisTitle * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            AxisTitle * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            AxisTitle * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            AxisTitle * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )( 
            AxisTitle * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )( 
            AxisTitle * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoScaleFont )( 
            AxisTitle * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoScaleFont )( 
            AxisTitle * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Interior )( 
            AxisTitle * This,
            /* [retval][out] */ Interior **ppinterior);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            AxisTitle * This,
            /* [retval][out] */ ChartFillFormat **ppinterior);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            AxisTitle * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            AxisTitle * This,
            /* [retval][out] */ ChartBorder **ppborder);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            AxisTitle * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AxisTitle * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            AxisTitle * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeInLayout )( 
            AxisTitle * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeInLayout )( 
            AxisTitle * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            AxisTitle * This,
            /* [retval][out] */ XlChartElementPosition *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            AxisTitle * This,
            /* [in] */ XlChartElementPosition RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            AxisTitle * This,
            /* [retval][out] */ ChartFormat **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            AxisTitle * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            AxisTitle * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingOrder )( 
            AxisTitle * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingOrder )( 
            AxisTitle * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            AxisTitle * This,
            /* [retval][out] */ double *Height);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            AxisTitle * This,
            /* [retval][out] */ double *Width);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Formula )( 
            AxisTitle * This,
            /* [in] */ BSTR pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Formula )( 
            AxisTitle * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormulaR1C1 )( 
            AxisTitle * This,
            /* [in] */ BSTR pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormulaR1C1 )( 
            AxisTitle * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormulaLocal )( 
            AxisTitle * This,
            /* [in] */ BSTR pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormulaLocal )( 
            AxisTitle * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormulaR1C1Local )( 
            AxisTitle * This,
            /* [in] */ BSTR pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormulaR1C1Local )( 
            AxisTitle * This,
            /* [retval][out] */ BSTR *pbstr);
        
        END_INTERFACE
    } AxisTitleVtbl;

    interface AxisTitle
    {
        CONST_VTBL struct AxisTitleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AxisTitle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AxisTitle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AxisTitle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AxisTitle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AxisTitle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AxisTitle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AxisTitle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AxisTitle_put_Caption(This,RHS)	\
    ( (This)->lpVtbl -> put_Caption(This,RHS) ) 

#define AxisTitle_get_Caption(This,RHS)	\
    ( (This)->lpVtbl -> get_Caption(This,RHS) ) 

#define AxisTitle_get_Characters(This,Start,Length,RHS)	\
    ( (This)->lpVtbl -> get_Characters(This,Start,Length,RHS) ) 

#define AxisTitle_get_Font(This,ppfont)	\
    ( (This)->lpVtbl -> get_Font(This,ppfont) ) 

#define AxisTitle_put_HorizontalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> put_HorizontalAlignment(This,RHS) ) 

#define AxisTitle_get_HorizontalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> get_HorizontalAlignment(This,RHS) ) 

#define AxisTitle_get_Left(This,RHS)	\
    ( (This)->lpVtbl -> get_Left(This,RHS) ) 

#define AxisTitle_put_Left(This,RHS)	\
    ( (This)->lpVtbl -> put_Left(This,RHS) ) 

#define AxisTitle_put_Orientation(This,RHS)	\
    ( (This)->lpVtbl -> put_Orientation(This,RHS) ) 

#define AxisTitle_get_Orientation(This,RHS)	\
    ( (This)->lpVtbl -> get_Orientation(This,RHS) ) 

#define AxisTitle_get_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> get_Shadow(This,RHS) ) 

#define AxisTitle_put_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> put_Shadow(This,RHS) ) 

#define AxisTitle_put_Text(This,RHS)	\
    ( (This)->lpVtbl -> put_Text(This,RHS) ) 

#define AxisTitle_get_Text(This,RHS)	\
    ( (This)->lpVtbl -> get_Text(This,RHS) ) 

#define AxisTitle_get_Top(This,RHS)	\
    ( (This)->lpVtbl -> get_Top(This,RHS) ) 

#define AxisTitle_put_Top(This,RHS)	\
    ( (This)->lpVtbl -> put_Top(This,RHS) ) 

#define AxisTitle_put_VerticalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> put_VerticalAlignment(This,RHS) ) 

#define AxisTitle_get_VerticalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> get_VerticalAlignment(This,RHS) ) 

#define AxisTitle_put_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> put_AutoScaleFont(This,RHS) ) 

#define AxisTitle_get_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> get_AutoScaleFont(This,RHS) ) 

#define AxisTitle_get_Interior(This,ppinterior)	\
    ( (This)->lpVtbl -> get_Interior(This,ppinterior) ) 

#define AxisTitle_get_Fill(This,ppinterior)	\
    ( (This)->lpVtbl -> get_Fill(This,ppinterior) ) 

#define AxisTitle_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define AxisTitle_get_Border(This,ppborder)	\
    ( (This)->lpVtbl -> get_Border(This,ppborder) ) 

#define AxisTitle_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define AxisTitle_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define AxisTitle_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#define AxisTitle_get_IncludeInLayout(This,RHS)	\
    ( (This)->lpVtbl -> get_IncludeInLayout(This,RHS) ) 

#define AxisTitle_put_IncludeInLayout(This,RHS)	\
    ( (This)->lpVtbl -> put_IncludeInLayout(This,RHS) ) 

#define AxisTitle_get_Position(This,RHS)	\
    ( (This)->lpVtbl -> get_Position(This,RHS) ) 

#define AxisTitle_put_Position(This,RHS)	\
    ( (This)->lpVtbl -> put_Position(This,RHS) ) 

#define AxisTitle_get_Format(This,RHS)	\
    ( (This)->lpVtbl -> get_Format(This,RHS) ) 

#define AxisTitle_get_Creator(This,RHS)	\
    ( (This)->lpVtbl -> get_Creator(This,RHS) ) 

#define AxisTitle_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define AxisTitle_get_ReadingOrder(This,RHS)	\
    ( (This)->lpVtbl -> get_ReadingOrder(This,RHS) ) 

#define AxisTitle_put_ReadingOrder(This,RHS)	\
    ( (This)->lpVtbl -> put_ReadingOrder(This,RHS) ) 

#define AxisTitle_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define AxisTitle_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define AxisTitle_put_Formula(This,pbstr)	\
    ( (This)->lpVtbl -> put_Formula(This,pbstr) ) 

#define AxisTitle_get_Formula(This,pbstr)	\
    ( (This)->lpVtbl -> get_Formula(This,pbstr) ) 

#define AxisTitle_put_FormulaR1C1(This,pbstr)	\
    ( (This)->lpVtbl -> put_FormulaR1C1(This,pbstr) ) 

#define AxisTitle_get_FormulaR1C1(This,pbstr)	\
    ( (This)->lpVtbl -> get_FormulaR1C1(This,pbstr) ) 

#define AxisTitle_put_FormulaLocal(This,pbstr)	\
    ( (This)->lpVtbl -> put_FormulaLocal(This,pbstr) ) 

#define AxisTitle_get_FormulaLocal(This,pbstr)	\
    ( (This)->lpVtbl -> get_FormulaLocal(This,pbstr) ) 

#define AxisTitle_put_FormulaR1C1Local(This,pbstr)	\
    ( (This)->lpVtbl -> put_FormulaR1C1Local(This,pbstr) ) 

#define AxisTitle_get_FormulaR1C1Local(This,pbstr)	\
    ( (This)->lpVtbl -> get_FormulaR1C1Local(This,pbstr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AxisTitle_INTERFACE_DEFINED__ */


#ifndef __Chart_INTERFACE_DEFINED__
#define __Chart_INTERFACE_DEFINED__

/* interface Chart */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Chart;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A55-F07E-4CA4-AF6F-BEF486AA4E6F")
    Chart : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyDataLabels( 
            /* [defaultvalue][optional][in] */ XlDataLabelsType Type,
            /* [optional][in] */ VARIANT LegendKey,
            /* [optional][in] */ VARIANT AutoText,
            /* [optional][in] */ VARIANT HasLeaderLines,
            /* [optional][in] */ VARIANT ShowSeriesName,
            /* [optional][in] */ VARIANT ShowCategoryName,
            /* [optional][in] */ VARIANT ShowValue,
            /* [optional][in] */ VARIANT ShowPercentage,
            /* [optional][in] */ VARIANT ShowBubbleSize,
            /* [optional][in] */ VARIANT Separator) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChartType( 
            /* [retval][out] */ XlChartType *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ChartType( 
            /* [in] */ XlChartType RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasDataTable( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasDataTable( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ApplyCustomType( 
            /* [in] */ XlChartType ChartType,
            /* [optional][in] */ VARIANT TypeName) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetChartElement( 
            /* [in] */ long X,
            /* [in] */ long Y,
            /* [out][in] */ long *ElementID,
            /* [out][in] */ long *Arg1,
            /* [out][in] */ long *Arg2) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetSourceData( 
            /* [in] */ BSTR Source,
            /* [optional][in] */ VARIANT PlotBy) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotBy( 
            /* [retval][out] */ XlRowCol *PlotBy) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PlotBy( 
            /* [in] */ XlRowCol PlotBy) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AutoFormat( 
            /* [in] */ long Gallery,
            /* [optional][in] */ VARIANT Format) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetBackgroundPicture( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DataTable( 
            /* [retval][out] */ DataTable **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paste( 
            /* [optional][in] */ VARIANT Type,
            /* [lcid][in] */ long lcid) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BarShape( 
            /* [retval][out] */ XlBarShape *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BarShape( 
            /* [in] */ XlBarShape RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetDefaultChart( 
            /* [in] */ VARIANT Name) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyChartTemplate( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveChartTemplate( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SideWall( 
            /* [retval][out] */ Walls **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackWall( 
            /* [retval][out] */ Walls **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChartStyle( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ChartStyle( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearToMatchStyle( void) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasPivotFields( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasPivotFields( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowDataLabelsOverMaximum( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowDataLabelsOverMaximum( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyLayout( 
            /* [in] */ long Layout,
            /* [optional][in] */ VARIANT ChartType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChartData( 
            /* [retval][out] */ ChartData **ppchartdata) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shapes( 
            /* [retval][out] */ Shapes **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Area3DGroup( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ ChartGroup **RHS) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AreaGroups( 
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bar3DGroup( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ ChartGroup **RHS) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE BarGroups( 
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Column3DGroup( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ ChartGroup **RHS) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ColumnGroups( 
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Line3DGroup( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ ChartGroup **RHS) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE LineGroups( 
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Pie3DGroup( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ ChartGroup **RHS) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE PieGroups( 
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE DoughnutGroups( 
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE RadarGroups( 
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_SurfaceGroup( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ ChartGroup **RHS) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE XYGroups( 
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _ApplyDataLabels( 
            /* [defaultvalue][optional][in] */ XlDataLabelsType Type,
            /* [optional][in] */ VARIANT LegendKey,
            /* [optional][in] */ VARIANT AutoText,
            /* [optional][in] */ VARIANT HasLeaderLines,
            /* [lcid][in] */ long lcid) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoScaling( 
            /* [lcid][in] */ long lcid,
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoScaling( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Axes( 
            /* [optional][in] */ VARIANT Type,
            /* [defaultvalue][optional][in] */ XlAxisGroup AxisGroup,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChartArea( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ ChartArea **ChartArea) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ChartGroups( 
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChartTitle( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ ChartTitle **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ChartWizard( 
            /* [optional][in] */ VARIANT Source,
            /* [optional][in] */ VARIANT Gallery,
            /* [optional][in] */ VARIANT Format,
            /* [optional][in] */ VARIANT PlotBy,
            /* [optional][in] */ VARIANT CategoryLabels,
            /* [optional][in] */ VARIANT SeriesLabels,
            /* [optional][in] */ VARIANT HasLegend,
            /* [optional][in] */ VARIANT Title,
            /* [optional][in] */ VARIANT CategoryTitle,
            /* [optional][in] */ VARIANT ValueTitle,
            /* [optional][in] */ VARIANT ExtraTitle,
            /* [lcid][in] */ long lcid) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( 
            /* [optional][in] */ VARIANT Before,
            /* [optional][in] */ VARIANT After,
            /* [lcid][in] */ long lcid) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyPicture( 
            /* [defaultvalue][optional][in] */ XlPictureAppearance Appearance,
            /* [defaultvalue][optional][in] */ XlCopyPictureFormat Format,
            /* [defaultvalue][optional][in] */ XlPictureAppearance Size,
            /* [lcid][in] */ long LocaleID) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Corners( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ Corners **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [lcid][in] */ long lcid) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DepthPercent( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DepthPercent( 
            /* [lcid][in] */ long lcid,
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayBlanksAs( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ XlDisplayBlanksAs *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayBlanksAs( 
            /* [lcid][in] */ long lcid,
            /* [in] */ XlDisplayBlanksAs RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Elevation( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Elevation( 
            /* [lcid][in] */ long lcid,
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Export( 
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT FilterName,
            /* [optional][in] */ VARIANT Interactive,
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Floor( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ Floor **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GapDepth( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GapDepth( 
            /* [lcid][in] */ long lcid,
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasAxis( 
            /* [optional][in] */ VARIANT Index1,
            /* [optional][in] */ VARIANT Index2,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasAxis( 
            /* [optional][in] */ VARIANT Index1,
            /* [optional][in] */ VARIANT Index2,
            /* [lcid][in] */ long lcid,
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasLegend( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasLegend( 
            /* [lcid][in] */ long lcid,
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasTitle( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasTitle( 
            /* [lcid][in] */ long lcid,
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeightPercent( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HeightPercent( 
            /* [lcid][in] */ long lcid,
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Legend( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ Legend **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Perspective( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Perspective( 
            /* [lcid][in] */ long lcid,
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotArea( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ PlotArea **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotVisibleOnly( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PlotVisibleOnly( 
            /* [lcid][in] */ long lcid,
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RightAngleAxes( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RightAngleAxes( 
            /* [lcid][in] */ long lcid,
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
            /* [lcid][in] */ long lcid,
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [optional][in] */ VARIANT Replace,
            /* [lcid][in] */ long lcid) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SeriesCollection( 
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetElement( 
            /* [in] */ MsoChartElementType Element) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Subtype( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Subtype( 
            /* [lcid][in] */ long lcid,
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [lcid][in] */ long lcid,
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Walls( 
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ Walls **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowReportFilterFieldButtons( 
            /* [retval][out] */ VARIANT_BOOL *res) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowReportFilterFieldButtons( 
            /* [in] */ VARIANT_BOOL res) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowLegendFieldButtons( 
            /* [retval][out] */ VARIANT_BOOL *res) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowLegendFieldButtons( 
            /* [in] */ VARIANT_BOOL res) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowAxisFieldButtons( 
            /* [retval][out] */ VARIANT_BOOL *res) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowAxisFieldButtons( 
            /* [in] */ VARIANT_BOOL res) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowValueFieldButtons( 
            /* [retval][out] */ VARIANT_BOOL *res) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowValueFieldButtons( 
            /* [in] */ VARIANT_BOOL res) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowAllFieldButtons( 
            /* [retval][out] */ VARIANT_BOOL *res) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowAllFieldButtons( 
            /* [in] */ VARIANT_BOOL res) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AlternativeText( 
            /* [retval][out] */ BSTR *AlternativeText) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AlternativeText( 
            /* [in] */ BSTR AlternativeText) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Title( 
            /* [retval][out] */ BSTR *Title) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Title( 
            /* [in] */ BSTR Title) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE FullSeriesCollection( 
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ IDispatch **ppFullSeriesCollection) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CategoryLabelLevel( 
            /* [retval][out] */ XlCategoryLabelLevel *plevel) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CategoryLabelLevel( 
            /* [in] */ XlCategoryLabelLevel plevel) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SeriesNameLevel( 
            /* [retval][out] */ XlSeriesNameLevel *plevel) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SeriesNameLevel( 
            /* [in] */ XlSeriesNameLevel plevel) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasHiddenContent( 
            /* [retval][out] */ VARIANT_BOOL *res) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE DeleteHiddenContent( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChartColor( 
            /* [retval][out] */ VARIANT *pColor) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ChartColor( 
            /* [in] */ VARIANT pColor) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearToMatchColorStyle( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ChartVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Chart * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Chart * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Chart * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Chart * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Chart * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Chart * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Chart * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Chart * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyDataLabels )( 
            Chart * This,
            /* [defaultvalue][optional][in] */ XlDataLabelsType Type,
            /* [optional][in] */ VARIANT LegendKey,
            /* [optional][in] */ VARIANT AutoText,
            /* [optional][in] */ VARIANT HasLeaderLines,
            /* [optional][in] */ VARIANT ShowSeriesName,
            /* [optional][in] */ VARIANT ShowCategoryName,
            /* [optional][in] */ VARIANT ShowValue,
            /* [optional][in] */ VARIANT ShowPercentage,
            /* [optional][in] */ VARIANT ShowBubbleSize,
            /* [optional][in] */ VARIANT Separator);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChartType )( 
            Chart * This,
            /* [retval][out] */ XlChartType *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ChartType )( 
            Chart * This,
            /* [in] */ XlChartType RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasDataTable )( 
            Chart * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasDataTable )( 
            Chart * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyCustomType )( 
            Chart * This,
            /* [in] */ XlChartType ChartType,
            /* [optional][in] */ VARIANT TypeName);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetChartElement )( 
            Chart * This,
            /* [in] */ long X,
            /* [in] */ long Y,
            /* [out][in] */ long *ElementID,
            /* [out][in] */ long *Arg1,
            /* [out][in] */ long *Arg2);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetSourceData )( 
            Chart * This,
            /* [in] */ BSTR Source,
            /* [optional][in] */ VARIANT PlotBy);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotBy )( 
            Chart * This,
            /* [retval][out] */ XlRowCol *PlotBy);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotBy )( 
            Chart * This,
            /* [in] */ XlRowCol PlotBy);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AutoFormat )( 
            Chart * This,
            /* [in] */ long Gallery,
            /* [optional][in] */ VARIANT Format);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetBackgroundPicture )( 
            Chart * This,
            /* [in] */ BSTR FileName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DataTable )( 
            Chart * This,
            /* [retval][out] */ DataTable **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paste )( 
            Chart * This,
            /* [optional][in] */ VARIANT Type,
            /* [lcid][in] */ long lcid);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BarShape )( 
            Chart * This,
            /* [retval][out] */ XlBarShape *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BarShape )( 
            Chart * This,
            /* [in] */ XlBarShape RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultChart )( 
            Chart * This,
            /* [in] */ VARIANT Name);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyChartTemplate )( 
            Chart * This,
            /* [in] */ BSTR FileName);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveChartTemplate )( 
            Chart * This,
            /* [in] */ BSTR FileName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SideWall )( 
            Chart * This,
            /* [retval][out] */ Walls **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackWall )( 
            Chart * This,
            /* [retval][out] */ Walls **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChartStyle )( 
            Chart * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ChartStyle )( 
            Chart * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearToMatchStyle )( 
            Chart * This);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasPivotFields )( 
            Chart * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasPivotFields )( 
            Chart * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowDataLabelsOverMaximum )( 
            Chart * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowDataLabelsOverMaximum )( 
            Chart * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyLayout )( 
            Chart * This,
            /* [in] */ long Layout,
            /* [optional][in] */ VARIANT ChartType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            Chart * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChartData )( 
            Chart * This,
            /* [retval][out] */ ChartData **ppchartdata);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shapes )( 
            Chart * This,
            /* [retval][out] */ Shapes **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Chart * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Area3DGroup )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ ChartGroup **RHS);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AreaGroups )( 
            Chart * This,
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bar3DGroup )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ ChartGroup **RHS);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *BarGroups )( 
            Chart * This,
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Column3DGroup )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ ChartGroup **RHS);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ColumnGroups )( 
            Chart * This,
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Line3DGroup )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ ChartGroup **RHS);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *LineGroups )( 
            Chart * This,
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Pie3DGroup )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ ChartGroup **RHS);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *PieGroups )( 
            Chart * This,
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *DoughnutGroups )( 
            Chart * This,
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *RadarGroups )( 
            Chart * This,
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SurfaceGroup )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ ChartGroup **RHS);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *XYGroups )( 
            Chart * This,
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Chart * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *_ApplyDataLabels )( 
            Chart * This,
            /* [defaultvalue][optional][in] */ XlDataLabelsType Type,
            /* [optional][in] */ VARIANT LegendKey,
            /* [optional][in] */ VARIANT AutoText,
            /* [optional][in] */ VARIANT HasLeaderLines,
            /* [lcid][in] */ long lcid);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoScaling )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoScaling )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Axes )( 
            Chart * This,
            /* [optional][in] */ VARIANT Type,
            /* [defaultvalue][optional][in] */ XlAxisGroup AxisGroup,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChartArea )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ ChartArea **ChartArea);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ChartGroups )( 
            Chart * This,
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChartTitle )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ ChartTitle **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ChartWizard )( 
            Chart * This,
            /* [optional][in] */ VARIANT Source,
            /* [optional][in] */ VARIANT Gallery,
            /* [optional][in] */ VARIANT Format,
            /* [optional][in] */ VARIANT PlotBy,
            /* [optional][in] */ VARIANT CategoryLabels,
            /* [optional][in] */ VARIANT SeriesLabels,
            /* [optional][in] */ VARIANT HasLegend,
            /* [optional][in] */ VARIANT Title,
            /* [optional][in] */ VARIANT CategoryTitle,
            /* [optional][in] */ VARIANT ValueTitle,
            /* [optional][in] */ VARIANT ExtraTitle,
            /* [lcid][in] */ long lcid);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            Chart * This,
            /* [optional][in] */ VARIANT Before,
            /* [optional][in] */ VARIANT After,
            /* [lcid][in] */ long lcid);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyPicture )( 
            Chart * This,
            /* [defaultvalue][optional][in] */ XlPictureAppearance Appearance,
            /* [defaultvalue][optional][in] */ XlCopyPictureFormat Format,
            /* [defaultvalue][optional][in] */ XlPictureAppearance Size,
            /* [lcid][in] */ long LocaleID);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Corners )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ Corners **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Chart * This,
            /* [lcid][in] */ long lcid);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DepthPercent )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DepthPercent )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayBlanksAs )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ XlDisplayBlanksAs *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayBlanksAs )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [in] */ XlDisplayBlanksAs RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Elevation )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Elevation )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [in] */ long RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Export )( 
            Chart * This,
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT FilterName,
            /* [optional][in] */ VARIANT Interactive,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Floor )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ Floor **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GapDepth )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GapDepth )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasAxis )( 
            Chart * This,
            /* [optional][in] */ VARIANT Index1,
            /* [optional][in] */ VARIANT Index2,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasAxis )( 
            Chart * This,
            /* [optional][in] */ VARIANT Index1,
            /* [optional][in] */ VARIANT Index2,
            /* [lcid][in] */ long lcid,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasLegend )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasLegend )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasTitle )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasTitle )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeightPercent )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HeightPercent )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Legend )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ Legend **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Chart * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            Chart * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Perspective )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Perspective )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotArea )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ PlotArea **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotVisibleOnly )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotVisibleOnly )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RightAngleAxes )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RightAngleAxes )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Chart * This,
            /* [optional][in] */ VARIANT Replace,
            /* [lcid][in] */ long lcid);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SeriesCollection )( 
            Chart * This,
            /* [optional][in] */ VARIANT Index,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetElement )( 
            Chart * This,
            /* [in] */ MsoChartElementType Element);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Subtype )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Subtype )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [in] */ long RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Walls )( 
            Chart * This,
            /* [lcid][in] */ long lcid,
            /* [retval][out] */ Walls **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            Chart * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowReportFilterFieldButtons )( 
            Chart * This,
            /* [retval][out] */ VARIANT_BOOL *res);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowReportFilterFieldButtons )( 
            Chart * This,
            /* [in] */ VARIANT_BOOL res);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowLegendFieldButtons )( 
            Chart * This,
            /* [retval][out] */ VARIANT_BOOL *res);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowLegendFieldButtons )( 
            Chart * This,
            /* [in] */ VARIANT_BOOL res);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowAxisFieldButtons )( 
            Chart * This,
            /* [retval][out] */ VARIANT_BOOL *res);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowAxisFieldButtons )( 
            Chart * This,
            /* [in] */ VARIANT_BOOL res);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowValueFieldButtons )( 
            Chart * This,
            /* [retval][out] */ VARIANT_BOOL *res);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowValueFieldButtons )( 
            Chart * This,
            /* [in] */ VARIANT_BOOL res);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowAllFieldButtons )( 
            Chart * This,
            /* [retval][out] */ VARIANT_BOOL *res);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowAllFieldButtons )( 
            Chart * This,
            /* [in] */ VARIANT_BOOL res);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AlternativeText )( 
            Chart * This,
            /* [retval][out] */ BSTR *AlternativeText);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AlternativeText )( 
            Chart * This,
            /* [in] */ BSTR AlternativeText);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            Chart * This,
            /* [retval][out] */ BSTR *Title);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Title )( 
            Chart * This,
            /* [in] */ BSTR Title);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FullSeriesCollection )( 
            Chart * This,
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ IDispatch **ppFullSeriesCollection);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CategoryLabelLevel )( 
            Chart * This,
            /* [retval][out] */ XlCategoryLabelLevel *plevel);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CategoryLabelLevel )( 
            Chart * This,
            /* [in] */ XlCategoryLabelLevel plevel);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SeriesNameLevel )( 
            Chart * This,
            /* [retval][out] */ XlSeriesNameLevel *plevel);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SeriesNameLevel )( 
            Chart * This,
            /* [in] */ XlSeriesNameLevel plevel);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasHiddenContent )( 
            Chart * This,
            /* [retval][out] */ VARIANT_BOOL *res);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteHiddenContent )( 
            Chart * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChartColor )( 
            Chart * This,
            /* [retval][out] */ VARIANT *pColor);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ChartColor )( 
            Chart * This,
            /* [in] */ VARIANT pColor);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearToMatchColorStyle )( 
            Chart * This);
        
        END_INTERFACE
    } ChartVtbl;

    interface Chart
    {
        CONST_VTBL struct ChartVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Chart_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Chart_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Chart_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Chart_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Chart_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Chart_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Chart_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Chart_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define Chart_ApplyDataLabels(This,Type,LegendKey,AutoText,HasLeaderLines,ShowSeriesName,ShowCategoryName,ShowValue,ShowPercentage,ShowBubbleSize,Separator)	\
    ( (This)->lpVtbl -> ApplyDataLabels(This,Type,LegendKey,AutoText,HasLeaderLines,ShowSeriesName,ShowCategoryName,ShowValue,ShowPercentage,ShowBubbleSize,Separator) ) 

#define Chart_get_ChartType(This,RHS)	\
    ( (This)->lpVtbl -> get_ChartType(This,RHS) ) 

#define Chart_put_ChartType(This,RHS)	\
    ( (This)->lpVtbl -> put_ChartType(This,RHS) ) 

#define Chart_get_HasDataTable(This,RHS)	\
    ( (This)->lpVtbl -> get_HasDataTable(This,RHS) ) 

#define Chart_put_HasDataTable(This,RHS)	\
    ( (This)->lpVtbl -> put_HasDataTable(This,RHS) ) 

#define Chart_ApplyCustomType(This,ChartType,TypeName)	\
    ( (This)->lpVtbl -> ApplyCustomType(This,ChartType,TypeName) ) 

#define Chart_GetChartElement(This,X,Y,ElementID,Arg1,Arg2)	\
    ( (This)->lpVtbl -> GetChartElement(This,X,Y,ElementID,Arg1,Arg2) ) 

#define Chart_SetSourceData(This,Source,PlotBy)	\
    ( (This)->lpVtbl -> SetSourceData(This,Source,PlotBy) ) 

#define Chart_get_PlotBy(This,PlotBy)	\
    ( (This)->lpVtbl -> get_PlotBy(This,PlotBy) ) 

#define Chart_put_PlotBy(This,PlotBy)	\
    ( (This)->lpVtbl -> put_PlotBy(This,PlotBy) ) 

#define Chart_AutoFormat(This,Gallery,Format)	\
    ( (This)->lpVtbl -> AutoFormat(This,Gallery,Format) ) 

#define Chart_SetBackgroundPicture(This,FileName)	\
    ( (This)->lpVtbl -> SetBackgroundPicture(This,FileName) ) 

#define Chart_get_DataTable(This,RHS)	\
    ( (This)->lpVtbl -> get_DataTable(This,RHS) ) 

#define Chart_Paste(This,Type,lcid)	\
    ( (This)->lpVtbl -> Paste(This,Type,lcid) ) 

#define Chart_get_BarShape(This,RHS)	\
    ( (This)->lpVtbl -> get_BarShape(This,RHS) ) 

#define Chart_put_BarShape(This,RHS)	\
    ( (This)->lpVtbl -> put_BarShape(This,RHS) ) 

#define Chart_SetDefaultChart(This,Name)	\
    ( (This)->lpVtbl -> SetDefaultChart(This,Name) ) 

#define Chart_ApplyChartTemplate(This,FileName)	\
    ( (This)->lpVtbl -> ApplyChartTemplate(This,FileName) ) 

#define Chart_SaveChartTemplate(This,FileName)	\
    ( (This)->lpVtbl -> SaveChartTemplate(This,FileName) ) 

#define Chart_get_SideWall(This,RHS)	\
    ( (This)->lpVtbl -> get_SideWall(This,RHS) ) 

#define Chart_get_BackWall(This,RHS)	\
    ( (This)->lpVtbl -> get_BackWall(This,RHS) ) 

#define Chart_get_ChartStyle(This,RHS)	\
    ( (This)->lpVtbl -> get_ChartStyle(This,RHS) ) 

#define Chart_put_ChartStyle(This,RHS)	\
    ( (This)->lpVtbl -> put_ChartStyle(This,RHS) ) 

#define Chart_ClearToMatchStyle(This)	\
    ( (This)->lpVtbl -> ClearToMatchStyle(This) ) 

#define Chart_get_HasPivotFields(This,RHS)	\
    ( (This)->lpVtbl -> get_HasPivotFields(This,RHS) ) 

#define Chart_put_HasPivotFields(This,RHS)	\
    ( (This)->lpVtbl -> put_HasPivotFields(This,RHS) ) 

#define Chart_put_ShowDataLabelsOverMaximum(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowDataLabelsOverMaximum(This,RHS) ) 

#define Chart_get_ShowDataLabelsOverMaximum(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowDataLabelsOverMaximum(This,RHS) ) 

#define Chart_ApplyLayout(This,Layout,ChartType)	\
    ( (This)->lpVtbl -> ApplyLayout(This,Layout,ChartType) ) 

#define Chart_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define Chart_get_ChartData(This,ppchartdata)	\
    ( (This)->lpVtbl -> get_ChartData(This,ppchartdata) ) 

#define Chart_get_Shapes(This,RHS)	\
    ( (This)->lpVtbl -> get_Shapes(This,RHS) ) 

#define Chart_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define Chart_get_Area3DGroup(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_Area3DGroup(This,lcid,RHS) ) 

#define Chart_AreaGroups(This,Index,lcid,RHS)	\
    ( (This)->lpVtbl -> AreaGroups(This,Index,lcid,RHS) ) 

#define Chart_get_Bar3DGroup(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_Bar3DGroup(This,lcid,RHS) ) 

#define Chart_BarGroups(This,Index,lcid,RHS)	\
    ( (This)->lpVtbl -> BarGroups(This,Index,lcid,RHS) ) 

#define Chart_get_Column3DGroup(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_Column3DGroup(This,lcid,RHS) ) 

#define Chart_ColumnGroups(This,Index,lcid,RHS)	\
    ( (This)->lpVtbl -> ColumnGroups(This,Index,lcid,RHS) ) 

#define Chart_get_Line3DGroup(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_Line3DGroup(This,lcid,RHS) ) 

#define Chart_LineGroups(This,Index,lcid,RHS)	\
    ( (This)->lpVtbl -> LineGroups(This,Index,lcid,RHS) ) 

#define Chart_get_Pie3DGroup(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_Pie3DGroup(This,lcid,RHS) ) 

#define Chart_PieGroups(This,Index,lcid,RHS)	\
    ( (This)->lpVtbl -> PieGroups(This,Index,lcid,RHS) ) 

#define Chart_DoughnutGroups(This,Index,lcid,RHS)	\
    ( (This)->lpVtbl -> DoughnutGroups(This,Index,lcid,RHS) ) 

#define Chart_RadarGroups(This,Index,lcid,RHS)	\
    ( (This)->lpVtbl -> RadarGroups(This,Index,lcid,RHS) ) 

#define Chart_get_SurfaceGroup(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_SurfaceGroup(This,lcid,RHS) ) 

#define Chart_XYGroups(This,Index,lcid,RHS)	\
    ( (This)->lpVtbl -> XYGroups(This,Index,lcid,RHS) ) 

#define Chart_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Chart__ApplyDataLabels(This,Type,LegendKey,AutoText,HasLeaderLines,lcid)	\
    ( (This)->lpVtbl -> _ApplyDataLabels(This,Type,LegendKey,AutoText,HasLeaderLines,lcid) ) 

#define Chart_put_AutoScaling(This,lcid,RHS)	\
    ( (This)->lpVtbl -> put_AutoScaling(This,lcid,RHS) ) 

#define Chart_get_AutoScaling(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_AutoScaling(This,lcid,RHS) ) 

#define Chart_Axes(This,Type,AxisGroup,lcid,RHS)	\
    ( (This)->lpVtbl -> Axes(This,Type,AxisGroup,lcid,RHS) ) 

#define Chart_get_ChartArea(This,lcid,ChartArea)	\
    ( (This)->lpVtbl -> get_ChartArea(This,lcid,ChartArea) ) 

#define Chart_ChartGroups(This,Index,lcid,RHS)	\
    ( (This)->lpVtbl -> ChartGroups(This,Index,lcid,RHS) ) 

#define Chart_get_ChartTitle(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_ChartTitle(This,lcid,RHS) ) 

#define Chart_ChartWizard(This,Source,Gallery,Format,PlotBy,CategoryLabels,SeriesLabels,HasLegend,Title,CategoryTitle,ValueTitle,ExtraTitle,lcid)	\
    ( (This)->lpVtbl -> ChartWizard(This,Source,Gallery,Format,PlotBy,CategoryLabels,SeriesLabels,HasLegend,Title,CategoryTitle,ValueTitle,ExtraTitle,lcid) ) 

#define Chart_Copy(This,Before,After,lcid)	\
    ( (This)->lpVtbl -> Copy(This,Before,After,lcid) ) 

#define Chart_CopyPicture(This,Appearance,Format,Size,LocaleID)	\
    ( (This)->lpVtbl -> CopyPicture(This,Appearance,Format,Size,LocaleID) ) 

#define Chart_get_Corners(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_Corners(This,lcid,RHS) ) 

#define Chart_Delete(This,lcid)	\
    ( (This)->lpVtbl -> Delete(This,lcid) ) 

#define Chart_get_DepthPercent(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_DepthPercent(This,lcid,RHS) ) 

#define Chart_put_DepthPercent(This,lcid,RHS)	\
    ( (This)->lpVtbl -> put_DepthPercent(This,lcid,RHS) ) 

#define Chart_get_DisplayBlanksAs(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_DisplayBlanksAs(This,lcid,RHS) ) 

#define Chart_put_DisplayBlanksAs(This,lcid,RHS)	\
    ( (This)->lpVtbl -> put_DisplayBlanksAs(This,lcid,RHS) ) 

#define Chart_get_Elevation(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_Elevation(This,lcid,RHS) ) 

#define Chart_put_Elevation(This,lcid,RHS)	\
    ( (This)->lpVtbl -> put_Elevation(This,lcid,RHS) ) 

#define Chart_Export(This,FileName,FilterName,Interactive,RHS)	\
    ( (This)->lpVtbl -> Export(This,FileName,FilterName,Interactive,RHS) ) 

#define Chart_get_Floor(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_Floor(This,lcid,RHS) ) 

#define Chart_get_GapDepth(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_GapDepth(This,lcid,RHS) ) 

#define Chart_put_GapDepth(This,lcid,RHS)	\
    ( (This)->lpVtbl -> put_GapDepth(This,lcid,RHS) ) 

#define Chart_get_HasAxis(This,Index1,Index2,lcid,RHS)	\
    ( (This)->lpVtbl -> get_HasAxis(This,Index1,Index2,lcid,RHS) ) 

#define Chart_put_HasAxis(This,Index1,Index2,lcid,RHS)	\
    ( (This)->lpVtbl -> put_HasAxis(This,Index1,Index2,lcid,RHS) ) 

#define Chart_get_HasLegend(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_HasLegend(This,lcid,RHS) ) 

#define Chart_put_HasLegend(This,lcid,RHS)	\
    ( (This)->lpVtbl -> put_HasLegend(This,lcid,RHS) ) 

#define Chart_get_HasTitle(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_HasTitle(This,lcid,RHS) ) 

#define Chart_put_HasTitle(This,lcid,RHS)	\
    ( (This)->lpVtbl -> put_HasTitle(This,lcid,RHS) ) 

#define Chart_get_HeightPercent(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_HeightPercent(This,lcid,RHS) ) 

#define Chart_put_HeightPercent(This,lcid,RHS)	\
    ( (This)->lpVtbl -> put_HeightPercent(This,lcid,RHS) ) 

#define Chart_get_Legend(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_Legend(This,lcid,RHS) ) 

#define Chart_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define Chart_put_Name(This,RHS)	\
    ( (This)->lpVtbl -> put_Name(This,RHS) ) 

#define Chart_get_Perspective(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_Perspective(This,lcid,RHS) ) 

#define Chart_put_Perspective(This,lcid,RHS)	\
    ( (This)->lpVtbl -> put_Perspective(This,lcid,RHS) ) 

#define Chart_get_PlotArea(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_PlotArea(This,lcid,RHS) ) 

#define Chart_get_PlotVisibleOnly(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_PlotVisibleOnly(This,lcid,RHS) ) 

#define Chart_put_PlotVisibleOnly(This,lcid,RHS)	\
    ( (This)->lpVtbl -> put_PlotVisibleOnly(This,lcid,RHS) ) 

#define Chart_get_RightAngleAxes(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_RightAngleAxes(This,lcid,RHS) ) 

#define Chart_put_RightAngleAxes(This,lcid,RHS)	\
    ( (This)->lpVtbl -> put_RightAngleAxes(This,lcid,RHS) ) 

#define Chart_get_Rotation(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_Rotation(This,lcid,RHS) ) 

#define Chart_put_Rotation(This,lcid,RHS)	\
    ( (This)->lpVtbl -> put_Rotation(This,lcid,RHS) ) 

#define Chart_Select(This,Replace,lcid)	\
    ( (This)->lpVtbl -> Select(This,Replace,lcid) ) 

#define Chart_SeriesCollection(This,Index,lcid,RHS)	\
    ( (This)->lpVtbl -> SeriesCollection(This,Index,lcid,RHS) ) 

#define Chart_SetElement(This,Element)	\
    ( (This)->lpVtbl -> SetElement(This,Element) ) 

#define Chart_get_Subtype(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_Subtype(This,lcid,RHS) ) 

#define Chart_put_Subtype(This,lcid,RHS)	\
    ( (This)->lpVtbl -> put_Subtype(This,lcid,RHS) ) 

#define Chart_get_Type(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_Type(This,lcid,RHS) ) 

#define Chart_put_Type(This,lcid,RHS)	\
    ( (This)->lpVtbl -> put_Type(This,lcid,RHS) ) 

#define Chart_get_Walls(This,lcid,RHS)	\
    ( (This)->lpVtbl -> get_Walls(This,lcid,RHS) ) 

#define Chart_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define Chart_get_ShowReportFilterFieldButtons(This,res)	\
    ( (This)->lpVtbl -> get_ShowReportFilterFieldButtons(This,res) ) 

#define Chart_put_ShowReportFilterFieldButtons(This,res)	\
    ( (This)->lpVtbl -> put_ShowReportFilterFieldButtons(This,res) ) 

#define Chart_get_ShowLegendFieldButtons(This,res)	\
    ( (This)->lpVtbl -> get_ShowLegendFieldButtons(This,res) ) 

#define Chart_put_ShowLegendFieldButtons(This,res)	\
    ( (This)->lpVtbl -> put_ShowLegendFieldButtons(This,res) ) 

#define Chart_get_ShowAxisFieldButtons(This,res)	\
    ( (This)->lpVtbl -> get_ShowAxisFieldButtons(This,res) ) 

#define Chart_put_ShowAxisFieldButtons(This,res)	\
    ( (This)->lpVtbl -> put_ShowAxisFieldButtons(This,res) ) 

#define Chart_get_ShowValueFieldButtons(This,res)	\
    ( (This)->lpVtbl -> get_ShowValueFieldButtons(This,res) ) 

#define Chart_put_ShowValueFieldButtons(This,res)	\
    ( (This)->lpVtbl -> put_ShowValueFieldButtons(This,res) ) 

#define Chart_get_ShowAllFieldButtons(This,res)	\
    ( (This)->lpVtbl -> get_ShowAllFieldButtons(This,res) ) 

#define Chart_put_ShowAllFieldButtons(This,res)	\
    ( (This)->lpVtbl -> put_ShowAllFieldButtons(This,res) ) 

#define Chart_get_AlternativeText(This,AlternativeText)	\
    ( (This)->lpVtbl -> get_AlternativeText(This,AlternativeText) ) 

#define Chart_put_AlternativeText(This,AlternativeText)	\
    ( (This)->lpVtbl -> put_AlternativeText(This,AlternativeText) ) 

#define Chart_get_Title(This,Title)	\
    ( (This)->lpVtbl -> get_Title(This,Title) ) 

#define Chart_put_Title(This,Title)	\
    ( (This)->lpVtbl -> put_Title(This,Title) ) 

#define Chart_FullSeriesCollection(This,Index,ppFullSeriesCollection)	\
    ( (This)->lpVtbl -> FullSeriesCollection(This,Index,ppFullSeriesCollection) ) 

#define Chart_get_CategoryLabelLevel(This,plevel)	\
    ( (This)->lpVtbl -> get_CategoryLabelLevel(This,plevel) ) 

#define Chart_put_CategoryLabelLevel(This,plevel)	\
    ( (This)->lpVtbl -> put_CategoryLabelLevel(This,plevel) ) 

#define Chart_get_SeriesNameLevel(This,plevel)	\
    ( (This)->lpVtbl -> get_SeriesNameLevel(This,plevel) ) 

#define Chart_put_SeriesNameLevel(This,plevel)	\
    ( (This)->lpVtbl -> put_SeriesNameLevel(This,plevel) ) 

#define Chart_get_HasHiddenContent(This,res)	\
    ( (This)->lpVtbl -> get_HasHiddenContent(This,res) ) 

#define Chart_DeleteHiddenContent(This)	\
    ( (This)->lpVtbl -> DeleteHiddenContent(This) ) 

#define Chart_get_ChartColor(This,pColor)	\
    ( (This)->lpVtbl -> get_ChartColor(This,pColor) ) 

#define Chart_put_ChartColor(This,pColor)	\
    ( (This)->lpVtbl -> put_ChartColor(This,pColor) ) 

#define Chart_ClearToMatchColorStyle(This)	\
    ( (This)->lpVtbl -> ClearToMatchColorStyle(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



#if 0
/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Chart_get_ChartColor_Proxy( 
    Chart * This,
    /* [retval][out] */ VARIANT *pColor);


void __RPC_STUB Chart_get_ChartColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Chart_put_ChartColor_Proxy( 
    Chart * This,
    /* [in] */ VARIANT pColor);


void __RPC_STUB Chart_put_ChartColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Chart_ClearToMatchColorStyle_Proxy( 
    Chart * This);


void __RPC_STUB Chart_ClearToMatchColorStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


#endif

#endif 	/* __Chart_INTERFACE_DEFINED__ */


#ifndef __ChartBorder_INTERFACE_DEFINED__
#define __ChartBorder_INTERFACE_DEFINED__

/* interface ChartBorder */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ChartBorder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A56-F07E-4CA4-AF6F-BEF486AA4E6F")
    ChartBorder : public IDispatch
    {
    public:
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Color( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Color( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColorIndex( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColorIndex( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineStyle( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineStyle( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Weight( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Weight( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ChartBorderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ChartBorder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ChartBorder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ChartBorder * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ChartBorder * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ChartBorder * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ChartBorder * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ChartBorder * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            ChartBorder * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            ChartBorder * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColorIndex )( 
            ChartBorder * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColorIndex )( 
            ChartBorder * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineStyle )( 
            ChartBorder * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineStyle )( 
            ChartBorder * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Weight )( 
            ChartBorder * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Weight )( 
            ChartBorder * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ChartBorder * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ChartBorder * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ChartBorder * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } ChartBorderVtbl;

    interface ChartBorder
    {
        CONST_VTBL struct ChartBorderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ChartBorder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ChartBorder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ChartBorder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ChartBorder_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ChartBorder_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ChartBorder_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ChartBorder_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ChartBorder_put_Color(This,RHS)	\
    ( (This)->lpVtbl -> put_Color(This,RHS) ) 

#define ChartBorder_get_Color(This,RHS)	\
    ( (This)->lpVtbl -> get_Color(This,RHS) ) 

#define ChartBorder_put_ColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> put_ColorIndex(This,RHS) ) 

#define ChartBorder_get_ColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> get_ColorIndex(This,RHS) ) 

#define ChartBorder_put_LineStyle(This,RHS)	\
    ( (This)->lpVtbl -> put_LineStyle(This,RHS) ) 

#define ChartBorder_get_LineStyle(This,RHS)	\
    ( (This)->lpVtbl -> get_LineStyle(This,RHS) ) 

#define ChartBorder_put_Weight(This,RHS)	\
    ( (This)->lpVtbl -> put_Weight(This,RHS) ) 

#define ChartBorder_get_Weight(This,RHS)	\
    ( (This)->lpVtbl -> get_Weight(This,RHS) ) 

#define ChartBorder_get_Creator(This,RHS)	\
    ( (This)->lpVtbl -> get_Creator(This,RHS) ) 

#define ChartBorder_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define ChartBorder_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ChartBorder_INTERFACE_DEFINED__ */


#ifndef __ChartCharacters_INTERFACE_DEFINED__
#define __ChartCharacters_INTERFACE_DEFINED__

/* interface ChartCharacters */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ChartCharacters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A57-F07E-4CA4-AF6F-BEF486AA4E6F")
    ChartCharacters : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Caption( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Caption( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ ChartFont **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ BSTR String,
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PhoneticCharacters( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PhoneticCharacters( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ChartCharactersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ChartCharacters * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ChartCharacters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ChartCharacters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ChartCharacters * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ChartCharacters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ChartCharacters * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ChartCharacters * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ChartCharacters * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Caption )( 
            ChartCharacters * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Caption )( 
            ChartCharacters * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ChartCharacters * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ChartCharacters * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            ChartCharacters * This,
            /* [retval][out] */ ChartFont **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            ChartCharacters * This,
            /* [in] */ BSTR String,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            ChartCharacters * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            ChartCharacters * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PhoneticCharacters )( 
            ChartCharacters * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PhoneticCharacters )( 
            ChartCharacters * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ChartCharacters * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ChartCharacters * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } ChartCharactersVtbl;

    interface ChartCharacters
    {
        CONST_VTBL struct ChartCharactersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ChartCharacters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ChartCharacters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ChartCharacters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ChartCharacters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ChartCharacters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ChartCharacters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ChartCharacters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ChartCharacters_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define ChartCharacters_get_Caption(This,RHS)	\
    ( (This)->lpVtbl -> get_Caption(This,RHS) ) 

#define ChartCharacters_put_Caption(This,RHS)	\
    ( (This)->lpVtbl -> put_Caption(This,RHS) ) 

#define ChartCharacters_get_Count(This,RHS)	\
    ( (This)->lpVtbl -> get_Count(This,RHS) ) 

#define ChartCharacters_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define ChartCharacters_get_Font(This,RHS)	\
    ( (This)->lpVtbl -> get_Font(This,RHS) ) 

#define ChartCharacters_Insert(This,String,RHS)	\
    ( (This)->lpVtbl -> Insert(This,String,RHS) ) 

#define ChartCharacters_get_Text(This,RHS)	\
    ( (This)->lpVtbl -> get_Text(This,RHS) ) 

#define ChartCharacters_put_Text(This,RHS)	\
    ( (This)->lpVtbl -> put_Text(This,RHS) ) 

#define ChartCharacters_get_PhoneticCharacters(This,RHS)	\
    ( (This)->lpVtbl -> get_PhoneticCharacters(This,RHS) ) 

#define ChartCharacters_put_PhoneticCharacters(This,RHS)	\
    ( (This)->lpVtbl -> put_PhoneticCharacters(This,RHS) ) 

#define ChartCharacters_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define ChartCharacters_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ChartCharacters_INTERFACE_DEFINED__ */


#ifndef __ChartArea_INTERFACE_DEFINED__
#define __ChartArea_INTERFACE_DEFINED__

/* interface ChartArea */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ChartArea;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A58-F07E-4CA4-AF6F-BEF486AA4E6F")
    ChartArea : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppparent) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **ppborder) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearContents( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ ChartFont **ppfont) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Shadow( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearFormats( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Interior( 
            /* [retval][out] */ Interior **ppinterior) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ ChartFillFormat **ppFill) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoScaleFont( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoScaleFont( 
            /* [in] */ VARIANT pvar) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ChartAreaVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ChartArea * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ChartArea * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ChartArea * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ChartArea * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ChartArea * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ChartArea * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ChartArea * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ChartArea * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            ChartArea * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ChartArea * This,
            /* [retval][out] */ IDispatch **ppparent);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            ChartArea * This,
            /* [retval][out] */ ChartBorder **ppborder);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ChartArea * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearContents )( 
            ChartArea * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            ChartArea * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            ChartArea * This,
            /* [retval][out] */ ChartFont **ppfont);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            ChartArea * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadow )( 
            ChartArea * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearFormats )( 
            ChartArea * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            ChartArea * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            ChartArea * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Interior )( 
            ChartArea * This,
            /* [retval][out] */ Interior **ppinterior);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            ChartArea * This,
            /* [retval][out] */ ChartFillFormat **ppFill);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            ChartArea * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            ChartArea * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            ChartArea * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            ChartArea * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            ChartArea * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            ChartArea * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoScaleFont )( 
            ChartArea * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoScaleFont )( 
            ChartArea * This,
            /* [in] */ VARIANT pvar);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            ChartArea * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ChartArea * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ChartArea * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } ChartAreaVtbl;

    interface ChartArea
    {
        CONST_VTBL struct ChartAreaVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ChartArea_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ChartArea_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ChartArea_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ChartArea_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ChartArea_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ChartArea_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ChartArea_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ChartArea_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define ChartArea_Select(This,pvar)	\
    ( (This)->lpVtbl -> Select(This,pvar) ) 

#define ChartArea_get_Parent(This,ppparent)	\
    ( (This)->lpVtbl -> get_Parent(This,ppparent) ) 

#define ChartArea_get_Border(This,ppborder)	\
    ( (This)->lpVtbl -> get_Border(This,ppborder) ) 

#define ChartArea_Clear(This,pvar)	\
    ( (This)->lpVtbl -> Clear(This,pvar) ) 

#define ChartArea_ClearContents(This,pvar)	\
    ( (This)->lpVtbl -> ClearContents(This,pvar) ) 

#define ChartArea_Copy(This,pvar)	\
    ( (This)->lpVtbl -> Copy(This,pvar) ) 

#define ChartArea_get_Font(This,ppfont)	\
    ( (This)->lpVtbl -> get_Font(This,ppfont) ) 

#define ChartArea_get_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> get_Shadow(This,RHS) ) 

#define ChartArea_put_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> put_Shadow(This,RHS) ) 

#define ChartArea_ClearFormats(This,pvar)	\
    ( (This)->lpVtbl -> ClearFormats(This,pvar) ) 

#define ChartArea_get_Height(This,RHS)	\
    ( (This)->lpVtbl -> get_Height(This,RHS) ) 

#define ChartArea_put_Height(This,RHS)	\
    ( (This)->lpVtbl -> put_Height(This,RHS) ) 

#define ChartArea_get_Interior(This,ppinterior)	\
    ( (This)->lpVtbl -> get_Interior(This,ppinterior) ) 

#define ChartArea_get_Fill(This,ppFill)	\
    ( (This)->lpVtbl -> get_Fill(This,ppFill) ) 

#define ChartArea_get_Left(This,RHS)	\
    ( (This)->lpVtbl -> get_Left(This,RHS) ) 

#define ChartArea_put_Left(This,RHS)	\
    ( (This)->lpVtbl -> put_Left(This,RHS) ) 

#define ChartArea_get_Top(This,RHS)	\
    ( (This)->lpVtbl -> get_Top(This,RHS) ) 

#define ChartArea_put_Top(This,RHS)	\
    ( (This)->lpVtbl -> put_Top(This,RHS) ) 

#define ChartArea_get_Width(This,RHS)	\
    ( (This)->lpVtbl -> get_Width(This,RHS) ) 

#define ChartArea_put_Width(This,RHS)	\
    ( (This)->lpVtbl -> put_Width(This,RHS) ) 

#define ChartArea_get_AutoScaleFont(This,pvar)	\
    ( (This)->lpVtbl -> get_AutoScaleFont(This,pvar) ) 

#define ChartArea_put_AutoScaleFont(This,pvar)	\
    ( (This)->lpVtbl -> put_AutoScaleFont(This,pvar) ) 

#define ChartArea_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define ChartArea_get_Creator(This,RHS)	\
    ( (This)->lpVtbl -> get_Creator(This,RHS) ) 

#define ChartArea_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ChartArea_INTERFACE_DEFINED__ */


#ifndef __ChartColorFormat_INTERFACE_DEFINED__
#define __ChartColorFormat_INTERFACE_DEFINED__

/* interface ChartColorFormat */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_ChartColorFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A59-F07E-4CA4-AF6F-BEF486AA4E6F")
    ChartColorFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SchemeColor( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SchemeColor( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Default( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RGB( 
            /* [retval][out] */ long *RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ChartColorFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ChartColorFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ChartColorFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ChartColorFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ChartColorFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ChartColorFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ChartColorFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ChartColorFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ChartColorFormat * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SchemeColor )( 
            ChartColorFormat * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SchemeColor )( 
            ChartColorFormat * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Default )( 
            ChartColorFormat * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ChartColorFormat * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ChartColorFormat * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ChartColorFormat * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RGB )( 
            ChartColorFormat * This,
            /* [retval][out] */ long *RHS);
        
        END_INTERFACE
    } ChartColorFormatVtbl;

    interface ChartColorFormat
    {
        CONST_VTBL struct ChartColorFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ChartColorFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ChartColorFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ChartColorFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ChartColorFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ChartColorFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ChartColorFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ChartColorFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ChartColorFormat_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define ChartColorFormat_get_SchemeColor(This,RHS)	\
    ( (This)->lpVtbl -> get_SchemeColor(This,RHS) ) 

#define ChartColorFormat_put_SchemeColor(This,RHS)	\
    ( (This)->lpVtbl -> put_SchemeColor(This,RHS) ) 

#define ChartColorFormat_get__Default(This,RHS)	\
    ( (This)->lpVtbl -> get__Default(This,RHS) ) 

#define ChartColorFormat_get_Type(This,RHS)	\
    ( (This)->lpVtbl -> get_Type(This,RHS) ) 

#define ChartColorFormat_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define ChartColorFormat_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ChartColorFormat_get_RGB(This,RHS)	\
    ( (This)->lpVtbl -> get_RGB(This,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ChartColorFormat_INTERFACE_DEFINED__ */


#ifndef __ChartData_INTERFACE_DEFINED__
#define __ChartData_INTERFACE_DEFINED__

/* interface ChartData */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ChartData;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A5A-F07E-4CA4-AF6F-BEF486AA4E6F")
    ChartData : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Workbook( 
            /* [retval][out] */ IDispatch **ppdispWorkbook) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsLinked( 
            /* [retval][out] */ VARIANT_BOOL *pfIsLinked) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE BreakLink( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ActivateChartDataWindow( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ChartDataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ChartData * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ChartData * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ChartData * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ChartData * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ChartData * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ChartData * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ChartData * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Workbook )( 
            ChartData * This,
            /* [retval][out] */ IDispatch **ppdispWorkbook);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            ChartData * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsLinked )( 
            ChartData * This,
            /* [retval][out] */ VARIANT_BOOL *pfIsLinked);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BreakLink )( 
            ChartData * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ActivateChartDataWindow )( 
            ChartData * This);
        
        END_INTERFACE
    } ChartDataVtbl;

    interface ChartData
    {
        CONST_VTBL struct ChartDataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ChartData_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ChartData_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ChartData_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ChartData_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ChartData_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ChartData_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ChartData_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ChartData_get_Workbook(This,ppdispWorkbook)	\
    ( (This)->lpVtbl -> get_Workbook(This,ppdispWorkbook) ) 

#define ChartData_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define ChartData_get_IsLinked(This,pfIsLinked)	\
    ( (This)->lpVtbl -> get_IsLinked(This,pfIsLinked) ) 

#define ChartData_BreakLink(This)	\
    ( (This)->lpVtbl -> BreakLink(This) ) 

#define ChartData_ActivateChartDataWindow(This)	\
    ( (This)->lpVtbl -> ActivateChartDataWindow(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ChartData_INTERFACE_DEFINED__ */


#ifndef __ChartFillFormat_INTERFACE_DEFINED__
#define __ChartFillFormat_INTERFACE_DEFINED__

/* interface ChartFillFormat */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_ChartFillFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A5B-F07E-4CA4-AF6F-BEF486AA4E6F")
    ChartFillFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Solid( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UserTextured( 
            /* [in] */ BSTR TextureFile) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackColor( 
            /* [retval][out] */ ChartColorFormat **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForeColor( 
            /* [retval][out] */ ChartColorFormat **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientDegree( 
            /* [retval][out] */ single *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextureName( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OneColorGradient( 
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ long Variant,
            /* [in] */ single Degree) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientColorType( 
            /* [retval][out] */ MsoGradientColorType *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientStyle( 
            /* [retval][out] */ MsoGradientStyle *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientVariant( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Pattern( 
            /* [retval][out] */ MsoPatternType *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Patterned( 
            /* [in] */ MsoPatternType Pattern) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PresetGradient( 
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ long Variant,
            /* [in] */ MsoPresetGradientType PresetGradientType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetGradientType( 
            /* [retval][out] */ MsoPresetGradientType *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetTexture( 
            /* [retval][out] */ MsoPresetTexture *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PresetTextured( 
            /* [in] */ MsoPresetTexture PresetTexture) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextureType( 
            /* [retval][out] */ MsoTextureType *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TwoColorGradient( 
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ long Variant) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoFillType *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UserPicture( 
            /* [optional][in] */ VARIANT PictureFile,
            /* [optional][in] */ VARIANT PictureFormat,
            /* [optional][in] */ VARIANT PictureStackUnit,
            /* [optional][in] */ VARIANT PicturePlacement) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ MsoTriState *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ MsoTriState RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ChartFillFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ChartFillFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ChartFillFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ChartFillFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ChartFillFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ChartFillFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ChartFillFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ChartFillFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Solid )( 
            ChartFillFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UserTextured )( 
            ChartFillFormat * This,
            /* [in] */ BSTR TextureFile);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackColor )( 
            ChartFillFormat * This,
            /* [retval][out] */ ChartColorFormat **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForeColor )( 
            ChartFillFormat * This,
            /* [retval][out] */ ChartColorFormat **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientDegree )( 
            ChartFillFormat * This,
            /* [retval][out] */ single *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextureName )( 
            ChartFillFormat * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ChartFillFormat * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ChartFillFormat * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ChartFillFormat * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OneColorGradient )( 
            ChartFillFormat * This,
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ long Variant,
            /* [in] */ single Degree);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientColorType )( 
            ChartFillFormat * This,
            /* [retval][out] */ MsoGradientColorType *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientStyle )( 
            ChartFillFormat * This,
            /* [retval][out] */ MsoGradientStyle *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientVariant )( 
            ChartFillFormat * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Pattern )( 
            ChartFillFormat * This,
            /* [retval][out] */ MsoPatternType *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Patterned )( 
            ChartFillFormat * This,
            /* [in] */ MsoPatternType Pattern);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PresetGradient )( 
            ChartFillFormat * This,
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ long Variant,
            /* [in] */ MsoPresetGradientType PresetGradientType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetGradientType )( 
            ChartFillFormat * This,
            /* [retval][out] */ MsoPresetGradientType *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetTexture )( 
            ChartFillFormat * This,
            /* [retval][out] */ MsoPresetTexture *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PresetTextured )( 
            ChartFillFormat * This,
            /* [in] */ MsoPresetTexture PresetTexture);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextureType )( 
            ChartFillFormat * This,
            /* [retval][out] */ MsoTextureType *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TwoColorGradient )( 
            ChartFillFormat * This,
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ long Variant);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ChartFillFormat * This,
            /* [retval][out] */ MsoFillType *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UserPicture )( 
            ChartFillFormat * This,
            /* [optional][in] */ VARIANT PictureFile,
            /* [optional][in] */ VARIANT PictureFormat,
            /* [optional][in] */ VARIANT PictureStackUnit,
            /* [optional][in] */ VARIANT PicturePlacement);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            ChartFillFormat * This,
            /* [retval][out] */ MsoTriState *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            ChartFillFormat * This,
            /* [in] */ MsoTriState RHS);
        
        END_INTERFACE
    } ChartFillFormatVtbl;

    interface ChartFillFormat
    {
        CONST_VTBL struct ChartFillFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ChartFillFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ChartFillFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ChartFillFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ChartFillFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ChartFillFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ChartFillFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ChartFillFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ChartFillFormat_Solid(This)	\
    ( (This)->lpVtbl -> Solid(This) ) 

#define ChartFillFormat_UserTextured(This,TextureFile)	\
    ( (This)->lpVtbl -> UserTextured(This,TextureFile) ) 

#define ChartFillFormat_get_BackColor(This,RHS)	\
    ( (This)->lpVtbl -> get_BackColor(This,RHS) ) 

#define ChartFillFormat_get_ForeColor(This,RHS)	\
    ( (This)->lpVtbl -> get_ForeColor(This,RHS) ) 

#define ChartFillFormat_get_GradientDegree(This,RHS)	\
    ( (This)->lpVtbl -> get_GradientDegree(This,RHS) ) 

#define ChartFillFormat_get_TextureName(This,RHS)	\
    ( (This)->lpVtbl -> get_TextureName(This,RHS) ) 

#define ChartFillFormat_get_Creator(This,RHS)	\
    ( (This)->lpVtbl -> get_Creator(This,RHS) ) 

#define ChartFillFormat_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define ChartFillFormat_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ChartFillFormat_OneColorGradient(This,Style,Variant,Degree)	\
    ( (This)->lpVtbl -> OneColorGradient(This,Style,Variant,Degree) ) 

#define ChartFillFormat_get_GradientColorType(This,RHS)	\
    ( (This)->lpVtbl -> get_GradientColorType(This,RHS) ) 

#define ChartFillFormat_get_GradientStyle(This,RHS)	\
    ( (This)->lpVtbl -> get_GradientStyle(This,RHS) ) 

#define ChartFillFormat_get_GradientVariant(This,RHS)	\
    ( (This)->lpVtbl -> get_GradientVariant(This,RHS) ) 

#define ChartFillFormat_get_Pattern(This,RHS)	\
    ( (This)->lpVtbl -> get_Pattern(This,RHS) ) 

#define ChartFillFormat_Patterned(This,Pattern)	\
    ( (This)->lpVtbl -> Patterned(This,Pattern) ) 

#define ChartFillFormat_PresetGradient(This,Style,Variant,PresetGradientType)	\
    ( (This)->lpVtbl -> PresetGradient(This,Style,Variant,PresetGradientType) ) 

#define ChartFillFormat_get_PresetGradientType(This,RHS)	\
    ( (This)->lpVtbl -> get_PresetGradientType(This,RHS) ) 

#define ChartFillFormat_get_PresetTexture(This,RHS)	\
    ( (This)->lpVtbl -> get_PresetTexture(This,RHS) ) 

#define ChartFillFormat_PresetTextured(This,PresetTexture)	\
    ( (This)->lpVtbl -> PresetTextured(This,PresetTexture) ) 

#define ChartFillFormat_get_TextureType(This,RHS)	\
    ( (This)->lpVtbl -> get_TextureType(This,RHS) ) 

#define ChartFillFormat_TwoColorGradient(This,Style,Variant)	\
    ( (This)->lpVtbl -> TwoColorGradient(This,Style,Variant) ) 

#define ChartFillFormat_get_Type(This,RHS)	\
    ( (This)->lpVtbl -> get_Type(This,RHS) ) 

#define ChartFillFormat_UserPicture(This,PictureFile,PictureFormat,PictureStackUnit,PicturePlacement)	\
    ( (This)->lpVtbl -> UserPicture(This,PictureFile,PictureFormat,PictureStackUnit,PicturePlacement) ) 

#define ChartFillFormat_get_Visible(This,RHS)	\
    ( (This)->lpVtbl -> get_Visible(This,RHS) ) 

#define ChartFillFormat_put_Visible(This,RHS)	\
    ( (This)->lpVtbl -> put_Visible(This,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ChartFillFormat_INTERFACE_DEFINED__ */


#ifndef __ChartFormat_INTERFACE_DEFINED__
#define __ChartFormat_INTERFACE_DEFINED__

/* interface ChartFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ChartFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A5C-F07E-4CA4-AF6F-BEF486AA4E6F")
    ChartFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ FillFormat **ppFill) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Glow( 
            /* [retval][out] */ /* external definition not present */ GlowFormat **ppGlow) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Line( 
            /* [retval][out] */ LineFormat **ppLine) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppparent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureFormat( 
            /* [retval][out] */ PictureFormat **ppPictureFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ ShadowFormat **ppShadow) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SoftEdge( 
            /* [retval][out] */ /* external definition not present */ SoftEdgeFormat **ppSoftEdge) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextFrame2( 
            /* [retval][out] */ TextFrame2 **ppTextFrame) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ThreeD( 
            /* [retval][out] */ ThreeDFormat **ppThreeD) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Adjustments( 
            /* [retval][out] */ Adjustments **ppAdjustments) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoShapeType( 
            /* [retval][out] */ MsoAutoShapeType *AutoShapeType) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoShapeType( 
            /* [in] */ MsoAutoShapeType AutoShapeType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ChartFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ChartFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ChartFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ChartFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ChartFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ChartFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ChartFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ChartFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            ChartFormat * This,
            /* [retval][out] */ FillFormat **ppFill);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Glow )( 
            ChartFormat * This,
            /* [retval][out] */ /* external definition not present */ GlowFormat **ppGlow);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            ChartFormat * This,
            /* [retval][out] */ LineFormat **ppLine);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ChartFormat * This,
            /* [retval][out] */ IDispatch **ppparent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureFormat )( 
            ChartFormat * This,
            /* [retval][out] */ PictureFormat **ppPictureFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            ChartFormat * This,
            /* [retval][out] */ ShadowFormat **ppShadow);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SoftEdge )( 
            ChartFormat * This,
            /* [retval][out] */ /* external definition not present */ SoftEdgeFormat **ppSoftEdge);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFrame2 )( 
            ChartFormat * This,
            /* [retval][out] */ TextFrame2 **ppTextFrame);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ThreeD )( 
            ChartFormat * This,
            /* [retval][out] */ ThreeDFormat **ppThreeD);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ChartFormat * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ChartFormat * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Adjustments )( 
            ChartFormat * This,
            /* [retval][out] */ Adjustments **ppAdjustments);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoShapeType )( 
            ChartFormat * This,
            /* [retval][out] */ MsoAutoShapeType *AutoShapeType);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoShapeType )( 
            ChartFormat * This,
            /* [in] */ MsoAutoShapeType AutoShapeType);
        
        END_INTERFACE
    } ChartFormatVtbl;

    interface ChartFormat
    {
        CONST_VTBL struct ChartFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ChartFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ChartFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ChartFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ChartFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ChartFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ChartFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ChartFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ChartFormat_get_Fill(This,ppFill)	\
    ( (This)->lpVtbl -> get_Fill(This,ppFill) ) 

#define ChartFormat_get_Glow(This,ppGlow)	\
    ( (This)->lpVtbl -> get_Glow(This,ppGlow) ) 

#define ChartFormat_get_Line(This,ppLine)	\
    ( (This)->lpVtbl -> get_Line(This,ppLine) ) 

#define ChartFormat_get_Parent(This,ppparent)	\
    ( (This)->lpVtbl -> get_Parent(This,ppparent) ) 

#define ChartFormat_get_PictureFormat(This,ppPictureFormat)	\
    ( (This)->lpVtbl -> get_PictureFormat(This,ppPictureFormat) ) 

#define ChartFormat_get_Shadow(This,ppShadow)	\
    ( (This)->lpVtbl -> get_Shadow(This,ppShadow) ) 

#define ChartFormat_get_SoftEdge(This,ppSoftEdge)	\
    ( (This)->lpVtbl -> get_SoftEdge(This,ppSoftEdge) ) 

#define ChartFormat_get_TextFrame2(This,ppTextFrame)	\
    ( (This)->lpVtbl -> get_TextFrame2(This,ppTextFrame) ) 

#define ChartFormat_get_ThreeD(This,ppThreeD)	\
    ( (This)->lpVtbl -> get_ThreeD(This,ppThreeD) ) 

#define ChartFormat_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define ChartFormat_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ChartFormat_get_Adjustments(This,ppAdjustments)	\
    ( (This)->lpVtbl -> get_Adjustments(This,ppAdjustments) ) 

#define ChartFormat_get_AutoShapeType(This,AutoShapeType)	\
    ( (This)->lpVtbl -> get_AutoShapeType(This,AutoShapeType) ) 

#define ChartFormat_put_AutoShapeType(This,AutoShapeType)	\
    ( (This)->lpVtbl -> put_AutoShapeType(This,AutoShapeType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ChartFormat_INTERFACE_DEFINED__ */


#ifndef __ChartGroup_INTERFACE_DEFINED__
#define __ChartGroup_INTERFACE_DEFINED__

/* interface ChartGroup */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ChartGroup;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A5D-F07E-4CA4-AF6F-BEF486AA4E6F")
    ChartGroup : public IDispatch
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_DownBars( 
            /* [retval][out] */ DownBars **ppdownbars) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_DropLines( 
            /* [retval][out] */ DropLines **ppdroplines) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_HasDropLines( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_HasDropLines( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_HasHiLoLines( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_HasHiLoLines( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_HasRadarAxisLabels( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_HasRadarAxisLabels( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_HasSeriesLines( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_HasSeriesLines( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_HasUpDownBars( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_HasUpDownBars( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_HiLoLines( 
            /* [retval][out] */ HiLoLines **ppHiLoLines) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SeriesCollection( 
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ IDispatch **ppSeriesCollection) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_SeriesLines( 
            /* [retval][out] */ SeriesLines **ppSeriesLines) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_UpBars( 
            /* [retval][out] */ UpBars **ppUpBars) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_VaryByCategories( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_VaryByCategories( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SizeRepresents( 
            /* [retval][out] */ XlSizeRepresents *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SizeRepresents( 
            /* [in] */ XlSizeRepresents RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowNegativeBubbles( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowNegativeBubbles( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SplitType( 
            /* [in] */ XlChartSplitType RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SplitType( 
            /* [retval][out] */ XlChartSplitType *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SplitValue( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SplitValue( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Has3DShading( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Has3DShading( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AxisGroup( 
            /* [retval][out] */ XlAxisGroup *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AxisGroup( 
            /* [in] */ XlAxisGroup RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BubbleScale( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BubbleScale( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DoughnutHoleSize( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DoughnutHoleSize( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstSliceAngle( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FirstSliceAngle( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GapWidth( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GapWidth( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Overlap( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Overlap( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RadarAxisLabels( 
            /* [retval][out] */ TickLabels **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Subtype( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Subtype( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SecondPlotSize( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SecondPlotSize( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CategoryCollection( 
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE FullCategoryCollection( 
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ChartGroupVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ChartGroup * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ChartGroup * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ChartGroup * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ChartGroup * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ChartGroup * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ChartGroup * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ChartGroup * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownBars )( 
            ChartGroup * This,
            /* [retval][out] */ DownBars **ppdownbars);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DropLines )( 
            ChartGroup * This,
            /* [retval][out] */ DropLines **ppdroplines);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasDropLines )( 
            ChartGroup * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasDropLines )( 
            ChartGroup * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasHiLoLines )( 
            ChartGroup * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasHiLoLines )( 
            ChartGroup * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasRadarAxisLabels )( 
            ChartGroup * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasRadarAxisLabels )( 
            ChartGroup * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasSeriesLines )( 
            ChartGroup * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasSeriesLines )( 
            ChartGroup * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasUpDownBars )( 
            ChartGroup * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasUpDownBars )( 
            ChartGroup * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HiLoLines )( 
            ChartGroup * This,
            /* [retval][out] */ HiLoLines **ppHiLoLines);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SeriesCollection )( 
            ChartGroup * This,
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ IDispatch **ppSeriesCollection);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SeriesLines )( 
            ChartGroup * This,
            /* [retval][out] */ SeriesLines **ppSeriesLines);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpBars )( 
            ChartGroup * This,
            /* [retval][out] */ UpBars **ppUpBars);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VaryByCategories )( 
            ChartGroup * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VaryByCategories )( 
            ChartGroup * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SizeRepresents )( 
            ChartGroup * This,
            /* [retval][out] */ XlSizeRepresents *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SizeRepresents )( 
            ChartGroup * This,
            /* [in] */ XlSizeRepresents RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowNegativeBubbles )( 
            ChartGroup * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowNegativeBubbles )( 
            ChartGroup * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SplitType )( 
            ChartGroup * This,
            /* [in] */ XlChartSplitType RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SplitType )( 
            ChartGroup * This,
            /* [retval][out] */ XlChartSplitType *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SplitValue )( 
            ChartGroup * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SplitValue )( 
            ChartGroup * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Has3DShading )( 
            ChartGroup * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Has3DShading )( 
            ChartGroup * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ChartGroup * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ChartGroup * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ChartGroup * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AxisGroup )( 
            ChartGroup * This,
            /* [retval][out] */ XlAxisGroup *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AxisGroup )( 
            ChartGroup * This,
            /* [in] */ XlAxisGroup RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BubbleScale )( 
            ChartGroup * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BubbleScale )( 
            ChartGroup * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DoughnutHoleSize )( 
            ChartGroup * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DoughnutHoleSize )( 
            ChartGroup * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstSliceAngle )( 
            ChartGroup * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FirstSliceAngle )( 
            ChartGroup * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GapWidth )( 
            ChartGroup * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GapWidth )( 
            ChartGroup * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            ChartGroup * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Overlap )( 
            ChartGroup * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Overlap )( 
            ChartGroup * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RadarAxisLabels )( 
            ChartGroup * This,
            /* [retval][out] */ TickLabels **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Subtype )( 
            ChartGroup * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Subtype )( 
            ChartGroup * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ChartGroup * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            ChartGroup * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SecondPlotSize )( 
            ChartGroup * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SecondPlotSize )( 
            ChartGroup * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CategoryCollection )( 
            ChartGroup * This,
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FullCategoryCollection )( 
            ChartGroup * This,
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ IDispatch **RHS);
        
        END_INTERFACE
    } ChartGroupVtbl;

    interface ChartGroup
    {
        CONST_VTBL struct ChartGroupVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ChartGroup_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ChartGroup_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ChartGroup_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ChartGroup_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ChartGroup_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ChartGroup_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ChartGroup_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ChartGroup_get_DownBars(This,ppdownbars)	\
    ( (This)->lpVtbl -> get_DownBars(This,ppdownbars) ) 

#define ChartGroup_get_DropLines(This,ppdroplines)	\
    ( (This)->lpVtbl -> get_DropLines(This,ppdroplines) ) 

#define ChartGroup_put_HasDropLines(This,RHS)	\
    ( (This)->lpVtbl -> put_HasDropLines(This,RHS) ) 

#define ChartGroup_get_HasDropLines(This,RHS)	\
    ( (This)->lpVtbl -> get_HasDropLines(This,RHS) ) 

#define ChartGroup_put_HasHiLoLines(This,RHS)	\
    ( (This)->lpVtbl -> put_HasHiLoLines(This,RHS) ) 

#define ChartGroup_get_HasHiLoLines(This,RHS)	\
    ( (This)->lpVtbl -> get_HasHiLoLines(This,RHS) ) 

#define ChartGroup_put_HasRadarAxisLabels(This,RHS)	\
    ( (This)->lpVtbl -> put_HasRadarAxisLabels(This,RHS) ) 

#define ChartGroup_get_HasRadarAxisLabels(This,RHS)	\
    ( (This)->lpVtbl -> get_HasRadarAxisLabels(This,RHS) ) 

#define ChartGroup_put_HasSeriesLines(This,RHS)	\
    ( (This)->lpVtbl -> put_HasSeriesLines(This,RHS) ) 

#define ChartGroup_get_HasSeriesLines(This,RHS)	\
    ( (This)->lpVtbl -> get_HasSeriesLines(This,RHS) ) 

#define ChartGroup_put_HasUpDownBars(This,RHS)	\
    ( (This)->lpVtbl -> put_HasUpDownBars(This,RHS) ) 

#define ChartGroup_get_HasUpDownBars(This,RHS)	\
    ( (This)->lpVtbl -> get_HasUpDownBars(This,RHS) ) 

#define ChartGroup_get_HiLoLines(This,ppHiLoLines)	\
    ( (This)->lpVtbl -> get_HiLoLines(This,ppHiLoLines) ) 

#define ChartGroup_SeriesCollection(This,Index,ppSeriesCollection)	\
    ( (This)->lpVtbl -> SeriesCollection(This,Index,ppSeriesCollection) ) 

#define ChartGroup_get_SeriesLines(This,ppSeriesLines)	\
    ( (This)->lpVtbl -> get_SeriesLines(This,ppSeriesLines) ) 

#define ChartGroup_get_UpBars(This,ppUpBars)	\
    ( (This)->lpVtbl -> get_UpBars(This,ppUpBars) ) 

#define ChartGroup_put_VaryByCategories(This,RHS)	\
    ( (This)->lpVtbl -> put_VaryByCategories(This,RHS) ) 

#define ChartGroup_get_VaryByCategories(This,RHS)	\
    ( (This)->lpVtbl -> get_VaryByCategories(This,RHS) ) 

#define ChartGroup_get_SizeRepresents(This,RHS)	\
    ( (This)->lpVtbl -> get_SizeRepresents(This,RHS) ) 

#define ChartGroup_put_SizeRepresents(This,RHS)	\
    ( (This)->lpVtbl -> put_SizeRepresents(This,RHS) ) 

#define ChartGroup_put_ShowNegativeBubbles(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowNegativeBubbles(This,RHS) ) 

#define ChartGroup_get_ShowNegativeBubbles(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowNegativeBubbles(This,RHS) ) 

#define ChartGroup_put_SplitType(This,RHS)	\
    ( (This)->lpVtbl -> put_SplitType(This,RHS) ) 

#define ChartGroup_get_SplitType(This,RHS)	\
    ( (This)->lpVtbl -> get_SplitType(This,RHS) ) 

#define ChartGroup_get_SplitValue(This,RHS)	\
    ( (This)->lpVtbl -> get_SplitValue(This,RHS) ) 

#define ChartGroup_put_SplitValue(This,RHS)	\
    ( (This)->lpVtbl -> put_SplitValue(This,RHS) ) 

#define ChartGroup_get_Has3DShading(This,RHS)	\
    ( (This)->lpVtbl -> get_Has3DShading(This,RHS) ) 

#define ChartGroup_put_Has3DShading(This,RHS)	\
    ( (This)->lpVtbl -> put_Has3DShading(This,RHS) ) 

#define ChartGroup_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define ChartGroup_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define ChartGroup_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ChartGroup_get_AxisGroup(This,RHS)	\
    ( (This)->lpVtbl -> get_AxisGroup(This,RHS) ) 

#define ChartGroup_put_AxisGroup(This,RHS)	\
    ( (This)->lpVtbl -> put_AxisGroup(This,RHS) ) 

#define ChartGroup_get_BubbleScale(This,RHS)	\
    ( (This)->lpVtbl -> get_BubbleScale(This,RHS) ) 

#define ChartGroup_put_BubbleScale(This,RHS)	\
    ( (This)->lpVtbl -> put_BubbleScale(This,RHS) ) 

#define ChartGroup_get_DoughnutHoleSize(This,RHS)	\
    ( (This)->lpVtbl -> get_DoughnutHoleSize(This,RHS) ) 

#define ChartGroup_put_DoughnutHoleSize(This,RHS)	\
    ( (This)->lpVtbl -> put_DoughnutHoleSize(This,RHS) ) 

#define ChartGroup_get_FirstSliceAngle(This,RHS)	\
    ( (This)->lpVtbl -> get_FirstSliceAngle(This,RHS) ) 

#define ChartGroup_put_FirstSliceAngle(This,RHS)	\
    ( (This)->lpVtbl -> put_FirstSliceAngle(This,RHS) ) 

#define ChartGroup_get_GapWidth(This,RHS)	\
    ( (This)->lpVtbl -> get_GapWidth(This,RHS) ) 

#define ChartGroup_put_GapWidth(This,RHS)	\
    ( (This)->lpVtbl -> put_GapWidth(This,RHS) ) 

#define ChartGroup_get_Index(This,RHS)	\
    ( (This)->lpVtbl -> get_Index(This,RHS) ) 

#define ChartGroup_get_Overlap(This,RHS)	\
    ( (This)->lpVtbl -> get_Overlap(This,RHS) ) 

#define ChartGroup_put_Overlap(This,RHS)	\
    ( (This)->lpVtbl -> put_Overlap(This,RHS) ) 

#define ChartGroup_get_RadarAxisLabels(This,RHS)	\
    ( (This)->lpVtbl -> get_RadarAxisLabels(This,RHS) ) 

#define ChartGroup_get_Subtype(This,RHS)	\
    ( (This)->lpVtbl -> get_Subtype(This,RHS) ) 

#define ChartGroup_put_Subtype(This,RHS)	\
    ( (This)->lpVtbl -> put_Subtype(This,RHS) ) 

#define ChartGroup_get_Type(This,RHS)	\
    ( (This)->lpVtbl -> get_Type(This,RHS) ) 

#define ChartGroup_put_Type(This,RHS)	\
    ( (This)->lpVtbl -> put_Type(This,RHS) ) 

#define ChartGroup_get_SecondPlotSize(This,RHS)	\
    ( (This)->lpVtbl -> get_SecondPlotSize(This,RHS) ) 

#define ChartGroup_put_SecondPlotSize(This,RHS)	\
    ( (This)->lpVtbl -> put_SecondPlotSize(This,RHS) ) 

#define ChartGroup_CategoryCollection(This,Index,RHS)	\
    ( (This)->lpVtbl -> CategoryCollection(This,Index,RHS) ) 

#define ChartGroup_FullCategoryCollection(This,Index,RHS)	\
    ( (This)->lpVtbl -> FullCategoryCollection(This,Index,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ChartGroup_INTERFACE_DEFINED__ */


#ifndef __ChartGroups_INTERFACE_DEFINED__
#define __ChartGroups_INTERFACE_DEFINED__

/* interface ChartGroups */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ChartGroups;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A5E-F07E-4CA4-AF6F-BEF486AA4E6F")
    ChartGroups : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ ChartGroup **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ChartGroupsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ChartGroups * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ChartGroups * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ChartGroups * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ChartGroups * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ChartGroups * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ChartGroups * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ChartGroups * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ChartGroups * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ChartGroups * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ChartGroups * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ ChartGroup **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            ChartGroups * This,
            /* [retval][out] */ IUnknown **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ChartGroups * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ChartGroups * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } ChartGroupsVtbl;

    interface ChartGroups
    {
        CONST_VTBL struct ChartGroupsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ChartGroups_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ChartGroups_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ChartGroups_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ChartGroups_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ChartGroups_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ChartGroups_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ChartGroups_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ChartGroups_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define ChartGroups_get_Count(This,RHS)	\
    ( (This)->lpVtbl -> get_Count(This,RHS) ) 

#define ChartGroups_Item(This,Index,RHS)	\
    ( (This)->lpVtbl -> Item(This,Index,RHS) ) 

#define ChartGroups__NewEnum(This,RHS)	\
    ( (This)->lpVtbl -> _NewEnum(This,RHS) ) 

#define ChartGroups_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define ChartGroups_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ChartGroups_INTERFACE_DEFINED__ */


#ifndef __ChartTitle_INTERFACE_DEFINED__
#define __ChartTitle_INTERFACE_DEFINED__

/* interface ChartTitle */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ChartTitle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A5F-F07E-4CA4-AF6F-BEF486AA4E6F")
    ChartTitle : public IDispatch
    {
    public:
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Caption( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Caption( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Characters( 
            /* [optional][in] */ VARIANT Start,
            /* [optional][in] */ VARIANT Length,
            /* [retval][out] */ ChartCharacters **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ ChartFont **ppfont) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalAlignment( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalAlignment( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Orientation( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Shadow( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalAlignment( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalAlignment( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoScaleFont( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoScaleFont( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Interior( 
            /* [retval][out] */ Interior **ppinterior) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ ChartFillFormat **ppinterior) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **ppborder) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppval) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludeInLayout( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludeInLayout( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ XlChartElementPosition *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ XlChartElementPosition RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadingOrder( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadingOrder( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *Width) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Formula( 
            /* [in] */ BSTR pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Formula( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormulaR1C1( 
            /* [in] */ BSTR pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormulaR1C1( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormulaLocal( 
            /* [in] */ BSTR pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormulaLocal( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormulaR1C1Local( 
            /* [in] */ BSTR pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormulaR1C1Local( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ChartTitleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ChartTitle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ChartTitle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ChartTitle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ChartTitle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ChartTitle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ChartTitle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ChartTitle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Caption )( 
            ChartTitle * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Caption )( 
            ChartTitle * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Characters )( 
            ChartTitle * This,
            /* [optional][in] */ VARIANT Start,
            /* [optional][in] */ VARIANT Length,
            /* [retval][out] */ ChartCharacters **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            ChartTitle * This,
            /* [retval][out] */ ChartFont **ppfont);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )( 
            ChartTitle * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )( 
            ChartTitle * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            ChartTitle * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            ChartTitle * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Orientation )( 
            ChartTitle * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Orientation )( 
            ChartTitle * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            ChartTitle * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadow )( 
            ChartTitle * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            ChartTitle * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            ChartTitle * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            ChartTitle * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            ChartTitle * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )( 
            ChartTitle * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )( 
            ChartTitle * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoScaleFont )( 
            ChartTitle * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoScaleFont )( 
            ChartTitle * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Interior )( 
            ChartTitle * This,
            /* [retval][out] */ Interior **ppinterior);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            ChartTitle * This,
            /* [retval][out] */ ChartFillFormat **ppinterior);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ChartTitle * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            ChartTitle * This,
            /* [retval][out] */ ChartBorder **ppborder);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ChartTitle * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ChartTitle * This,
            /* [retval][out] */ IDispatch **ppval);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            ChartTitle * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeInLayout )( 
            ChartTitle * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeInLayout )( 
            ChartTitle * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            ChartTitle * This,
            /* [retval][out] */ XlChartElementPosition *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            ChartTitle * This,
            /* [in] */ XlChartElementPosition RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            ChartTitle * This,
            /* [retval][out] */ ChartFormat **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ChartTitle * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ChartTitle * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingOrder )( 
            ChartTitle * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingOrder )( 
            ChartTitle * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            ChartTitle * This,
            /* [retval][out] */ double *Height);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            ChartTitle * This,
            /* [retval][out] */ double *Width);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Formula )( 
            ChartTitle * This,
            /* [in] */ BSTR pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Formula )( 
            ChartTitle * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormulaR1C1 )( 
            ChartTitle * This,
            /* [in] */ BSTR pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormulaR1C1 )( 
            ChartTitle * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormulaLocal )( 
            ChartTitle * This,
            /* [in] */ BSTR pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormulaLocal )( 
            ChartTitle * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormulaR1C1Local )( 
            ChartTitle * This,
            /* [in] */ BSTR pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormulaR1C1Local )( 
            ChartTitle * This,
            /* [retval][out] */ BSTR *pbstr);
        
        END_INTERFACE
    } ChartTitleVtbl;

    interface ChartTitle
    {
        CONST_VTBL struct ChartTitleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ChartTitle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ChartTitle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ChartTitle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ChartTitle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ChartTitle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ChartTitle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ChartTitle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ChartTitle_put_Caption(This,RHS)	\
    ( (This)->lpVtbl -> put_Caption(This,RHS) ) 

#define ChartTitle_get_Caption(This,RHS)	\
    ( (This)->lpVtbl -> get_Caption(This,RHS) ) 

#define ChartTitle_get_Characters(This,Start,Length,RHS)	\
    ( (This)->lpVtbl -> get_Characters(This,Start,Length,RHS) ) 

#define ChartTitle_get_Font(This,ppfont)	\
    ( (This)->lpVtbl -> get_Font(This,ppfont) ) 

#define ChartTitle_put_HorizontalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> put_HorizontalAlignment(This,RHS) ) 

#define ChartTitle_get_HorizontalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> get_HorizontalAlignment(This,RHS) ) 

#define ChartTitle_get_Left(This,RHS)	\
    ( (This)->lpVtbl -> get_Left(This,RHS) ) 

#define ChartTitle_put_Left(This,RHS)	\
    ( (This)->lpVtbl -> put_Left(This,RHS) ) 

#define ChartTitle_put_Orientation(This,RHS)	\
    ( (This)->lpVtbl -> put_Orientation(This,RHS) ) 

#define ChartTitle_get_Orientation(This,RHS)	\
    ( (This)->lpVtbl -> get_Orientation(This,RHS) ) 

#define ChartTitle_get_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> get_Shadow(This,RHS) ) 

#define ChartTitle_put_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> put_Shadow(This,RHS) ) 

#define ChartTitle_put_Text(This,RHS)	\
    ( (This)->lpVtbl -> put_Text(This,RHS) ) 

#define ChartTitle_get_Text(This,RHS)	\
    ( (This)->lpVtbl -> get_Text(This,RHS) ) 

#define ChartTitle_get_Top(This,RHS)	\
    ( (This)->lpVtbl -> get_Top(This,RHS) ) 

#define ChartTitle_put_Top(This,RHS)	\
    ( (This)->lpVtbl -> put_Top(This,RHS) ) 

#define ChartTitle_put_VerticalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> put_VerticalAlignment(This,RHS) ) 

#define ChartTitle_get_VerticalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> get_VerticalAlignment(This,RHS) ) 

#define ChartTitle_put_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> put_AutoScaleFont(This,RHS) ) 

#define ChartTitle_get_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> get_AutoScaleFont(This,RHS) ) 

#define ChartTitle_get_Interior(This,ppinterior)	\
    ( (This)->lpVtbl -> get_Interior(This,ppinterior) ) 

#define ChartTitle_get_Fill(This,ppinterior)	\
    ( (This)->lpVtbl -> get_Fill(This,ppinterior) ) 

#define ChartTitle_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define ChartTitle_get_Border(This,ppborder)	\
    ( (This)->lpVtbl -> get_Border(This,ppborder) ) 

#define ChartTitle_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define ChartTitle_get_Parent(This,ppval)	\
    ( (This)->lpVtbl -> get_Parent(This,ppval) ) 

#define ChartTitle_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#define ChartTitle_get_IncludeInLayout(This,RHS)	\
    ( (This)->lpVtbl -> get_IncludeInLayout(This,RHS) ) 

#define ChartTitle_put_IncludeInLayout(This,RHS)	\
    ( (This)->lpVtbl -> put_IncludeInLayout(This,RHS) ) 

#define ChartTitle_get_Position(This,RHS)	\
    ( (This)->lpVtbl -> get_Position(This,RHS) ) 

#define ChartTitle_put_Position(This,RHS)	\
    ( (This)->lpVtbl -> put_Position(This,RHS) ) 

#define ChartTitle_get_Format(This,RHS)	\
    ( (This)->lpVtbl -> get_Format(This,RHS) ) 

#define ChartTitle_get_Creator(This,RHS)	\
    ( (This)->lpVtbl -> get_Creator(This,RHS) ) 

#define ChartTitle_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ChartTitle_get_ReadingOrder(This,RHS)	\
    ( (This)->lpVtbl -> get_ReadingOrder(This,RHS) ) 

#define ChartTitle_put_ReadingOrder(This,RHS)	\
    ( (This)->lpVtbl -> put_ReadingOrder(This,RHS) ) 

#define ChartTitle_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define ChartTitle_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define ChartTitle_put_Formula(This,pbstr)	\
    ( (This)->lpVtbl -> put_Formula(This,pbstr) ) 

#define ChartTitle_get_Formula(This,pbstr)	\
    ( (This)->lpVtbl -> get_Formula(This,pbstr) ) 

#define ChartTitle_put_FormulaR1C1(This,pbstr)	\
    ( (This)->lpVtbl -> put_FormulaR1C1(This,pbstr) ) 

#define ChartTitle_get_FormulaR1C1(This,pbstr)	\
    ( (This)->lpVtbl -> get_FormulaR1C1(This,pbstr) ) 

#define ChartTitle_put_FormulaLocal(This,pbstr)	\
    ( (This)->lpVtbl -> put_FormulaLocal(This,pbstr) ) 

#define ChartTitle_get_FormulaLocal(This,pbstr)	\
    ( (This)->lpVtbl -> get_FormulaLocal(This,pbstr) ) 

#define ChartTitle_put_FormulaR1C1Local(This,pbstr)	\
    ( (This)->lpVtbl -> put_FormulaR1C1Local(This,pbstr) ) 

#define ChartTitle_get_FormulaR1C1Local(This,pbstr)	\
    ( (This)->lpVtbl -> get_FormulaR1C1Local(This,pbstr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ChartTitle_INTERFACE_DEFINED__ */


#ifndef __Corners_INTERFACE_DEFINED__
#define __Corners_INTERFACE_DEFINED__

/* interface Corners */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][uuid] */ 


extern "C++" const IID IID_Corners;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A60-F07E-4CA4-AF6F-BEF486AA4E6F")
    Corners : public IDispatch
    {
    public:
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CornersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Corners * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Corners * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Corners * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Corners * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Corners * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Corners * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Corners * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Corners * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Corners * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Corners * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Corners * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Corners * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } CornersVtbl;

    interface Corners
    {
        CONST_VTBL struct CornersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Corners_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Corners_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Corners_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Corners_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Corners_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Corners_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Corners_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Corners_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define Corners_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define Corners_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#define Corners_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define Corners_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Corners_INTERFACE_DEFINED__ */


#ifndef __DataLabel_INTERFACE_DEFINED__
#define __DataLabel_INTERFACE_DEFINED__

/* interface DataLabel */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_DataLabel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A61-F07E-4CA4-AF6F-BEF486AA4E6F")
    DataLabel : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Interior( 
            /* [retval][out] */ Interior **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ ChartFillFormat **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Caption( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Caption( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Characters( 
            /* [optional][in] */ VARIANT Start,
            /* [optional][in] */ VARIANT Length,
            /* [retval][out] */ ChartCharacters **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ ChartFont **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalAlignment( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalAlignment( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Orientation( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Shadow( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalAlignment( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalAlignment( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadingOrder( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadingOrder( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoScaleFont( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoScaleFont( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoText( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoText( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberFormat( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberFormat( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberFormatLinked( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberFormatLinked( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberFormatLocal( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberFormatLocal( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowLegendKey( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowLegendKey( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ XlDataLabelPosition *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ XlDataLabelPosition RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowSeriesName( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowSeriesName( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowCategoryName( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowCategoryName( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowValue( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowValue( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowPercentage( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowPercentage( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowBubbleSize( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowBubbleSize( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Separator( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Separator( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get__Height( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get__Width( 
            /* [retval][out] */ double *Width) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Formula( 
            /* [in] */ BSTR pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Formula( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormulaR1C1( 
            /* [in] */ BSTR pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormulaR1C1( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormulaLocal( 
            /* [in] */ BSTR pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormulaLocal( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormulaR1C1Local( 
            /* [in] */ BSTR pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormulaR1C1Local( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowRange( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowRange( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double Height) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *Width) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ double Width) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DataLabelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DataLabel * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DataLabel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DataLabel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DataLabel * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DataLabel * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DataLabel * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DataLabel * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DataLabel * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            DataLabel * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            DataLabel * This,
            /* [retval][out] */ ChartBorder **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Interior )( 
            DataLabel * This,
            /* [retval][out] */ Interior **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            DataLabel * This,
            /* [retval][out] */ ChartFillFormat **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Caption )( 
            DataLabel * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Caption )( 
            DataLabel * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Characters )( 
            DataLabel * This,
            /* [optional][in] */ VARIANT Start,
            /* [optional][in] */ VARIANT Length,
            /* [retval][out] */ ChartCharacters **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            DataLabel * This,
            /* [retval][out] */ ChartFont **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )( 
            DataLabel * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            DataLabel * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            DataLabel * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Orientation )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Orientation )( 
            DataLabel * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadow )( 
            DataLabel * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            DataLabel * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            DataLabel * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            DataLabel * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            DataLabel * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )( 
            DataLabel * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingOrder )( 
            DataLabel * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingOrder )( 
            DataLabel * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoScaleFont )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoScaleFont )( 
            DataLabel * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoText )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoText )( 
            DataLabel * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberFormat )( 
            DataLabel * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberFormat )( 
            DataLabel * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberFormatLinked )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberFormatLinked )( 
            DataLabel * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberFormatLocal )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberFormatLocal )( 
            DataLabel * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowLegendKey )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowLegendKey )( 
            DataLabel * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            DataLabel * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            DataLabel * This,
            /* [retval][out] */ XlDataLabelPosition *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            DataLabel * This,
            /* [in] */ XlDataLabelPosition RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowSeriesName )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowSeriesName )( 
            DataLabel * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowCategoryName )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowCategoryName )( 
            DataLabel * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowValue )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowValue )( 
            DataLabel * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowPercentage )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowPercentage )( 
            DataLabel * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowBubbleSize )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowBubbleSize )( 
            DataLabel * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Separator )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Separator )( 
            DataLabel * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            DataLabel * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            DataLabel * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            DataLabel * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Height )( 
            DataLabel * This,
            /* [retval][out] */ double *Height);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Width )( 
            DataLabel * This,
            /* [retval][out] */ double *Width);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Formula )( 
            DataLabel * This,
            /* [in] */ BSTR pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Formula )( 
            DataLabel * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormulaR1C1 )( 
            DataLabel * This,
            /* [in] */ BSTR pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormulaR1C1 )( 
            DataLabel * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormulaLocal )( 
            DataLabel * This,
            /* [in] */ BSTR pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormulaLocal )( 
            DataLabel * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormulaR1C1Local )( 
            DataLabel * This,
            /* [in] */ BSTR pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormulaR1C1Local )( 
            DataLabel * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowRange )( 
            DataLabel * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowRange )( 
            DataLabel * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            DataLabel * This,
            /* [retval][out] */ double *Height);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            DataLabel * This,
            /* [in] */ double Height);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            DataLabel * This,
            /* [retval][out] */ double *Width);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            DataLabel * This,
            /* [in] */ double Width);
        
        END_INTERFACE
    } DataLabelVtbl;

    interface DataLabel
    {
        CONST_VTBL struct DataLabelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DataLabel_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DataLabel_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DataLabel_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DataLabel_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DataLabel_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DataLabel_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DataLabel_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DataLabel_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define DataLabel_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define DataLabel_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#define DataLabel_get_Border(This,RHS)	\
    ( (This)->lpVtbl -> get_Border(This,RHS) ) 

#define DataLabel_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define DataLabel_get_Interior(This,RHS)	\
    ( (This)->lpVtbl -> get_Interior(This,RHS) ) 

#define DataLabel_get_Fill(This,RHS)	\
    ( (This)->lpVtbl -> get_Fill(This,RHS) ) 

#define DataLabel_get_Caption(This,RHS)	\
    ( (This)->lpVtbl -> get_Caption(This,RHS) ) 

#define DataLabel_put_Caption(This,RHS)	\
    ( (This)->lpVtbl -> put_Caption(This,RHS) ) 

#define DataLabel_get_Characters(This,Start,Length,RHS)	\
    ( (This)->lpVtbl -> get_Characters(This,Start,Length,RHS) ) 

#define DataLabel_get_Font(This,RHS)	\
    ( (This)->lpVtbl -> get_Font(This,RHS) ) 

#define DataLabel_get_HorizontalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> get_HorizontalAlignment(This,RHS) ) 

#define DataLabel_put_HorizontalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> put_HorizontalAlignment(This,RHS) ) 

#define DataLabel_get_Left(This,RHS)	\
    ( (This)->lpVtbl -> get_Left(This,RHS) ) 

#define DataLabel_put_Left(This,RHS)	\
    ( (This)->lpVtbl -> put_Left(This,RHS) ) 

#define DataLabel_get_Orientation(This,RHS)	\
    ( (This)->lpVtbl -> get_Orientation(This,RHS) ) 

#define DataLabel_put_Orientation(This,RHS)	\
    ( (This)->lpVtbl -> put_Orientation(This,RHS) ) 

#define DataLabel_get_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> get_Shadow(This,RHS) ) 

#define DataLabel_put_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> put_Shadow(This,RHS) ) 

#define DataLabel_get_Text(This,RHS)	\
    ( (This)->lpVtbl -> get_Text(This,RHS) ) 

#define DataLabel_put_Text(This,RHS)	\
    ( (This)->lpVtbl -> put_Text(This,RHS) ) 

#define DataLabel_get_Top(This,RHS)	\
    ( (This)->lpVtbl -> get_Top(This,RHS) ) 

#define DataLabel_put_Top(This,RHS)	\
    ( (This)->lpVtbl -> put_Top(This,RHS) ) 

#define DataLabel_get_VerticalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> get_VerticalAlignment(This,RHS) ) 

#define DataLabel_put_VerticalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> put_VerticalAlignment(This,RHS) ) 

#define DataLabel_get_ReadingOrder(This,RHS)	\
    ( (This)->lpVtbl -> get_ReadingOrder(This,RHS) ) 

#define DataLabel_put_ReadingOrder(This,RHS)	\
    ( (This)->lpVtbl -> put_ReadingOrder(This,RHS) ) 

#define DataLabel_get_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> get_AutoScaleFont(This,RHS) ) 

#define DataLabel_put_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> put_AutoScaleFont(This,RHS) ) 

#define DataLabel_get_AutoText(This,RHS)	\
    ( (This)->lpVtbl -> get_AutoText(This,RHS) ) 

#define DataLabel_put_AutoText(This,RHS)	\
    ( (This)->lpVtbl -> put_AutoText(This,RHS) ) 

#define DataLabel_get_NumberFormat(This,RHS)	\
    ( (This)->lpVtbl -> get_NumberFormat(This,RHS) ) 

#define DataLabel_put_NumberFormat(This,RHS)	\
    ( (This)->lpVtbl -> put_NumberFormat(This,RHS) ) 

#define DataLabel_get_NumberFormatLinked(This,RHS)	\
    ( (This)->lpVtbl -> get_NumberFormatLinked(This,RHS) ) 

#define DataLabel_put_NumberFormatLinked(This,RHS)	\
    ( (This)->lpVtbl -> put_NumberFormatLinked(This,RHS) ) 

#define DataLabel_get_NumberFormatLocal(This,RHS)	\
    ( (This)->lpVtbl -> get_NumberFormatLocal(This,RHS) ) 

#define DataLabel_put_NumberFormatLocal(This,RHS)	\
    ( (This)->lpVtbl -> put_NumberFormatLocal(This,RHS) ) 

#define DataLabel_get_ShowLegendKey(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowLegendKey(This,RHS) ) 

#define DataLabel_put_ShowLegendKey(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowLegendKey(This,RHS) ) 

#define DataLabel_get_Type(This,RHS)	\
    ( (This)->lpVtbl -> get_Type(This,RHS) ) 

#define DataLabel_put_Type(This,RHS)	\
    ( (This)->lpVtbl -> put_Type(This,RHS) ) 

#define DataLabel_get_Position(This,RHS)	\
    ( (This)->lpVtbl -> get_Position(This,RHS) ) 

#define DataLabel_put_Position(This,RHS)	\
    ( (This)->lpVtbl -> put_Position(This,RHS) ) 

#define DataLabel_get_ShowSeriesName(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowSeriesName(This,RHS) ) 

#define DataLabel_put_ShowSeriesName(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowSeriesName(This,RHS) ) 

#define DataLabel_get_ShowCategoryName(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowCategoryName(This,RHS) ) 

#define DataLabel_put_ShowCategoryName(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowCategoryName(This,RHS) ) 

#define DataLabel_get_ShowValue(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowValue(This,RHS) ) 

#define DataLabel_put_ShowValue(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowValue(This,RHS) ) 

#define DataLabel_get_ShowPercentage(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowPercentage(This,RHS) ) 

#define DataLabel_put_ShowPercentage(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowPercentage(This,RHS) ) 

#define DataLabel_get_ShowBubbleSize(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowBubbleSize(This,RHS) ) 

#define DataLabel_put_ShowBubbleSize(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowBubbleSize(This,RHS) ) 

#define DataLabel_get_Separator(This,RHS)	\
    ( (This)->lpVtbl -> get_Separator(This,RHS) ) 

#define DataLabel_put_Separator(This,RHS)	\
    ( (This)->lpVtbl -> put_Separator(This,RHS) ) 

#define DataLabel_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define DataLabel_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define DataLabel_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define DataLabel_get__Height(This,Height)	\
    ( (This)->lpVtbl -> get__Height(This,Height) ) 

#define DataLabel_get__Width(This,Width)	\
    ( (This)->lpVtbl -> get__Width(This,Width) ) 

#define DataLabel_put_Formula(This,pbstr)	\
    ( (This)->lpVtbl -> put_Formula(This,pbstr) ) 

#define DataLabel_get_Formula(This,pbstr)	\
    ( (This)->lpVtbl -> get_Formula(This,pbstr) ) 

#define DataLabel_put_FormulaR1C1(This,pbstr)	\
    ( (This)->lpVtbl -> put_FormulaR1C1(This,pbstr) ) 

#define DataLabel_get_FormulaR1C1(This,pbstr)	\
    ( (This)->lpVtbl -> get_FormulaR1C1(This,pbstr) ) 

#define DataLabel_put_FormulaLocal(This,pbstr)	\
    ( (This)->lpVtbl -> put_FormulaLocal(This,pbstr) ) 

#define DataLabel_get_FormulaLocal(This,pbstr)	\
    ( (This)->lpVtbl -> get_FormulaLocal(This,pbstr) ) 

#define DataLabel_put_FormulaR1C1Local(This,pbstr)	\
    ( (This)->lpVtbl -> put_FormulaR1C1Local(This,pbstr) ) 

#define DataLabel_get_FormulaR1C1Local(This,pbstr)	\
    ( (This)->lpVtbl -> get_FormulaR1C1Local(This,pbstr) ) 

#define DataLabel_get_ShowRange(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowRange(This,RHS) ) 

#define DataLabel_put_ShowRange(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowRange(This,RHS) ) 

#define DataLabel_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define DataLabel_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define DataLabel_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define DataLabel_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DataLabel_INTERFACE_DEFINED__ */


#ifndef __DataLabels_INTERFACE_DEFINED__
#define __DataLabels_INTERFACE_DEFINED__

/* interface DataLabels */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_DataLabels;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A62-F07E-4CA4-AF6F-BEF486AA4E6F")
    DataLabels : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Interior( 
            /* [retval][out] */ Interior **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ ChartFillFormat **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ ChartFont **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalAlignment( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalAlignment( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Orientation( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Shadow( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalAlignment( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalAlignment( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadingOrder( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadingOrder( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoScaleFont( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoScaleFont( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoText( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoText( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberFormat( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberFormat( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberFormatLinked( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberFormatLinked( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberFormatLocal( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberFormatLocal( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowLegendKey( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowLegendKey( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ XlDataLabelPosition *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ XlDataLabelPosition RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowSeriesName( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowSeriesName( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowCategoryName( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowCategoryName( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowValue( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowValue( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowPercentage( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowPercentage( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowBubbleSize( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowBubbleSize( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Separator( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Separator( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ DataLabel **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Default( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ DataLabel **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Propagate( 
            /* [in] */ VARIANT Index) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowRange( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowRange( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DataLabelsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DataLabels * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DataLabels * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DataLabels * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DataLabels * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DataLabels * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DataLabels * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DataLabels * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DataLabels * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            DataLabels * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            DataLabels * This,
            /* [retval][out] */ ChartBorder **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Interior )( 
            DataLabels * This,
            /* [retval][out] */ Interior **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            DataLabels * This,
            /* [retval][out] */ ChartFillFormat **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            DataLabels * This,
            /* [retval][out] */ ChartFont **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )( 
            DataLabels * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Orientation )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Orientation )( 
            DataLabels * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadow )( 
            DataLabels * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )( 
            DataLabels * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingOrder )( 
            DataLabels * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingOrder )( 
            DataLabels * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoScaleFont )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoScaleFont )( 
            DataLabels * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoText )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoText )( 
            DataLabels * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberFormat )( 
            DataLabels * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberFormat )( 
            DataLabels * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberFormatLinked )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberFormatLinked )( 
            DataLabels * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberFormatLocal )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberFormatLocal )( 
            DataLabels * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowLegendKey )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowLegendKey )( 
            DataLabels * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            DataLabels * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            DataLabels * This,
            /* [retval][out] */ XlDataLabelPosition *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            DataLabels * This,
            /* [in] */ XlDataLabelPosition RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowSeriesName )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowSeriesName )( 
            DataLabels * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowCategoryName )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowCategoryName )( 
            DataLabels * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowValue )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowValue )( 
            DataLabels * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowPercentage )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowPercentage )( 
            DataLabels * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowBubbleSize )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowBubbleSize )( 
            DataLabels * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Separator )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Separator )( 
            DataLabels * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            DataLabels * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            DataLabels * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ DataLabel **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            DataLabels * This,
            /* [retval][out] */ IUnknown **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            DataLabels * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            DataLabels * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            DataLabels * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *_Default )( 
            DataLabels * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ DataLabel **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Propagate )( 
            DataLabels * This,
            /* [in] */ VARIANT Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowRange )( 
            DataLabels * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowRange )( 
            DataLabels * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        END_INTERFACE
    } DataLabelsVtbl;

    interface DataLabels
    {
        CONST_VTBL struct DataLabelsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DataLabels_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DataLabels_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DataLabels_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DataLabels_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DataLabels_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DataLabels_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DataLabels_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DataLabels_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define DataLabels_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define DataLabels_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#define DataLabels_get_Border(This,RHS)	\
    ( (This)->lpVtbl -> get_Border(This,RHS) ) 

#define DataLabels_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define DataLabels_get_Interior(This,RHS)	\
    ( (This)->lpVtbl -> get_Interior(This,RHS) ) 

#define DataLabels_get_Fill(This,RHS)	\
    ( (This)->lpVtbl -> get_Fill(This,RHS) ) 

#define DataLabels_get_Font(This,RHS)	\
    ( (This)->lpVtbl -> get_Font(This,RHS) ) 

#define DataLabels_get_HorizontalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> get_HorizontalAlignment(This,RHS) ) 

#define DataLabels_put_HorizontalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> put_HorizontalAlignment(This,RHS) ) 

#define DataLabels_get_Orientation(This,RHS)	\
    ( (This)->lpVtbl -> get_Orientation(This,RHS) ) 

#define DataLabels_put_Orientation(This,RHS)	\
    ( (This)->lpVtbl -> put_Orientation(This,RHS) ) 

#define DataLabels_get_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> get_Shadow(This,RHS) ) 

#define DataLabels_put_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> put_Shadow(This,RHS) ) 

#define DataLabels_get_VerticalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> get_VerticalAlignment(This,RHS) ) 

#define DataLabels_put_VerticalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> put_VerticalAlignment(This,RHS) ) 

#define DataLabels_get_ReadingOrder(This,RHS)	\
    ( (This)->lpVtbl -> get_ReadingOrder(This,RHS) ) 

#define DataLabels_put_ReadingOrder(This,RHS)	\
    ( (This)->lpVtbl -> put_ReadingOrder(This,RHS) ) 

#define DataLabels_get_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> get_AutoScaleFont(This,RHS) ) 

#define DataLabels_put_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> put_AutoScaleFont(This,RHS) ) 

#define DataLabels_get_AutoText(This,RHS)	\
    ( (This)->lpVtbl -> get_AutoText(This,RHS) ) 

#define DataLabels_put_AutoText(This,RHS)	\
    ( (This)->lpVtbl -> put_AutoText(This,RHS) ) 

#define DataLabels_get_NumberFormat(This,RHS)	\
    ( (This)->lpVtbl -> get_NumberFormat(This,RHS) ) 

#define DataLabels_put_NumberFormat(This,RHS)	\
    ( (This)->lpVtbl -> put_NumberFormat(This,RHS) ) 

#define DataLabels_get_NumberFormatLinked(This,RHS)	\
    ( (This)->lpVtbl -> get_NumberFormatLinked(This,RHS) ) 

#define DataLabels_put_NumberFormatLinked(This,RHS)	\
    ( (This)->lpVtbl -> put_NumberFormatLinked(This,RHS) ) 

#define DataLabels_get_NumberFormatLocal(This,RHS)	\
    ( (This)->lpVtbl -> get_NumberFormatLocal(This,RHS) ) 

#define DataLabels_put_NumberFormatLocal(This,RHS)	\
    ( (This)->lpVtbl -> put_NumberFormatLocal(This,RHS) ) 

#define DataLabels_get_ShowLegendKey(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowLegendKey(This,RHS) ) 

#define DataLabels_put_ShowLegendKey(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowLegendKey(This,RHS) ) 

#define DataLabels_get_Type(This,RHS)	\
    ( (This)->lpVtbl -> get_Type(This,RHS) ) 

#define DataLabels_put_Type(This,RHS)	\
    ( (This)->lpVtbl -> put_Type(This,RHS) ) 

#define DataLabels_get_Position(This,RHS)	\
    ( (This)->lpVtbl -> get_Position(This,RHS) ) 

#define DataLabels_put_Position(This,RHS)	\
    ( (This)->lpVtbl -> put_Position(This,RHS) ) 

#define DataLabels_get_ShowSeriesName(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowSeriesName(This,RHS) ) 

#define DataLabels_put_ShowSeriesName(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowSeriesName(This,RHS) ) 

#define DataLabels_get_ShowCategoryName(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowCategoryName(This,RHS) ) 

#define DataLabels_put_ShowCategoryName(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowCategoryName(This,RHS) ) 

#define DataLabels_get_ShowValue(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowValue(This,RHS) ) 

#define DataLabels_put_ShowValue(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowValue(This,RHS) ) 

#define DataLabels_get_ShowPercentage(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowPercentage(This,RHS) ) 

#define DataLabels_put_ShowPercentage(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowPercentage(This,RHS) ) 

#define DataLabels_get_ShowBubbleSize(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowBubbleSize(This,RHS) ) 

#define DataLabels_put_ShowBubbleSize(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowBubbleSize(This,RHS) ) 

#define DataLabels_get_Separator(This,RHS)	\
    ( (This)->lpVtbl -> get_Separator(This,RHS) ) 

#define DataLabels_put_Separator(This,RHS)	\
    ( (This)->lpVtbl -> put_Separator(This,RHS) ) 

#define DataLabels_get_Count(This,RHS)	\
    ( (This)->lpVtbl -> get_Count(This,RHS) ) 

#define DataLabels_Item(This,Index,RHS)	\
    ( (This)->lpVtbl -> Item(This,Index,RHS) ) 

#define DataLabels__NewEnum(This,RHS)	\
    ( (This)->lpVtbl -> _NewEnum(This,RHS) ) 

#define DataLabels_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define DataLabels_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define DataLabels_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define DataLabels__Default(This,Index,RHS)	\
    ( (This)->lpVtbl -> _Default(This,Index,RHS) ) 

#define DataLabels_Propagate(This,Index)	\
    ( (This)->lpVtbl -> Propagate(This,Index) ) 

#define DataLabels_get_ShowRange(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowRange(This,RHS) ) 

#define DataLabels_put_ShowRange(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowRange(This,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DataLabels_INTERFACE_DEFINED__ */


#ifndef __DataTable_INTERFACE_DEFINED__
#define __DataTable_INTERFACE_DEFINED__

/* interface DataTable */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_DataTable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A63-F07E-4CA4-AF6F-BEF486AA4E6F")
    DataTable : public IDispatch
    {
    public:
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowLegendKey( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowLegendKey( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasBorderHorizontal( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasBorderHorizontal( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasBorderVertical( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasBorderVertical( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasBorderOutline( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasBorderOutline( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **ppLine) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ ChartFont **pfont) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoScaleFont( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoScaleFont( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DataTableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DataTable * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DataTable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DataTable * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DataTable * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DataTable * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DataTable * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DataTable * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowLegendKey )( 
            DataTable * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowLegendKey )( 
            DataTable * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasBorderHorizontal )( 
            DataTable * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasBorderHorizontal )( 
            DataTable * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasBorderVertical )( 
            DataTable * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasBorderVertical )( 
            DataTable * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasBorderOutline )( 
            DataTable * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasBorderOutline )( 
            DataTable * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            DataTable * This,
            /* [retval][out] */ ChartBorder **ppLine);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            DataTable * This,
            /* [retval][out] */ ChartFont **pfont);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            DataTable * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            DataTable * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DataTable * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoScaleFont )( 
            DataTable * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoScaleFont )( 
            DataTable * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            DataTable * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            DataTable * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            DataTable * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } DataTableVtbl;

    interface DataTable
    {
        CONST_VTBL struct DataTableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DataTable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DataTable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DataTable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DataTable_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DataTable_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DataTable_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DataTable_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DataTable_put_ShowLegendKey(This,RHS)	\
    ( (This)->lpVtbl -> put_ShowLegendKey(This,RHS) ) 

#define DataTable_get_ShowLegendKey(This,RHS)	\
    ( (This)->lpVtbl -> get_ShowLegendKey(This,RHS) ) 

#define DataTable_put_HasBorderHorizontal(This,RHS)	\
    ( (This)->lpVtbl -> put_HasBorderHorizontal(This,RHS) ) 

#define DataTable_get_HasBorderHorizontal(This,RHS)	\
    ( (This)->lpVtbl -> get_HasBorderHorizontal(This,RHS) ) 

#define DataTable_put_HasBorderVertical(This,RHS)	\
    ( (This)->lpVtbl -> put_HasBorderVertical(This,RHS) ) 

#define DataTable_get_HasBorderVertical(This,RHS)	\
    ( (This)->lpVtbl -> get_HasBorderVertical(This,RHS) ) 

#define DataTable_put_HasBorderOutline(This,RHS)	\
    ( (This)->lpVtbl -> put_HasBorderOutline(This,RHS) ) 

#define DataTable_get_HasBorderOutline(This,RHS)	\
    ( (This)->lpVtbl -> get_HasBorderOutline(This,RHS) ) 

#define DataTable_get_Border(This,ppLine)	\
    ( (This)->lpVtbl -> get_Border(This,ppLine) ) 

#define DataTable_get_Font(This,pfont)	\
    ( (This)->lpVtbl -> get_Font(This,pfont) ) 

#define DataTable_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define DataTable_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define DataTable_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define DataTable_get_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> get_AutoScaleFont(This,RHS) ) 

#define DataTable_put_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> put_AutoScaleFont(This,RHS) ) 

#define DataTable_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define DataTable_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define DataTable_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DataTable_INTERFACE_DEFINED__ */


#ifndef __DisplayUnitLabel_INTERFACE_DEFINED__
#define __DisplayUnitLabel_INTERFACE_DEFINED__

/* interface DisplayUnitLabel */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_DisplayUnitLabel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A64-F07E-4CA4-AF6F-BEF486AA4E6F")
    DisplayUnitLabel : public IDispatch
    {
    public:
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Caption( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Caption( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Characters( 
            /* [optional][in] */ VARIANT Start,
            /* [optional][in] */ VARIANT Length,
            /* [retval][out] */ ChartCharacters **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ ChartFont **ppfont) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalAlignment( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalAlignment( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Orientation( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Shadow( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalAlignment( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalAlignment( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoScaleFont( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoScaleFont( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Interior( 
            /* [retval][out] */ Interior **ppinterior) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ ChartFillFormat **ppinterior) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **ppborder) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppval) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ XlChartElementPosition *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ XlChartElementPosition RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadingOrder( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadingOrder( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *Height) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *Width) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Formula( 
            /* [in] */ BSTR pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Formula( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormulaR1C1( 
            /* [in] */ BSTR pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormulaR1C1( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormulaLocal( 
            /* [in] */ BSTR pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormulaLocal( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormulaR1C1Local( 
            /* [in] */ BSTR pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormulaR1C1Local( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DisplayUnitLabelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DisplayUnitLabel * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DisplayUnitLabel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DisplayUnitLabel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DisplayUnitLabel * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DisplayUnitLabel * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DisplayUnitLabel * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DisplayUnitLabel * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Caption )( 
            DisplayUnitLabel * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Caption )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Characters )( 
            DisplayUnitLabel * This,
            /* [optional][in] */ VARIANT Start,
            /* [optional][in] */ VARIANT Length,
            /* [retval][out] */ ChartCharacters **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ ChartFont **ppfont);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )( 
            DisplayUnitLabel * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            DisplayUnitLabel * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Orientation )( 
            DisplayUnitLabel * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Orientation )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadow )( 
            DisplayUnitLabel * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            DisplayUnitLabel * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            DisplayUnitLabel * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )( 
            DisplayUnitLabel * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoScaleFont )( 
            DisplayUnitLabel * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoScaleFont )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Interior )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ Interior **ppinterior);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ ChartFillFormat **ppinterior);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ ChartBorder **ppborder);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ IDispatch **ppval);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ XlChartElementPosition *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            DisplayUnitLabel * This,
            /* [in] */ XlChartElementPosition RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ ChartFormat **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingOrder )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingOrder )( 
            DisplayUnitLabel * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ double *Height);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ double *Width);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Formula )( 
            DisplayUnitLabel * This,
            /* [in] */ BSTR pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Formula )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormulaR1C1 )( 
            DisplayUnitLabel * This,
            /* [in] */ BSTR pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormulaR1C1 )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormulaLocal )( 
            DisplayUnitLabel * This,
            /* [in] */ BSTR pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormulaLocal )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormulaR1C1Local )( 
            DisplayUnitLabel * This,
            /* [in] */ BSTR pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormulaR1C1Local )( 
            DisplayUnitLabel * This,
            /* [retval][out] */ BSTR *pbstr);
        
        END_INTERFACE
    } DisplayUnitLabelVtbl;

    interface DisplayUnitLabel
    {
        CONST_VTBL struct DisplayUnitLabelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DisplayUnitLabel_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DisplayUnitLabel_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DisplayUnitLabel_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DisplayUnitLabel_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DisplayUnitLabel_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DisplayUnitLabel_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DisplayUnitLabel_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DisplayUnitLabel_put_Caption(This,RHS)	\
    ( (This)->lpVtbl -> put_Caption(This,RHS) ) 

#define DisplayUnitLabel_get_Caption(This,RHS)	\
    ( (This)->lpVtbl -> get_Caption(This,RHS) ) 

#define DisplayUnitLabel_get_Characters(This,Start,Length,RHS)	\
    ( (This)->lpVtbl -> get_Characters(This,Start,Length,RHS) ) 

#define DisplayUnitLabel_get_Font(This,ppfont)	\
    ( (This)->lpVtbl -> get_Font(This,ppfont) ) 

#define DisplayUnitLabel_put_HorizontalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> put_HorizontalAlignment(This,RHS) ) 

#define DisplayUnitLabel_get_HorizontalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> get_HorizontalAlignment(This,RHS) ) 

#define DisplayUnitLabel_get_Left(This,RHS)	\
    ( (This)->lpVtbl -> get_Left(This,RHS) ) 

#define DisplayUnitLabel_put_Left(This,RHS)	\
    ( (This)->lpVtbl -> put_Left(This,RHS) ) 

#define DisplayUnitLabel_put_Orientation(This,RHS)	\
    ( (This)->lpVtbl -> put_Orientation(This,RHS) ) 

#define DisplayUnitLabel_get_Orientation(This,RHS)	\
    ( (This)->lpVtbl -> get_Orientation(This,RHS) ) 

#define DisplayUnitLabel_get_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> get_Shadow(This,RHS) ) 

#define DisplayUnitLabel_put_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> put_Shadow(This,RHS) ) 

#define DisplayUnitLabel_put_Text(This,RHS)	\
    ( (This)->lpVtbl -> put_Text(This,RHS) ) 

#define DisplayUnitLabel_get_Text(This,RHS)	\
    ( (This)->lpVtbl -> get_Text(This,RHS) ) 

#define DisplayUnitLabel_get_Top(This,RHS)	\
    ( (This)->lpVtbl -> get_Top(This,RHS) ) 

#define DisplayUnitLabel_put_Top(This,RHS)	\
    ( (This)->lpVtbl -> put_Top(This,RHS) ) 

#define DisplayUnitLabel_put_VerticalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> put_VerticalAlignment(This,RHS) ) 

#define DisplayUnitLabel_get_VerticalAlignment(This,RHS)	\
    ( (This)->lpVtbl -> get_VerticalAlignment(This,RHS) ) 

#define DisplayUnitLabel_put_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> put_AutoScaleFont(This,RHS) ) 

#define DisplayUnitLabel_get_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> get_AutoScaleFont(This,RHS) ) 

#define DisplayUnitLabel_get_Interior(This,ppinterior)	\
    ( (This)->lpVtbl -> get_Interior(This,ppinterior) ) 

#define DisplayUnitLabel_get_Fill(This,ppinterior)	\
    ( (This)->lpVtbl -> get_Fill(This,ppinterior) ) 

#define DisplayUnitLabel_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define DisplayUnitLabel_get_Border(This,ppborder)	\
    ( (This)->lpVtbl -> get_Border(This,ppborder) ) 

#define DisplayUnitLabel_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define DisplayUnitLabel_get_Parent(This,ppval)	\
    ( (This)->lpVtbl -> get_Parent(This,ppval) ) 

#define DisplayUnitLabel_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#define DisplayUnitLabel_get_Position(This,RHS)	\
    ( (This)->lpVtbl -> get_Position(This,RHS) ) 

#define DisplayUnitLabel_put_Position(This,RHS)	\
    ( (This)->lpVtbl -> put_Position(This,RHS) ) 

#define DisplayUnitLabel_get_Format(This,RHS)	\
    ( (This)->lpVtbl -> get_Format(This,RHS) ) 

#define DisplayUnitLabel_get_Creator(This,RHS)	\
    ( (This)->lpVtbl -> get_Creator(This,RHS) ) 

#define DisplayUnitLabel_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define DisplayUnitLabel_get_ReadingOrder(This,RHS)	\
    ( (This)->lpVtbl -> get_ReadingOrder(This,RHS) ) 

#define DisplayUnitLabel_put_ReadingOrder(This,RHS)	\
    ( (This)->lpVtbl -> put_ReadingOrder(This,RHS) ) 

#define DisplayUnitLabel_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define DisplayUnitLabel_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define DisplayUnitLabel_put_Formula(This,pbstr)	\
    ( (This)->lpVtbl -> put_Formula(This,pbstr) ) 

#define DisplayUnitLabel_get_Formula(This,pbstr)	\
    ( (This)->lpVtbl -> get_Formula(This,pbstr) ) 

#define DisplayUnitLabel_put_FormulaR1C1(This,pbstr)	\
    ( (This)->lpVtbl -> put_FormulaR1C1(This,pbstr) ) 

#define DisplayUnitLabel_get_FormulaR1C1(This,pbstr)	\
    ( (This)->lpVtbl -> get_FormulaR1C1(This,pbstr) ) 

#define DisplayUnitLabel_put_FormulaLocal(This,pbstr)	\
    ( (This)->lpVtbl -> put_FormulaLocal(This,pbstr) ) 

#define DisplayUnitLabel_get_FormulaLocal(This,pbstr)	\
    ( (This)->lpVtbl -> get_FormulaLocal(This,pbstr) ) 

#define DisplayUnitLabel_put_FormulaR1C1Local(This,pbstr)	\
    ( (This)->lpVtbl -> put_FormulaR1C1Local(This,pbstr) ) 

#define DisplayUnitLabel_get_FormulaR1C1Local(This,pbstr)	\
    ( (This)->lpVtbl -> get_FormulaR1C1Local(This,pbstr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DisplayUnitLabel_INTERFACE_DEFINED__ */


#ifndef __DownBars_INTERFACE_DEFINED__
#define __DownBars_INTERFACE_DEFINED__

/* interface DownBars */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_DownBars;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A65-F07E-4CA4-AF6F-BEF486AA4E6F")
    DownBars : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstr) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppparent) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **ppborder) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Interior( 
            /* [retval][out] */ Interior **ppinterior) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ ChartFillFormat **ppFill) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DownBarsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DownBars * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DownBars * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DownBars * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DownBars * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DownBars * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DownBars * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DownBars * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            DownBars * This,
            /* [retval][out] */ BSTR *bstr);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            DownBars * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DownBars * This,
            /* [retval][out] */ IDispatch **ppparent);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            DownBars * This,
            /* [retval][out] */ ChartBorder **ppborder);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            DownBars * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Interior )( 
            DownBars * This,
            /* [retval][out] */ Interior **ppinterior);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            DownBars * This,
            /* [retval][out] */ ChartFillFormat **ppFill);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            DownBars * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            DownBars * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            DownBars * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } DownBarsVtbl;

    interface DownBars
    {
        CONST_VTBL struct DownBarsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DownBars_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DownBars_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DownBars_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DownBars_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DownBars_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DownBars_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DownBars_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DownBars_get_Name(This,bstr)	\
    ( (This)->lpVtbl -> get_Name(This,bstr) ) 

#define DownBars_Select(This,pvar)	\
    ( (This)->lpVtbl -> Select(This,pvar) ) 

#define DownBars_get_Parent(This,ppparent)	\
    ( (This)->lpVtbl -> get_Parent(This,ppparent) ) 

#define DownBars_get_Border(This,ppborder)	\
    ( (This)->lpVtbl -> get_Border(This,ppborder) ) 

#define DownBars_Delete(This,pvar)	\
    ( (This)->lpVtbl -> Delete(This,pvar) ) 

#define DownBars_get_Interior(This,ppinterior)	\
    ( (This)->lpVtbl -> get_Interior(This,ppinterior) ) 

#define DownBars_get_Fill(This,ppFill)	\
    ( (This)->lpVtbl -> get_Fill(This,ppFill) ) 

#define DownBars_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define DownBars_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define DownBars_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DownBars_INTERFACE_DEFINED__ */


#ifndef __DropLines_INTERFACE_DEFINED__
#define __DropLines_INTERFACE_DEFINED__

/* interface DropLines */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_DropLines;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A66-F07E-4CA4-AF6F-BEF486AA4E6F")
    DropLines : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DropLinesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DropLines * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DropLines * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DropLines * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DropLines * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DropLines * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DropLines * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DropLines * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            DropLines * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DropLines * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            DropLines * This,
            /* [retval][out] */ ChartBorder **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            DropLines * This,
            /* [retval][out] */ ChartFormat **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            DropLines * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            DropLines * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            DropLines * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            DropLines * This,
            /* [retval][out] */ VARIANT *RHS);
        
        END_INTERFACE
    } DropLinesVtbl;

    interface DropLines
    {
        CONST_VTBL struct DropLinesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DropLines_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DropLines_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DropLines_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DropLines_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DropLines_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DropLines_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DropLines_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DropLines_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define DropLines_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define DropLines_get_Border(This,RHS)	\
    ( (This)->lpVtbl -> get_Border(This,RHS) ) 

#define DropLines_get_Format(This,RHS)	\
    ( (This)->lpVtbl -> get_Format(This,RHS) ) 

#define DropLines_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define DropLines_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define DropLines_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define DropLines_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DropLines_INTERFACE_DEFINED__ */


#ifndef __ErrorBars_INTERFACE_DEFINED__
#define __ErrorBars_INTERFACE_DEFINED__

/* interface ErrorBars */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ErrorBars;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A67-F07E-4CA4-AF6F-BEF486AA4E6F")
    ErrorBars : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearFormats( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndStyle( 
            /* [retval][out] */ XlEndStyleCap *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EndStyle( 
            /* [in] */ XlEndStyleCap RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ErrorBarsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ErrorBars * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ErrorBars * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ErrorBars * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ErrorBars * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ErrorBars * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ErrorBars * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ErrorBars * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ErrorBars * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ErrorBars * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            ErrorBars * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            ErrorBars * This,
            /* [retval][out] */ ChartBorder **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ErrorBars * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearFormats )( 
            ErrorBars * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyle )( 
            ErrorBars * This,
            /* [retval][out] */ XlEndStyleCap *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndStyle )( 
            ErrorBars * This,
            /* [in] */ XlEndStyleCap RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            ErrorBars * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ErrorBars * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ErrorBars * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } ErrorBarsVtbl;

    interface ErrorBars
    {
        CONST_VTBL struct ErrorBarsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ErrorBars_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ErrorBars_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ErrorBars_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ErrorBars_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ErrorBars_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ErrorBars_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ErrorBars_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ErrorBars_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define ErrorBars_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define ErrorBars_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#define ErrorBars_get_Border(This,RHS)	\
    ( (This)->lpVtbl -> get_Border(This,RHS) ) 

#define ErrorBars_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define ErrorBars_ClearFormats(This,RHS)	\
    ( (This)->lpVtbl -> ClearFormats(This,RHS) ) 

#define ErrorBars_get_EndStyle(This,RHS)	\
    ( (This)->lpVtbl -> get_EndStyle(This,RHS) ) 

#define ErrorBars_put_EndStyle(This,RHS)	\
    ( (This)->lpVtbl -> put_EndStyle(This,RHS) ) 

#define ErrorBars_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define ErrorBars_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define ErrorBars_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ErrorBars_INTERFACE_DEFINED__ */


#ifndef __Floor_INTERFACE_DEFINED__
#define __Floor_INTERFACE_DEFINED__

/* interface Floor */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Floor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A68-F07E-4CA4-AF6F-BEF486AA4E6F")
    Floor : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstr) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppparent) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **ppborder) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearFormats( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Interior( 
            /* [retval][out] */ Interior **ppinterior) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ ChartFillFormat **ppFill) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureType( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PictureType( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paste( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Thickness( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Thickness( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FloorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Floor * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Floor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Floor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Floor * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Floor * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Floor * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Floor * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Floor * This,
            /* [retval][out] */ BSTR *bstr);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Floor * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Floor * This,
            /* [retval][out] */ IDispatch **ppparent);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            Floor * This,
            /* [retval][out] */ ChartBorder **ppborder);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearFormats )( 
            Floor * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Interior )( 
            Floor * This,
            /* [retval][out] */ Interior **ppinterior);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            Floor * This,
            /* [retval][out] */ ChartFillFormat **ppFill);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureType )( 
            Floor * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PictureType )( 
            Floor * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paste )( 
            Floor * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Thickness )( 
            Floor * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Thickness )( 
            Floor * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            Floor * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Floor * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Floor * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } FloorVtbl;

    interface Floor
    {
        CONST_VTBL struct FloorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Floor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Floor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Floor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Floor_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Floor_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Floor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Floor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Floor_get_Name(This,bstr)	\
    ( (This)->lpVtbl -> get_Name(This,bstr) ) 

#define Floor_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#define Floor_get_Parent(This,ppparent)	\
    ( (This)->lpVtbl -> get_Parent(This,ppparent) ) 

#define Floor_get_Border(This,ppborder)	\
    ( (This)->lpVtbl -> get_Border(This,ppborder) ) 

#define Floor_ClearFormats(This,RHS)	\
    ( (This)->lpVtbl -> ClearFormats(This,RHS) ) 

#define Floor_get_Interior(This,ppinterior)	\
    ( (This)->lpVtbl -> get_Interior(This,ppinterior) ) 

#define Floor_get_Fill(This,ppFill)	\
    ( (This)->lpVtbl -> get_Fill(This,ppFill) ) 

#define Floor_get_PictureType(This,RHS)	\
    ( (This)->lpVtbl -> get_PictureType(This,RHS) ) 

#define Floor_put_PictureType(This,RHS)	\
    ( (This)->lpVtbl -> put_PictureType(This,RHS) ) 

#define Floor_Paste(This)	\
    ( (This)->lpVtbl -> Paste(This) ) 

#define Floor_get_Thickness(This,RHS)	\
    ( (This)->lpVtbl -> get_Thickness(This,RHS) ) 

#define Floor_put_Thickness(This,RHS)	\
    ( (This)->lpVtbl -> put_Thickness(This,RHS) ) 

#define Floor_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define Floor_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define Floor_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Floor_INTERFACE_DEFINED__ */


#ifndef __ChartFont_INTERFACE_DEFINED__
#define __ChartFont_INTERFACE_DEFINED__

/* interface ChartFont */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ChartFont;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A69-F07E-4CA4-AF6F-BEF486AA4E6F")
    ChartFont : public IDispatch
    {
    public:
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Background( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Background( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Bold( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bold( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Color( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Color( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColorIndex( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColorIndex( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontStyle( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontStyle( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Italic( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Italic( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_OutlineFont( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_OutlineFont( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Shadow( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Size( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Strikethrough( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Strikethrough( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Subscript( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Subscript( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Superscript( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Superscript( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Underline( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Underline( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ChartFontVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ChartFont * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ChartFont * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ChartFont * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ChartFont * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ChartFont * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ChartFont * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ChartFont * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Background )( 
            ChartFont * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Background )( 
            ChartFont * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Bold )( 
            ChartFont * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bold )( 
            ChartFont * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            ChartFont * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            ChartFont * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColorIndex )( 
            ChartFont * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColorIndex )( 
            ChartFont * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontStyle )( 
            ChartFont * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontStyle )( 
            ChartFont * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Italic )( 
            ChartFont * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Italic )( 
            ChartFont * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ChartFont * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ChartFont * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OutlineFont )( 
            ChartFont * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OutlineFont )( 
            ChartFont * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadow )( 
            ChartFont * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            ChartFont * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Size )( 
            ChartFont * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            ChartFont * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Strikethrough )( 
            ChartFont * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Strikethrough )( 
            ChartFont * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Subscript )( 
            ChartFont * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Subscript )( 
            ChartFont * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Superscript )( 
            ChartFont * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Superscript )( 
            ChartFont * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Underline )( 
            ChartFont * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Underline )( 
            ChartFont * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ChartFont * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ChartFont * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ChartFont * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } ChartFontVtbl;

    interface ChartFont
    {
        CONST_VTBL struct ChartFontVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ChartFont_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ChartFont_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ChartFont_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ChartFont_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ChartFont_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ChartFont_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ChartFont_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ChartFont_put_Background(This,RHS)	\
    ( (This)->lpVtbl -> put_Background(This,RHS) ) 

#define ChartFont_get_Background(This,RHS)	\
    ( (This)->lpVtbl -> get_Background(This,RHS) ) 

#define ChartFont_put_Bold(This,RHS)	\
    ( (This)->lpVtbl -> put_Bold(This,RHS) ) 

#define ChartFont_get_Bold(This,RHS)	\
    ( (This)->lpVtbl -> get_Bold(This,RHS) ) 

#define ChartFont_put_Color(This,RHS)	\
    ( (This)->lpVtbl -> put_Color(This,RHS) ) 

#define ChartFont_get_Color(This,RHS)	\
    ( (This)->lpVtbl -> get_Color(This,RHS) ) 

#define ChartFont_put_ColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> put_ColorIndex(This,RHS) ) 

#define ChartFont_get_ColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> get_ColorIndex(This,RHS) ) 

#define ChartFont_put_FontStyle(This,RHS)	\
    ( (This)->lpVtbl -> put_FontStyle(This,RHS) ) 

#define ChartFont_get_FontStyle(This,RHS)	\
    ( (This)->lpVtbl -> get_FontStyle(This,RHS) ) 

#define ChartFont_put_Italic(This,RHS)	\
    ( (This)->lpVtbl -> put_Italic(This,RHS) ) 

#define ChartFont_get_Italic(This,RHS)	\
    ( (This)->lpVtbl -> get_Italic(This,RHS) ) 

#define ChartFont_put_Name(This,RHS)	\
    ( (This)->lpVtbl -> put_Name(This,RHS) ) 

#define ChartFont_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define ChartFont_put_OutlineFont(This,RHS)	\
    ( (This)->lpVtbl -> put_OutlineFont(This,RHS) ) 

#define ChartFont_get_OutlineFont(This,RHS)	\
    ( (This)->lpVtbl -> get_OutlineFont(This,RHS) ) 

#define ChartFont_put_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> put_Shadow(This,RHS) ) 

#define ChartFont_get_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> get_Shadow(This,RHS) ) 

#define ChartFont_put_Size(This,RHS)	\
    ( (This)->lpVtbl -> put_Size(This,RHS) ) 

#define ChartFont_get_Size(This,RHS)	\
    ( (This)->lpVtbl -> get_Size(This,RHS) ) 

#define ChartFont_put_Strikethrough(This,RHS)	\
    ( (This)->lpVtbl -> put_Strikethrough(This,RHS) ) 

#define ChartFont_get_Strikethrough(This,RHS)	\
    ( (This)->lpVtbl -> get_Strikethrough(This,RHS) ) 

#define ChartFont_put_Subscript(This,RHS)	\
    ( (This)->lpVtbl -> put_Subscript(This,RHS) ) 

#define ChartFont_get_Subscript(This,RHS)	\
    ( (This)->lpVtbl -> get_Subscript(This,RHS) ) 

#define ChartFont_put_Superscript(This,RHS)	\
    ( (This)->lpVtbl -> put_Superscript(This,RHS) ) 

#define ChartFont_get_Superscript(This,RHS)	\
    ( (This)->lpVtbl -> get_Superscript(This,RHS) ) 

#define ChartFont_put_Underline(This,RHS)	\
    ( (This)->lpVtbl -> put_Underline(This,RHS) ) 

#define ChartFont_get_Underline(This,RHS)	\
    ( (This)->lpVtbl -> get_Underline(This,RHS) ) 

#define ChartFont_get_Creator(This,RHS)	\
    ( (This)->lpVtbl -> get_Creator(This,RHS) ) 

#define ChartFont_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define ChartFont_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ChartFont_INTERFACE_DEFINED__ */


#ifndef __Gridlines_INTERFACE_DEFINED__
#define __Gridlines_INTERFACE_DEFINED__

/* interface Gridlines */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Gridlines;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A6A-F07E-4CA4-AF6F-BEF486AA4E6F")
    Gridlines : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstr) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppparent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **ppborder) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct GridlinesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Gridlines * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Gridlines * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Gridlines * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Gridlines * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Gridlines * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Gridlines * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Gridlines * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Gridlines * This,
            /* [retval][out] */ BSTR *bstr);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Gridlines * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Gridlines * This,
            /* [retval][out] */ IDispatch **ppparent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            Gridlines * This,
            /* [retval][out] */ ChartBorder **ppborder);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Gridlines * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            Gridlines * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Gridlines * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Gridlines * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } GridlinesVtbl;

    interface Gridlines
    {
        CONST_VTBL struct GridlinesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Gridlines_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Gridlines_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Gridlines_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Gridlines_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Gridlines_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Gridlines_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Gridlines_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Gridlines_get_Name(This,bstr)	\
    ( (This)->lpVtbl -> get_Name(This,bstr) ) 

#define Gridlines_Select(This,pvar)	\
    ( (This)->lpVtbl -> Select(This,pvar) ) 

#define Gridlines_get_Parent(This,ppparent)	\
    ( (This)->lpVtbl -> get_Parent(This,ppparent) ) 

#define Gridlines_get_Border(This,ppborder)	\
    ( (This)->lpVtbl -> get_Border(This,ppborder) ) 

#define Gridlines_Delete(This,pvar)	\
    ( (This)->lpVtbl -> Delete(This,pvar) ) 

#define Gridlines_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define Gridlines_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define Gridlines_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Gridlines_INTERFACE_DEFINED__ */


#ifndef __HiLoLines_INTERFACE_DEFINED__
#define __HiLoLines_INTERFACE_DEFINED__

/* interface HiLoLines */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_HiLoLines;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A6B-F07E-4CA4-AF6F-BEF486AA4E6F")
    HiLoLines : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HiLoLinesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HiLoLines * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HiLoLines * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HiLoLines * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HiLoLines * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HiLoLines * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HiLoLines * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HiLoLines * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HiLoLines * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            HiLoLines * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            HiLoLines * This,
            /* [retval][out] */ ChartBorder **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            HiLoLines * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            HiLoLines * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            HiLoLines * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            HiLoLines * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            HiLoLines * This,
            /* [retval][out] */ VARIANT *RHS);
        
        END_INTERFACE
    } HiLoLinesVtbl;

    interface HiLoLines
    {
        CONST_VTBL struct HiLoLinesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HiLoLines_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HiLoLines_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HiLoLines_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HiLoLines_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HiLoLines_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HiLoLines_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HiLoLines_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HiLoLines_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define HiLoLines_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define HiLoLines_get_Border(This,RHS)	\
    ( (This)->lpVtbl -> get_Border(This,RHS) ) 

#define HiLoLines_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define HiLoLines_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define HiLoLines_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define HiLoLines_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define HiLoLines_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HiLoLines_INTERFACE_DEFINED__ */


#ifndef __Interior_INTERFACE_DEFINED__
#define __Interior_INTERFACE_DEFINED__

/* interface Interior */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Interior;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A6C-F07E-4CA4-AF6F-BEF486AA4E6F")
    Interior : public IDispatch
    {
    public:
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Color( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Color( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColorIndex( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColorIndex( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InvertIfNegative( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InvertIfNegative( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Pattern( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Pattern( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PatternColor( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PatternColor( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PatternColorIndex( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PatternColorIndex( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct InteriorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Interior * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Interior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Interior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Interior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Interior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Interior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Interior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            Interior * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            Interior * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColorIndex )( 
            Interior * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColorIndex )( 
            Interior * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InvertIfNegative )( 
            Interior * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InvertIfNegative )( 
            Interior * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Pattern )( 
            Interior * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Pattern )( 
            Interior * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PatternColor )( 
            Interior * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PatternColor )( 
            Interior * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PatternColorIndex )( 
            Interior * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PatternColorIndex )( 
            Interior * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Interior * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Interior * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Interior * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } InteriorVtbl;

    interface Interior
    {
        CONST_VTBL struct InteriorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Interior_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Interior_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Interior_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Interior_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Interior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Interior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Interior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Interior_put_Color(This,RHS)	\
    ( (This)->lpVtbl -> put_Color(This,RHS) ) 

#define Interior_get_Color(This,RHS)	\
    ( (This)->lpVtbl -> get_Color(This,RHS) ) 

#define Interior_put_ColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> put_ColorIndex(This,RHS) ) 

#define Interior_get_ColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> get_ColorIndex(This,RHS) ) 

#define Interior_put_InvertIfNegative(This,RHS)	\
    ( (This)->lpVtbl -> put_InvertIfNegative(This,RHS) ) 

#define Interior_get_InvertIfNegative(This,RHS)	\
    ( (This)->lpVtbl -> get_InvertIfNegative(This,RHS) ) 

#define Interior_put_Pattern(This,RHS)	\
    ( (This)->lpVtbl -> put_Pattern(This,RHS) ) 

#define Interior_get_Pattern(This,RHS)	\
    ( (This)->lpVtbl -> get_Pattern(This,RHS) ) 

#define Interior_put_PatternColor(This,RHS)	\
    ( (This)->lpVtbl -> put_PatternColor(This,RHS) ) 

#define Interior_get_PatternColor(This,RHS)	\
    ( (This)->lpVtbl -> get_PatternColor(This,RHS) ) 

#define Interior_put_PatternColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> put_PatternColorIndex(This,RHS) ) 

#define Interior_get_PatternColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> get_PatternColorIndex(This,RHS) ) 

#define Interior_get_Creator(This,RHS)	\
    ( (This)->lpVtbl -> get_Creator(This,RHS) ) 

#define Interior_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define Interior_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Interior_INTERFACE_DEFINED__ */


#ifndef __LeaderLines_INTERFACE_DEFINED__
#define __LeaderLines_INTERFACE_DEFINED__

/* interface LeaderLines */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_LeaderLines;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A6D-F07E-4CA4-AF6F-BEF486AA4E6F")
    LeaderLines : public IDispatch
    {
    public:
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **ppborder) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LeaderLinesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            LeaderLines * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            LeaderLines * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            LeaderLines * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            LeaderLines * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            LeaderLines * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            LeaderLines * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            LeaderLines * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            LeaderLines * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            LeaderLines * This,
            /* [retval][out] */ ChartBorder **ppborder);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            LeaderLines * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            LeaderLines * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            LeaderLines * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            LeaderLines * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            LeaderLines * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } LeaderLinesVtbl;

    interface LeaderLines
    {
        CONST_VTBL struct LeaderLinesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define LeaderLines_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define LeaderLines_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define LeaderLines_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define LeaderLines_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define LeaderLines_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define LeaderLines_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define LeaderLines_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define LeaderLines_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define LeaderLines_get_Border(This,ppborder)	\
    ( (This)->lpVtbl -> get_Border(This,ppborder) ) 

#define LeaderLines_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define LeaderLines_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define LeaderLines_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define LeaderLines_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define LeaderLines_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __LeaderLines_INTERFACE_DEFINED__ */


#ifndef __Legend_INTERFACE_DEFINED__
#define __Legend_INTERFACE_DEFINED__

/* interface Legend */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Legend;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A6E-F07E-4CA4-AF6F-BEF486AA4E6F")
    Legend : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ ChartFont **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE LegendEntries( 
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ XlLegendPosition *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ XlLegendPosition RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Shadow( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Interior( 
            /* [retval][out] */ Interior **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ ChartFillFormat **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoScaleFont( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoScaleFont( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludeInLayout( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludeInLayout( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LegendVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Legend * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Legend * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Legend * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Legend * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Legend * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Legend * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Legend * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Legend * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Legend * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Legend * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            Legend * This,
            /* [retval][out] */ ChartBorder **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Legend * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            Legend * This,
            /* [retval][out] */ ChartFont **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LegendEntries )( 
            Legend * This,
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            Legend * This,
            /* [retval][out] */ XlLegendPosition *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            Legend * This,
            /* [in] */ XlLegendPosition RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            Legend * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadow )( 
            Legend * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            Legend * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Legend * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            Legend * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Interior )( 
            Legend * This,
            /* [retval][out] */ Interior **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            Legend * This,
            /* [retval][out] */ ChartFillFormat **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            Legend * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            Legend * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            Legend * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            Legend * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Legend * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            Legend * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoScaleFont )( 
            Legend * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoScaleFont )( 
            Legend * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeInLayout )( 
            Legend * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeInLayout )( 
            Legend * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            Legend * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Legend * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Legend * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } LegendVtbl;

    interface Legend
    {
        CONST_VTBL struct LegendVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Legend_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Legend_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Legend_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Legend_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Legend_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Legend_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Legend_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Legend_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define Legend_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define Legend_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#define Legend_get_Border(This,RHS)	\
    ( (This)->lpVtbl -> get_Border(This,RHS) ) 

#define Legend_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define Legend_get_Font(This,RHS)	\
    ( (This)->lpVtbl -> get_Font(This,RHS) ) 

#define Legend_LegendEntries(This,Index,RHS)	\
    ( (This)->lpVtbl -> LegendEntries(This,Index,RHS) ) 

#define Legend_get_Position(This,RHS)	\
    ( (This)->lpVtbl -> get_Position(This,RHS) ) 

#define Legend_put_Position(This,RHS)	\
    ( (This)->lpVtbl -> put_Position(This,RHS) ) 

#define Legend_get_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> get_Shadow(This,RHS) ) 

#define Legend_put_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> put_Shadow(This,RHS) ) 

#define Legend_Clear(This,RHS)	\
    ( (This)->lpVtbl -> Clear(This,RHS) ) 

#define Legend_get_Height(This,RHS)	\
    ( (This)->lpVtbl -> get_Height(This,RHS) ) 

#define Legend_put_Height(This,RHS)	\
    ( (This)->lpVtbl -> put_Height(This,RHS) ) 

#define Legend_get_Interior(This,RHS)	\
    ( (This)->lpVtbl -> get_Interior(This,RHS) ) 

#define Legend_get_Fill(This,RHS)	\
    ( (This)->lpVtbl -> get_Fill(This,RHS) ) 

#define Legend_get_Left(This,RHS)	\
    ( (This)->lpVtbl -> get_Left(This,RHS) ) 

#define Legend_put_Left(This,RHS)	\
    ( (This)->lpVtbl -> put_Left(This,RHS) ) 

#define Legend_get_Top(This,RHS)	\
    ( (This)->lpVtbl -> get_Top(This,RHS) ) 

#define Legend_put_Top(This,RHS)	\
    ( (This)->lpVtbl -> put_Top(This,RHS) ) 

#define Legend_get_Width(This,RHS)	\
    ( (This)->lpVtbl -> get_Width(This,RHS) ) 

#define Legend_put_Width(This,RHS)	\
    ( (This)->lpVtbl -> put_Width(This,RHS) ) 

#define Legend_get_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> get_AutoScaleFont(This,RHS) ) 

#define Legend_put_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> put_AutoScaleFont(This,RHS) ) 

#define Legend_get_IncludeInLayout(This,RHS)	\
    ( (This)->lpVtbl -> get_IncludeInLayout(This,RHS) ) 

#define Legend_put_IncludeInLayout(This,RHS)	\
    ( (This)->lpVtbl -> put_IncludeInLayout(This,RHS) ) 

#define Legend_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define Legend_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define Legend_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Legend_INTERFACE_DEFINED__ */


#ifndef __LegendEntries_INTERFACE_DEFINED__
#define __LegendEntries_INTERFACE_DEFINED__

/* interface LegendEntries */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_LegendEntries;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A6F-F07E-4CA4-AF6F-BEF486AA4E6F")
    LegendEntries : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ LegendEntry **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Default( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ LegendEntry **RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LegendEntriesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            LegendEntries * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            LegendEntries * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            LegendEntries * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            LegendEntries * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            LegendEntries * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            LegendEntries * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            LegendEntries * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            LegendEntries * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            LegendEntries * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            LegendEntries * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ LegendEntry **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            LegendEntries * This,
            /* [retval][out] */ IUnknown **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            LegendEntries * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            LegendEntries * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *_Default )( 
            LegendEntries * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ LegendEntry **RHS);
        
        END_INTERFACE
    } LegendEntriesVtbl;

    interface LegendEntries
    {
        CONST_VTBL struct LegendEntriesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define LegendEntries_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define LegendEntries_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define LegendEntries_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define LegendEntries_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define LegendEntries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define LegendEntries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define LegendEntries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define LegendEntries_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define LegendEntries_get_Count(This,RHS)	\
    ( (This)->lpVtbl -> get_Count(This,RHS) ) 

#define LegendEntries_Item(This,Index,RHS)	\
    ( (This)->lpVtbl -> Item(This,Index,RHS) ) 

#define LegendEntries__NewEnum(This,RHS)	\
    ( (This)->lpVtbl -> _NewEnum(This,RHS) ) 

#define LegendEntries_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define LegendEntries_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define LegendEntries__Default(This,Index,RHS)	\
    ( (This)->lpVtbl -> _Default(This,Index,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __LegendEntries_INTERFACE_DEFINED__ */


#ifndef __LegendEntry_INTERFACE_DEFINED__
#define __LegendEntry_INTERFACE_DEFINED__

/* interface LegendEntry */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_LegendEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A70-F07E-4CA4-AF6F-BEF486AA4E6F")
    LegendEntry : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ ChartFont **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LegendKey( 
            /* [retval][out] */ LegendKey **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoScaleFont( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoScaleFont( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LegendEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            LegendEntry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            LegendEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            LegendEntry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            LegendEntry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            LegendEntry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            LegendEntry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            LegendEntry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            LegendEntry * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            LegendEntry * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            LegendEntry * This,
            /* [retval][out] */ ChartFont **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            LegendEntry * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LegendKey )( 
            LegendEntry * This,
            /* [retval][out] */ LegendKey **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            LegendEntry * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoScaleFont )( 
            LegendEntry * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoScaleFont )( 
            LegendEntry * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            LegendEntry * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            LegendEntry * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            LegendEntry * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            LegendEntry * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            LegendEntry * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            LegendEntry * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            LegendEntry * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } LegendEntryVtbl;

    interface LegendEntry
    {
        CONST_VTBL struct LegendEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define LegendEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define LegendEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define LegendEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define LegendEntry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define LegendEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define LegendEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define LegendEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define LegendEntry_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define LegendEntry_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define LegendEntry_get_Font(This,RHS)	\
    ( (This)->lpVtbl -> get_Font(This,RHS) ) 

#define LegendEntry_get_Index(This,RHS)	\
    ( (This)->lpVtbl -> get_Index(This,RHS) ) 

#define LegendEntry_get_LegendKey(This,RHS)	\
    ( (This)->lpVtbl -> get_LegendKey(This,RHS) ) 

#define LegendEntry_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#define LegendEntry_get_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> get_AutoScaleFont(This,RHS) ) 

#define LegendEntry_put_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> put_AutoScaleFont(This,RHS) ) 

#define LegendEntry_get_Left(This,RHS)	\
    ( (This)->lpVtbl -> get_Left(This,RHS) ) 

#define LegendEntry_get_Top(This,RHS)	\
    ( (This)->lpVtbl -> get_Top(This,RHS) ) 

#define LegendEntry_get_Width(This,RHS)	\
    ( (This)->lpVtbl -> get_Width(This,RHS) ) 

#define LegendEntry_get_Height(This,RHS)	\
    ( (This)->lpVtbl -> get_Height(This,RHS) ) 

#define LegendEntry_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define LegendEntry_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define LegendEntry_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __LegendEntry_INTERFACE_DEFINED__ */


#ifndef __LegendKey_INTERFACE_DEFINED__
#define __LegendKey_INTERFACE_DEFINED__

/* interface LegendKey */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_LegendKey;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A71-F07E-4CA4-AF6F-BEF486AA4E6F")
    LegendKey : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearFormats( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Interior( 
            /* [retval][out] */ Interior **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ ChartFillFormat **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InvertIfNegative( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InvertIfNegative( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerBackgroundColor( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerBackgroundColor( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerBackgroundColorIndex( 
            /* [retval][out] */ XlColorIndex *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerBackgroundColorIndex( 
            /* [in] */ XlColorIndex RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerForegroundColor( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerForegroundColor( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerForegroundColorIndex( 
            /* [retval][out] */ XlColorIndex *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerForegroundColorIndex( 
            /* [in] */ XlColorIndex RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerSize( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerSize( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerStyle( 
            /* [retval][out] */ XlMarkerStyle *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerStyle( 
            /* [in] */ XlMarkerStyle RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureType( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PictureType( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Smooth( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Smooth( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Shadow( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureUnit2( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PictureUnit2( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureUnit( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_PictureUnit( 
            /* [in] */ long RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LegendKeyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            LegendKey * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            LegendKey * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            LegendKey * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            LegendKey * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            LegendKey * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            LegendKey * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            LegendKey * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            LegendKey * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            LegendKey * This,
            /* [retval][out] */ ChartBorder **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearFormats )( 
            LegendKey * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            LegendKey * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Interior )( 
            LegendKey * This,
            /* [retval][out] */ Interior **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            LegendKey * This,
            /* [retval][out] */ ChartFillFormat **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InvertIfNegative )( 
            LegendKey * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InvertIfNegative )( 
            LegendKey * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerBackgroundColor )( 
            LegendKey * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerBackgroundColor )( 
            LegendKey * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerBackgroundColorIndex )( 
            LegendKey * This,
            /* [retval][out] */ XlColorIndex *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerBackgroundColorIndex )( 
            LegendKey * This,
            /* [in] */ XlColorIndex RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerForegroundColor )( 
            LegendKey * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerForegroundColor )( 
            LegendKey * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerForegroundColorIndex )( 
            LegendKey * This,
            /* [retval][out] */ XlColorIndex *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerForegroundColorIndex )( 
            LegendKey * This,
            /* [in] */ XlColorIndex RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerSize )( 
            LegendKey * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerSize )( 
            LegendKey * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerStyle )( 
            LegendKey * This,
            /* [retval][out] */ XlMarkerStyle *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerStyle )( 
            LegendKey * This,
            /* [in] */ XlMarkerStyle RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureType )( 
            LegendKey * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PictureType )( 
            LegendKey * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            LegendKey * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Smooth )( 
            LegendKey * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Smooth )( 
            LegendKey * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            LegendKey * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            LegendKey * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            LegendKey * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            LegendKey * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            LegendKey * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadow )( 
            LegendKey * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            LegendKey * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            LegendKey * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureUnit2 )( 
            LegendKey * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PictureUnit2 )( 
            LegendKey * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            LegendKey * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureUnit )( 
            LegendKey * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PictureUnit )( 
            LegendKey * This,
            /* [in] */ long RHS);
        
        END_INTERFACE
    } LegendKeyVtbl;

    interface LegendKey
    {
        CONST_VTBL struct LegendKeyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define LegendKey_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define LegendKey_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define LegendKey_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define LegendKey_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define LegendKey_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define LegendKey_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define LegendKey_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define LegendKey_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define LegendKey_get_Border(This,RHS)	\
    ( (This)->lpVtbl -> get_Border(This,RHS) ) 

#define LegendKey_ClearFormats(This,RHS)	\
    ( (This)->lpVtbl -> ClearFormats(This,RHS) ) 

#define LegendKey_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define LegendKey_get_Interior(This,RHS)	\
    ( (This)->lpVtbl -> get_Interior(This,RHS) ) 

#define LegendKey_get_Fill(This,RHS)	\
    ( (This)->lpVtbl -> get_Fill(This,RHS) ) 

#define LegendKey_get_InvertIfNegative(This,RHS)	\
    ( (This)->lpVtbl -> get_InvertIfNegative(This,RHS) ) 

#define LegendKey_put_InvertIfNegative(This,RHS)	\
    ( (This)->lpVtbl -> put_InvertIfNegative(This,RHS) ) 

#define LegendKey_get_MarkerBackgroundColor(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerBackgroundColor(This,RHS) ) 

#define LegendKey_put_MarkerBackgroundColor(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerBackgroundColor(This,RHS) ) 

#define LegendKey_get_MarkerBackgroundColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerBackgroundColorIndex(This,RHS) ) 

#define LegendKey_put_MarkerBackgroundColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerBackgroundColorIndex(This,RHS) ) 

#define LegendKey_get_MarkerForegroundColor(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerForegroundColor(This,RHS) ) 

#define LegendKey_put_MarkerForegroundColor(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerForegroundColor(This,RHS) ) 

#define LegendKey_get_MarkerForegroundColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerForegroundColorIndex(This,RHS) ) 

#define LegendKey_put_MarkerForegroundColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerForegroundColorIndex(This,RHS) ) 

#define LegendKey_get_MarkerSize(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerSize(This,RHS) ) 

#define LegendKey_put_MarkerSize(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerSize(This,RHS) ) 

#define LegendKey_get_MarkerStyle(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerStyle(This,RHS) ) 

#define LegendKey_put_MarkerStyle(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerStyle(This,RHS) ) 

#define LegendKey_get_PictureType(This,RHS)	\
    ( (This)->lpVtbl -> get_PictureType(This,RHS) ) 

#define LegendKey_put_PictureType(This,RHS)	\
    ( (This)->lpVtbl -> put_PictureType(This,RHS) ) 

#define LegendKey_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#define LegendKey_get_Smooth(This,RHS)	\
    ( (This)->lpVtbl -> get_Smooth(This,RHS) ) 

#define LegendKey_put_Smooth(This,RHS)	\
    ( (This)->lpVtbl -> put_Smooth(This,RHS) ) 

#define LegendKey_get_Left(This,RHS)	\
    ( (This)->lpVtbl -> get_Left(This,RHS) ) 

#define LegendKey_get_Top(This,RHS)	\
    ( (This)->lpVtbl -> get_Top(This,RHS) ) 

#define LegendKey_get_Width(This,RHS)	\
    ( (This)->lpVtbl -> get_Width(This,RHS) ) 

#define LegendKey_get_Height(This,RHS)	\
    ( (This)->lpVtbl -> get_Height(This,RHS) ) 

#define LegendKey_get_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> get_Shadow(This,RHS) ) 

#define LegendKey_put_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> put_Shadow(This,RHS) ) 

#define LegendKey_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define LegendKey_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define LegendKey_get_PictureUnit2(This,RHS)	\
    ( (This)->lpVtbl -> get_PictureUnit2(This,RHS) ) 

#define LegendKey_put_PictureUnit2(This,RHS)	\
    ( (This)->lpVtbl -> put_PictureUnit2(This,RHS) ) 

#define LegendKey_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define LegendKey_get_PictureUnit(This,RHS)	\
    ( (This)->lpVtbl -> get_PictureUnit(This,RHS) ) 

#define LegendKey_put_PictureUnit(This,RHS)	\
    ( (This)->lpVtbl -> put_PictureUnit(This,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __LegendKey_INTERFACE_DEFINED__ */


#ifndef __PlotArea_INTERFACE_DEFINED__
#define __PlotArea_INTERFACE_DEFINED__

/* interface PlotArea */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_PlotArea;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A72-F07E-4CA4-AF6F-BEF486AA4E6F")
    PlotArea : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstr) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppparent) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **ppborder) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearFormats( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Interior( 
            /* [retval][out] */ Interior **ppinterior) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ ChartFillFormat **ppFill) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsideLeft( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsideLeft( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsideTop( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsideTop( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsideWidth( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsideWidth( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsideHeight( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsideHeight( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ XlChartElementPosition *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ XlChartElementPosition RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PlotAreaVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PlotArea * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PlotArea * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PlotArea * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PlotArea * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PlotArea * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PlotArea * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PlotArea * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            PlotArea * This,
            /* [retval][out] */ BSTR *bstr);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            PlotArea * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PlotArea * This,
            /* [retval][out] */ IDispatch **ppparent);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            PlotArea * This,
            /* [retval][out] */ ChartBorder **ppborder);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearFormats )( 
            PlotArea * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            PlotArea * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            PlotArea * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Interior )( 
            PlotArea * This,
            /* [retval][out] */ Interior **ppinterior);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            PlotArea * This,
            /* [retval][out] */ ChartFillFormat **ppFill);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            PlotArea * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            PlotArea * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            PlotArea * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            PlotArea * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            PlotArea * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            PlotArea * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsideLeft )( 
            PlotArea * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsideLeft )( 
            PlotArea * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsideTop )( 
            PlotArea * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsideTop )( 
            PlotArea * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsideWidth )( 
            PlotArea * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsideWidth )( 
            PlotArea * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsideHeight )( 
            PlotArea * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsideHeight )( 
            PlotArea * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            PlotArea * This,
            /* [retval][out] */ XlChartElementPosition *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            PlotArea * This,
            /* [in] */ XlChartElementPosition RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            PlotArea * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            PlotArea * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            PlotArea * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } PlotAreaVtbl;

    interface PlotArea
    {
        CONST_VTBL struct PlotAreaVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PlotArea_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PlotArea_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PlotArea_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PlotArea_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PlotArea_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PlotArea_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PlotArea_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PlotArea_get_Name(This,bstr)	\
    ( (This)->lpVtbl -> get_Name(This,bstr) ) 

#define PlotArea_Select(This,pvar)	\
    ( (This)->lpVtbl -> Select(This,pvar) ) 

#define PlotArea_get_Parent(This,ppparent)	\
    ( (This)->lpVtbl -> get_Parent(This,ppparent) ) 

#define PlotArea_get_Border(This,ppborder)	\
    ( (This)->lpVtbl -> get_Border(This,ppborder) ) 

#define PlotArea_ClearFormats(This,pvar)	\
    ( (This)->lpVtbl -> ClearFormats(This,pvar) ) 

#define PlotArea_get_Height(This,RHS)	\
    ( (This)->lpVtbl -> get_Height(This,RHS) ) 

#define PlotArea_put_Height(This,RHS)	\
    ( (This)->lpVtbl -> put_Height(This,RHS) ) 

#define PlotArea_get_Interior(This,ppinterior)	\
    ( (This)->lpVtbl -> get_Interior(This,ppinterior) ) 

#define PlotArea_get_Fill(This,ppFill)	\
    ( (This)->lpVtbl -> get_Fill(This,ppFill) ) 

#define PlotArea_get_Left(This,RHS)	\
    ( (This)->lpVtbl -> get_Left(This,RHS) ) 

#define PlotArea_put_Left(This,RHS)	\
    ( (This)->lpVtbl -> put_Left(This,RHS) ) 

#define PlotArea_get_Top(This,RHS)	\
    ( (This)->lpVtbl -> get_Top(This,RHS) ) 

#define PlotArea_put_Top(This,RHS)	\
    ( (This)->lpVtbl -> put_Top(This,RHS) ) 

#define PlotArea_get_Width(This,RHS)	\
    ( (This)->lpVtbl -> get_Width(This,RHS) ) 

#define PlotArea_put_Width(This,RHS)	\
    ( (This)->lpVtbl -> put_Width(This,RHS) ) 

#define PlotArea_get_InsideLeft(This,RHS)	\
    ( (This)->lpVtbl -> get_InsideLeft(This,RHS) ) 

#define PlotArea_put_InsideLeft(This,RHS)	\
    ( (This)->lpVtbl -> put_InsideLeft(This,RHS) ) 

#define PlotArea_get_InsideTop(This,RHS)	\
    ( (This)->lpVtbl -> get_InsideTop(This,RHS) ) 

#define PlotArea_put_InsideTop(This,RHS)	\
    ( (This)->lpVtbl -> put_InsideTop(This,RHS) ) 

#define PlotArea_get_InsideWidth(This,RHS)	\
    ( (This)->lpVtbl -> get_InsideWidth(This,RHS) ) 

#define PlotArea_put_InsideWidth(This,RHS)	\
    ( (This)->lpVtbl -> put_InsideWidth(This,RHS) ) 

#define PlotArea_get_InsideHeight(This,RHS)	\
    ( (This)->lpVtbl -> get_InsideHeight(This,RHS) ) 

#define PlotArea_put_InsideHeight(This,RHS)	\
    ( (This)->lpVtbl -> put_InsideHeight(This,RHS) ) 

#define PlotArea_get_Position(This,RHS)	\
    ( (This)->lpVtbl -> get_Position(This,RHS) ) 

#define PlotArea_put_Position(This,RHS)	\
    ( (This)->lpVtbl -> put_Position(This,RHS) ) 

#define PlotArea_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define PlotArea_get_Creator(This,RHS)	\
    ( (This)->lpVtbl -> get_Creator(This,RHS) ) 

#define PlotArea_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PlotArea_INTERFACE_DEFINED__ */


#ifndef __Point_INTERFACE_DEFINED__
#define __Point_INTERFACE_DEFINED__

/* interface Point */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Point;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A73-F07E-4CA4-AF6F-BEF486AA4E6F")
    Point : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearFormats( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DataLabel( 
            /* [retval][out] */ DataLabel **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Explosion( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Explosion( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasDataLabel( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasDataLabel( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Interior( 
            /* [retval][out] */ Interior **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InvertIfNegative( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InvertIfNegative( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerBackgroundColor( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerBackgroundColor( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerBackgroundColorIndex( 
            /* [retval][out] */ XlColorIndex *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerBackgroundColorIndex( 
            /* [in] */ XlColorIndex RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerForegroundColor( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerForegroundColor( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerForegroundColorIndex( 
            /* [retval][out] */ XlColorIndex *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerForegroundColorIndex( 
            /* [in] */ XlColorIndex RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerSize( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerSize( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerStyle( 
            /* [retval][out] */ XlMarkerStyle *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerStyle( 
            /* [in] */ XlMarkerStyle RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paste( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureType( 
            /* [retval][out] */ XlChartPictureType *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PictureType( 
            /* [in] */ XlChartPictureType RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ApplyPictToSides( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ApplyPictToSides( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ApplyPictToFront( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ApplyPictToFront( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ApplyPictToEnd( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ApplyPictToEnd( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Shadow( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SecondaryPlot( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SecondaryPlot( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ ChartFillFormat **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Has3DEffect( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Has3DEffect( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureUnit2( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PictureUnit2( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _ApplyDataLabels( 
            /* [defaultvalue][optional][in] */ XlDataLabelsType Type,
            /* [optional][in] */ VARIANT LegendKey,
            /* [optional][in] */ VARIANT AutoText,
            /* [optional][in] */ VARIANT HasLeaderLines,
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyDataLabels( 
            /* [defaultvalue][optional][in] */ XlDataLabelsType Type,
            /* [optional][in] */ VARIANT LegendKey,
            /* [optional][in] */ VARIANT AutoText,
            /* [optional][in] */ VARIANT HasLeaderLines,
            /* [optional][in] */ VARIANT ShowSeriesName,
            /* [optional][in] */ VARIANT ShowCategoryName,
            /* [optional][in] */ VARIANT ShowValue,
            /* [optional][in] */ VARIANT ShowPercentage,
            /* [optional][in] */ VARIANT ShowBubbleSize,
            /* [optional][in] */ VARIANT Separator,
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureUnit( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_PictureUnit( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ double *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ double *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ double *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ double *pval) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PieSliceLocation( 
            /* [in] */ XlPieSliceLocation loc,
            /* [defaultvalue][optional][in] */ XlPieSliceIndex Index,
            /* [retval][out] */ double *pval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Point * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Point * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Point * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Point * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Point * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Point * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Point * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Point * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            Point * This,
            /* [retval][out] */ ChartBorder **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearFormats )( 
            Point * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            Point * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DataLabel )( 
            Point * This,
            /* [retval][out] */ DataLabel **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Point * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Explosion )( 
            Point * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Explosion )( 
            Point * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasDataLabel )( 
            Point * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasDataLabel )( 
            Point * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Interior )( 
            Point * This,
            /* [retval][out] */ Interior **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InvertIfNegative )( 
            Point * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InvertIfNegative )( 
            Point * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerBackgroundColor )( 
            Point * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerBackgroundColor )( 
            Point * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerBackgroundColorIndex )( 
            Point * This,
            /* [retval][out] */ XlColorIndex *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerBackgroundColorIndex )( 
            Point * This,
            /* [in] */ XlColorIndex RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerForegroundColor )( 
            Point * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerForegroundColor )( 
            Point * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerForegroundColorIndex )( 
            Point * This,
            /* [retval][out] */ XlColorIndex *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerForegroundColorIndex )( 
            Point * This,
            /* [in] */ XlColorIndex RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerSize )( 
            Point * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerSize )( 
            Point * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerStyle )( 
            Point * This,
            /* [retval][out] */ XlMarkerStyle *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerStyle )( 
            Point * This,
            /* [in] */ XlMarkerStyle RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paste )( 
            Point * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureType )( 
            Point * This,
            /* [retval][out] */ XlChartPictureType *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PictureType )( 
            Point * This,
            /* [in] */ XlChartPictureType RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Point * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ApplyPictToSides )( 
            Point * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ApplyPictToSides )( 
            Point * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ApplyPictToFront )( 
            Point * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ApplyPictToFront )( 
            Point * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ApplyPictToEnd )( 
            Point * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ApplyPictToEnd )( 
            Point * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            Point * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadow )( 
            Point * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SecondaryPlot )( 
            Point * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SecondaryPlot )( 
            Point * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            Point * This,
            /* [retval][out] */ ChartFillFormat **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Has3DEffect )( 
            Point * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Has3DEffect )( 
            Point * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            Point * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Point * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureUnit2 )( 
            Point * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PictureUnit2 )( 
            Point * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Point * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *_ApplyDataLabels )( 
            Point * This,
            /* [defaultvalue][optional][in] */ XlDataLabelsType Type,
            /* [optional][in] */ VARIANT LegendKey,
            /* [optional][in] */ VARIANT AutoText,
            /* [optional][in] */ VARIANT HasLeaderLines,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyDataLabels )( 
            Point * This,
            /* [defaultvalue][optional][in] */ XlDataLabelsType Type,
            /* [optional][in] */ VARIANT LegendKey,
            /* [optional][in] */ VARIANT AutoText,
            /* [optional][in] */ VARIANT HasLeaderLines,
            /* [optional][in] */ VARIANT ShowSeriesName,
            /* [optional][in] */ VARIANT ShowCategoryName,
            /* [optional][in] */ VARIANT ShowValue,
            /* [optional][in] */ VARIANT ShowPercentage,
            /* [optional][in] */ VARIANT ShowBubbleSize,
            /* [optional][in] */ VARIANT Separator,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureUnit )( 
            Point * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PictureUnit )( 
            Point * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Point * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Point * This,
            /* [retval][out] */ double *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Point * This,
            /* [retval][out] */ double *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            Point * This,
            /* [retval][out] */ double *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            Point * This,
            /* [retval][out] */ double *pval);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PieSliceLocation )( 
            Point * This,
            /* [in] */ XlPieSliceLocation loc,
            /* [defaultvalue][optional][in] */ XlPieSliceIndex Index,
            /* [retval][out] */ double *pval);
        
        END_INTERFACE
    } PointVtbl;

    interface Point
    {
        CONST_VTBL struct PointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Point_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Point_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Point_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Point_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Point_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Point_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Point_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Point_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define Point_get_Border(This,RHS)	\
    ( (This)->lpVtbl -> get_Border(This,RHS) ) 

#define Point_ClearFormats(This,RHS)	\
    ( (This)->lpVtbl -> ClearFormats(This,RHS) ) 

#define Point_Copy(This,RHS)	\
    ( (This)->lpVtbl -> Copy(This,RHS) ) 

#define Point_get_DataLabel(This,RHS)	\
    ( (This)->lpVtbl -> get_DataLabel(This,RHS) ) 

#define Point_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define Point_get_Explosion(This,RHS)	\
    ( (This)->lpVtbl -> get_Explosion(This,RHS) ) 

#define Point_put_Explosion(This,RHS)	\
    ( (This)->lpVtbl -> put_Explosion(This,RHS) ) 

#define Point_get_HasDataLabel(This,RHS)	\
    ( (This)->lpVtbl -> get_HasDataLabel(This,RHS) ) 

#define Point_put_HasDataLabel(This,RHS)	\
    ( (This)->lpVtbl -> put_HasDataLabel(This,RHS) ) 

#define Point_get_Interior(This,RHS)	\
    ( (This)->lpVtbl -> get_Interior(This,RHS) ) 

#define Point_get_InvertIfNegative(This,RHS)	\
    ( (This)->lpVtbl -> get_InvertIfNegative(This,RHS) ) 

#define Point_put_InvertIfNegative(This,RHS)	\
    ( (This)->lpVtbl -> put_InvertIfNegative(This,RHS) ) 

#define Point_get_MarkerBackgroundColor(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerBackgroundColor(This,RHS) ) 

#define Point_put_MarkerBackgroundColor(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerBackgroundColor(This,RHS) ) 

#define Point_get_MarkerBackgroundColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerBackgroundColorIndex(This,RHS) ) 

#define Point_put_MarkerBackgroundColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerBackgroundColorIndex(This,RHS) ) 

#define Point_get_MarkerForegroundColor(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerForegroundColor(This,RHS) ) 

#define Point_put_MarkerForegroundColor(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerForegroundColor(This,RHS) ) 

#define Point_get_MarkerForegroundColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerForegroundColorIndex(This,RHS) ) 

#define Point_put_MarkerForegroundColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerForegroundColorIndex(This,RHS) ) 

#define Point_get_MarkerSize(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerSize(This,RHS) ) 

#define Point_put_MarkerSize(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerSize(This,RHS) ) 

#define Point_get_MarkerStyle(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerStyle(This,RHS) ) 

#define Point_put_MarkerStyle(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerStyle(This,RHS) ) 

#define Point_Paste(This,RHS)	\
    ( (This)->lpVtbl -> Paste(This,RHS) ) 

#define Point_get_PictureType(This,RHS)	\
    ( (This)->lpVtbl -> get_PictureType(This,RHS) ) 

#define Point_put_PictureType(This,RHS)	\
    ( (This)->lpVtbl -> put_PictureType(This,RHS) ) 

#define Point_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#define Point_get_ApplyPictToSides(This,RHS)	\
    ( (This)->lpVtbl -> get_ApplyPictToSides(This,RHS) ) 

#define Point_put_ApplyPictToSides(This,RHS)	\
    ( (This)->lpVtbl -> put_ApplyPictToSides(This,RHS) ) 

#define Point_get_ApplyPictToFront(This,RHS)	\
    ( (This)->lpVtbl -> get_ApplyPictToFront(This,RHS) ) 

#define Point_put_ApplyPictToFront(This,RHS)	\
    ( (This)->lpVtbl -> put_ApplyPictToFront(This,RHS) ) 

#define Point_get_ApplyPictToEnd(This,RHS)	\
    ( (This)->lpVtbl -> get_ApplyPictToEnd(This,RHS) ) 

#define Point_put_ApplyPictToEnd(This,RHS)	\
    ( (This)->lpVtbl -> put_ApplyPictToEnd(This,RHS) ) 

#define Point_get_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> get_Shadow(This,RHS) ) 

#define Point_put_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> put_Shadow(This,RHS) ) 

#define Point_get_SecondaryPlot(This,RHS)	\
    ( (This)->lpVtbl -> get_SecondaryPlot(This,RHS) ) 

#define Point_put_SecondaryPlot(This,RHS)	\
    ( (This)->lpVtbl -> put_SecondaryPlot(This,RHS) ) 

#define Point_get_Fill(This,RHS)	\
    ( (This)->lpVtbl -> get_Fill(This,RHS) ) 

#define Point_get_Has3DEffect(This,RHS)	\
    ( (This)->lpVtbl -> get_Has3DEffect(This,RHS) ) 

#define Point_put_Has3DEffect(This,RHS)	\
    ( (This)->lpVtbl -> put_Has3DEffect(This,RHS) ) 

#define Point_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define Point_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define Point_get_PictureUnit2(This,RHS)	\
    ( (This)->lpVtbl -> get_PictureUnit2(This,RHS) ) 

#define Point_put_PictureUnit2(This,RHS)	\
    ( (This)->lpVtbl -> put_PictureUnit2(This,RHS) ) 

#define Point_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Point__ApplyDataLabels(This,Type,LegendKey,AutoText,HasLeaderLines,RHS)	\
    ( (This)->lpVtbl -> _ApplyDataLabels(This,Type,LegendKey,AutoText,HasLeaderLines,RHS) ) 

#define Point_ApplyDataLabels(This,Type,LegendKey,AutoText,HasLeaderLines,ShowSeriesName,ShowCategoryName,ShowValue,ShowPercentage,ShowBubbleSize,Separator,RHS)	\
    ( (This)->lpVtbl -> ApplyDataLabels(This,Type,LegendKey,AutoText,HasLeaderLines,ShowSeriesName,ShowCategoryName,ShowValue,ShowPercentage,ShowBubbleSize,Separator,RHS) ) 

#define Point_get_PictureUnit(This,RHS)	\
    ( (This)->lpVtbl -> get_PictureUnit(This,RHS) ) 

#define Point_put_PictureUnit(This,RHS)	\
    ( (This)->lpVtbl -> put_PictureUnit(This,RHS) ) 

#define Point_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define Point_get_Height(This,pval)	\
    ( (This)->lpVtbl -> get_Height(This,pval) ) 

#define Point_get_Width(This,pval)	\
    ( (This)->lpVtbl -> get_Width(This,pval) ) 

#define Point_get_Left(This,pval)	\
    ( (This)->lpVtbl -> get_Left(This,pval) ) 

#define Point_get_Top(This,pval)	\
    ( (This)->lpVtbl -> get_Top(This,pval) ) 

#define Point_PieSliceLocation(This,loc,Index,pval)	\
    ( (This)->lpVtbl -> PieSliceLocation(This,loc,Index,pval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Point_INTERFACE_DEFINED__ */


#ifndef __Points_INTERFACE_DEFINED__
#define __Points_INTERFACE_DEFINED__

/* interface Points */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Points;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A74-F07E-4CA4-AF6F-BEF486AA4E6F")
    Points : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Point **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Default( 
            /* [in] */ long Index,
            /* [retval][out] */ Point **RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PointsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Points * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Points * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Points * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Points * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Points * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Points * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Points * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Points * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Points * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Points * This,
            /* [in] */ long Index,
            /* [retval][out] */ Point **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Points * This,
            /* [retval][out] */ IUnknown **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Points * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Points * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *_Default )( 
            Points * This,
            /* [in] */ long Index,
            /* [retval][out] */ Point **RHS);
        
        END_INTERFACE
    } PointsVtbl;

    interface Points
    {
        CONST_VTBL struct PointsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Points_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Points_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Points_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Points_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Points_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Points_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Points_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Points_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define Points_get_Count(This,RHS)	\
    ( (This)->lpVtbl -> get_Count(This,RHS) ) 

#define Points_Item(This,Index,RHS)	\
    ( (This)->lpVtbl -> Item(This,Index,RHS) ) 

#define Points__NewEnum(This,RHS)	\
    ( (This)->lpVtbl -> _NewEnum(This,RHS) ) 

#define Points_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define Points_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Points__Default(This,Index,RHS)	\
    ( (This)->lpVtbl -> _Default(This,Index,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Points_INTERFACE_DEFINED__ */


#ifndef __Series_INTERFACE_DEFINED__
#define __Series_INTERFACE_DEFINED__

/* interface Series */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Series;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A75-F07E-4CA4-AF6F-BEF486AA4E6F")
    Series : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AxisGroup( 
            /* [retval][out] */ XlAxisGroup *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AxisGroup( 
            /* [in] */ XlAxisGroup RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearFormats( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DataLabels( 
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ErrorBar( 
            /* [in] */ XlErrorBarDirection Direction,
            /* [in] */ XlErrorBarInclude Include,
            /* [in] */ XlErrorBarType Type,
            /* [optional][in] */ VARIANT Amount,
            /* [optional][in] */ VARIANT MinusValues,
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ErrorBars( 
            /* [retval][out] */ ErrorBars **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Explosion( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Explosion( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Formula( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Formula( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormulaLocal( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormulaLocal( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormulaR1C1( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormulaR1C1( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormulaR1C1Local( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormulaR1C1Local( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasDataLabels( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasDataLabels( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasErrorBars( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasErrorBars( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Interior( 
            /* [retval][out] */ Interior **RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ ChartFillFormat **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InvertIfNegative( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InvertIfNegative( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerBackgroundColor( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerBackgroundColor( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerBackgroundColorIndex( 
            /* [retval][out] */ XlColorIndex *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerBackgroundColorIndex( 
            /* [in] */ XlColorIndex RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerForegroundColor( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerForegroundColor( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerForegroundColorIndex( 
            /* [retval][out] */ XlColorIndex *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerForegroundColorIndex( 
            /* [in] */ XlColorIndex RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerSize( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerSize( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkerStyle( 
            /* [retval][out] */ XlMarkerStyle *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkerStyle( 
            /* [in] */ XlMarkerStyle RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paste( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureType( 
            /* [retval][out] */ XlChartPictureType *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PictureType( 
            /* [in] */ XlChartPictureType RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotOrder( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PlotOrder( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Points( 
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Smooth( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Smooth( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Trendlines( 
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChartType( 
            /* [retval][out] */ XlChartType *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ChartType( 
            /* [in] */ XlChartType RHS) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ApplyCustomType( 
            /* [in] */ XlChartType ChartType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Values( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Values( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XValues( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_XValues( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BubbleSizes( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BubbleSizes( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BarShape( 
            /* [retval][out] */ XlBarShape *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BarShape( 
            /* [in] */ XlBarShape RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ApplyPictToSides( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ApplyPictToSides( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ApplyPictToFront( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ApplyPictToFront( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ApplyPictToEnd( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ApplyPictToEnd( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Has3DEffect( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Has3DEffect( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Shadow( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasLeaderLines( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasLeaderLines( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeaderLines( 
            /* [retval][out] */ LeaderLines **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureUnit2( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PictureUnit2( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _ApplyDataLabels( 
            /* [defaultvalue][optional][in] */ XlDataLabelsType Type,
            /* [optional][in] */ VARIANT LegendKey,
            /* [optional][in] */ VARIANT AutoText,
            /* [optional][in] */ VARIANT HasLeaderLines,
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyDataLabels( 
            /* [defaultvalue][optional][in] */ XlDataLabelsType Type,
            /* [optional][in] */ VARIANT LegendKey,
            /* [optional][in] */ VARIANT AutoText,
            /* [optional][in] */ VARIANT HasLeaderLines,
            /* [optional][in] */ VARIANT ShowSeriesName,
            /* [optional][in] */ VARIANT ShowCategoryName,
            /* [optional][in] */ VARIANT ShowValue,
            /* [optional][in] */ VARIANT ShowPercentage,
            /* [optional][in] */ VARIANT ShowBubbleSize,
            /* [optional][in] */ VARIANT Separator,
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureUnit( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_PictureUnit( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlotColorIndex( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InvertColor( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InvertColor( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InvertColorIndex( 
            /* [retval][out] */ XlColorIndex *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InvertColorIndex( 
            /* [in] */ XlColorIndex RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsFiltered( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsFiltered( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SeriesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Series * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Series * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Series * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Series * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Series * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Series * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Series * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Series * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AxisGroup )( 
            Series * This,
            /* [retval][out] */ XlAxisGroup *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AxisGroup )( 
            Series * This,
            /* [in] */ XlAxisGroup RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            Series * This,
            /* [retval][out] */ ChartBorder **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearFormats )( 
            Series * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            Series * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DataLabels )( 
            Series * This,
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Series * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ErrorBar )( 
            Series * This,
            /* [in] */ XlErrorBarDirection Direction,
            /* [in] */ XlErrorBarInclude Include,
            /* [in] */ XlErrorBarType Type,
            /* [optional][in] */ VARIANT Amount,
            /* [optional][in] */ VARIANT MinusValues,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorBars )( 
            Series * This,
            /* [retval][out] */ ErrorBars **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Explosion )( 
            Series * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Explosion )( 
            Series * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Formula )( 
            Series * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Formula )( 
            Series * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormulaLocal )( 
            Series * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormulaLocal )( 
            Series * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormulaR1C1 )( 
            Series * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormulaR1C1 )( 
            Series * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormulaR1C1Local )( 
            Series * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormulaR1C1Local )( 
            Series * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasDataLabels )( 
            Series * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasDataLabels )( 
            Series * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasErrorBars )( 
            Series * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasErrorBars )( 
            Series * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Interior )( 
            Series * This,
            /* [retval][out] */ Interior **RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            Series * This,
            /* [retval][out] */ ChartFillFormat **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InvertIfNegative )( 
            Series * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InvertIfNegative )( 
            Series * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerBackgroundColor )( 
            Series * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerBackgroundColor )( 
            Series * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerBackgroundColorIndex )( 
            Series * This,
            /* [retval][out] */ XlColorIndex *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerBackgroundColorIndex )( 
            Series * This,
            /* [in] */ XlColorIndex RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerForegroundColor )( 
            Series * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerForegroundColor )( 
            Series * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerForegroundColorIndex )( 
            Series * This,
            /* [retval][out] */ XlColorIndex *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerForegroundColorIndex )( 
            Series * This,
            /* [in] */ XlColorIndex RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerSize )( 
            Series * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerSize )( 
            Series * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkerStyle )( 
            Series * This,
            /* [retval][out] */ XlMarkerStyle *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkerStyle )( 
            Series * This,
            /* [in] */ XlMarkerStyle RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Series * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            Series * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paste )( 
            Series * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureType )( 
            Series * This,
            /* [retval][out] */ XlChartPictureType *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PictureType )( 
            Series * This,
            /* [in] */ XlChartPictureType RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotOrder )( 
            Series * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlotOrder )( 
            Series * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Points )( 
            Series * This,
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Series * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Smooth )( 
            Series * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Smooth )( 
            Series * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Trendlines )( 
            Series * This,
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Series * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            Series * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChartType )( 
            Series * This,
            /* [retval][out] */ XlChartType *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ChartType )( 
            Series * This,
            /* [in] */ XlChartType RHS);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyCustomType )( 
            Series * This,
            /* [in] */ XlChartType ChartType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Values )( 
            Series * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Values )( 
            Series * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XValues )( 
            Series * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XValues )( 
            Series * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BubbleSizes )( 
            Series * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BubbleSizes )( 
            Series * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BarShape )( 
            Series * This,
            /* [retval][out] */ XlBarShape *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BarShape )( 
            Series * This,
            /* [in] */ XlBarShape RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ApplyPictToSides )( 
            Series * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ApplyPictToSides )( 
            Series * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ApplyPictToFront )( 
            Series * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ApplyPictToFront )( 
            Series * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ApplyPictToEnd )( 
            Series * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ApplyPictToEnd )( 
            Series * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Has3DEffect )( 
            Series * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Has3DEffect )( 
            Series * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            Series * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadow )( 
            Series * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasLeaderLines )( 
            Series * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasLeaderLines )( 
            Series * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeaderLines )( 
            Series * This,
            /* [retval][out] */ LeaderLines **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            Series * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Series * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureUnit2 )( 
            Series * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PictureUnit2 )( 
            Series * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Series * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *_ApplyDataLabels )( 
            Series * This,
            /* [defaultvalue][optional][in] */ XlDataLabelsType Type,
            /* [optional][in] */ VARIANT LegendKey,
            /* [optional][in] */ VARIANT AutoText,
            /* [optional][in] */ VARIANT HasLeaderLines,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyDataLabels )( 
            Series * This,
            /* [defaultvalue][optional][in] */ XlDataLabelsType Type,
            /* [optional][in] */ VARIANT LegendKey,
            /* [optional][in] */ VARIANT AutoText,
            /* [optional][in] */ VARIANT HasLeaderLines,
            /* [optional][in] */ VARIANT ShowSeriesName,
            /* [optional][in] */ VARIANT ShowCategoryName,
            /* [optional][in] */ VARIANT ShowValue,
            /* [optional][in] */ VARIANT ShowPercentage,
            /* [optional][in] */ VARIANT ShowBubbleSize,
            /* [optional][in] */ VARIANT Separator,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureUnit )( 
            Series * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PictureUnit )( 
            Series * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlotColorIndex )( 
            Series * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InvertColor )( 
            Series * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InvertColor )( 
            Series * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InvertColorIndex )( 
            Series * This,
            /* [retval][out] */ XlColorIndex *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InvertColorIndex )( 
            Series * This,
            /* [in] */ XlColorIndex RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsFiltered )( 
            Series * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsFiltered )( 
            Series * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        END_INTERFACE
    } SeriesVtbl;

    interface Series
    {
        CONST_VTBL struct SeriesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Series_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Series_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Series_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Series_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Series_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Series_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Series_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Series_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define Series_get_AxisGroup(This,RHS)	\
    ( (This)->lpVtbl -> get_AxisGroup(This,RHS) ) 

#define Series_put_AxisGroup(This,RHS)	\
    ( (This)->lpVtbl -> put_AxisGroup(This,RHS) ) 

#define Series_get_Border(This,RHS)	\
    ( (This)->lpVtbl -> get_Border(This,RHS) ) 

#define Series_ClearFormats(This,RHS)	\
    ( (This)->lpVtbl -> ClearFormats(This,RHS) ) 

#define Series_Copy(This,RHS)	\
    ( (This)->lpVtbl -> Copy(This,RHS) ) 

#define Series_DataLabels(This,Index,RHS)	\
    ( (This)->lpVtbl -> DataLabels(This,Index,RHS) ) 

#define Series_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define Series_ErrorBar(This,Direction,Include,Type,Amount,MinusValues,RHS)	\
    ( (This)->lpVtbl -> ErrorBar(This,Direction,Include,Type,Amount,MinusValues,RHS) ) 

#define Series_get_ErrorBars(This,RHS)	\
    ( (This)->lpVtbl -> get_ErrorBars(This,RHS) ) 

#define Series_get_Explosion(This,RHS)	\
    ( (This)->lpVtbl -> get_Explosion(This,RHS) ) 

#define Series_put_Explosion(This,RHS)	\
    ( (This)->lpVtbl -> put_Explosion(This,RHS) ) 

#define Series_get_Formula(This,RHS)	\
    ( (This)->lpVtbl -> get_Formula(This,RHS) ) 

#define Series_put_Formula(This,RHS)	\
    ( (This)->lpVtbl -> put_Formula(This,RHS) ) 

#define Series_get_FormulaLocal(This,RHS)	\
    ( (This)->lpVtbl -> get_FormulaLocal(This,RHS) ) 

#define Series_put_FormulaLocal(This,RHS)	\
    ( (This)->lpVtbl -> put_FormulaLocal(This,RHS) ) 

#define Series_get_FormulaR1C1(This,RHS)	\
    ( (This)->lpVtbl -> get_FormulaR1C1(This,RHS) ) 

#define Series_put_FormulaR1C1(This,RHS)	\
    ( (This)->lpVtbl -> put_FormulaR1C1(This,RHS) ) 

#define Series_get_FormulaR1C1Local(This,RHS)	\
    ( (This)->lpVtbl -> get_FormulaR1C1Local(This,RHS) ) 

#define Series_put_FormulaR1C1Local(This,RHS)	\
    ( (This)->lpVtbl -> put_FormulaR1C1Local(This,RHS) ) 

#define Series_get_HasDataLabels(This,RHS)	\
    ( (This)->lpVtbl -> get_HasDataLabels(This,RHS) ) 

#define Series_put_HasDataLabels(This,RHS)	\
    ( (This)->lpVtbl -> put_HasDataLabels(This,RHS) ) 

#define Series_get_HasErrorBars(This,RHS)	\
    ( (This)->lpVtbl -> get_HasErrorBars(This,RHS) ) 

#define Series_put_HasErrorBars(This,RHS)	\
    ( (This)->lpVtbl -> put_HasErrorBars(This,RHS) ) 

#define Series_get_Interior(This,RHS)	\
    ( (This)->lpVtbl -> get_Interior(This,RHS) ) 

#define Series_get_Fill(This,RHS)	\
    ( (This)->lpVtbl -> get_Fill(This,RHS) ) 

#define Series_get_InvertIfNegative(This,RHS)	\
    ( (This)->lpVtbl -> get_InvertIfNegative(This,RHS) ) 

#define Series_put_InvertIfNegative(This,RHS)	\
    ( (This)->lpVtbl -> put_InvertIfNegative(This,RHS) ) 

#define Series_get_MarkerBackgroundColor(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerBackgroundColor(This,RHS) ) 

#define Series_put_MarkerBackgroundColor(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerBackgroundColor(This,RHS) ) 

#define Series_get_MarkerBackgroundColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerBackgroundColorIndex(This,RHS) ) 

#define Series_put_MarkerBackgroundColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerBackgroundColorIndex(This,RHS) ) 

#define Series_get_MarkerForegroundColor(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerForegroundColor(This,RHS) ) 

#define Series_put_MarkerForegroundColor(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerForegroundColor(This,RHS) ) 

#define Series_get_MarkerForegroundColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerForegroundColorIndex(This,RHS) ) 

#define Series_put_MarkerForegroundColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerForegroundColorIndex(This,RHS) ) 

#define Series_get_MarkerSize(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerSize(This,RHS) ) 

#define Series_put_MarkerSize(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerSize(This,RHS) ) 

#define Series_get_MarkerStyle(This,RHS)	\
    ( (This)->lpVtbl -> get_MarkerStyle(This,RHS) ) 

#define Series_put_MarkerStyle(This,RHS)	\
    ( (This)->lpVtbl -> put_MarkerStyle(This,RHS) ) 

#define Series_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define Series_put_Name(This,RHS)	\
    ( (This)->lpVtbl -> put_Name(This,RHS) ) 

#define Series_Paste(This,RHS)	\
    ( (This)->lpVtbl -> Paste(This,RHS) ) 

#define Series_get_PictureType(This,RHS)	\
    ( (This)->lpVtbl -> get_PictureType(This,RHS) ) 

#define Series_put_PictureType(This,RHS)	\
    ( (This)->lpVtbl -> put_PictureType(This,RHS) ) 

#define Series_get_PlotOrder(This,RHS)	\
    ( (This)->lpVtbl -> get_PlotOrder(This,RHS) ) 

#define Series_put_PlotOrder(This,RHS)	\
    ( (This)->lpVtbl -> put_PlotOrder(This,RHS) ) 

#define Series_Points(This,Index,RHS)	\
    ( (This)->lpVtbl -> Points(This,Index,RHS) ) 

#define Series_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#define Series_get_Smooth(This,RHS)	\
    ( (This)->lpVtbl -> get_Smooth(This,RHS) ) 

#define Series_put_Smooth(This,RHS)	\
    ( (This)->lpVtbl -> put_Smooth(This,RHS) ) 

#define Series_Trendlines(This,Index,RHS)	\
    ( (This)->lpVtbl -> Trendlines(This,Index,RHS) ) 

#define Series_get_Type(This,RHS)	\
    ( (This)->lpVtbl -> get_Type(This,RHS) ) 

#define Series_put_Type(This,RHS)	\
    ( (This)->lpVtbl -> put_Type(This,RHS) ) 

#define Series_get_ChartType(This,RHS)	\
    ( (This)->lpVtbl -> get_ChartType(This,RHS) ) 

#define Series_put_ChartType(This,RHS)	\
    ( (This)->lpVtbl -> put_ChartType(This,RHS) ) 

#define Series_ApplyCustomType(This,ChartType)	\
    ( (This)->lpVtbl -> ApplyCustomType(This,ChartType) ) 

#define Series_get_Values(This,RHS)	\
    ( (This)->lpVtbl -> get_Values(This,RHS) ) 

#define Series_put_Values(This,RHS)	\
    ( (This)->lpVtbl -> put_Values(This,RHS) ) 

#define Series_get_XValues(This,RHS)	\
    ( (This)->lpVtbl -> get_XValues(This,RHS) ) 

#define Series_put_XValues(This,RHS)	\
    ( (This)->lpVtbl -> put_XValues(This,RHS) ) 

#define Series_get_BubbleSizes(This,RHS)	\
    ( (This)->lpVtbl -> get_BubbleSizes(This,RHS) ) 

#define Series_put_BubbleSizes(This,RHS)	\
    ( (This)->lpVtbl -> put_BubbleSizes(This,RHS) ) 

#define Series_get_BarShape(This,RHS)	\
    ( (This)->lpVtbl -> get_BarShape(This,RHS) ) 

#define Series_put_BarShape(This,RHS)	\
    ( (This)->lpVtbl -> put_BarShape(This,RHS) ) 

#define Series_get_ApplyPictToSides(This,RHS)	\
    ( (This)->lpVtbl -> get_ApplyPictToSides(This,RHS) ) 

#define Series_put_ApplyPictToSides(This,RHS)	\
    ( (This)->lpVtbl -> put_ApplyPictToSides(This,RHS) ) 

#define Series_get_ApplyPictToFront(This,RHS)	\
    ( (This)->lpVtbl -> get_ApplyPictToFront(This,RHS) ) 

#define Series_put_ApplyPictToFront(This,RHS)	\
    ( (This)->lpVtbl -> put_ApplyPictToFront(This,RHS) ) 

#define Series_get_ApplyPictToEnd(This,RHS)	\
    ( (This)->lpVtbl -> get_ApplyPictToEnd(This,RHS) ) 

#define Series_put_ApplyPictToEnd(This,RHS)	\
    ( (This)->lpVtbl -> put_ApplyPictToEnd(This,RHS) ) 

#define Series_get_Has3DEffect(This,RHS)	\
    ( (This)->lpVtbl -> get_Has3DEffect(This,RHS) ) 

#define Series_put_Has3DEffect(This,RHS)	\
    ( (This)->lpVtbl -> put_Has3DEffect(This,RHS) ) 

#define Series_get_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> get_Shadow(This,RHS) ) 

#define Series_put_Shadow(This,RHS)	\
    ( (This)->lpVtbl -> put_Shadow(This,RHS) ) 

#define Series_get_HasLeaderLines(This,RHS)	\
    ( (This)->lpVtbl -> get_HasLeaderLines(This,RHS) ) 

#define Series_put_HasLeaderLines(This,RHS)	\
    ( (This)->lpVtbl -> put_HasLeaderLines(This,RHS) ) 

#define Series_get_LeaderLines(This,RHS)	\
    ( (This)->lpVtbl -> get_LeaderLines(This,RHS) ) 

#define Series_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define Series_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define Series_get_PictureUnit2(This,RHS)	\
    ( (This)->lpVtbl -> get_PictureUnit2(This,RHS) ) 

#define Series_put_PictureUnit2(This,RHS)	\
    ( (This)->lpVtbl -> put_PictureUnit2(This,RHS) ) 

#define Series_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Series__ApplyDataLabels(This,Type,LegendKey,AutoText,HasLeaderLines,RHS)	\
    ( (This)->lpVtbl -> _ApplyDataLabels(This,Type,LegendKey,AutoText,HasLeaderLines,RHS) ) 

#define Series_ApplyDataLabels(This,Type,LegendKey,AutoText,HasLeaderLines,ShowSeriesName,ShowCategoryName,ShowValue,ShowPercentage,ShowBubbleSize,Separator,RHS)	\
    ( (This)->lpVtbl -> ApplyDataLabels(This,Type,LegendKey,AutoText,HasLeaderLines,ShowSeriesName,ShowCategoryName,ShowValue,ShowPercentage,ShowBubbleSize,Separator,RHS) ) 

#define Series_get_PictureUnit(This,RHS)	\
    ( (This)->lpVtbl -> get_PictureUnit(This,RHS) ) 

#define Series_put_PictureUnit(This,RHS)	\
    ( (This)->lpVtbl -> put_PictureUnit(This,RHS) ) 

#define Series_get_PlotColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> get_PlotColorIndex(This,RHS) ) 

#define Series_get_InvertColor(This,RHS)	\
    ( (This)->lpVtbl -> get_InvertColor(This,RHS) ) 

#define Series_put_InvertColor(This,RHS)	\
    ( (This)->lpVtbl -> put_InvertColor(This,RHS) ) 

#define Series_get_InvertColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> get_InvertColorIndex(This,RHS) ) 

#define Series_put_InvertColorIndex(This,RHS)	\
    ( (This)->lpVtbl -> put_InvertColorIndex(This,RHS) ) 

#define Series_get_IsFiltered(This,RHS)	\
    ( (This)->lpVtbl -> get_IsFiltered(This,RHS) ) 

#define Series_put_IsFiltered(This,RHS)	\
    ( (This)->lpVtbl -> put_IsFiltered(This,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Series_INTERFACE_DEFINED__ */


#ifndef __SeriesCollection_INTERFACE_DEFINED__
#define __SeriesCollection_INTERFACE_DEFINED__

/* interface SeriesCollection */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_SeriesCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A76-F07E-4CA4-AF6F-BEF486AA4E6F")
    SeriesCollection : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Extend( 
            /* [in] */ VARIANT Source,
            /* [optional][in] */ VARIANT Rowcol,
            /* [optional][in] */ VARIANT CategoryLabels,
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Series **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewSeries( 
            /* [retval][out] */ Series **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ VARIANT Source,
            /* [defaultvalue][optional][in] */ XlRowCol Rowcol,
            /* [optional][in] */ VARIANT SeriesLabels,
            /* [optional][in] */ VARIANT CategoryLabels,
            /* [optional][in] */ VARIANT Replace,
            /* [retval][out] */ Series **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Default( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Series **RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SeriesCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SeriesCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SeriesCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SeriesCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SeriesCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SeriesCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SeriesCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SeriesCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SeriesCollection * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SeriesCollection * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Extend )( 
            SeriesCollection * This,
            /* [in] */ VARIANT Source,
            /* [optional][in] */ VARIANT Rowcol,
            /* [optional][in] */ VARIANT CategoryLabels,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            SeriesCollection * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Series **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            SeriesCollection * This,
            /* [retval][out] */ IUnknown **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewSeries )( 
            SeriesCollection * This,
            /* [retval][out] */ Series **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            SeriesCollection * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SeriesCollection * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            SeriesCollection * This,
            /* [in] */ VARIANT Source,
            /* [defaultvalue][optional][in] */ XlRowCol Rowcol,
            /* [optional][in] */ VARIANT SeriesLabels,
            /* [optional][in] */ VARIANT CategoryLabels,
            /* [optional][in] */ VARIANT Replace,
            /* [retval][out] */ Series **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *_Default )( 
            SeriesCollection * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Series **RHS);
        
        END_INTERFACE
    } SeriesCollectionVtbl;

    interface SeriesCollection
    {
        CONST_VTBL struct SeriesCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SeriesCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SeriesCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SeriesCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SeriesCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SeriesCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SeriesCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SeriesCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SeriesCollection_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define SeriesCollection_get_Count(This,RHS)	\
    ( (This)->lpVtbl -> get_Count(This,RHS) ) 

#define SeriesCollection_Extend(This,Source,Rowcol,CategoryLabels,RHS)	\
    ( (This)->lpVtbl -> Extend(This,Source,Rowcol,CategoryLabels,RHS) ) 

#define SeriesCollection_Item(This,Index,RHS)	\
    ( (This)->lpVtbl -> Item(This,Index,RHS) ) 

#define SeriesCollection__NewEnum(This,RHS)	\
    ( (This)->lpVtbl -> _NewEnum(This,RHS) ) 

#define SeriesCollection_NewSeries(This,RHS)	\
    ( (This)->lpVtbl -> NewSeries(This,RHS) ) 

#define SeriesCollection_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define SeriesCollection_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define SeriesCollection_Add(This,Source,Rowcol,SeriesLabels,CategoryLabels,Replace,RHS)	\
    ( (This)->lpVtbl -> Add(This,Source,Rowcol,SeriesLabels,CategoryLabels,Replace,RHS) ) 

#define SeriesCollection__Default(This,Index,RHS)	\
    ( (This)->lpVtbl -> _Default(This,Index,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SeriesCollection_INTERFACE_DEFINED__ */


#ifndef __SeriesLines_INTERFACE_DEFINED__
#define __SeriesLines_INTERFACE_DEFINED__

/* interface SeriesLines */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_SeriesLines;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A77-F07E-4CA4-AF6F-BEF486AA4E6F")
    SeriesLines : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstr) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppparent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **ppborder) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SeriesLinesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SeriesLines * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SeriesLines * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SeriesLines * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SeriesLines * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SeriesLines * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SeriesLines * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SeriesLines * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            SeriesLines * This,
            /* [retval][out] */ BSTR *bstr);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            SeriesLines * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SeriesLines * This,
            /* [retval][out] */ IDispatch **ppparent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            SeriesLines * This,
            /* [retval][out] */ ChartBorder **ppborder);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            SeriesLines * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            SeriesLines * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            SeriesLines * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SeriesLines * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } SeriesLinesVtbl;

    interface SeriesLines
    {
        CONST_VTBL struct SeriesLinesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SeriesLines_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SeriesLines_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SeriesLines_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SeriesLines_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SeriesLines_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SeriesLines_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SeriesLines_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SeriesLines_get_Name(This,bstr)	\
    ( (This)->lpVtbl -> get_Name(This,bstr) ) 

#define SeriesLines_Select(This,pvar)	\
    ( (This)->lpVtbl -> Select(This,pvar) ) 

#define SeriesLines_get_Parent(This,ppparent)	\
    ( (This)->lpVtbl -> get_Parent(This,ppparent) ) 

#define SeriesLines_get_Border(This,ppborder)	\
    ( (This)->lpVtbl -> get_Border(This,ppborder) ) 

#define SeriesLines_Delete(This,pvar)	\
    ( (This)->lpVtbl -> Delete(This,pvar) ) 

#define SeriesLines_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define SeriesLines_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define SeriesLines_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SeriesLines_INTERFACE_DEFINED__ */


#ifndef __TickLabels_INTERFACE_DEFINED__
#define __TickLabels_INTERFACE_DEFINED__

/* interface TickLabels */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_TickLabels;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A78-F07E-4CA4-AF6F-BEF486AA4E6F")
    TickLabels : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppval) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ ChartFont **ppval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberFormat( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberFormat( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberFormatLinked( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberFormatLinked( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberFormatLocal( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberFormatLocal( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ XlTickLabelOrientation *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Orientation( 
            /* [in] */ XlTickLabelOrientation RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoScaleFont( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoScaleFont( 
            /* [in] */ VARIANT RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Depth( 
            /* [retval][out] */ int *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Offset( 
            /* [retval][out] */ int *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Offset( 
            /* [in] */ int RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MultiLevel( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MultiLevel( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadingOrder( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadingOrder( 
            /* [in] */ long RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TickLabelsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TickLabels * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TickLabels * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TickLabels * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TickLabels * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TickLabels * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TickLabels * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TickLabels * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TickLabels * This,
            /* [retval][out] */ IDispatch **ppval);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            TickLabels * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            TickLabels * This,
            /* [retval][out] */ ChartFont **ppval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            TickLabels * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberFormat )( 
            TickLabels * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberFormat )( 
            TickLabels * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberFormatLinked )( 
            TickLabels * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberFormatLinked )( 
            TickLabels * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberFormatLocal )( 
            TickLabels * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberFormatLocal )( 
            TickLabels * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Orientation )( 
            TickLabels * This,
            /* [retval][out] */ XlTickLabelOrientation *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Orientation )( 
            TickLabels * This,
            /* [in] */ XlTickLabelOrientation RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            TickLabels * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoScaleFont )( 
            TickLabels * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoScaleFont )( 
            TickLabels * This,
            /* [in] */ VARIANT RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Depth )( 
            TickLabels * This,
            /* [retval][out] */ int *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Offset )( 
            TickLabels * This,
            /* [retval][out] */ int *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Offset )( 
            TickLabels * This,
            /* [in] */ int RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MultiLevel )( 
            TickLabels * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MultiLevel )( 
            TickLabels * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            TickLabels * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TickLabels * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TickLabels * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            TickLabels * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            TickLabels * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingOrder )( 
            TickLabels * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingOrder )( 
            TickLabels * This,
            /* [in] */ long RHS);
        
        END_INTERFACE
    } TickLabelsVtbl;

    interface TickLabels
    {
        CONST_VTBL struct TickLabelsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TickLabels_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TickLabels_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TickLabels_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TickLabels_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TickLabels_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TickLabels_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TickLabels_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TickLabels_get_Parent(This,ppval)	\
    ( (This)->lpVtbl -> get_Parent(This,ppval) ) 

#define TickLabels_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define TickLabels_get_Font(This,ppval)	\
    ( (This)->lpVtbl -> get_Font(This,ppval) ) 

#define TickLabels_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define TickLabels_get_NumberFormat(This,RHS)	\
    ( (This)->lpVtbl -> get_NumberFormat(This,RHS) ) 

#define TickLabels_put_NumberFormat(This,RHS)	\
    ( (This)->lpVtbl -> put_NumberFormat(This,RHS) ) 

#define TickLabels_get_NumberFormatLinked(This,RHS)	\
    ( (This)->lpVtbl -> get_NumberFormatLinked(This,RHS) ) 

#define TickLabels_put_NumberFormatLinked(This,RHS)	\
    ( (This)->lpVtbl -> put_NumberFormatLinked(This,RHS) ) 

#define TickLabels_get_NumberFormatLocal(This,RHS)	\
    ( (This)->lpVtbl -> get_NumberFormatLocal(This,RHS) ) 

#define TickLabels_put_NumberFormatLocal(This,RHS)	\
    ( (This)->lpVtbl -> put_NumberFormatLocal(This,RHS) ) 

#define TickLabels_get_Orientation(This,RHS)	\
    ( (This)->lpVtbl -> get_Orientation(This,RHS) ) 

#define TickLabels_put_Orientation(This,RHS)	\
    ( (This)->lpVtbl -> put_Orientation(This,RHS) ) 

#define TickLabels_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#define TickLabels_get_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> get_AutoScaleFont(This,RHS) ) 

#define TickLabels_put_AutoScaleFont(This,RHS)	\
    ( (This)->lpVtbl -> put_AutoScaleFont(This,RHS) ) 

#define TickLabels_get_Depth(This,RHS)	\
    ( (This)->lpVtbl -> get_Depth(This,RHS) ) 

#define TickLabels_get_Offset(This,RHS)	\
    ( (This)->lpVtbl -> get_Offset(This,RHS) ) 

#define TickLabels_put_Offset(This,RHS)	\
    ( (This)->lpVtbl -> put_Offset(This,RHS) ) 

#define TickLabels_get_MultiLevel(This,RHS)	\
    ( (This)->lpVtbl -> get_MultiLevel(This,RHS) ) 

#define TickLabels_put_MultiLevel(This,RHS)	\
    ( (This)->lpVtbl -> put_MultiLevel(This,RHS) ) 

#define TickLabels_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define TickLabels_get_Creator(This,RHS)	\
    ( (This)->lpVtbl -> get_Creator(This,RHS) ) 

#define TickLabels_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define TickLabels_get_Alignment(This,RHS)	\
    ( (This)->lpVtbl -> get_Alignment(This,RHS) ) 

#define TickLabels_put_Alignment(This,RHS)	\
    ( (This)->lpVtbl -> put_Alignment(This,RHS) ) 

#define TickLabels_get_ReadingOrder(This,RHS)	\
    ( (This)->lpVtbl -> get_ReadingOrder(This,RHS) ) 

#define TickLabels_put_ReadingOrder(This,RHS)	\
    ( (This)->lpVtbl -> put_ReadingOrder(This,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TickLabels_INTERFACE_DEFINED__ */


#ifndef __Trendline_INTERFACE_DEFINED__
#define __Trendline_INTERFACE_DEFINED__

/* interface Trendline */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Trendline;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A79-F07E-4CA4-AF6F-BEF486AA4E6F")
    Trendline : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearFormats( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DataLabel( 
            /* [retval][out] */ DataLabel **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayEquation( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayEquation( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayRSquared( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayRSquared( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Intercept( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Intercept( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InterceptIsAuto( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InterceptIsAuto( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NameIsAuto( 
            /* [retval][out] */ VARIANT_BOOL *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NameIsAuto( 
            /* [in] */ VARIANT_BOOL RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Order( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Order( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Period( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Period( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ XlTrendlineType *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ XlTrendlineType RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Backward2( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Backward2( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Forward2( 
            /* [retval][out] */ double *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Forward2( 
            /* [in] */ double RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Backward( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Backward( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Forward( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Forward( 
            /* [in] */ long RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TrendlineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Trendline * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Trendline * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Trendline * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Trendline * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Trendline * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Trendline * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Trendline * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Trendline * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            Trendline * This,
            /* [retval][out] */ ChartBorder **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearFormats )( 
            Trendline * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DataLabel )( 
            Trendline * This,
            /* [retval][out] */ DataLabel **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Trendline * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayEquation )( 
            Trendline * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayEquation )( 
            Trendline * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayRSquared )( 
            Trendline * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayRSquared )( 
            Trendline * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            Trendline * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Intercept )( 
            Trendline * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Intercept )( 
            Trendline * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InterceptIsAuto )( 
            Trendline * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InterceptIsAuto )( 
            Trendline * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Trendline * This,
            /* [retval][out] */ BSTR *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            Trendline * This,
            /* [in] */ BSTR RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NameIsAuto )( 
            Trendline * This,
            /* [retval][out] */ VARIANT_BOOL *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NameIsAuto )( 
            Trendline * This,
            /* [in] */ VARIANT_BOOL RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Order )( 
            Trendline * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Order )( 
            Trendline * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Period )( 
            Trendline * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Period )( 
            Trendline * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Trendline * This,
            /* [retval][out] */ VARIANT *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Trendline * This,
            /* [retval][out] */ XlTrendlineType *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            Trendline * This,
            /* [in] */ XlTrendlineType RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            Trendline * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Trendline * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Backward2 )( 
            Trendline * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Backward2 )( 
            Trendline * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Forward2 )( 
            Trendline * This,
            /* [retval][out] */ double *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Forward2 )( 
            Trendline * This,
            /* [in] */ double RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Trendline * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Backward )( 
            Trendline * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Backward )( 
            Trendline * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Forward )( 
            Trendline * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Forward )( 
            Trendline * This,
            /* [in] */ long RHS);
        
        END_INTERFACE
    } TrendlineVtbl;

    interface Trendline
    {
        CONST_VTBL struct TrendlineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Trendline_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Trendline_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Trendline_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Trendline_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Trendline_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Trendline_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Trendline_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Trendline_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define Trendline_get_Border(This,RHS)	\
    ( (This)->lpVtbl -> get_Border(This,RHS) ) 

#define Trendline_ClearFormats(This,RHS)	\
    ( (This)->lpVtbl -> ClearFormats(This,RHS) ) 

#define Trendline_get_DataLabel(This,RHS)	\
    ( (This)->lpVtbl -> get_DataLabel(This,RHS) ) 

#define Trendline_Delete(This,RHS)	\
    ( (This)->lpVtbl -> Delete(This,RHS) ) 

#define Trendline_get_DisplayEquation(This,RHS)	\
    ( (This)->lpVtbl -> get_DisplayEquation(This,RHS) ) 

#define Trendline_put_DisplayEquation(This,RHS)	\
    ( (This)->lpVtbl -> put_DisplayEquation(This,RHS) ) 

#define Trendline_get_DisplayRSquared(This,RHS)	\
    ( (This)->lpVtbl -> get_DisplayRSquared(This,RHS) ) 

#define Trendline_put_DisplayRSquared(This,RHS)	\
    ( (This)->lpVtbl -> put_DisplayRSquared(This,RHS) ) 

#define Trendline_get_Index(This,RHS)	\
    ( (This)->lpVtbl -> get_Index(This,RHS) ) 

#define Trendline_get_Intercept(This,RHS)	\
    ( (This)->lpVtbl -> get_Intercept(This,RHS) ) 

#define Trendline_put_Intercept(This,RHS)	\
    ( (This)->lpVtbl -> put_Intercept(This,RHS) ) 

#define Trendline_get_InterceptIsAuto(This,RHS)	\
    ( (This)->lpVtbl -> get_InterceptIsAuto(This,RHS) ) 

#define Trendline_put_InterceptIsAuto(This,RHS)	\
    ( (This)->lpVtbl -> put_InterceptIsAuto(This,RHS) ) 

#define Trendline_get_Name(This,RHS)	\
    ( (This)->lpVtbl -> get_Name(This,RHS) ) 

#define Trendline_put_Name(This,RHS)	\
    ( (This)->lpVtbl -> put_Name(This,RHS) ) 

#define Trendline_get_NameIsAuto(This,RHS)	\
    ( (This)->lpVtbl -> get_NameIsAuto(This,RHS) ) 

#define Trendline_put_NameIsAuto(This,RHS)	\
    ( (This)->lpVtbl -> put_NameIsAuto(This,RHS) ) 

#define Trendline_get_Order(This,RHS)	\
    ( (This)->lpVtbl -> get_Order(This,RHS) ) 

#define Trendline_put_Order(This,RHS)	\
    ( (This)->lpVtbl -> put_Order(This,RHS) ) 

#define Trendline_get_Period(This,RHS)	\
    ( (This)->lpVtbl -> get_Period(This,RHS) ) 

#define Trendline_put_Period(This,RHS)	\
    ( (This)->lpVtbl -> put_Period(This,RHS) ) 

#define Trendline_Select(This,RHS)	\
    ( (This)->lpVtbl -> Select(This,RHS) ) 

#define Trendline_get_Type(This,RHS)	\
    ( (This)->lpVtbl -> get_Type(This,RHS) ) 

#define Trendline_put_Type(This,RHS)	\
    ( (This)->lpVtbl -> put_Type(This,RHS) ) 

#define Trendline_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define Trendline_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define Trendline_get_Backward2(This,RHS)	\
    ( (This)->lpVtbl -> get_Backward2(This,RHS) ) 

#define Trendline_put_Backward2(This,RHS)	\
    ( (This)->lpVtbl -> put_Backward2(This,RHS) ) 

#define Trendline_get_Forward2(This,RHS)	\
    ( (This)->lpVtbl -> get_Forward2(This,RHS) ) 

#define Trendline_put_Forward2(This,RHS)	\
    ( (This)->lpVtbl -> put_Forward2(This,RHS) ) 

#define Trendline_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Trendline_get_Backward(This,RHS)	\
    ( (This)->lpVtbl -> get_Backward(This,RHS) ) 

#define Trendline_put_Backward(This,RHS)	\
    ( (This)->lpVtbl -> put_Backward(This,RHS) ) 

#define Trendline_get_Forward(This,RHS)	\
    ( (This)->lpVtbl -> get_Forward(This,RHS) ) 

#define Trendline_put_Forward(This,RHS)	\
    ( (This)->lpVtbl -> put_Forward(This,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Trendline_INTERFACE_DEFINED__ */


#ifndef __Trendlines_INTERFACE_DEFINED__
#define __Trendlines_INTERFACE_DEFINED__

/* interface Trendlines */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Trendlines;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A7A-F07E-4CA4-AF6F-BEF486AA4E6F")
    Trendlines : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [defaultvalue][optional][in] */ XlTrendlineType Type,
            /* [optional][in] */ VARIANT Order,
            /* [optional][in] */ VARIANT Period,
            /* [optional][in] */ VARIANT Forward,
            /* [optional][in] */ VARIANT Backward,
            /* [optional][in] */ VARIANT Intercept,
            /* [optional][in] */ VARIANT DisplayEquation,
            /* [optional][in] */ VARIANT DisplayRSquared,
            /* [optional][in] */ VARIANT Name,
            /* [retval][out] */ Trendline **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ Trendline **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Default( 
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ Trendline **RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TrendlinesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Trendlines * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Trendlines * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Trendlines * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Trendlines * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Trendlines * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Trendlines * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Trendlines * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Trendlines * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Trendlines * This,
            /* [defaultvalue][optional][in] */ XlTrendlineType Type,
            /* [optional][in] */ VARIANT Order,
            /* [optional][in] */ VARIANT Period,
            /* [optional][in] */ VARIANT Forward,
            /* [optional][in] */ VARIANT Backward,
            /* [optional][in] */ VARIANT Intercept,
            /* [optional][in] */ VARIANT DisplayEquation,
            /* [optional][in] */ VARIANT DisplayRSquared,
            /* [optional][in] */ VARIANT Name,
            /* [retval][out] */ Trendline **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Trendlines * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Trendlines * This,
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ Trendline **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Trendlines * This,
            /* [retval][out] */ IUnknown **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Trendlines * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Trendlines * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *_Default )( 
            Trendlines * This,
            /* [optional][in] */ VARIANT Index,
            /* [retval][out] */ Trendline **RHS);
        
        END_INTERFACE
    } TrendlinesVtbl;

    interface Trendlines
    {
        CONST_VTBL struct TrendlinesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Trendlines_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Trendlines_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Trendlines_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Trendlines_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Trendlines_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Trendlines_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Trendlines_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Trendlines_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define Trendlines_Add(This,Type,Order,Period,Forward,Backward,Intercept,DisplayEquation,DisplayRSquared,Name,RHS)	\
    ( (This)->lpVtbl -> Add(This,Type,Order,Period,Forward,Backward,Intercept,DisplayEquation,DisplayRSquared,Name,RHS) ) 

#define Trendlines_get_Count(This,RHS)	\
    ( (This)->lpVtbl -> get_Count(This,RHS) ) 

#define Trendlines_Item(This,Index,RHS)	\
    ( (This)->lpVtbl -> Item(This,Index,RHS) ) 

#define Trendlines__NewEnum(This,RHS)	\
    ( (This)->lpVtbl -> _NewEnum(This,RHS) ) 

#define Trendlines_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define Trendlines_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Trendlines__Default(This,Index,RHS)	\
    ( (This)->lpVtbl -> _Default(This,Index,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Trendlines_INTERFACE_DEFINED__ */


#ifndef __UpBars_INTERFACE_DEFINED__
#define __UpBars_INTERFACE_DEFINED__

/* interface UpBars */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_UpBars;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A7B-F07E-4CA4-AF6F-BEF486AA4E6F")
    UpBars : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstr) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppparent) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **ppborder) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Interior( 
            /* [retval][out] */ Interior **ppinterior) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ ChartFillFormat **ppFill) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct UpBarsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            UpBars * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            UpBars * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            UpBars * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            UpBars * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            UpBars * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            UpBars * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            UpBars * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            UpBars * This,
            /* [retval][out] */ BSTR *bstr);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            UpBars * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            UpBars * This,
            /* [retval][out] */ IDispatch **ppparent);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            UpBars * This,
            /* [retval][out] */ ChartBorder **ppborder);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            UpBars * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Interior )( 
            UpBars * This,
            /* [retval][out] */ Interior **ppinterior);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            UpBars * This,
            /* [retval][out] */ ChartFillFormat **ppFill);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            UpBars * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            UpBars * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            UpBars * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } UpBarsVtbl;

    interface UpBars
    {
        CONST_VTBL struct UpBarsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define UpBars_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define UpBars_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define UpBars_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define UpBars_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define UpBars_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define UpBars_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define UpBars_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define UpBars_get_Name(This,bstr)	\
    ( (This)->lpVtbl -> get_Name(This,bstr) ) 

#define UpBars_Select(This,pvar)	\
    ( (This)->lpVtbl -> Select(This,pvar) ) 

#define UpBars_get_Parent(This,ppparent)	\
    ( (This)->lpVtbl -> get_Parent(This,ppparent) ) 

#define UpBars_get_Border(This,ppborder)	\
    ( (This)->lpVtbl -> get_Border(This,ppborder) ) 

#define UpBars_Delete(This,pvar)	\
    ( (This)->lpVtbl -> Delete(This,pvar) ) 

#define UpBars_get_Interior(This,ppinterior)	\
    ( (This)->lpVtbl -> get_Interior(This,ppinterior) ) 

#define UpBars_get_Fill(This,ppFill)	\
    ( (This)->lpVtbl -> get_Fill(This,ppFill) ) 

#define UpBars_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define UpBars_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define UpBars_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __UpBars_INTERFACE_DEFINED__ */


#ifndef __Walls_INTERFACE_DEFINED__
#define __Walls_INTERFACE_DEFINED__

/* interface Walls */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Walls;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92D41A7C-F07E-4CA4-AF6F-BEF486AA4E6F")
    Walls : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *bstr) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppparent) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ ChartBorder **ppborder) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearFormats( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Interior( 
            /* [retval][out] */ Interior **ppinterior) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ ChartFillFormat **ppFill) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureType( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PictureType( 
            /* [in] */ VARIANT pvar) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paste( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureUnit( 
            /* [retval][out] */ VARIANT *pvar) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PictureUnit( 
            /* [in] */ VARIANT pvar) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Thickness( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Thickness( 
            /* [in] */ long RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ChartFormat **ppChartFormat) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WallsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Walls * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Walls * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Walls * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Walls * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Walls * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Walls * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Walls * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Walls * This,
            /* [retval][out] */ BSTR *bstr);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Walls * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Walls * This,
            /* [retval][out] */ IDispatch **ppparent);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            Walls * This,
            /* [retval][out] */ ChartBorder **ppborder);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearFormats )( 
            Walls * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Interior )( 
            Walls * This,
            /* [retval][out] */ Interior **ppinterior);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            Walls * This,
            /* [retval][out] */ ChartFillFormat **ppFill);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureType )( 
            Walls * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PictureType )( 
            Walls * This,
            /* [in] */ VARIANT pvar);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paste )( 
            Walls * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureUnit )( 
            Walls * This,
            /* [retval][out] */ VARIANT *pvar);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PictureUnit )( 
            Walls * This,
            /* [in] */ VARIANT pvar);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Thickness )( 
            Walls * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Thickness )( 
            Walls * This,
            /* [in] */ long RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            Walls * This,
            /* [retval][out] */ ChartFormat **ppChartFormat);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Walls * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Walls * This,
            /* [retval][out] */ Application	**Application);
        
        END_INTERFACE
    } WallsVtbl;

    interface Walls
    {
        CONST_VTBL struct WallsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Walls_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Walls_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Walls_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Walls_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Walls_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Walls_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Walls_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Walls_get_Name(This,bstr)	\
    ( (This)->lpVtbl -> get_Name(This,bstr) ) 

#define Walls_Select(This,pvar)	\
    ( (This)->lpVtbl -> Select(This,pvar) ) 

#define Walls_get_Parent(This,ppparent)	\
    ( (This)->lpVtbl -> get_Parent(This,ppparent) ) 

#define Walls_get_Border(This,ppborder)	\
    ( (This)->lpVtbl -> get_Border(This,ppborder) ) 

#define Walls_ClearFormats(This,pvar)	\
    ( (This)->lpVtbl -> ClearFormats(This,pvar) ) 

#define Walls_get_Interior(This,ppinterior)	\
    ( (This)->lpVtbl -> get_Interior(This,ppinterior) ) 

#define Walls_get_Fill(This,ppFill)	\
    ( (This)->lpVtbl -> get_Fill(This,ppFill) ) 

#define Walls_get_PictureType(This,pvar)	\
    ( (This)->lpVtbl -> get_PictureType(This,pvar) ) 

#define Walls_put_PictureType(This,pvar)	\
    ( (This)->lpVtbl -> put_PictureType(This,pvar) ) 

#define Walls_Paste(This)	\
    ( (This)->lpVtbl -> Paste(This) ) 

#define Walls_get_PictureUnit(This,pvar)	\
    ( (This)->lpVtbl -> get_PictureUnit(This,pvar) ) 

#define Walls_put_PictureUnit(This,pvar)	\
    ( (This)->lpVtbl -> put_PictureUnit(This,pvar) ) 

#define Walls_get_Thickness(This,RHS)	\
    ( (This)->lpVtbl -> get_Thickness(This,RHS) ) 

#define Walls_put_Thickness(This,RHS)	\
    ( (This)->lpVtbl -> put_Thickness(This,RHS) ) 

#define Walls_get_Format(This,ppChartFormat)	\
    ( (This)->lpVtbl -> get_Format(This,ppChartFormat) ) 

#define Walls_get_Creator(This,RHS)	\
    ( (This)->lpVtbl -> get_Creator(This,RHS) ) 

#define Walls_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Walls_INTERFACE_DEFINED__ */


#ifndef __MediaFormat_INTERFACE_DEFINED__
#define __MediaFormat_INTERFACE_DEFINED__

/* interface MediaFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_MediaFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BA72E550-4FF5-48F4-8215-5505F990966F")
    MediaFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Volume( 
            /* [retval][out] */ single *Volume) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Volume( 
            /* [in] */ single Volume) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Muted( 
            /* [retval][out] */ VARIANT_BOOL *Muted) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Muted( 
            /* [in] */ VARIANT_BOOL Muted) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ long *Length) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ long *StartPoint) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartPoint( 
            /* [in] */ long StartPoint) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ long *EndPoint) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EndPoint( 
            /* [in] */ long EndPoint) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FadeInDuration( 
            /* [retval][out] */ long *FadeInDuration) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FadeInDuration( 
            /* [in] */ long FadeInDuration) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FadeOutDuration( 
            /* [retval][out] */ long *FadeOutDuration) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FadeOutDuration( 
            /* [in] */ long FadeOutDuration) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MediaBookmarks( 
            /* [retval][out] */ MediaBookmarks **MediaBookmarks) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetDisplayPicture( 
            /* [in] */ long Position) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetDisplayPictureFromFile( 
            /* [in] */ BSTR FilePath) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Resample( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL Trim = 0,
            /* [defaultvalue][optional][in] */ int SampleHeight = 768,
            /* [defaultvalue][optional][in] */ int SampleWidth = 1280,
            /* [defaultvalue][optional][in] */ long VideoFrameRate = 24,
            /* [defaultvalue][optional][in] */ long AudioSamplingRate = 48000,
            /* [defaultvalue][optional][in] */ long VideoBitRate = 7000000) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ResampleFromProfile( 
            /* [defaultvalue][optional][in] */ PpResampleMediaProfile profile = ppResampleMediaProfileSmall) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ResamplingStatus( 
            /* [retval][out] */ PpMediaTaskStatus *ResamplingStatus) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsLinked( 
            /* [retval][out] */ VARIANT_BOOL *IsLinked) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsEmbedded( 
            /* [retval][out] */ VARIANT_BOOL *IsEmbedded) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AudioSamplingRate( 
            /* [retval][out] */ long *AudioSamplingRate) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VideoFrameRate( 
            /* [retval][out] */ long *VideoFrameRate) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SampleHeight( 
            /* [retval][out] */ long *SampleHeight) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SampleWidth( 
            /* [retval][out] */ long *SampleWidth) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VideoCompressionType( 
            /* [retval][out] */ BSTR *VideoCompressionType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AudioCompressionType( 
            /* [retval][out] */ BSTR *AudioCompressionType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MediaFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MediaFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MediaFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MediaFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MediaFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MediaFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MediaFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MediaFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            MediaFormat * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MediaFormat * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Volume )( 
            MediaFormat * This,
            /* [retval][out] */ single *Volume);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Volume )( 
            MediaFormat * This,
            /* [in] */ single Volume);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Muted )( 
            MediaFormat * This,
            /* [retval][out] */ VARIANT_BOOL *Muted);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Muted )( 
            MediaFormat * This,
            /* [in] */ VARIANT_BOOL Muted);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            MediaFormat * This,
            /* [retval][out] */ long *Length);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            MediaFormat * This,
            /* [retval][out] */ long *StartPoint);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartPoint )( 
            MediaFormat * This,
            /* [in] */ long StartPoint);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            MediaFormat * This,
            /* [retval][out] */ long *EndPoint);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndPoint )( 
            MediaFormat * This,
            /* [in] */ long EndPoint);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FadeInDuration )( 
            MediaFormat * This,
            /* [retval][out] */ long *FadeInDuration);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FadeInDuration )( 
            MediaFormat * This,
            /* [in] */ long FadeInDuration);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FadeOutDuration )( 
            MediaFormat * This,
            /* [retval][out] */ long *FadeOutDuration);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FadeOutDuration )( 
            MediaFormat * This,
            /* [in] */ long FadeOutDuration);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MediaBookmarks )( 
            MediaFormat * This,
            /* [retval][out] */ MediaBookmarks **MediaBookmarks);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayPicture )( 
            MediaFormat * This,
            /* [in] */ long Position);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayPictureFromFile )( 
            MediaFormat * This,
            /* [in] */ BSTR FilePath);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Resample )( 
            MediaFormat * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL Trim,
            /* [defaultvalue][optional][in] */ int SampleHeight,
            /* [defaultvalue][optional][in] */ int SampleWidth,
            /* [defaultvalue][optional][in] */ long VideoFrameRate,
            /* [defaultvalue][optional][in] */ long AudioSamplingRate,
            /* [defaultvalue][optional][in] */ long VideoBitRate);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ResampleFromProfile )( 
            MediaFormat * This,
            /* [defaultvalue][optional][in] */ PpResampleMediaProfile profile);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResamplingStatus )( 
            MediaFormat * This,
            /* [retval][out] */ PpMediaTaskStatus *ResamplingStatus);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsLinked )( 
            MediaFormat * This,
            /* [retval][out] */ VARIANT_BOOL *IsLinked);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsEmbedded )( 
            MediaFormat * This,
            /* [retval][out] */ VARIANT_BOOL *IsEmbedded);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AudioSamplingRate )( 
            MediaFormat * This,
            /* [retval][out] */ long *AudioSamplingRate);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VideoFrameRate )( 
            MediaFormat * This,
            /* [retval][out] */ long *VideoFrameRate);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SampleHeight )( 
            MediaFormat * This,
            /* [retval][out] */ long *SampleHeight);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SampleWidth )( 
            MediaFormat * This,
            /* [retval][out] */ long *SampleWidth);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VideoCompressionType )( 
            MediaFormat * This,
            /* [retval][out] */ BSTR *VideoCompressionType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AudioCompressionType )( 
            MediaFormat * This,
            /* [retval][out] */ BSTR *AudioCompressionType);
        
        END_INTERFACE
    } MediaFormatVtbl;

    interface MediaFormat
    {
        CONST_VTBL struct MediaFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MediaFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MediaFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MediaFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MediaFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MediaFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MediaFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MediaFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MediaFormat_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define MediaFormat_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define MediaFormat_get_Volume(This,Volume)	\
    ( (This)->lpVtbl -> get_Volume(This,Volume) ) 

#define MediaFormat_put_Volume(This,Volume)	\
    ( (This)->lpVtbl -> put_Volume(This,Volume) ) 

#define MediaFormat_get_Muted(This,Muted)	\
    ( (This)->lpVtbl -> get_Muted(This,Muted) ) 

#define MediaFormat_put_Muted(This,Muted)	\
    ( (This)->lpVtbl -> put_Muted(This,Muted) ) 

#define MediaFormat_get_Length(This,Length)	\
    ( (This)->lpVtbl -> get_Length(This,Length) ) 

#define MediaFormat_get_StartPoint(This,StartPoint)	\
    ( (This)->lpVtbl -> get_StartPoint(This,StartPoint) ) 

#define MediaFormat_put_StartPoint(This,StartPoint)	\
    ( (This)->lpVtbl -> put_StartPoint(This,StartPoint) ) 

#define MediaFormat_get_EndPoint(This,EndPoint)	\
    ( (This)->lpVtbl -> get_EndPoint(This,EndPoint) ) 

#define MediaFormat_put_EndPoint(This,EndPoint)	\
    ( (This)->lpVtbl -> put_EndPoint(This,EndPoint) ) 

#define MediaFormat_get_FadeInDuration(This,FadeInDuration)	\
    ( (This)->lpVtbl -> get_FadeInDuration(This,FadeInDuration) ) 

#define MediaFormat_put_FadeInDuration(This,FadeInDuration)	\
    ( (This)->lpVtbl -> put_FadeInDuration(This,FadeInDuration) ) 

#define MediaFormat_get_FadeOutDuration(This,FadeOutDuration)	\
    ( (This)->lpVtbl -> get_FadeOutDuration(This,FadeOutDuration) ) 

#define MediaFormat_put_FadeOutDuration(This,FadeOutDuration)	\
    ( (This)->lpVtbl -> put_FadeOutDuration(This,FadeOutDuration) ) 

#define MediaFormat_get_MediaBookmarks(This,MediaBookmarks)	\
    ( (This)->lpVtbl -> get_MediaBookmarks(This,MediaBookmarks) ) 

#define MediaFormat_SetDisplayPicture(This,Position)	\
    ( (This)->lpVtbl -> SetDisplayPicture(This,Position) ) 

#define MediaFormat_SetDisplayPictureFromFile(This,FilePath)	\
    ( (This)->lpVtbl -> SetDisplayPictureFromFile(This,FilePath) ) 

#define MediaFormat_Resample(This,Trim,SampleHeight,SampleWidth,VideoFrameRate,AudioSamplingRate,VideoBitRate)	\
    ( (This)->lpVtbl -> Resample(This,Trim,SampleHeight,SampleWidth,VideoFrameRate,AudioSamplingRate,VideoBitRate) ) 

#define MediaFormat_ResampleFromProfile(This,profile)	\
    ( (This)->lpVtbl -> ResampleFromProfile(This,profile) ) 

#define MediaFormat_get_ResamplingStatus(This,ResamplingStatus)	\
    ( (This)->lpVtbl -> get_ResamplingStatus(This,ResamplingStatus) ) 

#define MediaFormat_get_IsLinked(This,IsLinked)	\
    ( (This)->lpVtbl -> get_IsLinked(This,IsLinked) ) 

#define MediaFormat_get_IsEmbedded(This,IsEmbedded)	\
    ( (This)->lpVtbl -> get_IsEmbedded(This,IsEmbedded) ) 

#define MediaFormat_get_AudioSamplingRate(This,AudioSamplingRate)	\
    ( (This)->lpVtbl -> get_AudioSamplingRate(This,AudioSamplingRate) ) 

#define MediaFormat_get_VideoFrameRate(This,VideoFrameRate)	\
    ( (This)->lpVtbl -> get_VideoFrameRate(This,VideoFrameRate) ) 

#define MediaFormat_get_SampleHeight(This,SampleHeight)	\
    ( (This)->lpVtbl -> get_SampleHeight(This,SampleHeight) ) 

#define MediaFormat_get_SampleWidth(This,SampleWidth)	\
    ( (This)->lpVtbl -> get_SampleWidth(This,SampleWidth) ) 

#define MediaFormat_get_VideoCompressionType(This,VideoCompressionType)	\
    ( (This)->lpVtbl -> get_VideoCompressionType(This,VideoCompressionType) ) 

#define MediaFormat_get_AudioCompressionType(This,AudioCompressionType)	\
    ( (This)->lpVtbl -> get_AudioCompressionType(This,AudioCompressionType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MediaFormat_INTERFACE_DEFINED__ */


#ifndef __SectionProperties_INTERFACE_DEFINED__
#define __SectionProperties_INTERFACE_DEFINED__

/* interface SectionProperties */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_SectionProperties;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BA72E551-4FF5-48F4-8215-5505F990966F")
    SectionProperties : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Name( 
            /* [in] */ int sectionIndex,
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Rename( 
            /* [in] */ int sectionIndex,
            /* [in] */ BSTR sectionName) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SlidesCount( 
            /* [in] */ int sectionIndex,
            /* [retval][out] */ long *SlidesCount) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE FirstSlide( 
            /* [in] */ int sectionIndex,
            /* [retval][out] */ int *FirstSlide) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddBeforeSlide( 
            /* [in] */ int SlideIndex,
            /* [in] */ BSTR sectionName,
            /* [retval][out] */ int *BeforeSlide) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddSection( 
            /* [in] */ int sectionIndex,
            /* [optional][in] */ VARIANT sectionName,
            /* [retval][out] */ int *Section) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Move( 
            /* [in] */ int sectionIndex,
            /* [in] */ int toPos) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ int sectionIndex,
            /* [in] */ VARIANT_BOOL deleteSlides) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SectionID( 
            /* [in] */ int sectionIndex,
            /* [retval][out] */ BSTR *SectionID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SectionPropertiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SectionProperties * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SectionProperties * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SectionProperties * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SectionProperties * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SectionProperties * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SectionProperties * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SectionProperties * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SectionProperties * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SectionProperties * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SectionProperties * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Name )( 
            SectionProperties * This,
            /* [in] */ int sectionIndex,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Rename )( 
            SectionProperties * This,
            /* [in] */ int sectionIndex,
            /* [in] */ BSTR sectionName);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SlidesCount )( 
            SectionProperties * This,
            /* [in] */ int sectionIndex,
            /* [retval][out] */ long *SlidesCount);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FirstSlide )( 
            SectionProperties * This,
            /* [in] */ int sectionIndex,
            /* [retval][out] */ int *FirstSlide);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddBeforeSlide )( 
            SectionProperties * This,
            /* [in] */ int SlideIndex,
            /* [in] */ BSTR sectionName,
            /* [retval][out] */ int *BeforeSlide);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddSection )( 
            SectionProperties * This,
            /* [in] */ int sectionIndex,
            /* [optional][in] */ VARIANT sectionName,
            /* [retval][out] */ int *Section);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            SectionProperties * This,
            /* [in] */ int sectionIndex,
            /* [in] */ int toPos);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            SectionProperties * This,
            /* [in] */ int sectionIndex,
            /* [in] */ VARIANT_BOOL deleteSlides);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SectionID )( 
            SectionProperties * This,
            /* [in] */ int sectionIndex,
            /* [retval][out] */ BSTR *SectionID);
        
        END_INTERFACE
    } SectionPropertiesVtbl;

    interface SectionProperties
    {
        CONST_VTBL struct SectionPropertiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SectionProperties_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SectionProperties_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SectionProperties_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SectionProperties_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SectionProperties_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SectionProperties_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SectionProperties_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SectionProperties_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define SectionProperties_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define SectionProperties_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 

#define SectionProperties_Name(This,sectionIndex,Name)	\
    ( (This)->lpVtbl -> Name(This,sectionIndex,Name) ) 

#define SectionProperties_Rename(This,sectionIndex,sectionName)	\
    ( (This)->lpVtbl -> Rename(This,sectionIndex,sectionName) ) 

#define SectionProperties_SlidesCount(This,sectionIndex,SlidesCount)	\
    ( (This)->lpVtbl -> SlidesCount(This,sectionIndex,SlidesCount) ) 

#define SectionProperties_FirstSlide(This,sectionIndex,FirstSlide)	\
    ( (This)->lpVtbl -> FirstSlide(This,sectionIndex,FirstSlide) ) 

#define SectionProperties_AddBeforeSlide(This,SlideIndex,sectionName,BeforeSlide)	\
    ( (This)->lpVtbl -> AddBeforeSlide(This,SlideIndex,sectionName,BeforeSlide) ) 

#define SectionProperties_AddSection(This,sectionIndex,sectionName,Section)	\
    ( (This)->lpVtbl -> AddSection(This,sectionIndex,sectionName,Section) ) 

#define SectionProperties_Move(This,sectionIndex,toPos)	\
    ( (This)->lpVtbl -> Move(This,sectionIndex,toPos) ) 

#define SectionProperties_Delete(This,sectionIndex,deleteSlides)	\
    ( (This)->lpVtbl -> Delete(This,sectionIndex,deleteSlides) ) 

#define SectionProperties_SectionID(This,sectionIndex,SectionID)	\
    ( (This)->lpVtbl -> SectionID(This,sectionIndex,SectionID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SectionProperties_INTERFACE_DEFINED__ */


#ifndef __Player_INTERFACE_DEFINED__
#define __Player_INTERFACE_DEFINED__

/* interface Player */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Player;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BA72E552-4FF5-48F4-8215-5505F990966F")
    Player : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Play( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GoToNextBookmark( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GoToPreviousBookmark( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentPosition( 
            /* [retval][out] */ long *CurrentPosition) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurrentPosition( 
            /* [in] */ long CurrentPosition) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_State( 
            /* [retval][out] */ PpPlayerState *State) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PlayerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Player * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Player * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Player * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Player * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Player * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Player * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Player * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Player * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Player * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Play )( 
            Player * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            Player * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            Player * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GoToNextBookmark )( 
            Player * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GoToPreviousBookmark )( 
            Player * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentPosition )( 
            Player * This,
            /* [retval][out] */ long *CurrentPosition);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentPosition )( 
            Player * This,
            /* [in] */ long CurrentPosition);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_State )( 
            Player * This,
            /* [retval][out] */ PpPlayerState *State);
        
        END_INTERFACE
    } PlayerVtbl;

    interface Player
    {
        CONST_VTBL struct PlayerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Player_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Player_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Player_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Player_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Player_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Player_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Player_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Player_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Player_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Player_Play(This)	\
    ( (This)->lpVtbl -> Play(This) ) 

#define Player_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define Player_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define Player_GoToNextBookmark(This)	\
    ( (This)->lpVtbl -> GoToNextBookmark(This) ) 

#define Player_GoToPreviousBookmark(This)	\
    ( (This)->lpVtbl -> GoToPreviousBookmark(This) ) 

#define Player_get_CurrentPosition(This,CurrentPosition)	\
    ( (This)->lpVtbl -> get_CurrentPosition(This,CurrentPosition) ) 

#define Player_put_CurrentPosition(This,CurrentPosition)	\
    ( (This)->lpVtbl -> put_CurrentPosition(This,CurrentPosition) ) 

#define Player_get_State(This,State)	\
    ( (This)->lpVtbl -> get_State(This,State) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Player_INTERFACE_DEFINED__ */


#ifndef __ResampleMediaTask_INTERFACE_DEFINED__
#define __ResampleMediaTask_INTERFACE_DEFINED__

/* interface ResampleMediaTask */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ResampleMediaTask;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BA72E553-4FF5-48F4-8215-5505F990966F")
    ResampleMediaTask : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_profile( 
            /* [retval][out] */ PpResampleMediaProfile *profile) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsLinked( 
            /* [retval][out] */ VARIANT_BOOL *IsLinked) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsEmbedded( 
            /* [retval][out] */ VARIANT_BOOL *IsEmbedded) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AudioSamplingRate( 
            /* [retval][out] */ long *AudioSamplingRate) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VideoFrameRate( 
            /* [retval][out] */ long *VideoFrameRate) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SampleHeight( 
            /* [retval][out] */ long *SampleHeight) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SampleWidth( 
            /* [retval][out] */ long *SampleWidth) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContainerType( 
            /* [retval][out] */ BSTR *ContainerType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VideoCompressionType( 
            /* [retval][out] */ BSTR *VideoCompressionType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AudioCompressionType( 
            /* [retval][out] */ BSTR *AudioCompressionType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shape( 
            /* [retval][out] */ Shape **Shape) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ResampleMediaTaskVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ResampleMediaTask * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ResampleMediaTask * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ResampleMediaTask * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ResampleMediaTask * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ResampleMediaTask * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ResampleMediaTask * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ResampleMediaTask * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_profile )( 
            ResampleMediaTask * This,
            /* [retval][out] */ PpResampleMediaProfile *profile);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsLinked )( 
            ResampleMediaTask * This,
            /* [retval][out] */ VARIANT_BOOL *IsLinked);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsEmbedded )( 
            ResampleMediaTask * This,
            /* [retval][out] */ VARIANT_BOOL *IsEmbedded);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AudioSamplingRate )( 
            ResampleMediaTask * This,
            /* [retval][out] */ long *AudioSamplingRate);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VideoFrameRate )( 
            ResampleMediaTask * This,
            /* [retval][out] */ long *VideoFrameRate);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SampleHeight )( 
            ResampleMediaTask * This,
            /* [retval][out] */ long *SampleHeight);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SampleWidth )( 
            ResampleMediaTask * This,
            /* [retval][out] */ long *SampleWidth);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContainerType )( 
            ResampleMediaTask * This,
            /* [retval][out] */ BSTR *ContainerType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VideoCompressionType )( 
            ResampleMediaTask * This,
            /* [retval][out] */ BSTR *VideoCompressionType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AudioCompressionType )( 
            ResampleMediaTask * This,
            /* [retval][out] */ BSTR *AudioCompressionType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shape )( 
            ResampleMediaTask * This,
            /* [retval][out] */ Shape **Shape);
        
        END_INTERFACE
    } ResampleMediaTaskVtbl;

    interface ResampleMediaTask
    {
        CONST_VTBL struct ResampleMediaTaskVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ResampleMediaTask_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ResampleMediaTask_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ResampleMediaTask_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ResampleMediaTask_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ResampleMediaTask_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ResampleMediaTask_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ResampleMediaTask_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ResampleMediaTask_get_profile(This,profile)	\
    ( (This)->lpVtbl -> get_profile(This,profile) ) 

#define ResampleMediaTask_get_IsLinked(This,IsLinked)	\
    ( (This)->lpVtbl -> get_IsLinked(This,IsLinked) ) 

#define ResampleMediaTask_get_IsEmbedded(This,IsEmbedded)	\
    ( (This)->lpVtbl -> get_IsEmbedded(This,IsEmbedded) ) 

#define ResampleMediaTask_get_AudioSamplingRate(This,AudioSamplingRate)	\
    ( (This)->lpVtbl -> get_AudioSamplingRate(This,AudioSamplingRate) ) 

#define ResampleMediaTask_get_VideoFrameRate(This,VideoFrameRate)	\
    ( (This)->lpVtbl -> get_VideoFrameRate(This,VideoFrameRate) ) 

#define ResampleMediaTask_get_SampleHeight(This,SampleHeight)	\
    ( (This)->lpVtbl -> get_SampleHeight(This,SampleHeight) ) 

#define ResampleMediaTask_get_SampleWidth(This,SampleWidth)	\
    ( (This)->lpVtbl -> get_SampleWidth(This,SampleWidth) ) 

#define ResampleMediaTask_get_ContainerType(This,ContainerType)	\
    ( (This)->lpVtbl -> get_ContainerType(This,ContainerType) ) 

#define ResampleMediaTask_get_VideoCompressionType(This,VideoCompressionType)	\
    ( (This)->lpVtbl -> get_VideoCompressionType(This,VideoCompressionType) ) 

#define ResampleMediaTask_get_AudioCompressionType(This,AudioCompressionType)	\
    ( (This)->lpVtbl -> get_AudioCompressionType(This,AudioCompressionType) ) 

#define ResampleMediaTask_get_Shape(This,Shape)	\
    ( (This)->lpVtbl -> get_Shape(This,Shape) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ResampleMediaTask_INTERFACE_DEFINED__ */


#ifndef __ResampleMediaTasks_INTERFACE_DEFINED__
#define __ResampleMediaTasks_INTERFACE_DEFINED__

/* interface ResampleMediaTasks */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ResampleMediaTasks;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BA72E554-4FF5-48F4-8215-5505F990966F")
    ResampleMediaTasks : public Collection
    {
    public:
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ ResampleMediaTask **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cancel( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PercentComplete( 
            /* [retval][out] */ long *PercentComplete) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ResampleMediaTasksVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ResampleMediaTasks * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ResampleMediaTasks * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ResampleMediaTasks * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ResampleMediaTasks * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ResampleMediaTasks * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ResampleMediaTasks * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ResampleMediaTasks * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ResampleMediaTasks * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            ResampleMediaTasks * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ResampleMediaTasks * This,
            /* [retval][out] */ long *Count);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ResampleMediaTasks * This,
            /* [in] */ int Index,
            /* [retval][out] */ ResampleMediaTask **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            ResampleMediaTasks * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cancel )( 
            ResampleMediaTasks * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Resume )( 
            ResampleMediaTasks * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PercentComplete )( 
            ResampleMediaTasks * This,
            /* [retval][out] */ long *PercentComplete);
        
        END_INTERFACE
    } ResampleMediaTasksVtbl;

    interface ResampleMediaTasks
    {
        CONST_VTBL struct ResampleMediaTasksVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ResampleMediaTasks_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ResampleMediaTasks_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ResampleMediaTasks_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ResampleMediaTasks_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ResampleMediaTasks_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ResampleMediaTasks_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ResampleMediaTasks_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ResampleMediaTasks_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define ResampleMediaTasks__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define ResampleMediaTasks_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define ResampleMediaTasks_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define ResampleMediaTasks_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define ResampleMediaTasks_Cancel(This)	\
    ( (This)->lpVtbl -> Cancel(This) ) 

#define ResampleMediaTasks_Resume(This)	\
    ( (This)->lpVtbl -> Resume(This) ) 

#define ResampleMediaTasks_get_PercentComplete(This,PercentComplete)	\
    ( (This)->lpVtbl -> get_PercentComplete(This,PercentComplete) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ResampleMediaTasks_INTERFACE_DEFINED__ */


#ifndef __MediaBookmark_INTERFACE_DEFINED__
#define __MediaBookmark_INTERFACE_DEFINED__

/* interface MediaBookmark */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_MediaBookmark;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BA72E555-4FF5-48F4-8215-5505F990966F")
    MediaBookmark : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ int *Index) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ long *Position) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MediaBookmarkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MediaBookmark * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MediaBookmark * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MediaBookmark * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MediaBookmark * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MediaBookmark * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MediaBookmark * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MediaBookmark * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            MediaBookmark * This,
            /* [retval][out] */ int *Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            MediaBookmark * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            MediaBookmark * This,
            /* [retval][out] */ long *Position);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            MediaBookmark * This);
        
        END_INTERFACE
    } MediaBookmarkVtbl;

    interface MediaBookmark
    {
        CONST_VTBL struct MediaBookmarkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MediaBookmark_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MediaBookmark_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MediaBookmark_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MediaBookmark_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MediaBookmark_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MediaBookmark_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MediaBookmark_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MediaBookmark_get_Index(This,Index)	\
    ( (This)->lpVtbl -> get_Index(This,Index) ) 

#define MediaBookmark_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define MediaBookmark_get_Position(This,Position)	\
    ( (This)->lpVtbl -> get_Position(This,Position) ) 

#define MediaBookmark_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MediaBookmark_INTERFACE_DEFINED__ */


#ifndef __MediaBookmarks_INTERFACE_DEFINED__
#define __MediaBookmarks_INTERFACE_DEFINED__

/* interface MediaBookmarks */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_MediaBookmarks;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BA72E556-4FF5-48F4-8215-5505F990966F")
    MediaBookmarks : public Collection
    {
    public:
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ MediaBookmark **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ long Position,
            /* [in] */ BSTR Name,
            /* [retval][out] */ MediaBookmark **Add) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MediaBookmarksVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MediaBookmarks * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MediaBookmarks * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MediaBookmarks * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MediaBookmarks * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MediaBookmarks * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MediaBookmarks * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MediaBookmarks * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            MediaBookmarks * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            MediaBookmarks * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            MediaBookmarks * This,
            /* [retval][out] */ long *Count);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            MediaBookmarks * This,
            /* [in] */ int Index,
            /* [retval][out] */ MediaBookmark **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            MediaBookmarks * This,
            /* [in] */ long Position,
            /* [in] */ BSTR Name,
            /* [retval][out] */ MediaBookmark **Add);
        
        END_INTERFACE
    } MediaBookmarksVtbl;

    interface MediaBookmarks
    {
        CONST_VTBL struct MediaBookmarksVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MediaBookmarks_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MediaBookmarks_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MediaBookmarks_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MediaBookmarks_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MediaBookmarks_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MediaBookmarks_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MediaBookmarks_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MediaBookmarks_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define MediaBookmarks__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define MediaBookmarks_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define MediaBookmarks_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define MediaBookmarks_Add(This,Position,Name,Add)	\
    ( (This)->lpVtbl -> Add(This,Position,Name,Add) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MediaBookmarks_INTERFACE_DEFINED__ */


#ifndef __Coauthoring_INTERFACE_DEFINED__
#define __Coauthoring_INTERFACE_DEFINED__

/* interface Coauthoring */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Coauthoring;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BA72E557-4FF5-48F4-8215-5505F990966F")
    Coauthoring : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MergeMode( 
            /* [retval][out] */ VARIANT_BOOL *MergeMode) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FavorServerEditsDuringMerge( 
            /* [retval][out] */ VARIANT_BOOL *FavorServerEditsDuringMerge) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FavorServerEditsDuringMerge( 
            /* [in] */ VARIANT_BOOL FavorServerEditsDuringMerge) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndReview( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PendingUpdates( 
            /* [retval][out] */ VARIANT_BOOL *PendingUpdates) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_CoauthorCount( 
            /* [retval][out] */ long *CoauthorCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CoauthoringVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Coauthoring * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Coauthoring * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Coauthoring * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Coauthoring * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Coauthoring * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Coauthoring * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Coauthoring * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Coauthoring * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Coauthoring * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MergeMode )( 
            Coauthoring * This,
            /* [retval][out] */ VARIANT_BOOL *MergeMode);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FavorServerEditsDuringMerge )( 
            Coauthoring * This,
            /* [retval][out] */ VARIANT_BOOL *FavorServerEditsDuringMerge);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FavorServerEditsDuringMerge )( 
            Coauthoring * This,
            /* [in] */ VARIANT_BOOL FavorServerEditsDuringMerge);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndReview )( 
            Coauthoring * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PendingUpdates )( 
            Coauthoring * This,
            /* [retval][out] */ VARIANT_BOOL *PendingUpdates);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CoauthorCount )( 
            Coauthoring * This,
            /* [retval][out] */ long *CoauthorCount);
        
        END_INTERFACE
    } CoauthoringVtbl;

    interface Coauthoring
    {
        CONST_VTBL struct CoauthoringVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Coauthoring_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Coauthoring_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Coauthoring_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Coauthoring_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Coauthoring_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Coauthoring_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Coauthoring_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Coauthoring_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Coauthoring_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Coauthoring_get_MergeMode(This,MergeMode)	\
    ( (This)->lpVtbl -> get_MergeMode(This,MergeMode) ) 

#define Coauthoring_get_FavorServerEditsDuringMerge(This,FavorServerEditsDuringMerge)	\
    ( (This)->lpVtbl -> get_FavorServerEditsDuringMerge(This,FavorServerEditsDuringMerge) ) 

#define Coauthoring_put_FavorServerEditsDuringMerge(This,FavorServerEditsDuringMerge)	\
    ( (This)->lpVtbl -> put_FavorServerEditsDuringMerge(This,FavorServerEditsDuringMerge) ) 

#define Coauthoring_EndReview(This)	\
    ( (This)->lpVtbl -> EndReview(This) ) 

#define Coauthoring_get_PendingUpdates(This,PendingUpdates)	\
    ( (This)->lpVtbl -> get_PendingUpdates(This,PendingUpdates) ) 

#define Coauthoring_get_CoauthorCount(This,CoauthorCount)	\
    ( (This)->lpVtbl -> get_CoauthorCount(This,CoauthorCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Coauthoring_INTERFACE_DEFINED__ */


#ifndef __Broadcast_INTERFACE_DEFINED__
#define __Broadcast_INTERFACE_DEFINED__

/* interface Broadcast */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Broadcast;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BA72E558-4FF5-48F4-8215-5505F990966F")
    Broadcast : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Start( 
            /* [in] */ BSTR serverUrl) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE End( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AttendeeUrl( 
            /* [retval][out] */ BSTR *AttendeeUrl) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsBroadcasting( 
            /* [retval][out] */ VARIANT_BOOL *IsBroadcasting) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddMeetingNotes( 
            /* [in] */ BSTR notesUrl,
            /* [in] */ BSTR notesWacUrl) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_State( 
            /* [retval][out] */ MsoBroadcastState *BroadcastState) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Capabilities( 
            /* [retval][out] */ long *Capabilities) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SessionID( 
            /* [retval][out] */ BSTR *SessionID) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresenterServiceUrl( 
            /* [retval][out] */ BSTR *PresenterServiceUrl) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BroadcastVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Broadcast * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Broadcast * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Broadcast * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Broadcast * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Broadcast * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Broadcast * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Broadcast * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Broadcast * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Broadcast * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            Broadcast * This,
            /* [in] */ BSTR serverUrl);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *End )( 
            Broadcast * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AttendeeUrl )( 
            Broadcast * This,
            /* [retval][out] */ BSTR *AttendeeUrl);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsBroadcasting )( 
            Broadcast * This,
            /* [retval][out] */ VARIANT_BOOL *IsBroadcasting);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            Broadcast * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Resume )( 
            Broadcast * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddMeetingNotes )( 
            Broadcast * This,
            /* [in] */ BSTR notesUrl,
            /* [in] */ BSTR notesWacUrl);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_State )( 
            Broadcast * This,
            /* [retval][out] */ MsoBroadcastState *BroadcastState);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Capabilities )( 
            Broadcast * This,
            /* [retval][out] */ long *Capabilities);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SessionID )( 
            Broadcast * This,
            /* [retval][out] */ BSTR *SessionID);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresenterServiceUrl )( 
            Broadcast * This,
            /* [retval][out] */ BSTR *PresenterServiceUrl);
        
        END_INTERFACE
    } BroadcastVtbl;

    interface Broadcast
    {
        CONST_VTBL struct BroadcastVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Broadcast_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Broadcast_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Broadcast_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Broadcast_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Broadcast_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Broadcast_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Broadcast_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Broadcast_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Broadcast_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Broadcast_Start(This,serverUrl)	\
    ( (This)->lpVtbl -> Start(This,serverUrl) ) 

#define Broadcast_End(This)	\
    ( (This)->lpVtbl -> End(This) ) 

#define Broadcast_get_AttendeeUrl(This,AttendeeUrl)	\
    ( (This)->lpVtbl -> get_AttendeeUrl(This,AttendeeUrl) ) 

#define Broadcast_get_IsBroadcasting(This,IsBroadcasting)	\
    ( (This)->lpVtbl -> get_IsBroadcasting(This,IsBroadcasting) ) 

#define Broadcast_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define Broadcast_Resume(This)	\
    ( (This)->lpVtbl -> Resume(This) ) 

#define Broadcast_AddMeetingNotes(This,notesUrl,notesWacUrl)	\
    ( (This)->lpVtbl -> AddMeetingNotes(This,notesUrl,notesWacUrl) ) 

#define Broadcast_get_State(This,BroadcastState)	\
    ( (This)->lpVtbl -> get_State(This,BroadcastState) ) 

#define Broadcast_get_Capabilities(This,Capabilities)	\
    ( (This)->lpVtbl -> get_Capabilities(This,Capabilities) ) 

#define Broadcast_get_SessionID(This,SessionID)	\
    ( (This)->lpVtbl -> get_SessionID(This,SessionID) ) 

#define Broadcast_get_PresenterServiceUrl(This,PresenterServiceUrl)	\
    ( (This)->lpVtbl -> get_PresenterServiceUrl(This,PresenterServiceUrl) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Broadcast_INTERFACE_DEFINED__ */


#ifndef __ProtectedViewWindows_INTERFACE_DEFINED__
#define __ProtectedViewWindows_INTERFACE_DEFINED__

/* interface ProtectedViewWindows */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ProtectedViewWindows;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BA72E559-4FF5-48F4-8215-5505F990966F")
    ProtectedViewWindows : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ ProtectedViewWindow **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ BSTR ReadPassword,
            /* [defaultvalue][optional][in] */ MsoTriState OpenAndRepair,
            /* [retval][out] */ ProtectedViewWindow **Open) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProtectedViewWindowsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ProtectedViewWindows * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ProtectedViewWindows * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ProtectedViewWindows * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ProtectedViewWindows * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ProtectedViewWindows * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ProtectedViewWindows * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ProtectedViewWindows * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ProtectedViewWindows * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            ProtectedViewWindows * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ProtectedViewWindows * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ProtectedViewWindows * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ProtectedViewWindows * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ProtectedViewWindows * This,
            /* [in] */ int Index,
            /* [retval][out] */ ProtectedViewWindow **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            ProtectedViewWindows * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][optional][in] */ BSTR ReadPassword,
            /* [defaultvalue][optional][in] */ MsoTriState OpenAndRepair,
            /* [retval][out] */ ProtectedViewWindow **Open);
        
        END_INTERFACE
    } ProtectedViewWindowsVtbl;

    interface ProtectedViewWindows
    {
        CONST_VTBL struct ProtectedViewWindowsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ProtectedViewWindows_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ProtectedViewWindows_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ProtectedViewWindows_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ProtectedViewWindows_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ProtectedViewWindows_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ProtectedViewWindows_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ProtectedViewWindows_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ProtectedViewWindows_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define ProtectedViewWindows__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define ProtectedViewWindows_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define ProtectedViewWindows_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ProtectedViewWindows_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ProtectedViewWindows_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define ProtectedViewWindows_Open(This,FileName,ReadPassword,OpenAndRepair,Open)	\
    ( (This)->lpVtbl -> Open(This,FileName,ReadPassword,OpenAndRepair,Open) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ProtectedViewWindows_INTERFACE_DEFINED__ */


#ifndef __ProtectedViewWindow_INTERFACE_DEFINED__
#define __ProtectedViewWindow_INTERFACE_DEFINED__

/* interface ProtectedViewWindow */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ProtectedViewWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BA72E55A-4FF5-48F4-8215-5505F990966F")
    ProtectedViewWindow : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Presentation( 
            /* [retval][out] */ Presentation	**Presentation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Active( 
            /* [retval][out] */ MsoTriState *Active) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WindowState( 
            /* [retval][out] */ PpWindowState *WindowState) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WindowState( 
            /* [in] */ PpWindowState WindowState) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Caption( 
            /* [retval][out] */ BSTR *Caption) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SourcePath( 
            /* [retval][out] */ BSTR *SourcePath) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SourceName( 
            /* [retval][out] */ BSTR *SourceName) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ single *Left) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ single Left) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ single *Top) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ single Top) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ single *Width) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ single Width) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ single *Height) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ single Height) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Edit( 
            /* [defaultvalue][optional][in] */ BSTR ModifyPassword,
            /* [retval][out] */ Presentation	**Edit) = 0;
        
        virtual /* [helpcontext][restricted][propget][id] */ HRESULT STDMETHODCALLTYPE get_HWND( 
            /* [retval][out] */ long *HWND) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProtectedViewWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ProtectedViewWindow * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ProtectedViewWindow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ProtectedViewWindow * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ProtectedViewWindow * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ProtectedViewWindow * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ProtectedViewWindow * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ProtectedViewWindow * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ProtectedViewWindow * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ProtectedViewWindow * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Presentation )( 
            ProtectedViewWindow * This,
            /* [retval][out] */ Presentation	**Presentation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Active )( 
            ProtectedViewWindow * This,
            /* [retval][out] */ MsoTriState *Active);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowState )( 
            ProtectedViewWindow * This,
            /* [retval][out] */ PpWindowState *WindowState);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WindowState )( 
            ProtectedViewWindow * This,
            /* [in] */ PpWindowState WindowState);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Caption )( 
            ProtectedViewWindow * This,
            /* [retval][out] */ BSTR *Caption);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourcePath )( 
            ProtectedViewWindow * This,
            /* [retval][out] */ BSTR *SourcePath);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceName )( 
            ProtectedViewWindow * This,
            /* [retval][out] */ BSTR *SourceName);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            ProtectedViewWindow * This,
            /* [retval][out] */ single *Left);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            ProtectedViewWindow * This,
            /* [in] */ single Left);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            ProtectedViewWindow * This,
            /* [retval][out] */ single *Top);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            ProtectedViewWindow * This,
            /* [in] */ single Top);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            ProtectedViewWindow * This,
            /* [retval][out] */ single *Width);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            ProtectedViewWindow * This,
            /* [in] */ single Width);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            ProtectedViewWindow * This,
            /* [retval][out] */ single *Height);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            ProtectedViewWindow * This,
            /* [in] */ single Height);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            ProtectedViewWindow * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            ProtectedViewWindow * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Edit )( 
            ProtectedViewWindow * This,
            /* [defaultvalue][optional][in] */ BSTR ModifyPassword,
            /* [retval][out] */ Presentation	**Edit);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HWND )( 
            ProtectedViewWindow * This,
            /* [retval][out] */ long *HWND);
        
        END_INTERFACE
    } ProtectedViewWindowVtbl;

    interface ProtectedViewWindow
    {
        CONST_VTBL struct ProtectedViewWindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ProtectedViewWindow_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ProtectedViewWindow_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ProtectedViewWindow_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ProtectedViewWindow_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ProtectedViewWindow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ProtectedViewWindow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ProtectedViewWindow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ProtectedViewWindow_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ProtectedViewWindow_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ProtectedViewWindow_get_Presentation(This,Presentation)	\
    ( (This)->lpVtbl -> get_Presentation(This,Presentation) ) 

#define ProtectedViewWindow_get_Active(This,Active)	\
    ( (This)->lpVtbl -> get_Active(This,Active) ) 

#define ProtectedViewWindow_get_WindowState(This,WindowState)	\
    ( (This)->lpVtbl -> get_WindowState(This,WindowState) ) 

#define ProtectedViewWindow_put_WindowState(This,WindowState)	\
    ( (This)->lpVtbl -> put_WindowState(This,WindowState) ) 

#define ProtectedViewWindow_get_Caption(This,Caption)	\
    ( (This)->lpVtbl -> get_Caption(This,Caption) ) 

#define ProtectedViewWindow_get_SourcePath(This,SourcePath)	\
    ( (This)->lpVtbl -> get_SourcePath(This,SourcePath) ) 

#define ProtectedViewWindow_get_SourceName(This,SourceName)	\
    ( (This)->lpVtbl -> get_SourceName(This,SourceName) ) 

#define ProtectedViewWindow_get_Left(This,Left)	\
    ( (This)->lpVtbl -> get_Left(This,Left) ) 

#define ProtectedViewWindow_put_Left(This,Left)	\
    ( (This)->lpVtbl -> put_Left(This,Left) ) 

#define ProtectedViewWindow_get_Top(This,Top)	\
    ( (This)->lpVtbl -> get_Top(This,Top) ) 

#define ProtectedViewWindow_put_Top(This,Top)	\
    ( (This)->lpVtbl -> put_Top(This,Top) ) 

#define ProtectedViewWindow_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define ProtectedViewWindow_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#define ProtectedViewWindow_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define ProtectedViewWindow_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define ProtectedViewWindow_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define ProtectedViewWindow_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define ProtectedViewWindow_Edit(This,ModifyPassword,Edit)	\
    ( (This)->lpVtbl -> Edit(This,ModifyPassword,Edit) ) 

#define ProtectedViewWindow_get_HWND(This,HWND)	\
    ( (This)->lpVtbl -> get_HWND(This,HWND) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ProtectedViewWindow_INTERFACE_DEFINED__ */


#ifndef __FullSeriesCollection_INTERFACE_DEFINED__
#define __FullSeriesCollection_INTERFACE_DEFINED__

/* interface FullSeriesCollection */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_FullSeriesCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("288B25A9-98EF-41E5-BEBA-F547D7169BF2")
    FullSeriesCollection : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Series **RHS) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**ppval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Default( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Series **RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FullSeriesCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FullSeriesCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FullSeriesCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FullSeriesCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FullSeriesCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FullSeriesCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FullSeriesCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FullSeriesCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FullSeriesCollection * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            FullSeriesCollection * This,
            /* [retval][out] */ long *RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            FullSeriesCollection * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Series **RHS);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            FullSeriesCollection * This,
            /* [retval][out] */ IUnknown **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            FullSeriesCollection * This,
            /* [retval][out] */ Application	**ppval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            FullSeriesCollection * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *_Default )( 
            FullSeriesCollection * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Series **RHS);
        
        END_INTERFACE
    } FullSeriesCollectionVtbl;

    interface FullSeriesCollection
    {
        CONST_VTBL struct FullSeriesCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FullSeriesCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FullSeriesCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FullSeriesCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FullSeriesCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FullSeriesCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FullSeriesCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FullSeriesCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FullSeriesCollection_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define FullSeriesCollection_get_Count(This,RHS)	\
    ( (This)->lpVtbl -> get_Count(This,RHS) ) 

#define FullSeriesCollection_Item(This,Index,RHS)	\
    ( (This)->lpVtbl -> Item(This,Index,RHS) ) 

#define FullSeriesCollection__NewEnum(This,RHS)	\
    ( (This)->lpVtbl -> _NewEnum(This,RHS) ) 

#define FullSeriesCollection_get_Application(This,ppval)	\
    ( (This)->lpVtbl -> get_Application(This,ppval) ) 

#define FullSeriesCollection_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define FullSeriesCollection__Default(This,Index,RHS)	\
    ( (This)->lpVtbl -> _Default(This,Index,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FullSeriesCollection_INTERFACE_DEFINED__ */


#ifndef __ChartCategory_INTERFACE_DEFINED__
#define __ChartCategory_INTERFACE_DEFINED__

/* interface ChartCategory */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ChartCategory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AF028401-4619-4271-AFDD-F480FA925186")
    ChartCategory : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsFiltered( 
            /* [retval][out] */ VARIANT_BOOL *pfIsFiltered) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsFiltered( 
            /* [in] */ VARIANT_BOOL pfIsFiltered) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ChartCategoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ChartCategory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ChartCategory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ChartCategory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ChartCategory * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ChartCategory * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ChartCategory * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ChartCategory * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ChartCategory * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ChartCategory * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsFiltered )( 
            ChartCategory * This,
            /* [retval][out] */ VARIANT_BOOL *pfIsFiltered);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsFiltered )( 
            ChartCategory * This,
            /* [in] */ VARIANT_BOOL pfIsFiltered);
        
        END_INTERFACE
    } ChartCategoryVtbl;

    interface ChartCategory
    {
        CONST_VTBL struct ChartCategoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ChartCategory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ChartCategory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ChartCategory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ChartCategory_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ChartCategory_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ChartCategory_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ChartCategory_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ChartCategory_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define ChartCategory_get_Name(This,pbstr)	\
    ( (This)->lpVtbl -> get_Name(This,pbstr) ) 

#define ChartCategory_get_IsFiltered(This,pfIsFiltered)	\
    ( (This)->lpVtbl -> get_IsFiltered(This,pfIsFiltered) ) 

#define ChartCategory_put_IsFiltered(This,pfIsFiltered)	\
    ( (This)->lpVtbl -> put_IsFiltered(This,pfIsFiltered) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ChartCategory_INTERFACE_DEFINED__ */


#ifndef __CategoryCollection_INTERFACE_DEFINED__
#define __CategoryCollection_INTERFACE_DEFINED__

/* interface CategoryCollection */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_CategoryCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2432F529-514B-4575-AA71-1754C74A13D6")
    CategoryCollection : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *cCategory) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ ChartCategory **ppcategory) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**ppval) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *pval) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Default( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ ChartCategory **RHS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CategoryCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CategoryCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CategoryCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CategoryCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CategoryCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CategoryCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CategoryCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CategoryCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CategoryCollection * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            CategoryCollection * This,
            /* [retval][out] */ long *cCategory);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            CategoryCollection * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ ChartCategory **ppcategory);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CategoryCollection * This,
            /* [retval][out] */ Application	**ppval);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            CategoryCollection * This,
            /* [retval][out] */ long *pval);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *_Default )( 
            CategoryCollection * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ ChartCategory **RHS);
        
        END_INTERFACE
    } CategoryCollectionVtbl;

    interface CategoryCollection
    {
        CONST_VTBL struct CategoryCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CategoryCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CategoryCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CategoryCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CategoryCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CategoryCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CategoryCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CategoryCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CategoryCollection_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define CategoryCollection_get_Count(This,cCategory)	\
    ( (This)->lpVtbl -> get_Count(This,cCategory) ) 

#define CategoryCollection_Item(This,Index,ppcategory)	\
    ( (This)->lpVtbl -> Item(This,Index,ppcategory) ) 

#define CategoryCollection_get_Application(This,ppval)	\
    ( (This)->lpVtbl -> get_Application(This,ppval) ) 

#define CategoryCollection_get_Creator(This,pval)	\
    ( (This)->lpVtbl -> get_Creator(This,pval) ) 

#define CategoryCollection__Default(This,Index,RHS)	\
    ( (This)->lpVtbl -> _Default(This,Index,RHS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CategoryCollection_INTERFACE_DEFINED__ */


#ifndef __ThemeVariant_INTERFACE_DEFINED__
#define __ThemeVariant_INTERFACE_DEFINED__

/* interface ThemeVariant */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ThemeVariant;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C9195677-B4F9-4228-BFD0-40C1F77D2F6A")
    ThemeVariant : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *Width) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *Height) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ BSTR *Id) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ThemeVariantVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ThemeVariant * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ThemeVariant * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ThemeVariant * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ThemeVariant * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ThemeVariant * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ThemeVariant * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ThemeVariant * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ThemeVariant * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ThemeVariant * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ThemeVariant * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            ThemeVariant * This,
            /* [retval][out] */ long *Width);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            ThemeVariant * This,
            /* [retval][out] */ long *Height);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            ThemeVariant * This,
            /* [retval][out] */ BSTR *Id);
        
        END_INTERFACE
    } ThemeVariantVtbl;

    interface ThemeVariant
    {
        CONST_VTBL struct ThemeVariantVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ThemeVariant_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ThemeVariant_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ThemeVariant_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ThemeVariant_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ThemeVariant_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ThemeVariant_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ThemeVariant_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ThemeVariant_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ThemeVariant_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define ThemeVariant_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define ThemeVariant_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define ThemeVariant_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define ThemeVariant_get_Id(This,Id)	\
    ( (This)->lpVtbl -> get_Id(This,Id) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ThemeVariant_INTERFACE_DEFINED__ */


#ifndef __ThemeVariants_INTERFACE_DEFINED__
#define __ThemeVariants_INTERFACE_DEFINED__

/* interface ThemeVariants */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_ThemeVariants;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9E116A3C-2C6D-4D07-93AF-8675D452FCA2")
    ThemeVariants : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ ThemeVariant **Item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ThemeVariantsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ThemeVariants * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ThemeVariants * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ThemeVariants * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ThemeVariants * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ThemeVariants * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ThemeVariants * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ThemeVariants * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ThemeVariants * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            ThemeVariants * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ThemeVariants * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ThemeVariants * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ThemeVariants * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ThemeVariants * This,
            /* [in] */ int Index,
            /* [retval][out] */ ThemeVariant **Item);
        
        END_INTERFACE
    } ThemeVariantsVtbl;

    interface ThemeVariants
    {
        CONST_VTBL struct ThemeVariantsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ThemeVariants_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ThemeVariants_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ThemeVariants_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ThemeVariants_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ThemeVariants_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ThemeVariants_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ThemeVariants_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ThemeVariants_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define ThemeVariants__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define ThemeVariants_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define ThemeVariants_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define ThemeVariants_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define ThemeVariants_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ThemeVariants_INTERFACE_DEFINED__ */


#ifndef __Theme_INTERFACE_DEFINED__
#define __Theme_INTERFACE_DEFINED__

/* interface Theme */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Theme;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D9D60EB3-D4B4-4991-9C16-75585B3346BB")
    Theme : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **RHS) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ThemeVariants( 
            /* [retval][out] */ ThemeVariants **ThemeVariants) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ThemeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Theme * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Theme * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Theme * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Theme * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Theme * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Theme * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Theme * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Theme * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Theme * This,
            /* [retval][out] */ IDispatch **RHS);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ThemeVariants )( 
            Theme * This,
            /* [retval][out] */ ThemeVariants **ThemeVariants);
        
        END_INTERFACE
    } ThemeVtbl;

    interface Theme
    {
        CONST_VTBL struct ThemeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Theme_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Theme_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Theme_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Theme_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Theme_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Theme_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Theme_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Theme_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Theme_get_Parent(This,RHS)	\
    ( (This)->lpVtbl -> get_Parent(This,RHS) ) 

#define Theme_get_ThemeVariants(This,ThemeVariants)	\
    ( (This)->lpVtbl -> get_ThemeVariants(This,ThemeVariants) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Theme_INTERFACE_DEFINED__ */


#ifndef __SlideNavigation_INTERFACE_DEFINED__
#define __SlideNavigation_INTERFACE_DEFINED__

/* interface SlideNavigation */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_SlideNavigation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F658E3EC-F2D3-4272-AA49-4EC155D5AA76")
    SlideNavigation : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *Visible) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL Visible) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SlideNavigationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SlideNavigation * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SlideNavigation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SlideNavigation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SlideNavigation * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SlideNavigation * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SlideNavigation * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SlideNavigation * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SlideNavigation * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SlideNavigation * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            SlideNavigation * This,
            /* [retval][out] */ VARIANT_BOOL *Visible);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            SlideNavigation * This,
            /* [in] */ VARIANT_BOOL Visible);
        
        END_INTERFACE
    } SlideNavigationVtbl;

    interface SlideNavigation
    {
        CONST_VTBL struct SlideNavigationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SlideNavigation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SlideNavigation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SlideNavigation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SlideNavigation_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SlideNavigation_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SlideNavigation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SlideNavigation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SlideNavigation_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define SlideNavigation_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define SlideNavigation_get_Visible(This,Visible)	\
    ( (This)->lpVtbl -> get_Visible(This,Visible) ) 

#define SlideNavigation_put_Visible(This,Visible)	\
    ( (This)->lpVtbl -> put_Visible(This,Visible) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SlideNavigation_INTERFACE_DEFINED__ */


#ifndef __Guides_INTERFACE_DEFINED__
#define __Guides_INTERFACE_DEFINED__

/* interface Guides */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Guides;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1641E775-2277-46DE-A06D-8C49C3C5D5E7")
    Guides : public Collection
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int Index,
            /* [retval][out] */ Guide **Item) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ PpGuideOrientation Orientation,
            /* [in] */ single Position,
            /* [retval][out] */ Guide **Add) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct GuidesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Guides * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Guides * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Guides * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Guides * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Guides * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Guides * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Guides * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][restricted][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Guides * This,
            /* [retval][out] */ IUnknown **_NewEnum);
        
        /* [helpcontext][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_Index )( 
            Guides * This,
            /* [in] */ int Index,
            /* [retval][out] */ VARIANT *_Index);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Guides * This,
            /* [retval][out] */ long *Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Guides * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Guides * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Guides * This,
            /* [in] */ int Index,
            /* [retval][out] */ Guide **Item);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Guides * This,
            /* [in] */ PpGuideOrientation Orientation,
            /* [in] */ single Position,
            /* [retval][out] */ Guide **Add);
        
        END_INTERFACE
    } GuidesVtbl;

    interface Guides
    {
        CONST_VTBL struct GuidesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Guides_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Guides_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Guides_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Guides_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Guides_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Guides_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Guides_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Guides_get__NewEnum(This,_NewEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,_NewEnum) ) 

#define Guides__Index(This,Index,_Index)	\
    ( (This)->lpVtbl -> _Index(This,Index,_Index) ) 

#define Guides_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 


#define Guides_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Guides_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Guides_Item(This,Index,Item)	\
    ( (This)->lpVtbl -> Item(This,Index,Item) ) 

#define Guides_Add(This,Orientation,Position,Add)	\
    ( (This)->lpVtbl -> Add(This,Orientation,Position,Add) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Guides_INTERFACE_DEFINED__ */


#ifndef __Guide_INTERFACE_DEFINED__
#define __Guide_INTERFACE_DEFINED__

/* interface Guide */
/* [object][oleautomation][nonextensible][dual][helpcontext][uuid] */ 


extern "C++" const IID IID_Guide;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3D2F865B-E2DB-4896-BC35-6A006DF896DC")
    Guide : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**Application) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **Parent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ PpGuideOrientation *Orientation) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ single *Position) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ single Position) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Color( 
            /* [retval][out] */ ColorFormat **Color) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct GuideVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Guide * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Guide * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Guide * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Guide * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Guide * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Guide * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Guide * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Guide * This,
            /* [retval][out] */ Application	**Application);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Guide * This,
            /* [retval][out] */ IDispatch **Parent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Guide * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Orientation )( 
            Guide * This,
            /* [retval][out] */ PpGuideOrientation *Orientation);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            Guide * This,
            /* [retval][out] */ single *Position);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            Guide * This,
            /* [in] */ single Position);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            Guide * This,
            /* [retval][out] */ ColorFormat **Color);
        
        END_INTERFACE
    } GuideVtbl;

    interface Guide
    {
        CONST_VTBL struct GuideVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Guide_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Guide_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Guide_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Guide_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Guide_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Guide_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Guide_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Guide_get_Application(This,Application)	\
    ( (This)->lpVtbl -> get_Application(This,Application) ) 

#define Guide_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define Guide_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Guide_get_Orientation(This,Orientation)	\
    ( (This)->lpVtbl -> get_Orientation(This,Orientation) ) 

#define Guide_get_Position(This,Position)	\
    ( (This)->lpVtbl -> get_Position(This,Position) ) 

#define Guide_put_Position(This,Position)	\
    ( (This)->lpVtbl -> put_Position(This,Position) ) 

#define Guide_get_Color(This,Color)	\
    ( (This)->lpVtbl -> get_Color(This,Color) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Guide_INTERFACE_DEFINED__ */


extern "C++" const CLSID CLSID_Application;

#ifdef __cplusplus

class DECLSPEC_UUID("91493441-5A91-11CF-8700-00AA0060263B")
Application;
#endif

extern "C++" const CLSID CLSID_Global;

#ifdef __cplusplus

class DECLSPEC_UUID("91493443-5A91-11CF-8700-00AA0060263B")
Global;
#endif

extern "C++" const CLSID CLSID_Presentation;

#ifdef __cplusplus

class DECLSPEC_UUID("91493444-5A91-11CF-8700-00AA0060263B")
Presentation;
#endif

extern "C++" const CLSID CLSID_Slide;

#ifdef __cplusplus

class DECLSPEC_UUID("91493445-5A91-11CF-8700-00AA0060263B")
Slide;
#endif

extern "C++" const CLSID CLSID_OLEControl;

#ifdef __cplusplus

class DECLSPEC_UUID("91493446-5A91-11CF-8700-00AA0060263B")
OLEControl;
#endif

extern "C++" const CLSID CLSID_Master;

#ifdef __cplusplus

class DECLSPEC_UUID("91493447-5A91-11CF-8700-00AA0060263B")
Master;
#endif

extern "C++" const CLSID CLSID_PowerRex;

#ifdef __cplusplus

class DECLSPEC_UUID("91493448-5A91-11CF-8700-00AA0060263B")
PowerRex;
#endif

#ifndef __IPPTCtrlExtender_INTERFACE_DEFINED__
#define __IPPTCtrlExtender_INTERFACE_DEFINED__

/* interface IPPTCtrlExtender */
/* [object][hidden][oleautomation][uuid] */ 


extern "C++" const IID IID_IPPTCtrlExtender;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C13F9FD9-3617-491D-B0B5-D499CD64AD2D")
    IPPTCtrlExtender : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *Visible) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL Visible) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ single *Left) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ single Left) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ single *Top) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ single Top) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ single *Height) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ single Height) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ single *Width) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ single Width) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ZOrderPosition( 
            /* [retval][out] */ int *ZOrderPosition) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltHTML( 
            /* [retval][out] */ BSTR *AltHTML) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltHTML( 
            /* [in] */ BSTR AltHTML) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPPTCtrlExtenderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPPTCtrlExtender * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPPTCtrlExtender * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPPTCtrlExtender * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPPTCtrlExtender * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPPTCtrlExtender * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPPTCtrlExtender * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPPTCtrlExtender * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IPPTCtrlExtender * This,
            /* [retval][out] */ VARIANT_BOOL *Visible);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IPPTCtrlExtender * This,
            /* [in] */ VARIANT_BOOL Visible);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            IPPTCtrlExtender * This,
            /* [retval][out] */ single *Left);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            IPPTCtrlExtender * This,
            /* [in] */ single Left);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            IPPTCtrlExtender * This,
            /* [retval][out] */ single *Top);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            IPPTCtrlExtender * This,
            /* [in] */ single Top);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            IPPTCtrlExtender * This,
            /* [retval][out] */ single *Height);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            IPPTCtrlExtender * This,
            /* [in] */ single Height);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            IPPTCtrlExtender * This,
            /* [retval][out] */ single *Width);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            IPPTCtrlExtender * This,
            /* [in] */ single Width);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZOrderPosition )( 
            IPPTCtrlExtender * This,
            /* [retval][out] */ int *ZOrderPosition);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IPPTCtrlExtender * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IPPTCtrlExtender * This,
            /* [in] */ BSTR Name);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltHTML )( 
            IPPTCtrlExtender * This,
            /* [retval][out] */ BSTR *AltHTML);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltHTML )( 
            IPPTCtrlExtender * This,
            /* [in] */ BSTR AltHTML);
        
        END_INTERFACE
    } IPPTCtrlExtenderVtbl;

    interface IPPTCtrlExtender
    {
        CONST_VTBL struct IPPTCtrlExtenderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPPTCtrlExtender_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPPTCtrlExtender_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPPTCtrlExtender_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPPTCtrlExtender_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPPTCtrlExtender_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPPTCtrlExtender_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPPTCtrlExtender_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPPTCtrlExtender_get_Visible(This,Visible)	\
    ( (This)->lpVtbl -> get_Visible(This,Visible) ) 

#define IPPTCtrlExtender_put_Visible(This,Visible)	\
    ( (This)->lpVtbl -> put_Visible(This,Visible) ) 

#define IPPTCtrlExtender_get_Left(This,Left)	\
    ( (This)->lpVtbl -> get_Left(This,Left) ) 

#define IPPTCtrlExtender_put_Left(This,Left)	\
    ( (This)->lpVtbl -> put_Left(This,Left) ) 

#define IPPTCtrlExtender_get_Top(This,Top)	\
    ( (This)->lpVtbl -> get_Top(This,Top) ) 

#define IPPTCtrlExtender_put_Top(This,Top)	\
    ( (This)->lpVtbl -> put_Top(This,Top) ) 

#define IPPTCtrlExtender_get_Height(This,Height)	\
    ( (This)->lpVtbl -> get_Height(This,Height) ) 

#define IPPTCtrlExtender_put_Height(This,Height)	\
    ( (This)->lpVtbl -> put_Height(This,Height) ) 

#define IPPTCtrlExtender_get_Width(This,Width)	\
    ( (This)->lpVtbl -> get_Width(This,Width) ) 

#define IPPTCtrlExtender_put_Width(This,Width)	\
    ( (This)->lpVtbl -> put_Width(This,Width) ) 

#define IPPTCtrlExtender_get_ZOrderPosition(This,ZOrderPosition)	\
    ( (This)->lpVtbl -> get_ZOrderPosition(This,ZOrderPosition) ) 

#define IPPTCtrlExtender_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IPPTCtrlExtender_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IPPTCtrlExtender_get_AltHTML(This,AltHTML)	\
    ( (This)->lpVtbl -> get_AltHTML(This,AltHTML) ) 

#define IPPTCtrlExtender_put_AltHTML(This,AltHTML)	\
    ( (This)->lpVtbl -> put_AltHTML(This,AltHTML) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPPTCtrlExtender_INTERFACE_DEFINED__ */


extern "C++" const CLSID CLSID_KPPTCtrlExtender;

#ifdef __cplusplus

class DECLSPEC_UUID("C6BCCF2C-A892-4596-8627-81E54FD213F7")
KPPTCtrlExtender;
#endif
#endif /* __PowerPoint_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

}



#endif


